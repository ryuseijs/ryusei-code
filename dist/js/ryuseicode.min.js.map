{"version":3,"file":"ryuseicode.min.js","sources":["../../src/js/constants/keymap.ts","../../src/js/constants/defaults.ts","../../src/js/constants/icons.ts","../../src/js/constants/i18n.ts","../../src/js/utils/array/includes/includes.ts","../../src/js/utils/type/type.ts","../../src/js/utils/array/toArray/toArray.ts","../../src/js/utils/array/index.ts","../../src/js/utils/arrayLike/slice/slice.ts","../../src/js/utils/arrayLike/splice/splice.ts","../../src/js/utils/dom/activeElement/activeElement.ts","../../src/js/utils/dom/toggleClass/toggleClass.ts","../../src/js/utils/dom/addClass/addClass.ts","../../src/js/utils/dom/append/append.ts","../../src/js/utils/object/forOwn/forOwn.ts","../../src/js/utils/object/assign/assign.ts","../../src/js/utils/dom/attr/attr.ts","../../src/js/utils/dom/before/before.ts","../../src/js/utils/dom/closest/closest.ts","../../src/js/utils/dom/matches/matches.ts","../../src/js/utils/dom/create/create.ts","../../src/js/utils/dom/div/div.ts","../../src/js/utils/dom/focus/focus.ts","../../src/js/utils/dom/hasClass/hasClass.ts","../../src/js/utils/dom/height/height.ts","../../src/js/utils/dom/html/html.ts","../../src/js/utils/dom/isPrevented/isPrevented.ts","../../src/js/utils/dom/on/on.ts","../../src/js/utils/dom/off/off.ts","../../src/js/utils/dom/prevent/prevent.ts","../../src/js/utils/dom/query/query.ts","../../src/js/utils/dom/queryAll/queryAll.ts","../../src/js/utils/dom/rect/rect.ts","../../src/js/utils/dom/remove/remove.ts","../../src/js/utils/dom/removeClass/removeClass.ts","../../src/js/utils/dom/styles/styles.ts","../../src/js/utils/dom/tag/tag.ts","../../src/js/utils/dom/joinAttrs/joinAttrs.ts","../../src/js/utils/dom/text/text.ts","../../src/js/utils/dom/unit/unit.ts","../../src/js/utils/environment/isIE/isIE.ts","../../src/js/utils/environment/isMobile/isMobile.ts","../../src/js/utils/environment/isAndroid/isAndroid.ts","../../src/js/utils/environment/isIOS/isIOS.ts","../../src/js/constants/project.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/utils/function/throttle/throttle.ts","../../src/js/utils/function/debounce/debounce.ts","../../src/js/utils/function/nextTick/nextTick.ts","../../src/js/utils/function/rafThrottle/rafThrottle.ts","../../src/js/constants/keys.ts","../../src/js/utils/key/normalizeKey/normalizeKey.ts","../../src/js/utils/math/between/between.ts","../../src/js/utils/math/clamp/clamp.ts","../../src/js/utils/math/index.ts","../../src/js/utils/selection/compare/compare.ts","../../src/js/utils/selection/createRange/createRange.ts","../../src/js/utils/selection/getSelection/getSelection.ts","../../src/js/utils/selection/findSelectionBoundary/findSelectionBoundary.ts","../../src/js/utils/string/count/count.ts","../../src/js/utils/string/format/format.ts","../../src/js/utils/string/nthIndexOf/nthIndexOf.ts","../../src/js/utils/string/repeat/repeat.ts","../../src/js/utils/string/startsWith/startsWith.ts","../../src/js/utils/string/uniqueId/uniqueId.ts","../../src/js/classes/Component/Component.ts","../../src/js/constants/classes.ts","../../src/js/constants/events.ts","../../src/js/constants/selection-states.ts","../../src/js/components/Caret/CustomCaret.ts","../../src/js/components/Caret/Caret.ts","../../src/js/components/Chunk/Chunk.ts","../../src/js/components/Chunk/constants.ts","../../src/js/utils/dom/prepend/prepend.ts","../../src/js/constants/characters.ts","../../src/js/classes/AbstractArrayLike/AbstractArrayLike.ts","../../src/js/utils/token/matchesToken/matchesToken.ts","../../src/js/components/Code/Line.ts","../../node_modules/@ryusei/light/dist/js/ryuseilight.esm.js","../../src/js/components/Code/Lines.ts","../../src/js/components/Code/Code.ts","../../src/js/utils/string/escapeRegExp/escapeRegExp.ts","../../src/js/utils/icon/icon/icon.ts","../../src/js/classes/UIComponent/UIComponent.ts","../../src/js/constants/context-menu.ts","../../src/js/components/ContextMenu/ContextMenu.ts","../../src/js/components/Edit/Clipboard.ts","../../src/js/components/Edit/Edit.ts","../../src/js/components/Input/Input.ts","../../src/js/components/Keymap/Keymap.ts","../../src/js/utils/key/matchesKey/matchesKey.ts","../../src/js/utils/environment/isMac/isMac.ts","../../src/js/components/Measure/MeasureText.ts","../../src/js/components/Measure/Measure.ts","../../src/js/components/Range/Marker.ts","../../src/js/components/Range/StandaloneMarker.ts","../../src/js/components/Range/SelectionMarker.ts","../../src/js/components/Range/Range.ts","../../src/js/components/Scope/Scope.ts","../../src/js/utils/dom/toggleEditable/toggleEditable.ts","../../src/js/components/Selection/constants.ts","../../src/js/event/EventBus.ts","../../src/js/components/Selection/State.ts","../../src/js/event/State.ts","../../src/js/components/Selection/Selection.ts","../../src/js/utils/selection/setSelection/setSelection.ts","../../src/js/utils/environment/isGecko/isGecko.ts","../../src/js/components/Style/FontObserver.ts","../../src/js/components/Style/Style.ts","../../src/js/utils/string/camelToKebab/camelToKebab.ts","../../src/js/components/Sync/Sync.ts","../../src/js/components/Sync/constants.ts","../../src/js/classes/AbstractDraggableBar/AbstractDraggableBar.ts","../../src/js/components/View/EditorScrollbar.ts","../../src/js/components/View/Scrollbar.ts","../../src/js/components/View/View.ts","../../src/js/components/View/constants.ts","../../src/js/constants/attributes.ts","../../src/js/core/Renderer/Renderer.ts","../../src/js/core/Editor/Editor.ts","../../src/js/utils/string/escapeHtml/escapeHtml.ts","../../src/js/core/RyuseiCode/RyuseiCode.ts","../../src/js/extensions/Dialog/buttons.ts","../../src/js/extensions/Dialog/classes.ts","../../src/js/extensions/Dialog/Dialog.ts","../../src/js/extensions/History/defaults.ts","../../src/js/extensions/History/keymap.ts","../../src/js/extensions/History/History.ts","../../src/js/extensions/Indentation/defaults.ts","../../src/js/extensions/Indentation/i18n.ts","../../src/js/extensions/Indentation/keymap.ts","../../src/js/extensions/Indentation/Indentation.ts","../../src/js/extensions/Shortcut/keymap.ts","../../src/js/extensions/Shortcut/Shortcut.ts","../../src/js/utils/string/endsWith/endsWith.ts","../../src/js/build/default/default.ts"],"sourcesContent":["import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The map for kay bindings (`[ key, ctrl, shift, alt ]`).\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[] | null | false> = {\n  selectAll: [ 'A', true ],\n};\n\n/**\n * The collection of modifier keys.\n *\n * @since 0.1.0\n */\nexport const MODIFIER_KEYS = {\n  default: [ 'Ctrl', 'Shift', 'Alt' ],\n  mac    : [ '⌘', '⇧', '⌥' ],\n};\n","import { Options } from '@ryusei/code';\nimport { I18N } from './i18n';\nimport { ICONS } from './icons';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * Default values for the editor options.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: Options = {\n  language       : 'javascript',\n  placeholder    : 'Enter code here…',\n  minWidth       : '200px',\n  maxWidth       : '100%',\n  minHeight      : '16em',\n  maxHeight      : '40em',\n  indent         : '  ',\n  tabSize        : 2,\n  tabIndex       : 0,\n  keymap         : KEYMAP,\n  maxInitialLines: 200,\n  icons          : ICONS,\n  i18n           : I18N,\n};\n","import { IconSettings } from '@ryusei/code';\n\n\n/**\n * Icon settings as [ path, stroke?, linecap? ].\n *\n * @since 0.1.0\n */\nexport const ICONS: Record<string, IconSettings> = {\n  arrowUp: [\n    'm18.6 10.3c-6.59-6.85-6.59-6.85-6.59-6.85m-6.59 6.85 6.59-6.85m0 17v-17',\n    3,\n  ],\n  arrowDown: [\n    'm5.41 13.7 6.59 6.85m6.59-6.85c-6.59 6.85-6.59 6.85-6.59 6.85m0-17v17',\n    3,\n  ],\n  close: [\n    'm19 18-14-13m0 13 14-13',\n    3,\n  ],\n};\n","/**\n * The collection of i18n strings.\n *\n * @since 0.1.0\n */\nexport const I18N = {\n  copy        : 'Copy',\n  cut         : 'Cut',\n  paste       : 'Paste',\n  selectAll   : 'Select All',\n  close       : 'Close',\n  confirm     : 'OK',\n  activate    : 'Activate',\n  notice      : 'Notice',\n  cancel      : 'Cancel',\n  failedToCopy: 'Can not copy on your environment.',\n  scrollbar   : 'Drag to Scroll',\n  inputLabel  : 'Edit contents',\n  location    : 'Line: %s, Column: %s',\n};\n","/**\n * Checks if the array includes the value or not.\n * `Array#includes` is not supported by IE.\n *\n * @param array - An array.\n * @param value - A value to search for.\n *\n * @return `true` if the array includes the value, or otherwise `false`.\n */\nexport function includes<T>( array: T[], value: T ): boolean {\n  return array.indexOf( value ) > -1;\n}\n","/**\r\n * Checks if the given subject is an object or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an object, or otherwise `false`.\r\n */\r\nexport function isObject( subject: any ): subject is object {\r\n  return subject !== null && typeof subject === 'object';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an array or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an array, or otherwise `false`.\r\n */\r\nexport function isArray<T>( subject: any ): subject is T[] {\r\n  return Array.isArray( subject );\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a function or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a function, or otherwise `false`.\r\n */\r\nexport function isFunction( subject: any ): subject is ( ...args: any[] ) => any {\r\n  return typeof subject === 'function';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a string or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a string, or otherwise `false`.\r\n */\r\nexport function isString( subject: any ): subject is string {\r\n  return typeof subject === 'string';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is `undefined` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `undefined`, or otherwise `false`.\r\n */\r\nexport function isUndefined( subject: any ): subject is undefined {\r\n  return typeof subject === 'undefined';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a Text node or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a Text node, or otherwise `false`.\r\n */\r\nexport function isText( subject: any ): subject is Text {\r\n  return subject instanceof Text;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a HTMLElement instance or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a HTMLElement instance, or otherwise `false`.\r\n */\r\nexport function isHTMLElement( subject: any ): subject is HTMLElement {\r\n  return subject instanceof HTMLElement;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a BR element or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a BR element, or otherwise `false`.\r\n */\r\nexport function isBr( subject: any ): subject is HTMLBRElement {\r\n  return subject instanceof HTMLBRElement;\r\n}\r\n","import { isArray } from '../../type/type';\n\n\nexport function toArray<T>( value: T | T[], nest: true ): T extends any[] ? T[] : T[][];\nexport function toArray<T>( value: T | T[] ): T[];\n\n/**\n * Push the provided value to an array if the value is not an array.\n *\n * @param value - A value to push.\n * @param nest  - Optional. Whether to push the value to an array if the value is already an array.\n *\n * @return An array containing the value, or the value itself if it is already an array.\n *         If the `nest` is `true` and the first child of the array is not an array,\n *         this returns an array with the provided array.\n */\nexport function toArray<T>( value: T | T[], nest = false ): T[] | T[][] {\n  if ( isArray( value ) ) {\n    if ( nest && ! isArray( value[ 0 ] ) ) {\n      return [ value ];\n    }\n\n    return value;\n  }\n\n  return [ value ];\n}\n","export { includes } from './includes/includes';\r\nexport { toArray } from './toArray/toArray';\r\n\r\nexport const arrayProto = Array.prototype;\r\n","import { arrayProto } from '../../array';\r\n\r\n\r\n/**\r\n * The slice method for an array-like object.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param start     - Optional. A start index.\r\n * @param end       - Optional. A end index.\r\n *\r\n * @return An array with sliced elements.\r\n */\r\nexport function slice<T>( arrayLike: ArrayLike<T>, start?: number, end?: number ): T[] {\r\n  return arrayProto.slice.call( arrayLike, start, end );\r\n}\r\n","import { arrayProto } from '../../array';\r\n\r\n\r\n/**\r\n * The splice method for an array-like object.\r\n *\r\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\r\n *\r\n * @param arrayLike   - An array-like object.\r\n * @param start       - A start index.\r\n * @param deleteCount - Optional. A number of elements to remove from the `start` index.\r\n * @param args        - Optional. Any number of items to add.\r\n *\r\n * @return An array with deleted items.\r\n */\r\nexport function splice<T>( arrayLike: ArrayLike<T>, start: number, deleteCount?: number, ...args: T[] ): T[] {\r\n  return arrayProto.splice.call( arrayLike, start, deleteCount, ...args );\r\n}\r\n","/**\r\n * Returns the active element.\r\n * This is just an alias of `document.activeElement`.\r\n *\r\n * @return An active element.\r\n */\r\nexport function activeElement(): Element {\r\n  return document.activeElement;\r\n}\r\n","import { toArray } from '../../array';\n\n\n/**\n * Toggles the provided class or classes by following the `add` boolean.\n *\n * @param elm     - An element whose classes are toggled.\n * @param classes - A class or class names.\n * @param add     - Whether to add or remove a class.\n */\nexport function toggleClass( elm: Element, classes: string | string[], add: boolean ): void {\n  if ( elm ) {\n    toArray( classes ).forEach( name => {\n      if ( name ) {\n        elm.classList[ add ? 'add' : 'remove' ]( name );\n      }\n    } );\n  }\n}\n","import { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Adds classes to the element.\r\n *\r\n * @param elm     - An element to add classes to.\r\n * @param classes - Classes to add.\r\n */\r\nexport function addClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, classes, true );\r\n}\r\n","import { toArray } from '../../array';\r\n\r\n\r\n/**\r\n * Appends children to the parent element.\r\n *\r\n * @param parent   - A parent element.\r\n * @param children - A child or children to append to the parent.\r\n */\r\nexport function append( parent: Element, children: Node | Node[] ): void {\r\n  toArray( children ).forEach( parent.appendChild.bind( parent ) );\r\n}\r\n","/**\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\n *\n * @param object   - An object to iterate over.\n * @param iteratee - An iteratee function that takes the value and key as arguments.\n *\n * @return A provided object itself.\n */\nexport function forOwn<T extends object>(\n  object: T,\n  iteratee: ( value: T[ keyof T ], key: string ) => boolean | void\n): T {\n  if ( object ) {\n    const keys = Object.keys( object );\n\n    for ( let i = 0; i < keys.length; i++ ) {\n      if ( iteratee( object[ keys[ i ] ], keys[ i ] ) === false ) {\n        break;\n      }\n    }\n  }\n\n  return object;\n}\n","import { isObject, isUndefined } from '../../type/type';\nimport { forOwn } from '../forOwn/forOwn';\n\n\n/**\n * Assign U to T.\n *\n * @typeParam T - An object to assign to.\n * @typeParam U - An object to assign.\n *\n * @return An assigned object type.\n */\nexport type Assign<T, U> = Omit<T, keyof U> & U;\n\nexport function assign<T extends object>( object: T ): T;\n\n// There is a way to type arguments recursively, but these fixed definitions are enough for this project.\nexport function assign<T extends object, U extends object>( object: T, source: U ): Assign<T, U>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object>(\n  object: T, source1: U1, source2: U2\n): Assign<Assign<T, U1>, U2>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object, U3 extends object>(\n  object: T, source1: U1, source2: U2, source3: U3\n): Assign<Assign<Assign<T, U1>, U2>, U3>;\n\n/**\n * Assigns all own enumerable properties of all source objects to the provided object.\n * `undefined` in source objects will be skipped.\n *\n * @param object  - An object to assign properties to.\n * @param sources - Objects to assign properties from.\n *\n * @return An object assigned properties of the sources to.\n */\nexport function assign<T extends object, U extends object>( object: T, ...sources: U[] ): any {\n  sources.forEach( source => {\n    if ( isObject( source ) ) {\n      forOwn( source, ( value, key ) => {\n        if ( ! isUndefined( source[ key ] ) ) {\n          object[ key ] = source[ key ];\n        }\n      } );\n    }\n  } );\n\n  return object;\n}\n","import { forOwn } from '../../object';\r\nimport { isObject, isString } from '../../type/type';\r\n\r\n\r\nexport function attr( elm: Element, attrs: string ): string;\r\nexport function attr( elm: Element, attrs: Record<string, string | number | boolean> ): void;\r\n\r\n/**\r\n * Sets new attributes to the passed element if the `attrs` is an object literal,\r\n * or gets an attribute value from it if the `attrs` is a string.\r\n *\r\n * @param elm   - An element to set or get an attribute.\r\n * @param attrs - An attribute name as a string or new attributes as an object literal.\r\n */\r\nexport function attr( elm: Element, attrs: string | Record<string, string | number | boolean> ): string | void {\r\n  if ( elm ) {\r\n    if ( isString( attrs ) ) {\r\n      return elm.getAttribute( attrs ) || '';\r\n    }\r\n\r\n    if ( isObject( attrs ) ) {\r\n      forOwn( attrs, ( value, key ) => {\r\n        if ( value === null ) {\r\n          elm.removeAttribute( key );\r\n        } else {\r\n          elm.setAttribute( key, String( value ) );\r\n        }\r\n      } );\r\n    }\r\n  }\r\n}\r\n","import { toArray } from '../../array';\r\n\r\n\r\n/**\r\n * Inserts a node or nodes before the specified reference node.\r\n *\r\n * @param nodes - A node or nodes to insert.\r\n * @param ref   - A reference node.\r\n */\r\nexport function before( nodes: Node | Node[], ref: Node ): void {\r\n  toArray( nodes ).forEach( node => {\r\n    if ( node ) {\r\n      const parent = node.parentNode || ( ref && ref.parentNode );\r\n\r\n      if ( parent ) {\r\n        parent.insertBefore( node, ref );\r\n      }\r\n    }\r\n  } );\r\n}\r\n","import { isFunction } from '../../type/type';\nimport { matches } from '../matches/matches';\n\n\n/**\n * With starting at the given element,\n * finds the closest parent element that matches the selector.\n *\n * @since 0.1.0\n *\n * @param elm      - A start element.\n * @param selector - A selector to search for.\n *\n * @return The closest element if found, or `null` if not.\n *\n * @throws TypeError\n */\nexport function closest( elm: HTMLElement, selector: string ): HTMLElement | null {\n  if ( isFunction( elm.closest ) ) {\n    return elm.closest( selector );\n  }\n\n  while ( elm ) {\n    if ( matches( elm, selector ) ) {\n      return elm;\n    }\n\n    elm = elm.parentElement;\n  }\n\n  return null;\n}\n","/**\n * Extends the HTMLElement interface for IE.\n *\n * @private\n * @since 0.1.0\n */\ninterface HTMLElementIE extends HTMLElement {\n  msMatchesSelector( selector: string ): boolean;\n}\n\n/**\n * Checks if the element matches the provided selector, or passes the predicate function.\n *\n * @since 0.1.0\n *\n * @param elm      - An element to test.\n * @param selector - A selector string to match.\n *\n * @return `true` if the element matches the selector.\n */\nexport function matches( elm: Element, selector: string ): boolean {\n  Element.prototype.matches = Element.prototype.matches || ( Element.prototype as HTMLElementIE ).msMatchesSelector;\n  return elm.matches( selector );\n}\n","import { isArray, isString } from '../../type/type';\nimport { addClass } from '../addClass/addClass';\nimport { append } from '../append/append';\nimport { attr } from '../attr/attr';\n\n\n/**\n * Creates a HTML element.\n *\n * @param tag    - A tag name.\n * @param attrs  - Optional. An object with attributes to apply the created element to, or a string with classes.\n * @param parent - Optional. A parent element where the created element is appended.\n */\nexport function create<K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  attrs?: Record<string, string | number | boolean> | string | string[],\n  parent?: HTMLElement\n): HTMLElementTagNameMap[ K ] {\n  const elm = document.createElement( tag );\n\n  if ( attrs ) {\n    if ( isString( attrs ) || isArray( attrs ) ) {\n      addClass( elm, attrs );\n    } else {\n      attr( elm, attrs );\n    }\n  }\n\n  if ( parent ) {\n    append( parent, elm );\n  }\n\n  return elm;\n}\n","import { create } from '../create/create';\r\n\r\n\r\n/**\r\n * The `create` function whose tag argument is fixed to `div`.\r\n *\r\n * @param attrs  - Optional. An object with attributes to apply the created element to, or a string with classes.\r\n * @param parent - Optional. A parent element where the created element is appended.\r\n */\r\nexport function div(\r\n  attrs?: Record<string, string | number | boolean> | string | string[],\r\n  parent?: HTMLElement\r\n): HTMLDivElement {\r\n  return create( 'div', attrs, parent );\r\n}\r\n","import { isFunction } from '../../type/type';\n\n\n/**\n * Focuses the provided element without scrolling the ascendant element.\n *\n * @param elm - An element to focus.\n */\nexport function focus( elm: HTMLElement ): void {\n  if ( isFunction( elm[ 'setActive' ] ) ) {\n    elm[ 'setActive' ]();\n  } else {\n    elm.focus( { preventScroll: true } );\n  }\n}\n","/**\r\n * Checks if the element contains the specified class or not.\r\n *\r\n * @param elm       - An element to check.\r\n * @param className - A class name that may be contained by the element.\r\n *\r\n * @return `true` if the element contains the class, or otherwise `false`.\r\n */\r\nexport function hasClass( elm: Element, className: string ): boolean {\r\n  return elm && elm.classList.contains( className );\r\n}\r\n","/**\n * Returns client height of the element.\n *\n * @param elm - An element to get height.\n */\nexport function height( elm: Element ): number {\n  return elm.clientHeight;\n}\n","import { isUndefined } from '../../type/type';\r\n\r\n\r\nexport function html( elm: Element ): string;\r\nexport function html( elm: Element, html: string ): void;\r\n\r\n/**\r\n * Sets or gets HTML of the provided element.\r\n *\r\n * @param elm - A element to get or set HTML.\r\n * @param html - Optional. HTML to set.\r\n */\r\nexport function html( elm: Element, html?: string ): string | void {\r\n  if ( elm ) {\r\n    if ( isUndefined( html ) ) {\r\n      return elm.innerHTML;\r\n    }\r\n\r\n    if ( elm.innerHTML !== html ) {\r\n      elm.innerHTML = html;\r\n    }\r\n  }\r\n}\r\n","/**\n * Checks if the default action of the event is prevented or not.\n *\n * @param e - An Event object.\n *\n * @return `true` if the default action is prevented, or otherwise `false`.\n */\nexport function isPrevented( e: Event ): boolean {\n  return e && e.defaultPrevented;\n}\n","/**\n * Stores registered handlers which has a key.\n *\n * @since 0.1.0\n */\nexport const handlerMap = new WeakMap<object, Array<{\n  elm: Document | Window | Element,\n  events: string,\n  callback: ( e: Event ) => void\n}>>();\n\nexport function on<K extends keyof DocumentEventMap>(\n  elm: Document,\n  events: K,\n  callback: ( e: DocumentEventMap[ K ] ) => void,\n  key?: object\n): void;\n\nexport function on<K extends keyof WindowEventMap>(\n  elm: Window,\n  events: K,\n  callback: ( e: WindowEventMap[ K ] ) => void,\n  key?: object\n): void;\n\nexport function on<K extends keyof HTMLElementEventMap>(\n  elm: HTMLElement,\n  events: K,\n  callback: ( e: HTMLElementEventMap[ K ] ) => void,\n  key?: object\n): void;\n\nexport function on<K extends keyof ElementEventMap>(\n  elm: Element,\n  events: K,\n  callback: ( e: ElementEventMap[ K ] ) => void,\n  key?: object\n): void;\n\nexport function on<T extends Event = Event>(\n  elm: Window | Document | Element,\n  events: string,\n  callback: ( e: T ) => void,\n  key?: object\n): void;\n\n/**\n * Attaches a handler to the event.\n *\n * @param elm      - An element, a window or a document.\n * @param events   - An event name or names.\n * @param callback - A handler to attach.\n * @param key      - Optional. The key for identifying the registered handler.\n */\nexport function on(\n  elm: Element | Window | Document,\n  events: string,\n  callback: ( e: Event ) => void,\n  key?: object\n): void {\n  events.split( ' ' ).forEach( event => {\n    elm.addEventListener( event, callback );\n\n    if ( key ) {\n      const handlers = handlerMap.get( key ) || [];\n      handlers.push( { elm, events, callback } );\n      handlerMap.set( key, handlers );\n    }\n  } );\n}\n","import { isFunction } from '../../type/type';\nimport { handlerMap } from '../on/on';\n\n\nexport function off<K extends keyof WindowEventMap>(\n  elm: Window,\n  events: K,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void;\n\nexport function off<K extends keyof DocumentEventMap>(\n  elm: Document,\n  events: K,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void;\n\nexport function off<K extends keyof HTMLElementEventMap>(\n  elm: HTMLElement,\n  events: K,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void;\n\nexport function off<K extends keyof SVGElementEventMap>(\n  elm: SVGElement,\n  events: K,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void;\n\nexport function off<K extends keyof ElementEventMap>(\n  elm: Element,\n  events: K,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void;\n\nexport function off<T extends Event = Event>(\n  elm: Window | Document | Element,\n  events: string,\n  callbackOrKey: object | ( ( e: T ) => void )\n): void;\n\n\n/**\n * Detaches a handler from the event or events.\n *\n * @param elm           - An element where events are removed.\n * @param events        - Optional. An event name or names.\n * @param callbackOrKey - Optional. A handler to remove or an object key.\n */\nexport function off(\n  elm: Window | Document | Element,\n  events: string,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void {\n  if ( isFunction( callbackOrKey ) ) {\n    events.split( ' ' ).forEach( event => {\n      elm.removeEventListener( event, callbackOrKey );\n    } );\n  } else {\n    const handlers = handlerMap.get( callbackOrKey );\n\n    if ( handlers ) {\n      handlers.forEach( handler => {\n        off( handler.elm, handler.events, handler.callback );\n      } );\n\n      handlerMap.delete( callbackOrKey );\n    }\n  }\n}\n","/**\r\n * Call the `preventDefault()` of the provided event.\r\n *\r\n * @param e               - An Event object.\r\n * @param stopPropagation - Optional. Whether to stop the event propergation or not.\r\n */\r\nexport function prevent( e: Event, stopPropagation?: boolean ): void {\r\n  if ( e ) {\r\n    if ( e.cancelable ) {\r\n      e.preventDefault();\r\n    }\r\n\r\n    if ( stopPropagation ) {\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Returns an element that matches the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return A found element or `null`.\r\n */\r\nexport function query<E extends Element = Element>( parent: Element | Document, selector?: string ): E | null {\r\n  return parent.querySelector( selector );\r\n}\r\n","/**\r\n * Returns elements that match the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return The NodeList object that contains matched elements.\r\n */\r\nexport function queryAll<E extends Element = Element>( parent: Element | Document, selector: string ): NodeListOf<E> {\r\n  return parent.querySelectorAll( selector );\r\n}\r\n","/**\n * Returns a DOMRect object of the provided element or the selection range.\n *\n * @param target - An element or a range instance.\n */\nexport function rect( target: Element | Range ): DOMRect {\n  return target.getBoundingClientRect();\n}\n","import { toArray } from '../../array';\n\n\n/**\n * Removes the provided node from its parent.\n *\n * @param nodes - A node or nodes to remove.\n */\nexport function remove( nodes: Node | Node[] ): void {\n  toArray( nodes ).forEach( node => {\n    if ( node && node.parentNode ) {\n      node.parentNode.removeChild( node );\n    }\n  } );\n}\n","import { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Removes classes from the element.\r\n *\r\n * @param elm     - An element to remove classes from.\r\n * @param classes - Classes to remove.\r\n */\r\nexport function removeClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, classes, false );\r\n}\r\n","import { forOwn } from '../../object';\nimport { isString, isUndefined } from '../../type/type';\n\n\n/**\n * The union for CSS style properties, such as \"padding\", \"fontSize\", etc.\n *\n * @since 0.1.0\n */\nexport type CSSStyleProperties = Exclude<keyof CSSStyleDeclaration, number>;\n\nexport function styles(\n  elm: HTMLElement,\n  styles: Record<string, string | number>\n): void;\n\nexport function styles<K extends CSSStyleProperties>(\n  elm: HTMLElement,\n  styles: K\n): CSSStyleDeclaration[ K ];\n\nexport function styles(\n  elm: HTMLElement,\n  styles: string\n): string;\n\n\n/**\n * Applies inline styles to the provided element by an object literal.\n *\n * @param elm    - An element to apply styles to.\n * @param styles - An object literal with styles.\n */\nexport function styles<K extends CSSStyleProperties>(\n  elm: HTMLElement,\n  styles: Record<string, string | number> | K\n): CSSStyleDeclaration[ K ] | void {\n  if ( isString( styles ) ) {\n    return getComputedStyle( elm )[ styles ];\n  }\n\n  forOwn( styles, ( value, key ) => {\n    if ( ! isUndefined( value ) ) {\n      elm.style[ key ] = String( value );\n    }\n  } );\n}\n","import { toArray } from '../../array';\r\nimport { assign } from '../../object';\r\nimport { joinAttrs } from '../joinAttrs/joinAttrs';\r\n\r\n\r\n/**\r\n * Returns an open tag with provided classes.\r\n *\r\n * @param classes - Classes.\r\n * @param attrs   - Optional. An object with attributes.\r\n * @param tag     - Optional. A tag name.\r\n */\r\nexport function tag(\r\n  classes: string | string[],\r\n  attrs: Record<string, string | number | boolean> = {},\r\n  tag?: string\r\n): string {\r\n  return `<${ tag || 'div' } ${ joinAttrs( assign( attrs, {\r\n    class: toArray( classes ).filter( Boolean ).join( ' ' ),\r\n  } ) ) }>`;\r\n}\r\n","import { forOwn } from '../../object';\n\n\n/**\n * Joins the provided object as a single line for DOM attributes.\n *\n * @param attrs - An object literal for attributes.\n *\n * @return A single string containing all attributes.\n */\nexport function joinAttrs( attrs: Record<string, string | number | boolean> ): string {\n  let result = '';\n\n  forOwn( attrs, ( value, prop ) => {\n    if ( prop && ( value || value === false || value === 0 ) ) {\n      result += ` ${ prop }=\"${ value }\"`;\n    }\n  } );\n\n  return result.trim();\n}\n","import { isUndefined } from '../../type/type';\n\n\nexport function text( node: Node ): string;\nexport function text( node: Node, text: string ): void;\n\n/**\n * Sets or gets a text content of the provided node.\n *\n * @param node - A node to get or set a text.\n * @param text - Optional. A text to set.\n */\nexport function text( node: Node, text?: string ): string | void {\n  if ( node ) {\n    if ( isUndefined( text ) ) {\n      return node.textContent;\n    }\n\n    node.textContent = text;\n  }\n}\n","import { isString } from '../../type/type';\n\n\n/**\n * Appends `px` to the value.\n * If the value is already string, just returns it.\n *\n * @param value - A value to append `px` to.\n */\nexport function unit( value: number | string ): string {\n  return isString( value ) ? value : `${ value }px`;\n}\n","/**\n * Checks is the browser is IE or not.\n *\n * @return `true` if the browser is IE, or otherwise `false`.\n */\nexport function isIE(): boolean {\n  return /*@cc_on!@*/false || !! document[ 'documentMode' ];\n}\n","import { isAndroid } from '../isAndroid/isAndroid';\r\nimport { isIOS } from '../isIOS/isIOS';\r\n\r\n\r\n/**\r\n * Checks if the device is likely mobile or not.\r\n *\r\n * @return `true` if the device is likely mobile, or otherwise `false`.\r\n */\r\nexport function isMobile(): boolean {\r\n  return isAndroid() || isIOS();\r\n}\r\n","/**\r\n * Checks if the client is Android or not.\r\n *\r\n * @return `true` if the client is Android, or otherwise `false`.\r\n */\r\nexport function isAndroid(): boolean {\r\n  return /android/i.test( navigator.userAgent );\r\n}\r\n","/**\r\n * Checks if the client is iOS or not.\r\n *\r\n * @return `true` if the client is iOS, or otherwise `false`.\r\n */\r\nexport function isIOS(): boolean {\r\n  const { userAgent } = navigator;\r\n  return /iPad|iPhone|iPod/.test( userAgent )\r\n    || ( userAgent.indexOf( 'Mac' ) > -1 && navigator.maxTouchPoints > 1 );\r\n}\r\n","/**\n * The project code.\n *\n * @since 0.1.0\n */\nexport const PROJECT_CODE = 'ryuseicode';\n\n/**\n * The abbreviated project code.\n *\n * @since 0.1.0\n */\nexport const PROJECT_CODE_SHORT = 'rc';\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert( condition: any, message = '' ): void {\r\n  if ( ! condition ) {\r\n    throw new Error( `[${ PROJECT_CODE }] ${ message }` );\r\n  }\r\n}\r\n","import { AnyFunction } from '@ryusei/code';\nimport { isUndefined } from '../../type/type';\n\n\n/**\n * The interface for a throttled function.\n *\n * @since 0.1.0\n */\nexport interface Throttle<F extends AnyFunction = AnyFunction> extends Function {\n  ( ...args: Parameters<F> ): void,\n\n  /**\n   * Cancels the active timer.\n   */\n  cancel: () => void;\n\n  /**\n   * Invokes the pending process immediately.\n   */\n  invoke: () => void;\n}\n\n/**\n * Returns a function that invokes the provided function at most once in the specified duration.\n *\n * @since 0.1.0\n *\n * @param func        - A function to throttle.\n * @param interval    - A throttle duration in milliseconds.\n * @param initialCall - Optional. Determines whether to call the function initially.\n * @param debounce    - Optional. If `true`, the function returns a debounced function instead of throttled one.\n * @param raf         - Optional. Determines whether to use the `requestAnimationFrame` or not.\n *\n * @return A throttled function.\n */\nexport function throttle<F extends AnyFunction = AnyFunction>(\n  func: F,\n  interval: number,\n  initialCall?: boolean,\n  debounce?: boolean,\n  raf?: boolean\n): Throttle<F> {\n  let id: any;\n  let invoker: () => void;\n\n  function throttled( this: ThisParameterType<F>, ...args: Parameters<F> ): void {\n    if ( debounce ) {\n      cancel();\n    }\n\n    invoker = invoke.bind( this, ...args );\n\n    if ( ! id ) {\n      if ( isUndefined( id ) && initialCall ) {\n        invoker();\n      } else {\n        id = raf ? requestAnimationFrame( invoker ) : setTimeout( invoker, interval );\n      }\n    }\n  }\n\n  function invoke( this: ThisParameterType<F>, ...args: Parameters<F> ): void {\n    func.apply( this, args );\n    cancel();\n  }\n\n  function cancel(): void {\n    raf ? cancelAnimationFrame( id ) : clearTimeout( id );\n    id = null;\n  }\n\n  throttled.cancel = cancel;\n\n  throttled.invoke = () => {\n    if ( id ) {\n      invoker();\n    }\n  };\n\n  return throttled;\n}\n","import { AnyFunction } from '@ryusei/code';\r\nimport { Throttle, throttle } from '../throttle/throttle';\r\n\r\n\r\n/**\r\n * Returns a debounced function that invokes the provided function only after the internal timer expires.\r\n * The timer is reset whenever the debounced function is called.\r\n *\r\n * @param func     - A callback function.\r\n * @param duration - Debounce duration in milliseconds.\r\n *\r\n * @return A debounced function.\r\n */\r\nexport function debounce<F extends AnyFunction = AnyFunction>( func: AnyFunction, duration: number ): Throttle<F> {\r\n  return throttle( func, duration, false, true );\r\n}\r\n","import { AnyFunction } from '@ryusei/code';\r\n\r\n\r\n/**\r\n * Fires the provided function on the next tick.\r\n *\r\n * @param func - A function to call.\r\n */\r\nexport function nextTick( func: AnyFunction ): void {\r\n  setTimeout( func );\r\n}\r\n","import { AnyFunction } from '@ryusei/code';\r\nimport { Throttle, throttle } from '../throttle/throttle';\r\n\r\n\r\n/**\r\n * Implements the `throttle` function via requestAnimationFrame.\r\n *\r\n * @param func - A function to throttle.\r\n * @param initialCall - Optional. Determines whether to call the function initially.\r\n *\r\n * @return A throttled function.\r\n */\r\nexport function rafThrottle<F extends AnyFunction = AnyFunction>(\r\n  func: F,\r\n  initialCall?: boolean\r\n): Throttle<F> {\r\n  return throttle( func, 0, initialCall, false, true );\r\n}\r\n","/**\n * The collection of forward arrow keys.\n *\n * @private\n * @since 0.1.0\n */\nexport const ARROW_FORWARD = [\n  'ArrowDown',\n  'ArrowRight',\n];\n\n/**\n * The collection of backward arrow keys.\n *\n * @private\n * @since 0.1.0\n */\nexport const ARROW_BACKWARD = [\n  'ArrowUp',\n  'ArrowLeft',\n];\n\n/**\n * The collection of all arrow keys.\n *\n * @private\n * @since 0.1.0\n */\nexport const ARROW_KEYS = [\n  ...ARROW_FORWARD,\n  ...ARROW_BACKWARD,\n];\n\n\n/**\n * The map for normalizing differences of keys in browsers.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\n *\n * @private\n * @since 0.1.0\n */\nexport const NORMALIZATION_MAP = {\n  Up      : 'ArrowUp',\n  Down    : 'ArrowDown',\n  Right   : 'ArrowRight',\n  Left    : 'ArrowLeft',\n  Del     : 'Delete',\n  Esc     : 'Escape',\n  Spacebar: ' ',\n};\n","import { NORMALIZATION_MAP } from '../../../constants/keys';\n\n\n/**\n * Normalizes the provided key for different browsers.\n *\n * @param key - A key to normalize.\n */\nexport function normalizeKey( key: string ): string {\n  return NORMALIZATION_MAP[ key ] || key;\n}\n","/**\r\n * Checks if the subject number is between `minOrMax` and `maxOrMin`.\r\n *\r\n * @param number    - A subject number to check.\r\n * @param minOrMax  - A min or max number.\r\n * @param maxOrMin  - A max or min number.\r\n * @param exclusive - Optional. Whether to exclude `x` or `y`.\r\n */\r\nexport function between( number: number, minOrMax: number, maxOrMin: number, exclusive?: boolean ): boolean {\r\n  const min = Math.min( minOrMax, maxOrMin );\r\n  const max = Math.max( minOrMax, maxOrMin );\r\n  return exclusive ? min < number && number < max : min <= number && number <= max;\r\n}\r\n","const { max, min } = Math;\r\n\r\n/**\r\n * Clamps a number.\r\n *\r\n * @param number - A subject number to check.\r\n * @param x      - A min or max number.\r\n * @param y      - A min or max number.\r\n */\r\nexport function clamp( number: number, x: number, y: number ): number {\r\n  const minimum = min( x, y );\r\n  const maximum = max( x, y );\r\n  return min( max( minimum, number ), maximum );\r\n}\r\n","export { between } from './between/between';\r\nexport { clamp }   from './clamp/clamp';\r\n\r\nexport const { min, max, floor, ceil, abs, round } = Math;\r\n","import { Position } from '@ryusei/code';\r\n\r\n\r\n/**\r\n * Compares the provided 2 positions.\r\n *\r\n * @return If the `position1` is preceding, returns a negative number,\r\n *         or if it is following, returns a positive one. If they are same, returns `0`.\r\n */\r\nexport function compare( position1: Position, position2: Position ): number {\r\n  return position1[ 0 ] - position2[ 0 ] || position1[ 1 ] - position2[ 1 ];\r\n}\r\n","/**\n * The alias of document.createRange.\n * The Range constructor is not supported by IE.\n *\n * @since 0.1.0\n *\n * @return A Range instance.\n */\nexport function createRange(): Range {\n  return document.createRange();\n}\n","/**\n * The alias of window.getSelection.\n *\n * @since 0.1.0\n *\n * @return A Selection instance.\n */\nexport function getSelection(): Selection {\n  return window.getSelection();\n}\n","import { SelectionBoundary } from '@ryusei/code';\r\nimport { isText } from '../../type/type';\r\n\r\n\r\n/**\r\n * Finds a node that the offset number belongs to.\r\n *\r\n * @param elm    - An element to find in.\r\n * @param offset - An offset index.\r\n *\r\n * @return An object that contains a found node and a offset number.\r\n */\r\nexport function findSelectionBoundary( elm: Element, offset: number ): SelectionBoundary | null {\r\n  const children = elm.childNodes;\r\n\r\n  if ( ! children.length && ! offset ) {\r\n    return { node: elm, offset: 0 };\r\n  }\r\n\r\n  if ( offset <= elm.textContent.length ) {\r\n    for ( let i = 0; i < children.length; i++ ) {\r\n      const node   = children[ i ];\r\n      const length = node.textContent.length;\r\n\r\n      if ( isText( node ) ) {\r\n        if ( offset <= length ) {\r\n          return { node, offset };\r\n        }\r\n      } else if ( node instanceof Element ) {\r\n        const found = findSelectionBoundary( node, offset );\r\n\r\n        if ( found ) {\r\n          return found;\r\n        }\r\n      }\r\n\r\n      offset -= length;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n","/**\n * Counts the search string occurrence in the provided sting.\n *\n * @param string - A string to search in.\n * @param search - A string to search for.\n * @param from   - An index to search from.\n * @param to     - An index to search to.\n *\n * @return A number of occurrence.\n */\nexport function count( string: string, search: string, from = 0, to = string.length ): number {\n  if ( from || to !== string.length ) {\n    string = string.slice( from, to );\n  }\n\n  return ( string.match( new RegExp( search, 'g' ) ) || [] ).length;\n}\n","/**\n * Formats a string.\n *\n * @param string       - A string to format.\n * @param replacements - A replacement or replacements.\n *\n * @return A formatted string.\n */\nexport function format( string: string, ...replacements: Array<string | number> ): string {\n  for ( let i = 0; i < replacements.length; i++ ) {\n    string = string.replace( '%s', String( replacements[ i ] ) );\n  }\n\n  return string;\n}\n","/**\n * Returns the index within the provided string of the nth occurrence.\n * The optional `from` index determines the start position to search the target from.\n *\n * @param string - A string to search in.\n * @param search - A string to search startsWith\n * @param nth    - A number of the occurrence.\n * @param from   - Optional. A start index to search from.\n *\n * @return An index if the nth occurrence of the `search` string is found, or `-1` if not.\n */\nexport function nthIndexOf( string: string, search: string, nth: number, from = 0 ): number {\n  let index = from - 1;\n  let count = nth;\n\n  while( ( index !== -1 || nth === count ) && count-- ) {\n    index = string.indexOf( search, index + 1 );\n  }\n\n  return index;\n}\n","import { floor } from '../../math';\r\n\r\n\r\n/**\r\n * Returns a new string filled with a number of copies of the provided string.\r\n *\r\n * @param string - A string to repeat.\r\n * @param count  - An integer for determining the number of repeats.\r\n *\r\n * @return A new string containing copies of the provided string.\r\n */\r\nexport function repeat( string: string, count: number ): string {\r\n  if ( ! String.prototype.repeat ) {\r\n    let result = '';\r\n\r\n    while ( count > 0 ) {\r\n      if ( count % 2 ) {\r\n        result += string;\r\n      }\r\n\r\n      count = floor( count / 2 );\r\n      string += string;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  return string.repeat( count );\r\n}\r\n","/**\n * Checks if the string starts with the `search` string or not.\n *\n * @param string - A string to check.\n * @param search - A string to search.\n *\n * @return `true` if the string starts with the `search`, or otherwise `false`.\n */\nexport function startsWith( string: string, search: string ): boolean {\n  return string.slice( 0, search.length ) === search;\n}\n","const ids: Record<string, number> = {};\n\n/**\n * Returns a sequential unique ID as \"{ prefix }-{ number }\".\n *\n * @param prefix - A prefix for the ID.\n */\nexport function uniqueId( prefix: string ): string {\n  const number   = ( ids[ prefix ] || 0 ) + 1;\n  const idNumber = number < 10 ? `0${ number }` : number;\n\n  ids[ prefix ] = number;\n\n  return `${ prefix }${ idNumber }`;\n}\n","import {\n  Elements,\n  EventBusCallback,\n  Extensions,\n  IconSettings, KeyMatcher,\n  Language,\n  LanguageConfig,\n  Options,\n  Position,\n} from '@ryusei/code';\nimport { AnyFunction } from '@ryusei/light/dist/types/types';\nimport {\n  Caret,\n  Chunk,\n  Code,\n  ContextMenu,\n  Edit,\n  Input,\n  Keymap,\n  Measure,\n  Range,\n  Scope,\n  Selection,\n  Style,\n  Sync,\n  View,\n} from '../../components';\nimport { Lines } from '../../components/Code/Lines';\nimport { Editor } from '../../core/Editor/Editor';\nimport { EventBus } from '../../event/EventBus';\nimport { assert, assign, forOwn, isObject, isUndefined, off, on } from '../../utils';\n\n\n/**\n * The base class for a component.\n *\n * @since 0.1.0\n */\nexport class Component {\n  /**\n   * The EventBus instance.\n   * Use `on()`, `off()` and `emit()` methods instead of this.\n   */\n  protected readonly event: EventBus<Editor>;\n\n  /**\n   * The collection of all options.\n   */\n  protected readonly options: Options;\n\n  /**\n   * The Editor instance.\n   */\n  protected Editor: Editor;\n\n  /**\n   * The Caret instance.\n   */\n  protected Caret: Caret;\n\n  /**\n   * The Chunk instance.\n   */\n  protected Chunk: Chunk;\n\n  /**\n   * The Code instance.\n   */\n  protected Code: Code;\n\n  /**\n   * The ContextMenu instance.\n   */\n  protected ContextMenu: ContextMenu;\n\n  /**\n   * The Edit instance.\n   */\n  protected Edit: Edit;\n\n  /**\n   * The Input instance.\n   */\n  protected Input: Input;\n\n  /**\n   * The Input instance.\n   */\n  protected Keymap: Keymap;\n\n  /**\n   * The Measure instance.\n   */\n  protected Measure: Measure;\n\n  /**\n   * The Range instance.\n   */\n  protected Range: Range;\n\n  /**\n   * The Scope instance.\n   */\n  protected Scope: Scope;\n\n  /**\n   * The Selection instance.\n   */\n  protected Selection: Selection;\n\n  /**\n   * The Style instance.\n   */\n  protected Style: Style;\n\n  /**\n   * The Sync instance.\n   */\n  protected Sync: Sync;\n\n  /**\n   * The View instance.\n   */\n  protected View: View;\n\n  /**\n   * The collection of essential editor elements.\n   */\n  protected elements: Elements;\n\n  /**\n   * The Language object.\n   */\n  protected language: Language;\n\n  /**\n   * The Component constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    this.Editor   = Editor;\n    this.event    = Editor.event;\n    this.options  = Editor.options;\n    this.language = Editor.language;\n  }\n\n  /**\n   * Called when the component is mounted.\n   *\n   * @param elements - A collection of editor elements.\n   */\n  mount( elements: Elements ): void {\n    this.elements = elements;\n\n    forOwn( this.Editor.Components, ( Component, key ) => {\n      this[ key ] = Component;\n    } );\n  }\n\n  /**\n   * Called when the editor is destroyed.\n   *\n   * @internal\n   */\n  destroy(): void {\n    off( null, '', this );\n  }\n\n  /**\n   * Attaches an event handler to an event or events with passing this instance as a key.\n   * They can only be detached by the `off()` member method.\n   *\n   * @param events   - An event name, names split by spaces, or an array with names.\n   * @param callback - A callback function.\n   * @param thisArg  - Optional. Specifies the `this` parameter of the callback function.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   */\n  protected on<F extends EventBusCallback>(\n    events: string | string[],\n    callback: EventBusCallback,\n    thisArg?: ThisParameterType<F>,\n    priority?: number\n  ): void {\n    this.event.on( events, thisArg ? callback.bind( thisArg ) : callback, this, priority );\n  }\n\n  /**\n   * Detaches handlers registered by `on()` without removing handlers attached by other components.\n   *\n   * @param events - An event name, names split by spaces, or an array with names.\n   */\n  protected off( events: string | string[] ): void {\n    this.event.off( events, this );\n  }\n\n  /**\n   * Triggers handlers attached to the event.\n   *\n   * @param event - An event name.\n   * @param args  - Optional. Any number of arguments to pass to callback functions.\n   */\n  protected emit( event: string, ...args: any[] ): void {\n    this.event.emit( event, ...args );\n  }\n\n  /**\n   * Listens to native events.\n   * This method stores all listeners and automatically removes them on destruction.\n   *\n   * @param elm      - A document, a window or an element.\n   * @param events   - An event name or names split by spaces.\n   * @param callback - A callback function.\n   * @param thisArg  - Optional. Specifies the `this` parameter of the callback function.\n   */\n  protected bind<F extends ( e: Event ) => void>(\n    elm: Document | Window | Element,\n    events: string,\n    callback: F,\n    thisArg?: ThisParameterType<F>\n  ): void {\n    on( elm, events, thisArg ? callback.bind( thisArg ) : callback, this );\n  }\n\n  /**\n   * Returns a Language or LanguageConfig object at the focus or specified position.\n   * This method can return different objects depending on the position\n   * if the language allows to embed other languages, such as HTML and PHP.\n   *\n   * @param position - Optional. Specifies the position to get the language at.\n   *\n   * @return A main Language object or sub language config object.\n   */\n  protected getLanguage( position?: Position ): Language | LanguageConfig {\n    position = position || this.Selection.focus;\n\n    const { language } = this;\n    const info = this.lines.getInfoAt( position );\n\n    if ( info && info.language && language.use && language.use[ info.language ] ) {\n      return language.use[ info.language ].config;\n    }\n\n    return language;\n  }\n\n  /**\n   * Attempts to invoke the public method of the specified extension.\n   * In terms of the \"loose coupling\", you'd better try not to use this method.\n   * Using events is enough in most cases.\n   *\n   * @example\n   * ```ts\n   * // Attempts to show the \"search\" toolbar.\n   * Editor.invoke( 'Toolbar', 'show', 'search' );\n   * ```\n   *\n   * @param name   - A name of the extension.\n   * @param method - A method name to invoke.\n   * @param args   - Optional. Arguments for the method.\n   *\n   * @return The return value of the method.\n   */\n  protected invoke< K extends keyof Extensions, P extends keyof Extensions[ K ], V extends Extensions[ K ][ P ]>(\n    name: K,\n    method: P,\n    ...args: V extends AnyFunction ? Parameters<V> : any[]\n  ): V extends AnyFunction ? ReturnType<V> : void {\n    return this.Editor.invoke( name, method, ...args );\n  }\n\n  /**\n   * Returns the specified extension.\n   * In terms of the \"loose coupling\", you'd better try not to use this method.\n   * Using events is enough in most cases.\n   *\n   * @param name - A name of an extension.\n   *\n   * @return An extension if found, or otherwise `undefined`.\n   */\n  protected require<K extends keyof Extensions>( name: K ): Extensions[ K ] | undefined {\n    return this.Editor.require( name );\n  }\n\n  /**\n   * Adds default icon strings. They can be still overridden by options.\n   * The IconSettings is a tuple as `[ string, number?, string? ]` corresponding with `[ path, stroke?, linecap? ]`.\n   *\n   * @example\n   * ```ts\n   * this.addIcons( {\n   *   myIcon: [\n   *     'm19 18-14-13m0 13 14-13',\n   *     3,\n   *   ],\n   * } );\n   * ```\n   *\n   * @param icons - Icon settings to add.\n   */\n  protected addIcons( icons: Record<string, IconSettings> ): void {\n    const { options } = this;\n    options.icons = assign( {}, icons, options.icons );\n  }\n\n  /**\n   * Adds default i18n strings. They can be still overridden by options.\n   *\n   * @example\n   * ```ts\n   * this.addI18n( {\n   *   myMessage: 'Hello!',\n   * } );\n   * ```\n   *\n   * @param i18n - Additional i18n strings.\n   */\n  protected addI18n( i18n: Record<string, string> ): void {\n    const { options } = this;\n    options.i18n = assign( {}, i18n, options.i18n );\n  }\n\n  /**\n   * Adds default shortcuts to the keymap object. They can be still overridden by options.\n   * Call this method before RyuseiCode mounts components so that the Keymap component recognizes shortcuts.\n   *\n   * @example\n   * ```js\n   * class MyExtension extends Component {\n   *   constructor( Editor ) {\n   *     super( Editor );\n   *\n   *     this.addKeyBindings( {\n   *       myShortcut: [ 'P', true, true ],\n   *     } );\n   *   }\n   * }\n   * ```\n   *\n   * @param shortcuts - Additional shortcuts.\n   */\n  protected addKeyBindings( shortcuts: Record<string, KeyMatcher | KeyMatcher[]> ): void {\n    const { options } = this;\n    options.keymap = assign( {}, shortcuts, options.keymap );\n  }\n\n  /**\n   * Returns options for each extension, merging provided default values.\n   *\n   * @example\n   * ```js\n   * class MyExtension extends Component {\n   *   constructor( Editor ) {\n   *     super( Editor );\n   *\n   *     const extensionOptions = this.getOptions( 'myExtension', { option1: true } );\n   *   }\n   * }\n   * ```\n   *\n   * @param name     - An option name.\n   * @param defaults - Default values.\n   *\n   * @return A merged options, or `null`.\n   */\n  protected getOptions<T extends object>( name: string, defaults?: T ): T {\n    const options = this.options[ name ];\n\n    if ( isUndefined( options ) || options === true ) {\n      return defaults || {} as T;\n    }\n\n    if ( isObject( options ) ) {\n      return assign( {}, defaults, options );\n    }\n\n    assert( false );\n  }\n\n  /**\n   * Returns the latest Lines instance.\n   * This is an alias of `Code#Lines`.\n   *\n   * @return The Lines instance.\n   */\n  get lines(): Lines {\n    return this.Code.Lines;\n  }\n\n  /**\n   * Returns the i18n collection.\n   * This is an alias of `this.options.i18n`.\n   *\n   * @return The object with i18n strings.\n   */\n  get i18n(): Record<string, string> {\n    return this.options.i18n;\n  }\n}\n","import { PROJECT_CODE, PROJECT_CODE_SHORT } from './project';\n\n\nexport const CLASS_ROOT                  = PROJECT_CODE;\nexport const CLASS_VIEW                  = `${ PROJECT_CODE }__view`;\nexport const CLASS_BODY                  = `${ PROJECT_CODE }__body`;\nexport const CLASS_SCROLLER              = `${ PROJECT_CODE }__scroller`;\nexport const CLASS_CONTAINER             = `${ PROJECT_CODE }__container`;\nexport const CLASS_EDITOR                = `${ PROJECT_CODE }__editor`;\nexport const CLASS_TEXTAREA              = `${ PROJECT_CODE }__textarea`;\nexport const CLASS_SCROLLBARS            = `${ PROJECT_CODE }__scrollbars`;\nexport const CLASS_SCROLLBAR             = `${ PROJECT_CODE }__scrollbar`;\nexport const CLASS_LINES                 = `${ PROJECT_CODE }__lines`;\nexport const CLASS_LINE                  = `${ PROJECT_CODE }__line`;\nexport const CLASS_SOURCE                = `${ PROJECT_CODE }__source`;\nexport const CLASS_BACKGROUND            = `${ PROJECT_CODE }__background`;\nexport const CLASS_CARETS                = `${ PROJECT_CODE }__carets`;\nexport const CLASS_CARET                 = `${ PROJECT_CODE }__caret`;\nexport const CLASS_MARKERS               = `${ PROJECT_CODE }__markers`;\nexport const CLASS_MARKER                = `${ PROJECT_CODE }__marker`;\nexport const CLASS_OVERLAY               = `${ PROJECT_CODE }__overlay`;\nexport const CLASS_CONTEXT_MENU          = `${ PROJECT_CODE }__context-menu`;\nexport const CLASS_CONTEXT_MENU_GROUP    = `${ CLASS_CONTEXT_MENU }__group`;\nexport const CLASS_CONTEXT_MENU_LIST     = `${ CLASS_CONTEXT_MENU }__list`;\nexport const CLASS_CONTEXT_MENU_ITEM     = `${ CLASS_CONTEXT_MENU }__item`;\nexport const CLASS_CONTEXT_MENU_BUTTON   = `${ CLASS_CONTEXT_MENU }__button`;\nexport const CLASS_CONTEXT_MENU_LABEL    = `${ CLASS_CONTEXT_MENU_BUTTON }__label`;\nexport const CLASS_CONTEXT_MENU_SHORTCUT = `${ CLASS_CONTEXT_MENU_BUTTON }__shortcut`;\nexport const CLASS_TOKEN                 = `${ PROJECT_CODE_SHORT }__token`;\nexport const CLASS_INPUT                 = `${ PROJECT_CODE }__input`;\nexport const CLASS_BUTTON                = `${ PROJECT_CODE }__button`;\nexport const CLASS_ICON                  = `${ PROJECT_CODE }__icon`;\nexport const CLASS_PLACEHOLDER           = `${ PROJECT_CODE }__placeholder`;\n\nexport const CLASS_ACTIVE      = 'is-active';\nexport const CLASS_RENDERED    = 'is-rendered';\nexport const CLASS_INITIALIZED = 'is-initialized';\nexport const CLASS_ANCHOR      = 'is-anchor';\nexport const CLASS_FOCUS       = 'is-focus';\nexport const CLASS_PRESERVED   = 'is-preserved';\nexport const CLASS_FOCUSED     = 'is-focused';\nexport const CLASS_READONLY    = 'is-readonly';\nexport const CLASS_DRAGGING    = 'is-dragging';\nexport const CLASS_EMPTY       = 'is-empty';\nexport const CLASS_MOBILE      = 'is-mobile';\n","export const EVENT_MOUNT                 = 'mount';\nexport const EVENT_MOUNTED               = 'mounted';\nexport const EVENT_FOCUS                 = 'focus';\nexport const EVENT_BLUR                  = 'blur';\nexport const EVENT_READONLY              = 'readOnly';\nexport const EVENT_KEYDOWN               = 'keydown';\nexport const EVENT_INPUT                 = 'input';\nexport const EVENT_NEWLINE               = 'newline';\nexport const EVENT_CHANGE                = 'change';\nexport const EVENT_CHANGED               = 'changed';\nexport const EVENT_COMPOSITION_START     = 'compositionStart';\nexport const EVENT_COMPOSITION_UPDATE    = 'compositionUpdate';\nexport const EVENT_COMPOSITION_END       = 'compositionEnd';\nexport const EVENT_ANCHOR_LINE_CHANGED   = 'anchorLineChanged';\nexport const EVENT_FOCUS_LINE_CHANGED    = 'focusLineChanged';\nexport const EVENT_COPY                  = 'copy';\nexport const EVENT_CUT                   = 'cut';\nexport const EVENT_PASTE                 = 'paste';\nexport const EVENT_KEYMAP                = 'keymap';\nexport const EVENT_CHUNK_MOVED           = 'chunkMoved';\nexport const EVENT_CHUNK_SUPPLIED        = 'chunkSupplied';\nexport const EVENT_SELECTING             = 'selecting';\nexport const EVENT_SELECTED              = 'selected';\nexport const EVENT_SELECTION_CHANGE      = 'selectionChanged';\nexport const EVENT_SCROLL                = 'scroll';\nexport const EVENT_SCROLLED              = 'scrolled';\nexport const EVENT_SCROLLER_SCROLL       = 'scrollerScroll';\nexport const EVENT_WINDOW_SCROLL         = 'windowScroll';\nexport const EVENT_RESIZE                = 'resize';\nexport const EVENT_SCROLL_WIDTH_CHANGED  = 'scrollWidthChanged';\nexport const EVENT_SCROLL_HEIGHT_CHANGED = 'scrollHeightChanged';\nexport const EVENT_SYNCED                = 'synced';\nexport const EVENT_CONTEXT_MENU_OPENED   = 'contextMenuOpened';\nexport const EVENT_CONTEXT_MENU_CLOSED   = 'contextMenuClosed';\nexport const EVENT_CONTEXT_MENU_CLICKED  = 'contextMenuClicked';\nexport const EVENT_RESET                 = 'reset';\nexport const EVENT_INIT_STYLE            = 'initStyle';\nexport const EVENT_FONT_LOADED           = 'fontLoaded';\nexport const EVENT_DESTROYED             = 'destroyed';\n","/**\n * The editor is not active.\n */\nexport const IDLE = 0;\n\n/**\n * The selection is collapsed.\n */\nexport const COLLAPSED = 1;\n\n/**\n * The selection will change soon. The native selection has not been updated at this timing.\n */\nexport const START = 2;\n\n/**\n * The selection has just changed after the `START` state. The native selection has been updated.\n */\nexport const CHANGED = 3;\n\n/**\n * The selection has been programmatically updated.\n */\nexport const UPDATE = 4;\n\n/**\n * An user is selecting a document.\n */\nexport const SELECTING = 5;\n\n/**\n * The existing selection is being extended.\n */\nexport const EXTEND = 6;\n\n/**\n * User finishes the selection. The native selection has not been updated at this timing (in Gecko).\n */\nexport const END = 7;\n\n/**\n * The selection is settled and it is not collapsed.\n */\nexport const SELECTED = 8;\n\n/**\n * All contents are selected.\n */\nexport const SELECTED_ALL = 9;\n\n/**\n * The selection is right-clicked.\n */\nexport const CLICKED_RIGHT = 10;\n","import { Position } from '@ryusei/code';\nimport { CLASS_ACTIVE, CLASS_CARET } from '../../constants/classes';\nimport { EVENT_RESIZE } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { addClass, debounce, div, removeClass, styles, unit } from '../../utils';\n\n\n/**\n * The offset amount for the horizontal position of the caret.\n *\n * @since 0.1.0\n */\nconst HORIZONTAL_OFFSET = -1;\n\n/**\n * The debounce duration for the `blink` method.\n *\n * @since 0.1.0\n */\nconst BLINK_DEBOUNCE_DURATION = 30;\n\n/**\n * The class for creating and controlling the caret element.\n *\n * @since 0.1.0\n */\nexport class CustomCaret {\n  /**\n   * The caret element.\n   */\n  readonly caret: HTMLDivElement;\n\n  /**\n   * Holds the Editor instance.\n   */\n  private readonly Editor: Editor;\n\n  /**\n   * Keeps the current position.\n   */\n  private position: Position;\n\n  /**\n   * The Caret constructor.\n   *\n   * @param Editor - An Editor instance.\n   * @param id     - An ID for the caret.\n   * @param parent - A parent element where the caret is appended.\n   */\n  constructor( Editor: Editor, id: string, parent: HTMLElement ) {\n    this.Editor = Editor;\n    this.caret  = div( [ CLASS_CARET, `${ CLASS_CARET }--${ id }` ], parent );\n    this.blink  = debounce( this.blink.bind( this ), BLINK_DEBOUNCE_DURATION );\n\n    Editor.event.on( EVENT_RESIZE, () => {\n      if ( this.position ) {\n        this.move( this.position );\n      }\n    } );\n  }\n\n  /**\n   * Moves the caret to the specified position.\n   *\n   * @param position - A position to set as [ row, col ].\n   */\n  move( position: Position ): void {\n    const { Measure } = this.Editor.Components;\n    const rect = Measure.getOffset( position );\n\n    styles( this.caret, {\n      top      : unit( rect.top ),\n      left     : unit( rect.left + HORIZONTAL_OFFSET ),\n      animation: 'none',\n    } );\n\n    this.blink();\n    this.position = position;\n  }\n\n  /**\n   * Displays the caret.\n   */\n  show(): void {\n    addClass( this.caret, CLASS_ACTIVE );\n  }\n\n  /**\n   * Hides the caret.\n   */\n  hide(): void {\n    removeClass( this.caret, CLASS_ACTIVE );\n  }\n\n  /**\n   * Starts the blink animation by removing the `none` value from the `animation`.\n   */\n  private blink(): void {\n    styles( this.caret, { animation: '' } );\n  }\n}\n","import { Elements, EventBusEvent } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { CLASS_CARETS } from '../../constants/classes';\nimport { EVENT_READONLY, EVENT_SELECTED, EVENT_SELECTING } from '../../constants/events';\nimport { CHANGED, COLLAPSED, SELECTED } from '../../constants/selection-states';\nimport { Editor } from '../../core/Editor/Editor';\nimport { assert, div, isIE, isMobile, rafThrottle } from '../../utils';\nimport { Selection } from '../Selection/Selection';\nimport { CustomCaret } from './CustomCaret';\n\n\n/**\n * The ID of the primary caret.\n *\n * @since 0.1.0\n */\nexport const PRIMARY_CARET_ID = 'primary';\n\n/**\n * The component for generating and handling carets.\n *\n * @since 0.1.0\n */\nexport class Caret extends Component {\n  /**\n   * The wrapper element that contains caret elements.\n   */\n  private wrapper: HTMLDivElement;\n\n  /**\n   * Stores the all registered Caret instances.\n   */\n  private carets: Record<string, CustomCaret> = {};\n\n  /**\n   * Holds the primary Caret instance.\n   */\n  private primary: CustomCaret;\n\n  /**\n   * Mounts the component.\n   * Uses the native caret on IE and mobile devices.\n   *\n   * @internal\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.create();\n\n    if ( ! isIE() && ! isMobile() ) {\n      this.register( PRIMARY_CARET_ID );\n      this.primary = this.get( PRIMARY_CARET_ID );\n      this.listen();\n    }\n  }\n\n  /**\n   * Creates a wrapper element that contains carets.\n   */\n  private create(): void {\n    this.wrapper = div( {\n      class        : CLASS_CARETS,\n      role         : 'presentation',\n      'aria-hidden': true,\n    }, this.elements.editor );\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    const { editable } = this.elements;\n    const { primary, Editor } = this;\n\n    this.bind( editable, 'focus', () => {\n      if ( ! Editor.readOnly ) {\n        primary.show();\n      }\n    } );\n\n    this.bind( editable, 'blur', () => {\n      primary.hide();\n    } );\n\n    this.update = rafThrottle( this.update.bind( this ), true );\n\n    this.on( EVENT_READONLY, ( e, readOnly ) => {\n      if ( readOnly ) {\n        primary.hide();\n      } else {\n        if ( Editor.isFocused() ) {\n          this.update();\n          primary.show();\n        }\n      }\n    } );\n\n    this.on( EVENT_SELECTED, this.onSelected, this );\n    this.on( EVENT_SELECTING, this.update );\n  }\n\n  /**\n   * Called when the selection state is changed.\n   *\n   * @param e         - An EventBusEvent object.\n   * @param Selection - A Selection instance.\n   */\n  private onSelected( e: EventBusEvent<Editor>, Selection: Selection ): void {\n    if ( ! this.Editor.readOnly ) {\n      if ( Selection.is( CHANGED, COLLAPSED, SELECTED ) ) {\n        this.update();\n      }\n    }\n  }\n\n  /**\n   * Updates the primary caret position on the animation frame.\n   */\n  private update(): void {\n    this.primary.move( this.Selection.get( false ).end );\n  }\n\n  /**\n   * Registers a new caret.\n   *\n   * @param id - The ID for the caret to register.\n   *\n   * @return The registered CustomCaret instance.\n   */\n  register( id: string ): CustomCaret {\n    const { carets } = this;\n    assert( ! carets[ id ] );\n\n    const caret = new CustomCaret( this.Editor, id, this.wrapper );\n    carets[ id ] = caret;\n\n    return caret;\n  }\n\n  /**\n   * Returns the primary or the specific CustomCaret instance.\n   *\n   * @param id - Optional. A caret ID.\n   *\n   * @return A CustomCaret instance if available, or otherwise `undefined`.\n   */\n  get( id = PRIMARY_CARET_ID ): CustomCaret | undefined {\n    return this.carets[ id ];\n  }\n\n  /**\n   * Returns the DOMRect object of the primary caret.\n   *\n   * @return A DOMRect object.\n   */\n  get rect(): DOMRect | null {\n    return this.Selection.getRect( true );\n  }\n}\n","import { Elements, EventBusEvent } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { CLASS_ANCHOR, CLASS_FOCUS, CLASS_LINE, CLASS_PRESERVED } from '../../constants/classes';\nimport {\n  EVENT_ANCHOR_LINE_CHANGED,\n  EVENT_CHUNK_MOVED,\n  EVENT_CHUNK_SUPPLIED,\n  EVENT_FOCUS_LINE_CHANGED,\n  EVENT_RESIZE,\n  EVENT_SCROLL,\n  EVENT_SCROLL_HEIGHT_CHANGED,\n  EVENT_SCROLLED,\n  EVENT_SCROLLER_SCROLL,\n  EVENT_SELECTED,\n  EVENT_SELECTING,\n  EVENT_WINDOW_SCROLL,\n} from '../../constants/events';\nimport { CHANGED, COLLAPSED } from '../../constants/selection-states';\nimport { Editor } from '../../core/Editor/Editor';\nimport {\n  abs,\n  addClass,\n  append,\n  assert,\n  assign,\n  attr,\n  before,\n  between,\n  ceil,\n  clamp,\n  debounce,\n  div,\n  floor,\n  hasClass,\n  html,\n  max,\n  min,\n  prepend,\n  queryAll,\n  rafThrottle,\n  rect,\n  remove,\n  removeClass,\n  slice,\n  tag,\n} from '../../utils';\nimport { Selection } from '../Selection/Selection';\nimport { MARGIN_LINES, SCROLL_END_DEBOUNCE_DURATION } from './constants';\n\n\n/**\n * The type for the data of the anchor or focus line.\n *\n * @since 0.1.0\n */\ntype LineBoundaryData = { line?: Element, row?: number };\n\n/**\n * The class for handling line elements.\n *\n * @since 0.1.0\n */\nexport class Chunk extends Component {\n  /**\n   * Indicates what row corresponds with the first line element.\n   * The number can be negative.\n   *\n   * @readonly\n   */\n  start = 0;\n\n  /**\n   * The number of margin lines before and after visible lines.\n   * The total number of lines will be `margin * 2 + visibleLines`.\n   *\n   * @readonly\n   */\n  margin = MARGIN_LINES;\n\n  /**\n   * The number of visible lines calculated by the editor height and the line height.\n   *\n   * @readonly\n   */\n  visibleLines: number;\n\n  /**\n   * The current offset amount from the top of the scroller element in pixel.\n   *\n   * @readonly\n   */\n  offsetY = 0;\n\n  /**\n   * The anchor line data.\n   */\n  private anchor: LineBoundaryData = {};\n\n  /**\n   * The focus line data.\n   */\n  private focus: LineBoundaryData  = {};\n\n  /**\n   * Indicates whether the anchor line is changed or not.\n   */\n  private anchorChanged: boolean;\n\n  /**\n   * Indicates whether the focus line is changed or not.\n   */\n  private focusChanged: boolean;\n\n  /**\n   * Holds the previous scroll position.\n   */\n  private scrollTop = 0;\n\n  /**\n   * Holds the scroller element.\n   */\n  private scroller: HTMLElement;\n\n  /**\n   * Holds the parent element of lines.\n   */\n  private parent: HTMLElement;\n\n  /**\n   * Indicates the chunk is active or not.\n   */\n  private active: boolean;\n\n  /**\n   * Caches the border positions.\n   */\n  private borderCache: [ number, number ];\n\n  /**\n   * Initializes the component.\n   *\n   * @internal\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    const { scroller } = elements;\n\n    this.scroller   = scroller;\n    this.parent     = elements.lines;\n    this.scrollTop  = window.pageYOffset + scroller.scrollTop;\n    this.active     = this.isVisible();\n    this.onScrolled = debounce( this.onScrolled.bind( this ), SCROLL_END_DEBOUNCE_DURATION );\n\n    this.supply();\n    this.remove();\n    this.listen();\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    const onScroll = rafThrottle( this.onScroll.bind( this ) );\n\n    this.bind( this.scroller, 'scroll', () => {\n      onScroll( true );\n      this.emit( EVENT_SCROLLER_SCROLL );\n    } );\n\n    this.bind( window, 'scroll', () => {\n      onScroll( false );\n      this.emit( EVENT_WINDOW_SCROLL );\n    } );\n\n    this.bind( window, 'scroll', rafThrottle( () => {\n      this.active      = this.isVisible();\n      this.borderCache = null;\n    } ) );\n\n    this.on( EVENT_RESIZE, () => {\n      this.borderCache = null;\n      this.reposition();\n    } );\n\n    this.on( EVENT_SCROLL_HEIGHT_CHANGED, () => {\n      this.supply();\n      this.borderCache = null;\n    } );\n\n    this.on( EVENT_SELECTED, this.onSelected, this, 0 );\n    this.on( EVENT_SELECTING, () => {\n      this.activate( true );\n\n      if ( this.focusChanged ) {\n        this.emitChangedEvent( true );\n      }\n    } );\n  }\n\n  /**\n   * Called whenever the selection state changes.\n   *\n   * @param e         - An EventBusEvent object.\n   * @param Selection - A Selection instance.\n   */\n  private onSelected( e: EventBusEvent<Editor>, Selection: Selection ): void {\n    if ( Selection.is( COLLAPSED, CHANGED ) ) {\n      this.activate( true );\n      this.activate( false );\n\n      if ( this.anchorChanged ) {\n        this.emitChangedEvent( false );\n      }\n\n      if ( this.focusChanged ) {\n        this.emitChangedEvent( true );\n      }\n    }\n  }\n\n  /**\n   * Called whenever the editor scrolls.\n   * Be aware that the `scrollY` property is not supported in IE.\n   *\n   * @return byScroller - Indicates whether the editor is scrolled by the editor element itself or the window.\n   */\n  private onScroll( byScroller: boolean ): void {\n    const top = window.pageYOffset + this.scroller.scrollTop;\n\n    if ( this.active ) {\n      const { scrollTop } = this;\n\n      if ( scrollTop < top ) {\n        this.moveDown();\n      } else if ( scrollTop > top ) {\n        this.moveUp();\n      }\n\n      this.emit( EVENT_SCROLL, true );\n      this.onScrolled( byScroller );\n    }\n\n    this.scrollTop = top;\n  }\n\n  /**\n   * Called the scroll likely ends.\n   *\n   * @return byScroller - Indicates whether the editor is scrolled by the editor element itself or the window.\n   */\n  private onScrolled( byScroller: boolean ): void {\n    this.emit( EVENT_SCROLLED, byScroller );\n  }\n\n  /**\n   * Activates the anchor or focus line.\n   * - If the selection is collapsed outside of the view,\n   *   the anchor and focus lines are merged into a single boundary line.\n   * - If the line is not available but there is a boundary,\n   *   that means the boundary has been added manually by the Selection component.\n   *\n   * @param focus - Determines whether to activate focus or anchor line.\n   */\n  private activate( focus: boolean ): void {\n    const className = focus ? CLASS_FOCUS : CLASS_ANCHOR;\n    const row       = this.Selection.get( false )[ focus ? 'end' : 'start' ][ 0 ];\n    const boundary  = this.getBoundary( focus );\n\n    let line = this.getLine( row );\n\n    if ( ! line ) {\n      const anotherBoundary = this.getBoundary( ! focus );\n\n      if ( anotherBoundary.row === row ) {\n        line = anotherBoundary.line;\n      }\n    }\n\n    if ( line ) {\n      if ( boundary.row !== row ) {\n        this.deactivate( focus );\n\n        addClass( line, className );\n        assign( boundary, { line, row } );\n\n        this.setBoundaryChanged( focus, true );\n      }\n    }\n  }\n\n  /**\n   * Deactivates the anchor or focus line if it is changed.\n   *\n   * @param focus - Determines whether to deactivate focus or anchor line.\n   */\n  private deactivate( focus: boolean ): void {\n    const boundary = this.getBoundary( focus );\n    const { line } = boundary;\n\n    if ( line ) {\n      if ( hasClass( line, CLASS_PRESERVED ) && ! hasClass( line, focus ? CLASS_ANCHOR : CLASS_FOCUS ) ) {\n        remove( line );\n      } else {\n        removeClass( line, focus ? CLASS_FOCUS : CLASS_ANCHOR );\n      }\n\n      boundary.line = null;\n      boundary.row  = null;\n    }\n  }\n\n  /**\n   * Emits the `changed` event for an anchor or focus line.\n   *\n   * @param focus - Determines whether to emit the event for the focus or anchor line.\n   */\n  private emitChangedEvent( focus: boolean ): void {\n    const boundary = this.getBoundary( focus );\n    assert( boundary.line );\n    this.emit( focus ? EVENT_FOCUS_LINE_CHANGED : EVENT_ANCHOR_LINE_CHANGED, boundary.line, boundary.row );\n\n    if ( focus ) {\n      this.focusChanged = false;\n    } else {\n      this.anchorChanged = false;\n    }\n  }\n\n  /**\n   * Sets the `anchorChanged` or `focusChanged` property.\n   *\n   * @param focus   - Determines which property should be changed.\n   * @param changed - The value for the property.\n   */\n  private setBoundaryChanged( focus: boolean, changed: boolean ): void {\n    if ( focus ) {\n      this.focusChanged = changed;\n    } else {\n      this.anchorChanged = changed;\n    }\n  }\n\n  /**\n   * Supplies line elements so that they can fill the viewport.\n   */\n  private supply(): void {\n    const { lineHeight, scrollerRect } = this.Measure;\n\n    const maxHeight    = min( scrollerRect.height, window.innerHeight );\n    const visibleLines = ceil( maxHeight / lineHeight );\n    const totalLength  = visibleLines + this.margin * 2;\n\n    if ( visibleLines !== this.visibleLines ) {\n      const { elms } = this;\n      const { length } = elms;\n      const diff = totalLength - length;\n\n      if ( diff > 0 ) {\n        this.html( this.start + length, diff, 'beforeend' );\n        this.emit( EVENT_CHUNK_SUPPLIED, this, diff );\n      }\n\n      this.visibleLines = visibleLines;\n    }\n  }\n\n  /**\n   * Removes unnecessary lines.\n   */\n  private remove(): void {\n    const { elms, length } = this;\n\n    if ( elms.length > length ) {\n      remove( elms.slice( length - elms.length ) );\n    }\n  }\n\n  /**\n   * Returns a HTML string of lines.\n   *\n   * @param start  - A start row index.\n   * @param length - A number of lines.\n   * @param where  - Optional. If provided, built HTML will be inserted to the parent by the `insertAdjacentHTML`.\n   *\n   * @return A built HTML.\n   */\n  private html( start: number, length: number, where?: InsertPosition ): string {\n    let html = '';\n\n    for ( let i = 0; i < length; i++ ) {\n      const line = this.lines[ start + i ];\n      html += tag( CLASS_LINE ) + ( line ? line.html : '' ) + '</div>';\n    }\n\n    if ( where ) {\n      this.parent.insertAdjacentHTML( where, html );\n    }\n\n    return html;\n  }\n\n  /**\n   * Moves down elements which are outside of the border.\n   */\n  private moveDown(): void {\n    const lengthToMove = this.computeLengthToMoveDown();\n\n    if ( lengthToMove >= this.length ) {\n      this.jumpIntoView();\n    } else if ( lengthToMove > 0 ) {\n      const { lineHeight } = this.Measure;\n\n      this.offsetY += lineHeight * lengthToMove;\n\n      if ( this.start < 0 ) {\n        this.offsetY = max( this.offsetY + this.start * lineHeight, 0 );\n      }\n\n      const { elms } = this;\n      const html = this.html( this.start + elms.length, lengthToMove );\n      elms[ elms.length - 1 ].insertAdjacentHTML( 'afterend', html );\n\n      remove( this.detach( 0, lengthToMove ) );\n\n      this.start += lengthToMove;\n\n      this.attach();\n      this.offset();\n\n      this.emit( EVENT_CHUNK_MOVED, this );\n    }\n  }\n\n  /**\n   * Moves up elements which are outside of the border.\n   */\n  private moveUp(): void {\n    const lengthToMove = this.computeLengthToMoveUp();\n\n    if ( lengthToMove >= this.length ) {\n      this.jumpIntoView();\n    } else if ( lengthToMove > 0 ) {\n      const { lineHeight } = this.Measure;\n\n      remove( this.detach( - lengthToMove ) );\n\n      const { elms } = this;\n      const html = this.html( this.start - lengthToMove, lengthToMove );\n      elms[ 0 ].insertAdjacentHTML( 'beforebegin', html );\n\n      this.start -= lengthToMove;\n      this.offsetY = max( this.offsetY - lineHeight * lengthToMove, 0 );\n\n      this.attach();\n      this.offset();\n\n      this.emit( EVENT_CHUNK_MOVED, this );\n    }\n  }\n\n  /**\n   * Computes the number of lines to move down.\n   *\n   * @return A number of lines to move down.\n   */\n  private computeLengthToMoveDown(): number {\n    if ( this.end < this.lines.length ) {\n      const { Measure: { lineHeight }, margin } = this;\n      const { top } = rect( this.parent );\n      const border = this.border[ 0 ];\n\n      if ( top + lineHeight * margin < border ) {\n        return floor( ( border - top ) / lineHeight );\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Computes the number of lines to move up.\n   *\n   * @return A number of lines to move up.\n   */\n  private computeLengthToMoveUp(): number  {\n    if ( this.start > 0 ) {\n      const { Measure: { lineHeight, padding: { bottom: paddingBottom } }, margin } = this;\n      const { top, bottom } = rect( this.parent );\n      const [ topBorder, bottomBorder ] = this.border;\n\n      if ( top > topBorder ) {\n        return margin + floor( ( top - topBorder ) / lineHeight );\n      }\n\n      if ( bottom - lineHeight * margin - paddingBottom > bottomBorder ) {\n        return floor( ( bottom - paddingBottom - bottomBorder ) / lineHeight );\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Detaches lines in the specified lines from the chunk.\n   * Both anchor and focus lines will be preserved, and others will be returned.\n   *\n   * @param start - A start index.\n   * @param end   - An end index.\n   *\n   * @return An array with detached elements.\n   */\n  private detach( start: number, end?: number ): HTMLElement[] {\n    return this.elms.slice( start, end ).reduce( ( detached: HTMLElement[], elm: HTMLElement ) => {\n      const isAnchor = hasClass( elm, CLASS_ANCHOR );\n      const isFocus  = hasClass( elm, CLASS_FOCUS );\n\n      if ( isAnchor || isFocus ) {\n        addClass( elm, CLASS_PRESERVED );\n        attr( elm, { 'aria-hidden': true } );\n      } else {\n        detached.push( elm );\n      }\n\n      return detached;\n    }, [] );\n  }\n\n  /**\n   * Attaches detached anchor and focus lines to the chunk.\n   * Do not move the anchor and focus lines to keep the native selection.\n   */\n  private attach(): void {\n    const { Selection, anchor: { line: anchorLine }, focus: { line: focusLine } } = this;\n    const { anchor, focus } = Selection;\n    const includesAnchor          = this.includes( anchor[ 0 ] );\n    const includesFocus           = this.includes( focus[ 0 ] );\n    const includesPreservedAnchor = includesAnchor && hasClass( anchorLine, CLASS_PRESERVED );\n    const includesPreservedFocus  = includesFocus && hasClass( focusLine, CLASS_PRESERVED );\n\n    if ( includesPreservedAnchor || includesPreservedFocus ) {\n      const anchorIndex = includesAnchor ? anchor[ 0 ] - this.start : -1;\n      const focusIndex  = includesFocus ? focus[ 0 ] - this.start : -1;\n      const firstIndex  = min( anchorIndex, focusIndex );\n      const secondIndex = max( anchorIndex, focusIndex );\n      const backward    = Selection.isBackward();\n\n      let firstElm: Element, secondElm: Element;\n\n      if ( firstIndex > -1 ) {\n        firstElm  = backward ? focusLine : anchorLine;\n        secondElm = backward ? anchorLine : focusLine;\n      } else {\n        secondElm = includesAnchor ? anchorLine : focusLine;\n      }\n\n      const { elms } = this;\n      const topElms    = firstElm ? elms.slice( 0, firstIndex ) : elms.slice( 0, secondIndex );\n      const middleElms = firstElm ? elms.slice( firstIndex + 1, secondIndex ) : [];\n      const bottomElms = elms.slice( secondIndex + 1 );\n\n      if ( includesPreservedAnchor ) {\n        removeClass( anchorLine, CLASS_PRESERVED );\n        attr( anchorLine, { 'aria-hidden': null } );\n        remove( elms[ anchorIndex ] );\n      }\n\n      if ( includesPreservedFocus && anchorIndex !== focusIndex ) {\n        removeClass( focusLine, CLASS_PRESERVED );\n        attr( focusLine, { 'aria-hidden': null } );\n        remove( elms[ focusIndex ] );\n      }\n\n      before( topElms, firstElm || secondElm );\n      before( middleElms, secondElm );\n\n      const { nextElementSibling } = secondElm;\n\n      if ( bottomElms.length && bottomElms[ 0 ] !== nextElementSibling ) {\n        before( bottomElms, nextElementSibling );\n      }\n    }\n  }\n\n  /**\n   * Offsets the parent element to make it visible inside the viewport.\n   *\n   * @param offsetY - Optional. Amount of the offset. If empty, the current `offsetY` will be used.\n   */\n  private offset( offsetY = this.offsetY ): void {\n    this.parent.style.top = `${ offsetY }px`;\n  }\n\n  /**\n   * Makes the chunk jump so that it is visible in the view.\n   */\n  private jumpIntoView(): void {\n    this.jump( this.Measure.closest( this.scroller.scrollTop ) );\n  }\n\n  /**\n   * Repositions the chunk to the current scroll top position.\n   */\n  private reposition(): void {\n    const top = this.Measure.getTop( this.start );\n\n    if ( top !== this.offsetY ) {\n      const focusRow      = this.focus.row;\n      const includesFocus = this.includes( focusRow );\n\n      this.jumpIntoView();\n\n      if ( includesFocus ) {\n        this.View.jump( focusRow );\n      }\n    }\n  }\n\n  /**\n   * Checks if the part of the scroller element is vertically visible or not.\n   * This method does not care the horizontal visibility.\n   *\n   * @return `true` if the scroller is visible, or otherwise `false`.\n   */\n  private isVisible(): boolean {\n    const { top, bottom } = rect( this.scroller );\n    const { innerHeight } = window;\n    return between( top, 0, innerHeight ) || between( bottom, 0, innerHeight ) || top < 0 && bottom > innerHeight;\n  }\n\n  /**\n   * Jumps to the specified row index.\n   * Use `View#jump()` instead if you want to scroll to the specific line.\n   *\n   * @param row - A row to jump to.\n   */\n  private jump( row: number ): void {\n    const { Measure, length } = this;\n    const { padding: { top: paddingTop }, lineHeight } = Measure;\n    const offsetRows = ceil( paddingTop / lineHeight );\n\n    this.start   = clamp( row - offsetRows, 0, max( this.lines.length - length + this.margin, 0 ) );\n    this.offsetY = Measure.getTop( this.start );\n\n    const elms = this.detach( 0 );\n\n    elms[ 0 ].insertAdjacentHTML( 'afterend', this.html( this.start, length ) );\n    remove( elms );\n\n    this.offset();\n    this.attach();\n\n    this.emit( EVENT_CHUNK_MOVED, this );\n  }\n\n  /**\n   * Returns the focus or anchor boundary data object which contains the line element and the row index.\n   *\n   * @param focus - Determines whether to return the focus or anchor boundary data.\n   *\n   * @return The boundary data object.\n   */\n  getBoundary( focus: boolean ): LineBoundaryData {\n    return focus ? this.focus : this.anchor;\n  }\n\n  /**\n   * Manually adds preserved line.\n   * This method should be only used by the Selection component.\n   * Note that the `changed` event will be emitted by the `activate` method.\n   *\n   * @internal\n   *\n   * @param focus - Determines whether to add a focus or anchor line.\n   * @param row   - A row index.\n   *\n   * @return A created preserved line element.\n   */\n  addPreservedLine( focus: boolean, row: number ): Element {\n    const { parent } = this;\n    const classes = `${ CLASS_LINE } ${ focus ? CLASS_FOCUS : CLASS_ANCHOR } ${ CLASS_PRESERVED }`;\n    const line    = div( { class: classes, 'aria-hidden': true } );\n\n    this.deactivate( focus );\n\n    html( line, this.lines[ row ].html );\n\n    if ( row < this.start ) {\n      prepend( parent, line );\n    } else {\n      append( parent, line );\n    }\n\n    assign( this.getBoundary( focus ), { line, row } );\n    this.setBoundaryChanged( focus, true );\n\n    return line;\n  }\n\n  /**\n   * Updates HTML of elements with the latest HTML of lines.\n   * If omitting elements, updates all elements in the chunk.\n   *\n   * @param elms  - Optional. Elements to update.\n   * @param start - Optional. A start index that corresponds with the first element.\n   */\n  sync( elms = this.elms, start = this.start ): void {\n    for ( let i = 0; i < elms.length; i++ ) {\n      const line = this.lines[ i + start ];\n      html( elms[ i ], line ? line.html : '' );\n    }\n  }\n\n  /**\n   * Syncs difference of the number of lines before syncing each HTML for performance.\n   * If the `diff` length is greater than the `margin`, this method does nothing.\n   *\n   * @param row  - A row index.\n   * @param diff - Difference of the number of lines before and after editing.\n   */\n  syncDiff( row: number, diff: number ): void {\n    if ( abs( diff ) < MARGIN_LINES ) {\n      const index = row - this.start;\n      const { elms } = this;\n\n      if ( diff > 0 ) {\n        if ( elms[ index ] ) {\n          before( elms.slice( - diff ), elms[ index ].nextElementSibling );\n        }\n      } else if ( diff < 0 ) {\n        append( this.parent, elms.slice( index + 1, index + 1 - diff ) );\n      }\n    }\n  }\n\n  /**\n   * Refreshes the chunk.\n   */\n  refresh(): void {\n    this.moveDown();\n    this.moveUp();\n  }\n\n  /**\n   * Scrolls to the specified top position\n   * and manually calls the `onScroll` handler for succeeding synchronous processes.\n   *\n   * @internal\n   *\n   * @param scrollTop - A scroll position.\n   */\n  scroll( scrollTop: number ): void {\n    this.scroller.scrollTop = scrollTop;\n    this.onScroll( true );\n  }\n\n  /**\n   * Returns the row index which the provided line element corresponds with.\n   *\n   * @param elm - A line element.\n   *\n   * @return The row index of the line element if available, or otherwise `-1`.\n   */\n  getRow( elm: HTMLElement ): number {\n    const row = this.elms.indexOf( elm );\n    return row > -1 ? row + this.start : -1;\n  }\n\n  /**\n   * Returns the line at the specified row if available.\n   *\n   * @param row - A row index.\n   *\n   * @return A line element if available, or `undefined` if not.\n   */\n  getLine( row: number ): Element | undefined {\n    return this.elms[ row - this.start ];\n  }\n\n  /**\n   * Checks if the chunk includes the specified row or not.\n   *\n   * @param row - A row index.\n   *\n   * @return `true` if the chunk includes the row, or otherwise `false`.\n   */\n  includes( row: number ): boolean {\n    return between( row, this.start, this.end );\n  }\n\n  /**\n   * Returns the end index of the chunk lines.\n   * This may be greater than the actual total number of lines.\n   *\n   * @return An end index of the chunk.\n   */\n  get end(): number {\n    return this.start + this.length - 1;\n  }\n\n  /**\n   * Returns the number of chunk lines without preserved ones.\n   *\n   * @return A number of line elements in the chunk.\n   */\n  get length(): number {\n    return this.visibleLines + this.margin * 2;\n  }\n\n  /**\n   * Returns chunk lines without preserved ones.\n   *\n   * @return An array containing line elements in the chunk.\n   */\n  get elms(): Element[] {\n    return slice( queryAll( this.parent, `.${ CLASS_LINE }:not(.${ CLASS_PRESERVED })` ) );\n  }\n\n  /**\n   * Returns borders to move elements up or down.\n   *\n   * @return A tuple containing top and bottom borders.\n   */\n  protected get border(): [ number, number ] {\n    if ( ! this.borderCache ) {\n      const domRect = rect( this.scroller );\n      const top     = max( domRect.top, 0 );\n      const bottom  = min( domRect.bottom, window.innerHeight );\n\n      this.borderCache = [ top, bottom ];\n    }\n\n    return this.borderCache;\n  }\n}\n","/**\n * Debounce duration for invoking the `scrollEnd()`.\n * This must not be less than the native scroll interval.\n *\n * @since 0.1.0\n */\nexport const SCROLL_END_DEBOUNCE_DURATION = 60;\n\n/**\n * The number of lines for margin.\n *\n * @since 0.1.0\n */\nexport const MARGIN_LINES = 10;\n","import { toArray } from '../../array';\r\n\r\n\r\n/**\r\n * Prepends children to the specified parent node.\r\n *\r\n * @param parent   - A parent node.\r\n * @param children - A child or children to prepend to the parent.\r\n */\r\nexport function prepend( parent: Node, children: Node | Node[] ): void {\r\n  toArray( children ).forEach( child => {\r\n    parent.insertBefore( child, parent.firstChild );\r\n  } );\r\n}\r\n","/**\n * The line break character.\n *\n * @private\n * @since 0.1.0\n */\nexport const LINE_BREAK = '\\n';\n\n/**\n * The space that has no width.\n *\n * @private\n * @since 0.1.0\n */\nexport const ZERO_WIDTH_SPACE = '\\ufeff';\n","import { arrayProto, splice } from '../../utils';\n\n\n/**\n * The abstract class for implementing an ArrayLike class.\n *\n * @since 0.1.0\n *\n * @typeParam T - A type for each element.\n */\nexport abstract class AbstractArrayLike<T> implements ArrayLike<T> {\n  /**\n   * The length of elements.\n   */\n  length = 0;\n\n  /**\n   * The index signature for behaving an array-like object.\n   */\n  [ index: number ]: T;\n\n  /**\n   * Implements the `push` method by using native method.\n   *\n   * @param items - Items to push.\n   */\n  push( ...items: T[] ): void {\n    arrayProto.push.apply( this, items );\n  }\n\n  /**\n   * Implements the `splice` method by using native method.\n   *\n   * @param start       - A start index.\n   * @param deleteCount - The number of items to delete from the start index.\n   * @param items       - New items to insert at the start index.\n   */\n  splice( start: number, deleteCount?: number, ...items: T[] ): void {\n    splice( this, start, deleteCount, ...items );\n  }\n\n  /**\n   * Clears elements.\n   */\n  clear(): void {\n    splice( this, 0, this.length );\n  }\n}\n","import { Token, TokenMatcher } from '@ryusei/code';\r\nimport { isUndefined } from '../../type/type';\r\n\r\n\r\n/**\r\n * Checks if the token matches the provided matcher or not.\r\n *\r\n * @param token   - A token to test.\r\n * @param matcher - An array described as a TokenMatcher tuple.\r\n */\r\nexport function matchesToken( token: Token, matcher: TokenMatcher ): boolean {\r\n  if ( token && token[ 0 ] === matcher[ 0 ] && ( ! matcher[ 1 ] || matcher[ 1 ].test( token[ 1 ] ) ) ) {\r\n    return isUndefined( matcher[ 2 ] ) || token[ 2 ].state === matcher[ 2 ];\r\n  }\r\n\r\n  return false;\r\n}\r\n","import { Options, Token, TokenInfo } from '@ryusei/code';\nimport { CATEGORY_COMMENT, CATEGORY_LINEBREAK, CATEGORY_SPACE } from '@ryusei/light';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { count, includes, isUndefined } from '../../utils';\n\n\n/**\n * Determines what HTML should be inserted to empty lines.\n * Be aware that changing this character may break the selection.\n *\n * @since 0.1.0\n */\nconst EMPTY_LINE_HTML = '<br>';\n\n/**\n * The class for managing data of each line.\n *\n * @since 0.1.0\n */\nexport class Line {\n  /**\n   * Holds options.\n   */\n  private readonly options: Options;\n\n  /**\n   * Holds the last update time.\n   */\n  private time = 0;\n\n  /**\n   * Keeps the built HTML string.\n   */\n  private htmlCache: string;\n\n  /**\n   * Keeps the built text.\n   */\n  private textCache: string;\n\n  /**\n   * Holds the depth of the first token.\n   */\n  depth = 0;\n\n  /**\n   * Holds tokens.\n   */\n  tokens: readonly Token[] = [];\n\n  /**\n   * A language of the first token.\n   */\n  language: string;\n\n  /**\n   * Indicates whether the first token is split into multilines or not.\n   */\n  split: boolean;\n\n  /**\n   * Depth of tabs.\n   */\n  indentDepth = 0;\n\n  /**\n   * The Line constructor.\n   *\n   * @param options - Options.\n   */\n  constructor( options: Options ) {\n    this.options = options;\n  }\n\n  /**\n   * Initializes some properties.\n   */\n  protected init(): void {\n    const { first } = this;\n    const info = ( first && first[ 2 ] ) || {} as TokenInfo;\n\n    this.depth       = info.depth || 0;\n    this.language    = info.language || '';\n    this.split       = info.split;\n    this.indentDepth = count( this.getIndent(), this.options.indent );\n    this.htmlCache   = undefined;\n    this.textCache   = undefined;\n  }\n\n  /**\n   * Sets new tokens and initializes properties.\n   * To avoid updating tokens by the old value made by async processes,\n   * pass the update time with `Date.now()`.\n   *\n   * @param tokens - An array with tokens.\n   * @param time   - Optional. If this time is older than the current time, tokens will not be updated.\n   */\n  set( tokens: readonly Token[], time?: number ): void {\n    if ( ! time || time > this.time ) {\n      this.tokens = tokens;\n      this.time   = time || Date.now();\n\n      this.init();\n    }\n  }\n\n  /**\n   * Returns the indent of the line if available.\n   *\n   * @return An indent string if available, or an empty string if not.\n   */\n  getIndent(): string {\n    const { first } = this;\n\n    if ( first ) {\n      if ( first[ 0 ] === CATEGORY_SPACE ) {\n        return first[ 1 ];\n      }\n\n      if ( first[ 0 ] === CATEGORY_COMMENT ) {\n        const match = this.text.match( new RegExp( `^${ this.options.indent }+` ) );\n        return match ? match[ 0 ] : '';\n      }\n    }\n\n    return '';\n  }\n\n  /**\n   * Returns the TokenInfo object at the index.\n   *\n   * @param index - A token index.\n   *\n   * @return A TokenInfo object if available, or `undefined` if not.\n   */\n  getInfo( index: number ): TokenInfo | undefined {\n    const token = this.tokens[ index ];\n    return token && token[ 2 ];\n  }\n\n  /**\n   * Returns the TokenInfo object at the col index.\n   *\n   * @param col - A col index.\n   *\n   * @return A TokenInfo object if available, or `undefined` if not.\n   */\n  getInfoAt( col: number ): TokenInfo | undefined {\n    const { tokens, tokens: { length } } = this;\n\n    if ( tokens.length ) {\n      if ( col === this.text.length ) {\n        return tokens[ length - 1 ][ 2 ];\n      }\n\n      for ( let i = 0; i < length; i++ ) {\n        const info = tokens[ i ][ 2 ];\n\n        if ( info.from <= col && col < info.to ) {\n          return info;\n        }\n      }\n    }\n  }\n\n  /**\n   * Checks if the line contains only a line break/spaces or not.\n   *\n   * @return `true` if the line contains only a line break or spaces. Otherwise, `false`.\n   */\n  isEmpty(): boolean {\n    const { tokens } = this;\n    return tokens.length === 1 && includes( [ CATEGORY_LINEBREAK, CATEGORY_SPACE ], tokens[ 0 ][ 0 ] );\n  }\n\n  /**\n   * Builds the HTML by tokens.\n   * This should not be pre-built in the init function for better performance.\n   *\n   * @return The HTML string of the line.\n   */\n  get html(): string {\n    if ( ! this.htmlCache ) {\n      let html = '';\n\n      for ( let i = 0; i < this.tokens.length; i++ ) {\n        const token = this.tokens[ i ];\n\n        if ( i === 0 && token[ 1 ] === LINE_BREAK ) {\n          html += EMPTY_LINE_HTML;\n          break;\n        } else {\n          html += token[ 2 ].html;\n        }\n      }\n\n      this.htmlCache = html || EMPTY_LINE_HTML;\n    }\n\n    return this.htmlCache;\n  }\n\n  /**\n   * Builds the text by tokens.\n   *\n   * @return The text of the line.\n   */\n  get text(): string {\n    if ( isUndefined( this.textCache ) ) {\n      this.textCache = this.tokens.reduce( ( text, token ) => {\n        if ( token[ 1 ] !== LINE_BREAK ) {\n          text += token[ 1 ];\n        }\n\n        return text;\n      }, '' );\n    }\n\n    return this.textCache;\n  }\n\n  /**\n   * Returns the first token.\n   *\n   * @return The first token.\n   */\n  get first(): Token {\n    return this.tokens[ 0 ];\n  }\n}\n","/*!\n * RyuseiLight.js\n * Version  : 1.2.0\n * License  : MIT\n * Copyright: 2020 Naotoshi Fujita\n */\n\n/**\r\n * The line break character.\r\n *\r\n * @private\r\n * @since 0.0.1\r\n */\nvar LINE_BREAK = '\\n';\nvar CATEGORY_KEYWORD = 'keyword';\nvar CATEGORY_CONSTANT = 'constant';\nvar CATEGORY_COMMENT = 'comment';\nvar CATEGORY_TAG = 'tag';\nvar CATEGORY_TAG_CLOSE = 'tag.close';\nvar CATEGORY_SELECTOR = 'selector';\nvar CATEGORY_ATRULE = 'atrule';\nvar CATEGORY_ATTRIBUTE = 'attr';\nvar CATEGORY_PROPERTY = 'prop';\nvar CATEGORY_VALUE = 'value';\nvar CATEGORY_VARIABLE = 'variable';\nvar CATEGORY_ENTITY = 'entity';\nvar CATEGORY_CDATA = 'cdata';\nvar CATEGORY_PROLOG = 'prolog';\nvar CATEGORY_IDENTIFIER = 'identifier';\nvar CATEGORY_STRING = 'string';\nvar CATEGORY_NUMBER = 'number';\nvar CATEGORY_BOOLEAN = 'boolean';\nvar CATEGORY_FUNCTION = 'function';\nvar CATEGORY_CLASS = 'class';\nvar CATEGORY_DECORATOR = 'decorator';\nvar CATEGORY_REGEXP = 'regexp';\nvar CATEGORY_OPERATOR = 'operator';\nvar CATEGORY_BRACKET = 'bracket';\nvar CATEGORY_DELIMITER = 'delimiter';\nvar CATEGORY_SYMBOL = 'symbol';\nvar CATEGORY_SPACE = 'space';\nvar CATEGORY_TEXT = 'text'; // Internal use only\n\nvar CATEGORY_LINEBREAK = 'lb';\n/**\r\n * Checks if the given subject is an object or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an object, or otherwise `false`.\r\n */\n\nfunction isObject(subject) {\n  return subject !== null && typeof subject === 'object';\n}\n/**\r\n * Checks if the given subject is an array or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an array, or otherwise `false`.\r\n */\n\n\nfunction isArray(subject) {\n  return Array.isArray(subject);\n}\n/**\r\n * Checks if the given subject is a string or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a string, or otherwise `false`.\r\n */\n\n\nfunction isString(subject) {\n  return typeof subject === 'string';\n}\n/**\r\n * Checks if the given subject is `undefined` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `undefined`, or otherwise `false`.\r\n */\n\n\nfunction isUndefined(subject) {\n  return typeof subject === 'undefined';\n}\n/**\r\n * Checks if the given subject is an HTMLElement instance or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\r\n */\n\n\nfunction isHTMLElement(subject) {\n  return subject instanceof HTMLElement;\n}\n/**\r\n * Push the provided value to an array only if the value is not an array.\r\n *\r\n * @param value - A value to push.\r\n *\r\n * @return An array containing the value, or the value itself if it is already an array.\r\n */\n\n\nfunction toArray(value) {\n  return isArray(value) ? value : [value];\n}\n/**\r\n * Adds classes to the element.\r\n *\r\n * @param elm     - An element to add classes to.\r\n * @param classes - Classes to add.\r\n */\n\n\nfunction addClass$1(elm, classes) {\n  toArray(classes).forEach(function (name) {\n    if (name) {\n      elm.classList.add(name);\n    }\n  });\n}\n/**\r\n * Appends children to the parent element.\r\n *\r\n * @param parent   - A parent element.\r\n * @param children - A child or children to append to the parent.\r\n */\n\n\nfunction append(parent, children) {\n  children = toArray(children);\n\n  for (var i = 0; i < children.length; i++) {\n    parent.appendChild(children[i]);\n  }\n}\n/**\r\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\r\n *\r\n * @param object   - An object to iterate over.\r\n * @param iteratee - An iteratee function that takes the value and key as arguments.\r\n *\r\n * @return A provided object itself.\r\n */\n\n\nfunction forOwn(object, iteratee) {\n  if (object) {\n    var keys = Object.keys(object);\n\n    for (var i = 0; i < keys.length; i++) {\n      iteratee(object[keys[i]], keys[i]);\n    }\n  }\n}\n/**\r\n * Assigns all own enumerable properties of all source objects to the provided object.\r\n * `undefined` in source objects will be skipped.\r\n *\r\n * @param object  - An object to assign properties to.\r\n * @param sources - Objects to assign properties from.\r\n *\r\n * @return An object assigned properties of the sources to.\r\n */\n\n\nfunction assign(object) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  sources.forEach(function (source) {\n    if (isObject(source)) {\n      forOwn(source, function (value, key) {\n        if (!isUndefined(source[key])) {\n          object[key] = source[key];\n        }\n      });\n    }\n  });\n  return object;\n}\n/**\r\n * Sets new attributes to the passed element if the `attrs` is an object literal,\r\n * or gets an attribute value from it if the `attrs` is a string.\r\n *\r\n * @param elm   - An element to set or get an attribute.\r\n * @param attrs - An attribute name as a string or new attributes as an object literal.\r\n */\n\n\nfunction attr(elm, attrs) {\n  if (isString(attrs)) {\n    return elm.getAttribute(attrs) || '';\n  }\n\n  if (isObject(attrs)) {\n    forOwn(attrs, function (value, key) {\n      elm.setAttribute(key, String(value));\n    });\n  }\n}\n/**\r\n * Creates an HTML element.\r\n *\r\n * @param tag     - A tag name.\r\n * @param classes - Optional. Classes to add.\r\n * @param parent  - Optional. A parent element where the created element is appended.\r\n */\n\n\nfunction create(tag, classes, parent) {\n  var elm = document.createElement(tag);\n\n  if (classes) {\n    addClass$1(elm, classes);\n  }\n\n  if (parent) {\n    append(parent, elm);\n  }\n\n  return elm;\n}\n/**\r\n * Returns an element that matches the provided selector.\r\n *\r\n * @param selector - A selector.\r\n * @param parent   - Optional. A parent element to start searching elements from.\r\n *\r\n * @return A found element or `null`.\r\n */\n\n\nfunction query(selector, parent) {\n  if (parent === void 0) {\n    parent = document;\n  }\n\n  return parent.querySelector(selector);\n}\n/**\r\n * Applies inline styles to the provided element by an object literal.\r\n *\r\n * @param elm    - An element to apply styles to.\r\n * @param styles - An object literal with styles.\r\n */\n\n\nfunction styles(elm, styles) {\n  forOwn(styles, function (value, key) {\n    elm.style[key] = String(value);\n  });\n}\n/**\r\n * Returns an open tag with provided classes.\r\n *\r\n * @param classes - Classes.\r\n * @param tag     - Optional. A tag name.\r\n */\n\n\nfunction tag(classes, tag) {\n  return \"<\" + (tag || 'div') + \" class=\\\"\" + classes.join(' ') + \"\\\">\";\n}\n/**\r\n * Sets or gets a text content of the provided node.\r\n *\r\n * @param node - A node to get or set a text.\r\n * @param text - Optional. A text to set.\r\n */\n\n\nfunction text(node, text) {\n  if (isUndefined(text)) {\n    return node.textContent;\n  }\n\n  node.textContent = text;\n}\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message for the error.\r\n */\n\n\nfunction assert(condition, message) {\n  if (message === void 0) {\n    message = '';\n  }\n\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n/**\r\n * The project code name.\r\n *\r\n * @since 0.0.1\r\n */\n\n\nvar PROJECT_CODE = 'ryuseilight';\n/**\r\n * The abbreviated project code.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar PROJECT_CODE_SHORT = 'rl';\n/**\r\n * Displays an error message on the console.\r\n *\r\n * @param message - An error message.\r\n */\n\nfunction error(message) {\n  console.error(\"[\" + PROJECT_CODE + \"] \" + message);\n}\n/**\r\n * Returns a function that invokes the provided function at most once in the specified duration.\r\n *\r\n * @since 0.0.1\r\n *\r\n * @param callback - A function to throttle.\r\n * @param interval - A throttle duration in milliseconds.\r\n *\r\n * @return A throttled function.\r\n */\n\n\nfunction throttle(callback, interval) {\n  var timer;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function () {\n        callback();\n        timer = null;\n      }, interval);\n    }\n  };\n}\n/**\r\n * Finds the provided key from a map and returns its index.\r\n *\r\n * @param map - A map to search in.\r\n * @param key - A key to search for.\r\n *\r\n * @return An index if found, or `-1` otherwise.\r\n */\n\n\nfunction find(map, key) {\n  for (var i = 0; i < map.length; i++) {\n    if (map[i][0] === key) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\r\n * Insert entries before the reference entry specified by the `ref`.\r\n * If the reference is not found, a new entry is created.\r\n *\r\n * @param map     - A map to insert values to.\r\n * @param ref     - A reference key.\r\n * @param entries - entries to insert.\r\n */\n\n\nfunction before(map, ref, entries) {\n  var index = find(map, ref);\n\n  if (index > -1) {\n    map.splice.apply(map, [index, 0].concat(entries));\n  } else {\n    map.push.apply(map, entries);\n  }\n}\n/**\r\n * Converts essential HTML special characters to HTML entities.\r\n *\r\n * @param string - A string to escape.\r\n *\r\n * @return An escaped string.\r\n */\n\n\nfunction escapeHtml(string) {\n  return string.replace(/&/g, '&amp;').replace(/</g, '&lt;');\n}\n/**\r\n * Checks if the string starts with the `char` or not.\r\n *\r\n * @param string - A string to check.\r\n * @param char   - A character.\r\n *\r\n * @return `true` if the string starts with the `char`, or otherwise `false`.\r\n */\n\n\nfunction startsWith(string, _char) {\n  return string.charAt(0) === _char;\n}\n/**\r\n * Checks if the RegExp supports the sticky flag or not.\r\n */\n\n\nvar isStickySupported = !isUndefined(/x/.sticky);\n/**\r\n * The class for creating a simple lexer by a Language object.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar Lexer = /*#__PURE__*/function () {\n  /**\r\n   * The Lexer constructor.\r\n   *\r\n   * @param language - A Language object.\r\n   */\n  function Lexer(language) {\n    this.language = language;\n    this.init(language);\n  }\n  /**\r\n   * Initializes the language object.\r\n   *\r\n   * @param language - A Language object to initialize.\r\n   */\n\n\n  var _proto = Lexer.prototype;\n\n  _proto.init = function init(language) {\n    var _this = this;\n\n    forOwn(language.grammar, function (tokenizers, key) {\n      language.grammar[key] = _this.merge(language, tokenizers);\n    });\n    forOwn(language.use, this.init.bind(this));\n  }\n  /**\r\n   * Includes tokenizers required by `#` annotation and flatten them.\r\n   *\r\n   * @param language   - A language object.\r\n   * @param tokenizers - Tokenizers.\r\n   *\r\n   * @return Merged tokenizers.\r\n   */\n  ;\n\n  _proto.merge = function merge(language, tokenizers) {\n    var merged = [];\n\n    for (var i = 0; i < tokenizers.length; i++) {\n      var tokenizer = tokenizers[i];\n      var _tokenizers$i = tokenizers[i],\n          category = _tokenizers$i[0],\n          regexp = _tokenizers$i[1];\n\n      if (startsWith(category, '#') && !regexp) {\n        merged.push.apply(merged, this.merge(language, language.grammar[category.slice(1)]));\n      } else {\n        (function () {\n          var flags = regexp.toString().match(/[gimsy]*$/)[0].replace(/[gy]/g, '');\n          var source = regexp.source + (isStickySupported ? '' : '|()');\n          forOwn(language.source, function (replacement, key) {\n            source = source.replace(new RegExp(\"%\" + key, 'g'), replacement.source);\n          });\n          tokenizer[1] = new RegExp(source, (isStickySupported ? 'y' : 'g') + flags);\n          merged.push(tokenizer);\n        })();\n      }\n    }\n\n    return merged;\n  }\n  /**\r\n   * Parses the text by the provided language and tokenizers.\r\n   *\r\n   * @param text       - A text to tokenize.\r\n   * @param language   - A Language object.\r\n   * @param tokenizers - An array with tokenizers.\r\n   * @param state      - Optional. The current state name.\r\n   *\r\n   * @return An index of the text where the handling ends.\r\n   */\n  ;\n\n  _proto.parse = function parse(text, language, tokenizers, state) {\n    var index = 0;\n    var position = 0;\n    this.depth++;\n\n    main: while (index < text.length && !this.aborted) {\n      for (var i = 0; i < tokenizers.length; i++) {\n        var tokenizer = tokenizers[i];\n        var regexp = tokenizer[1],\n            action = tokenizer[2];\n        regexp.lastIndex = index;\n        var match = regexp.exec(text);\n\n        if (!match || !match[0]) {\n          continue;\n        }\n\n        if (position < index) {\n          this.push([CATEGORY_TEXT, text.slice(position, index)], language, state);\n        }\n\n        if (action === '@back') {\n          position = index;\n          break main;\n        }\n\n        var offset = this.handle(match, language, tokenizer, state);\n        index += offset || 1;\n        position = index;\n\n        if (action === '@break') {\n          break main;\n        }\n\n        continue main;\n      }\n\n      index++;\n    }\n\n    if (position < index) {\n      this.push([CATEGORY_TEXT, text.slice(position)], language, state);\n    }\n\n    this.depth--;\n    return index;\n  }\n  /**\r\n   * Pushes the provided token to the lines array.\r\n   *\r\n   * @param token    - A token to push.\r\n   * @param language - A Language object.\r\n   * @param state    - A state name.\r\n   */\n  ;\n\n  _proto.push = function push(token, language, state) {\n    var depth = this.depth;\n    var category = token[0],\n        text = token[1];\n    var start = this.index;\n    var index = 0;\n    var from = 0;\n\n    while (index > -1 && !this.aborted) {\n      index = text.indexOf(LINE_BREAK, from);\n      var line = this.lines[this.index];\n      var empty = from === index && !line.length;\n      var code = empty ? LINE_BREAK : text.slice(from, index < 0 ? undefined : index);\n      var info = {\n        depth: depth,\n        language: language.id,\n        state: state\n      };\n\n      if (code) {\n        if (category !== CATEGORY_TEXT) {\n          info.head = index > -1 && !from;\n          info.tail = index < 0 && !!from;\n          info.split = index > -1 || !!from;\n          info.distance = this.index - start;\n        }\n\n        line.push([category === CATEGORY_TEXT && empty ? CATEGORY_LINEBREAK : category, code, info]);\n      }\n\n      if (index > -1) {\n        this.index++;\n        this.aborted = this.limit && this.index >= this.limit;\n\n        if (!this.aborted) {\n          from = index + 1;\n          this.lines[this.index] = [];\n        }\n      }\n    }\n  }\n  /**\r\n   * Handles the matched text.\r\n   *\r\n   * @param match     - A matched result.\r\n   * @param language  - A Language object.\r\n   * @param tokenizer - A tokenizer that has been matched with the text.\r\n   * @param state     - A state name.\r\n   *\r\n   * @return An index of the text where the handling ends.\r\n   */\n  ;\n\n  _proto.handle = function handle(match, language, tokenizer, state) {\n    var category = tokenizer[0];\n\n    if (!category) {\n      return 0;\n    }\n\n    var text = match[0];\n\n    if (tokenizer[3] === '@debug') {\n      // eslint-disable-next-line\n      console.log(text, tokenizer);\n    }\n\n    if (startsWith(category, '@')) {\n      assert(language.use);\n      var lang = language.use[category.slice(1)];\n      assert(lang);\n      return this.parse(text, lang, lang.grammar.main, category);\n    }\n\n    if (startsWith(category, '#')) {\n      var tokenizers = language.grammar[category.slice(1)];\n      assert(tokenizers);\n\n      if (tokenizer[2] === '@rest') {\n        text = match.input.slice(match.index);\n      }\n\n      return this.parse(text, language, tokenizers, category);\n    }\n\n    this.push([category, text], language, state);\n    return text.length;\n  }\n  /**\r\n   * Tokenizes the text by the current language.\r\n   *\r\n   * @param text  - A text to tokenize.\r\n   * @param limit - Optional. Limits the number of lines.\r\n   *\r\n   * @return An array with tokens.\r\n   */\n  ;\n\n  _proto.tokenize = function tokenize(text, limit) {\n    this.lines = [[]];\n    this.index = 0;\n    this.depth = -1;\n    this.limit = limit || 0;\n    this.aborted = false;\n    this.parse(text, this.language, this.language.grammar.main, '#main');\n    return this.lines;\n  };\n\n  return Lexer;\n}();\n\nvar ROOT = PROJECT_CODE;\nvar CONTAINER = PROJECT_CODE_SHORT + \"__container\";\nvar BODY = PROJECT_CODE_SHORT + \"__body\";\nvar CODE = PROJECT_CODE_SHORT + \"__code\";\nvar LINE = PROJECT_CODE_SHORT + \"__line\";\nvar TOKEN = PROJECT_CODE_SHORT + \"__token\";\nvar ACTIVE = 'is-active';\n/**\r\n * The class for providing the very simple event bus.\r\n *\r\n * @private\r\n * @since 0.0.1\r\n */\n\nvar EventBus = /*#__PURE__*/function () {\n  function EventBus() {\n    /**\r\n     * Holds handlers.\r\n     */\n    this.handlers = {};\n  }\n  /**\r\n   * Attaches a handler.\r\n   *\r\n   * @param event    - An event name.\r\n   * @param callback - A callback function to register.\r\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\r\n   */\n\n\n  var _proto2 = EventBus.prototype;\n\n  _proto2.on = function on(event, callback, priority) {\n    if (priority === void 0) {\n      priority = 10;\n    }\n\n    var handlers = this.handlers[event] = this.handlers[event] || [];\n    handlers.push({\n      callback: callback,\n      priority: priority\n    });\n    handlers.sort(function (handler1, handler2) {\n      return handler1.priority - handler2.priority;\n    });\n  }\n  /**\r\n   * Emits an event.\r\n   *\r\n   * @param event - An event name.\r\n   * @param args  - Optional. Any number of arguments to pass to callbacks.\r\n   */\n  ;\n\n  _proto2.emit = function emit(event) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    (this.handlers[event] || []).forEach(function (handler) {\n      handler.callback.apply(handler, args);\n    });\n  }\n  /**\r\n   * Destroys the event bus.\r\n   */\n  ;\n\n  _proto2.destroy = function destroy() {\n    this.handlers = {};\n  };\n\n  return EventBus;\n}();\n/**\r\n * Stores all Extensions functions.\r\n */\n\n\nvar Extensions = {};\n/**\r\n * The class for highlighting code via provided tokens.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar Renderer = /*#__PURE__*/function () {\n  /**\r\n   * The Renderer constructor.\r\n   *\r\n   * @param lines   - Lines with tokens to render.\r\n   * @param info    - The language info object.\r\n   * @param root    - Optional. A root element to highlight.\r\n   * @param options - Options.\r\n   */\n  function Renderer(lines, info, root, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    /**\r\n     * Holds lines with tokens.\r\n     */\n    this.lines = [];\n    /**\r\n     * Holds the EventBus instance.\r\n     */\n\n    this.event = new EventBus();\n    this.lines = lines;\n    this.info = info;\n    this.root = root;\n    this.options = options;\n    this.init();\n  }\n  /**\r\n   * Adds extensions.\r\n   *\r\n   * @param extensions - An object literal with Component functions.\r\n   */\n\n\n  Renderer.compose = function compose(extensions) {\n    forOwn(extensions, function (Component, name) {\n      Extensions[name] = Component;\n    });\n  }\n  /**\r\n   * Initializes the instance.\r\n   */\n  ;\n\n  var _proto3 = Renderer.prototype;\n\n  _proto3.init = function init() {\n    var _this2 = this;\n\n    var lines = this.lines;\n\n    if (lines.length) {\n      var tokens = lines[lines.length - 1];\n\n      if (!tokens.length || tokens.length === 1 && !tokens[0][1].trim()) {\n        // Removes the last empty line.\n        lines.pop();\n      }\n    }\n\n    forOwn(Extensions, function (Component) {\n      Component(_this2);\n    });\n    this.event.emit('mounted');\n  }\n  /**\r\n   * Renders lines as HTML.\r\n   *\r\n   * @param append - A function to add fragments to the HTML string.\r\n   *\r\n   * @return A rendered HTML string.\r\n   */\n  ;\n\n  _proto3.renderLines = function renderLines(append) {\n    var event = this.event;\n    var tagName = this.options.span ? 'span' : 'code';\n\n    for (var i = 0; i < this.lines.length; i++) {\n      var tokens = this.lines[i];\n      var classes = [LINE];\n      event.emit('line:open', append, classes, i);\n      append(tag(classes));\n\n      var _loop = function _loop(j) {\n        var token = tokens[j];\n        var categories = token[0].split('.');\n        var className = PROJECT_CODE_SHORT + \"__\" + categories[0];\n        var modifiers = categories.slice(1).map(function (sub) {\n          return className + \"--\" + sub;\n        });\n        var classes = [TOKEN, className].concat(modifiers);\n        event.emit('token', token, classes);\n        append(\"\" + tag(classes, tagName) + escapeHtml(token[1]) + \"</\" + tagName + \">\");\n      };\n\n      for (var j = 0; j < tokens.length; j++) {\n        _loop(j);\n      }\n\n      append('</div>');\n      event.emit('line:closed', append, i);\n    }\n  }\n  /**\r\n   * Returns all lines and wrapper elements.\r\n   *\r\n   * @param pre - Whether to wrap elements by `pre` or not.\r\n   *\r\n   * @return An HTML string.\r\n   */\n  ;\n\n  _proto3.html = function html(pre) {\n    var event = this.event;\n    var closeTag = '</div>';\n    var html = '';\n\n    var append = function append(fragment) {\n      html += fragment;\n    };\n\n    if (pre) {\n      html += tag([ROOT + \" \" + ROOT + \"--\" + this.info.id], 'pre');\n    }\n\n    var containerClasses = [CONTAINER];\n    event.emit('open', append, containerClasses);\n    html += tag(containerClasses);\n    var bodyClasses = [\"\" + BODY + (this.options.wrap ? \" \" + BODY + \"--wrap\" : '')];\n    event.emit('body:open', append, bodyClasses);\n    html += tag(bodyClasses);\n    event.emit('code:open', append);\n    html += tag([CODE]);\n    this.renderLines(append);\n    html += closeTag; // code\n\n    event.emit('body:close', append);\n    html += closeTag; // body\n\n    event.emit('close', append);\n    html += closeTag; // container\n\n    event.emit('closed', append);\n\n    if (pre) {\n      html += \"</pre>\";\n    }\n\n    return html;\n  }\n  /**\r\n   * Destroys the instance.\r\n   */\n  ;\n\n  _proto3.destroy = function destroy() {\n    this.event.emit('destroy');\n    this.event.destroy();\n  };\n\n  return Renderer;\n}();\n/**\r\n * The data attribute name for a language.\r\n *\r\n * @since 0.0.1\r\n */\n\n\nvar ATTRIBUTE_LANGUAGE = \"data-\" + PROJECT_CODE_SHORT + \"-language\";\nvar REGEXP_NUMBER = /[+-]?(\\d+\\.?\\d*|\\d*\\.?\\d+)([eE][+-]?\\d+)?/;\nvar REGEXP_BOOLEAN = /\\b(?:true|false)\\b/;\nvar REGEXP_BRACKET = /[[\\]{}()]/;\nvar REGEXP_SPACE = /[ \\t]+/;\nvar REGEXP_QUOTE = /'(?:\\\\'|.)*?'/;\nvar REGEXP_DOUBLE_QUOTE = /\"(?:\\\\\"|.)*?\"/;\nvar REGEXP_MULTILINE_COMMENT = /\\/\\*[\\s\\S]*?(\\*\\/|$)/;\nvar REGEXP_SLASH_COMMENT = /\\/\\/.*/;\nvar REGEXP_GENERAL_KEYWORDS = /\\b(?:break|catch|class|continue|do|else|extends|finally|for|function|if|implements|in|instanceof|interface|new|null|return|throw|try|while)\\b/;\n/**\r\n * Returns the CSS language definition.\r\n *\r\n * @return A Language object.\r\n */\n\nfunction css() {\n  return {\n    id: 'css',\n    name: 'CSS',\n    grammar: {\n      main: [['#common'], // An atrule without a block\n      ['#findSingleAtrule'], // Blocks including atrules\n      ['#findBlock']],\n      findBlock: [['#block', /(?:(?![\\t\\n\\r ;\\{\\}])[\\s\\S])(?:(?![;\\{\\}])[\\s\\S])*\\{[\\s\\S]*?\\}/, '@rest']],\n      findSingleAtrule: [['#atrule', /@(?:(?![;\\{])[\\s\\S])+?;/]],\n      // Finds atrules before { and ;\n      findAtrule: [['#atrule', /@(?:(?![;\\{])[\\s\\S])*?(?=[;\\{])/]],\n      // May not start with digits\n      findSelector: [['#selector', /(?:(?![\\t\\n\\r ;\\{\\}])[\\s\\S])[\\s\\S]*?(?=\\{)/]],\n      common: [[CATEGORY_STRING, /([\"'])[\\s\\S]*?(?:(?!\\\\)[\\s\\S])\\1/], [CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT], [CATEGORY_SPACE, REGEXP_SPACE]],\n      block: [['#inner', /{/, '@rest'], [CATEGORY_BRACKET, /}/, '@break'], ['#findAtrule'], ['#findSelector'], [CATEGORY_SPACE, REGEXP_SPACE]],\n      inner: [[CATEGORY_BRACKET, /{/], ['#common'], ['#findBlock'], ['#props'], ['#findAtrule'], ['', /}/, '@back']],\n      atrule: [['#common'], ['#url', /\\burl\\(/, '@rest'], [CATEGORY_SPACE, REGEXP_SPACE], [CATEGORY_ATRULE, /[^\\s();]+/], [CATEGORY_DELIMITER, /[:;,]/], ['#paren', /\\(/, '@rest']],\n      paren: [[CATEGORY_BRACKET, /^\\(/], ['#common'], ['#paren', /\\(/, '@rest'], [CATEGORY_BRACKET, /\\)/, '@break'], ['#props']],\n      selector: [['#common'], [CATEGORY_OPERATOR, /[>+~]/], [CATEGORY_BRACKET, /[[\\]()]/], [CATEGORY_DELIMITER, /=/], [CATEGORY_SELECTOR, /::?\\S+/], [CATEGORY_SELECTOR, /[\\W\\d]\\S+/], [CATEGORY_TAG, /\\b[a-z]+|\\*/i], [CATEGORY_SELECTOR, /\\S+/]],\n      url: [['#common'], [CATEGORY_FUNCTION, /^url/], [CATEGORY_BRACKET, /\\(/], [CATEGORY_STRING, /[^)]+/], [CATEGORY_BRACKET, /\\)/, '@break']],\n      props: [[CATEGORY_PROPERTY, /[a-z0-9-_\\xA0-\\uFFFF]+(?=:)/i], ['#url', /\\burl\\(/, '@rest'], [CATEGORY_FUNCTION, /\\b[\\w-]+(?=\\()\\b/], [CATEGORY_KEYWORD, /!important|\\b(?:initial|inherit|unset)/], [CATEGORY_PROPERTY, /[a-z0-9-]+(?=:)/], [CATEGORY_NUMBER, /#([0-9a-f]{6}|[0-9a-f]{3})/i], [CATEGORY_NUMBER, /\\bU\\+[0-9a-f?-]+/i], [CATEGORY_NUMBER, /[+-]?(\\d+\\.?\\d*|\\d*\\.?\\d+)/], [CATEGORY_DELIMITER, /[:;,]/], ['#paren', /\\(/, '@rest'], [CATEGORY_BRACKET, /[[\\])]/], [CATEGORY_SPACE, REGEXP_SPACE]]\n    }\n  };\n}\n/**\r\n * Returns the JavaScript language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction javascript() {\n  return {\n    id: 'javascript',\n    name: 'JavaScript',\n    alias: ['js'],\n    source: {\n      func: /[_$a-z\\xA0-\\uFFFF][_$a-z0-9\\xA0-\\uFFFF]*/\n    },\n    grammar: {\n      main: [[CATEGORY_STRING, REGEXP_QUOTE], [CATEGORY_STRING, REGEXP_DOUBLE_QUOTE], ['#backtick', /`/, '@rest'], [CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT], [CATEGORY_COMMENT, REGEXP_SLASH_COMMENT], [CATEGORY_REGEXP, /\\/(\\[.*?]|\\\\\\/|.)+?\\/[gimsuy]*/], [CATEGORY_KEYWORD, REGEXP_GENERAL_KEYWORDS], [CATEGORY_KEYWORD, /\\b(?:as|async|await|case|catch|const|debugger|default|delete|enum|export|from|import|let|package|private|protected|public|super|switch|static|this|typeof|undefined|var|void|with|yield)\\b/], [CATEGORY_KEYWORD, /\\b((get|set)(?=\\s+%func))/i], [CATEGORY_CLASS, /\\b[A-Z][\\w$]*\\b/], [CATEGORY_FUNCTION, /%func(?=\\s*\\()/i], [CATEGORY_BOOLEAN, REGEXP_BOOLEAN], [CATEGORY_DECORATOR, /@[^\\s(@]+/], [CATEGORY_IDENTIFIER, /\\b[a-z_$][\\w$]*\\b/], [CATEGORY_NUMBER, REGEXP_NUMBER], [CATEGORY_OPERATOR, /=>/], [CATEGORY_OPERATOR, /\\+[+=]?|-[-=]?|\\*\\*?=?|[/%^]=?|&&?=?|\\|\\|?=?|\\?\\??=?|<<?=?|>>>=?|>>?=?|[!=]=?=?|[~:^]/], [CATEGORY_BRACKET, REGEXP_BRACKET], [CATEGORY_DELIMITER, /[;.,]+/], [CATEGORY_SPACE, REGEXP_SPACE]],\n      backtick: [[CATEGORY_STRING, /^`/], [CATEGORY_STRING, /(\\$[^{]|\\\\[$`]|[^`$])+/], ['#expression', /\\${/, '@rest'], [CATEGORY_STRING, /`/, '@break']],\n      expression: [[CATEGORY_DELIMITER, /^\\${/], [CATEGORY_DELIMITER, /}/, '@break'], ['#main']]\n    }\n  };\n}\n/**\r\n * Returns the HTML language definition.\r\n *\r\n * @param options - Optional. Options.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction html(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var script = (options.script || javascript)();\n  var style = (options.style || css)();\n  var cdata = [CATEGORY_CDATA, /<!\\[CDATA\\[[\\s\\S]*\\]\\]>/i]; // Embedded scripts or styles may contain CDATA sections.\n\n  script.grammar.main.unshift(cdata);\n  style.grammar.main.unshift(cdata);\n  return {\n    id: 'html',\n    alias: ['markup'],\n    name: 'HTML',\n    use: {\n      script: script,\n      style: style\n    },\n    grammar: {\n      main: [[CATEGORY_COMMENT, /<!\\x2D\\x2D[\\s\\S]*?\\x2D\\x2D>/], [CATEGORY_PROLOG, /<!DOCTYPE[\\s\\S]*?>/i], cdata, ['#script', /<script[\\s\\S]*?>[\\s\\S]*?<\\/script>/], ['#style', /<style[\\s\\S]*?>[\\s\\S]*?<\\/style>/], ['#tag', /<[\\s\\S]*?>/], [CATEGORY_ENTITY, /&[\\da-z]+;|&#\\d+;/i], [CATEGORY_SPACE, REGEXP_SPACE]],\n      script: [['#tag', /^<script[\\s\\S]*?>/], cdata, ['@script', /[\\s\\S]+(?=<\\/script>)/], ['#tag', /<\\/script>/]],\n      style: [['#tag', /^<style[\\s\\S]*?>/], ['@style', /[\\s\\S]+(?=<\\/style>)/], ['#tag', /<\\/style>/]],\n      tag: [['#closeTag', /<\\/.+>/], ['#tagContent']],\n      closeTag: [[CATEGORY_TAG_CLOSE, /[^\\s/<>\"'=]+/], ['#tagContent']],\n      tagContent: [['#attr', /[\\t\\n\\r ]+[\\s\\S]+(?=[\\t\\n\\r \\/>])/], [CATEGORY_TAG, /[^\\s/<>\"'=]+/], [CATEGORY_BRACKET, /[<>]/], [CATEGORY_DELIMITER, /[/]/]],\n      attr: [[CATEGORY_SPACE, REGEXP_SPACE], [CATEGORY_VALUE, /(['\"])(\\\\\\1|.)*?\\1/], [CATEGORY_DELIMITER, /[/=]/], [CATEGORY_ATTRIBUTE, /[^\\s/>\"'=]+/]]\n    }\n  };\n}\n/**\r\n * Returns the JSON language definition.\r\n *\r\n * @link https://www.json.org/json-en.html\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction json() {\n  return {\n    id: 'json',\n    name: 'JSON',\n    grammar: {\n      main: [[CATEGORY_PROPERTY, /\".*?[^\\\\]\"(?=:)/], [CATEGORY_STRING, REGEXP_DOUBLE_QUOTE], [CATEGORY_KEYWORD, /\\bnull\\b/], [CATEGORY_NUMBER, /[+-]?(\\d+\\.?\\d*)([eE][+-]?\\d+)?/], [CATEGORY_BRACKET, /[{}[\\]]/], [CATEGORY_BOOLEAN, REGEXP_BOOLEAN], [CATEGORY_OPERATOR, /:/], [CATEGORY_DELIMITER, /,/], [CATEGORY_SPACE, REGEXP_SPACE]]\n    }\n  };\n}\n/**\r\n * Returns the JSX language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction jsx(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var language = assign((options.base || javascript)(), {\n    id: 'jsx',\n    name: 'JSX',\n    alias: ['react']\n  });\n  var grammar = language.grammar;\n  before(grammar.main, CATEGORY_CLASS, [['#findPairedTag'], ['#findSelfClosedTag']]);\n  assign(grammar, {\n    // This doesn't pick correct paired tags if nested, but they are incrementally searched later.\n    findPairedTag: [['#pairedTag', /(?:<[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*?([0-9A-Z_a-z]+)[\\s\\S]*?>[\\s\\S]*?<\\/\\1>)|<[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*?>[\\s\\S]*?<\\/>/, '@rest']],\n    // Should not match the closing delimiter inside `{}`, `''` and `\"\"`.\n    findSelfClosedTag: [['#selfClosedTag', /<(?:\\{[\\s\\S]*?\\}|([\"'])[\\s\\S]*?\\1|(?:(?!>)[\\s\\S]))+?\\/>/]],\n    findBracket: [['#code', /{/, '@rest']],\n    pairedTag: [['#openTag', /^</, '@rest'], ['#findBracket'], ['#findPairedTag'], ['#findSelfClosedTag'], ['#tagName', /<\\/([\\w][^\\s]*?)?>/, '@break'], [CATEGORY_SPACE, REGEXP_SPACE]],\n    code: [[CATEGORY_BRACKET, /^{/], [CATEGORY_BRACKET, /}/, '@break'], ['#findBracket'], ['#main']],\n    selfClosedTag: [['#openTag', /^</, '@rest']],\n    openTag: [['#tagName', /<\\s*[^\\s/>\"'=]*/], ['#findBracket'], [CATEGORY_ATTRIBUTE, /[^\\s/>\"'=]+/], [CATEGORY_VALUE, /(['\"])(\\\\\\1|.)*?\\1/], [CATEGORY_SPACE, REGEXP_SPACE], [CATEGORY_DELIMITER, /[/=]/], [CATEGORY_BRACKET, />/, '@break']],\n    tagName: [[CATEGORY_BRACKET, /[<>]/], [CATEGORY_SPACE, REGEXP_SPACE], [CATEGORY_DELIMITER, /\\//], [CATEGORY_CLASS, /[A-Z][\\w$-]*/], [CATEGORY_TAG, /[^\\s/>\"'=]+/]]\n  });\n  return language;\n}\n/**\r\n * Returns the None language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction none() {\n  return {\n    id: 'none',\n    name: '',\n    grammar: {\n      main: []\n    }\n  };\n}\n/**\r\n * Returns the SCSS language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction scss() {\n  var language = assign(css(), {\n    id: 'scss',\n    name: 'SCSS'\n  });\n  var grammar = language.grammar;\n  assign(grammar, {\n    findBlock: [\n    /**\r\n     * Include: div {}, .class {}, #id {}, * {}, *{}, #{ $variable } {}, .something__#{ $variable } {}\r\n     * Exclude: #{ variable }: value\r\n     */\n    ['#block', /([\\*-_a-z]|#\\{(?:(?!;)[\\s\\S])*?\\}|((#\\{(?:(?!;)[\\s\\S])*?\\}|(?:(?![\\t-\\r ;\\{\\}\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF])[\\s\\S]))(#\\{(?:(?!;)[\\s\\S])*?\\}|(?:(?![#;\\{\\}])[\\s\\S])|#(?:(?!\\{)[\\s\\S]))+?))(?!#)\\{[\\s\\S]*?\\}/i, '@rest']],\n    // May contain #{} interpolation\n    findSingleAtrule: [['#atrule', /@(#\\{|(?:(?![;\\{])[\\s\\S]))+?;/]],\n    findAtrule: [['#atrule', /@(#\\{|(?:(?![;\\{])[\\s\\S]))*?(?=[;\\{])/]],\n    // May contain #{} interpolation\n    findSelector: [['#selector', /(?:(?!;)[\\s\\S])*?(?:(?!#)[\\s\\S])(?=\\{)/, '']],\n    findInterp: [['#interp', /#{/, '@rest']],\n    common: [['#string'], [CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT], [CATEGORY_COMMENT, REGEXP_SLASH_COMMENT], [CATEGORY_DELIMITER, /;/], [CATEGORY_SPACE, REGEXP_SPACE]],\n    string: [['#singleQuote', /'/, '@rest'], ['#doubleQuote', /\"/, '@rest']],\n    singleQuote: [[CATEGORY_STRING, /^'/], ['#findInterp'], [CATEGORY_STRING, /(\\\\'|#[^{]|[^'#])+/], [CATEGORY_STRING, /'/, '@break']],\n    doubleQuote: [[CATEGORY_STRING, /^\"/], ['#findInterp'], [CATEGORY_STRING, /(\\\\\"|#[^{]|[^\"#])+/], [CATEGORY_STRING, /\"/, '@break']],\n    selector: [['#common'], ['#findInterp'], [CATEGORY_OPERATOR, /[>+~]/], [CATEGORY_BRACKET, /[[\\]()]/], [CATEGORY_DELIMITER, /=/], [CATEGORY_SELECTOR, /::?\\S+(?=#{)/], [CATEGORY_SELECTOR, /[\\W\\d]\\S+(?=#{)/], [CATEGORY_TAG, /\\b[a-zA-Z]+\\b|\\*/], [CATEGORY_SELECTOR, /([^#\\s]|#[^{\\s])+/]],\n    url: [['#common'], ['#findInterp'], [CATEGORY_FUNCTION, /^url/], [CATEGORY_BRACKET, /\\(/], [CATEGORY_STRING, /[^)]+(?=#{)/], [CATEGORY_STRING, /[^)]+/], [CATEGORY_BRACKET, /\\)/, '@break']],\n    interp: [[CATEGORY_DELIMITER, /#{/], [CATEGORY_DELIMITER, /}/, '@break'], ['#common'], ['#props']]\n  });\n  grammar.inner.unshift(['#findInterp']);\n  before(grammar.atrule, '#url', [['#findInterp']]);\n  before(grammar.props, CATEGORY_PROPERTY, [['#findInterp'], [CATEGORY_VARIABLE, /\\$[\\w-_]+/]]);\n  return language;\n}\n/**\r\n * Returns the XML language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction xml() {\n  var language = assign(html(), {\n    id: 'xml',\n    name: 'XML',\n    alias: []\n  });\n  language.grammar.main.unshift([CATEGORY_PROLOG, /<\\?[\\s\\S]*?\\?>/]);\n  return language;\n}\n/**\r\n * Returns the XML language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction svg() {\n  return assign(xml(), {\n    id: 'svg',\n    name: 'SVG',\n    alias: []\n  });\n}\n/**\r\n * Returns the Typescript language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction typescript() {\n  var language = assign(javascript(), {\n    id: 'typescript',\n    name: 'TypeScript',\n    alias: ['ts']\n  });\n  var grammar = language.grammar;\n  var main = grammar.main;\n  before(main, CATEGORY_KEYWORD, [[CATEGORY_KEYWORD, /\\b(?:declare|keyof|namespace|readonly|type|string|number|boolean|bigint|symbol|object|any|never|unknown|infer|is)\\b/]]);\n  before(main, CATEGORY_FUNCTION, [['#functions', /([_$a-z\\xA0-\\uFFFF][_$a-z0-9\\xA0-\\uFFFF]*)?(?:<[^>]+?>)?\\s*?\\(/]]);\n  assign(grammar, {\n    functions: [[CATEGORY_FUNCTION, /^[\\w$]+/]].concat(main.filter(function (tokenizer) {\n      return tokenizer[0] !== '#functions';\n    }))\n  });\n  return language;\n}\n/**\r\n * Returns the TSX language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction tsx() {\n  return assign(jsx({\n    base: typescript\n  }), {\n    id: 'tsx',\n    name: 'TSX'\n  });\n}\n/**\r\n * Returns the VUE language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction vue(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var language = assign(html(options), {\n    id: 'vue',\n    name: 'Vue',\n    alias: []\n  }); // Vue uses Mustache syntax for writing code inside tags.\n\n  language.grammar.main.push(['@script', /{{[\\s\\S]*?}}/]);\n  return language;\n} // export { common }     from './common/common';\n\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  css: css,\n  html: html,\n  javascript: javascript,\n  json: json,\n  jsx: jsx,\n  none: none,\n  scss: scss,\n  svg: svg,\n  tsx: tsx,\n  typescript: typescript,\n  vue: vue,\n  xml: xml\n});\n/**\r\n * Stores all Lexer instances.\r\n */\n\nvar lexers = {};\n/**\r\n * The class that tokenizes code for syntax highlighting.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar RyuseiLight = /*#__PURE__*/function () {\n  /**\r\n   * The RyuseiLight constructor.\r\n   *\r\n   * @param options  - Optional. Options.\r\n   */\n  function RyuseiLight(options) {\n    /**\r\n     * Holds all renderers.\r\n     */\n    this.renderers = [];\n    this.options = assign({}, options);\n  }\n  /**\r\n   * Registers languages.\r\n   *\r\n   * @param languages - A Language object or objects.\r\n   */\n\n\n  RyuseiLight.register = function register(languages) {\n    toArray(languages).forEach(function (language) {\n      var id = language.id;\n\n      if (id && !lexers[id]) {\n        (language.alias || []).concat(id).forEach(function (id) {\n          lexers[id] = new Lexer(language);\n        });\n      }\n    });\n  }\n  /**\r\n   * Tokenizes the provided string.\r\n   *\r\n   * @param code     - A string to tokenize.\r\n   * @param language - A language ID.\r\n   * @param limit    - Optional. Limits the (ideal) number of lines.\r\n   *\r\n   * @return An array of arrays with tokens as [ string, string ].\r\n   */\n  ;\n\n  RyuseiLight.tokenize = function tokenize(code, language, limit) {\n    return RyuseiLight.getLexer(language).tokenize(code, limit);\n  }\n  /**\r\n   * Checks if the given language has been already registered or not.\r\n   *\r\n   * @param language - A language to check.\r\n   */\n  ;\n\n  RyuseiLight.has = function has(language) {\n    return !!lexers[language];\n  }\n  /**\r\n   * Returns a registered Lexer instance.\r\n   * If it's not found, the `none` lexer will be returned.\r\n   *\r\n   * @param language - A language name.\r\n   */\n  ;\n\n  RyuseiLight.getLexer = function getLexer(language) {\n    if (!lexers.none) {\n      RyuseiLight.register(none());\n    }\n\n    return lexers[language] || lexers.none;\n  }\n  /**\r\n   * Returns a new Renderer instance.\r\n   *\r\n   * @param code    - A code to highlight.\r\n   * @param elm     - Optional. An element to highlight.\r\n   * @param options - Optional. Options.\r\n   */\n  ;\n\n  var _proto4 = RyuseiLight.prototype;\n\n  _proto4.getRenderer = function getRenderer(code, elm, options) {\n    options = assign({}, this.options, options);\n    var language = options.language;\n    var _RyuseiLight$getLexer = RyuseiLight.getLexer(language).language,\n        name = _RyuseiLight$getLexer.name,\n        id = _RyuseiLight$getLexer.id;\n    return new Renderer(RyuseiLight.tokenize(code, language), {\n      name: name,\n      id: id\n    }, elm, options);\n  }\n  /**\r\n   * Applies the highlighter to elements that matches the selector or the provided element.\r\n   *\r\n   * @param target  - A selector or an element.\r\n   * @param options - Optional. Options.\r\n   */\n  ;\n\n  _proto4.apply = function apply(target, options) {\n    var elms = isString(target) ? document.querySelectorAll(target) : [target];\n\n    for (var i = 0; i < elms.length; i++) {\n      var elm = elms[i];\n\n      if (isHTMLElement(elm)) {\n        var elmOptions = assign({}, options, {\n          language: attr(elm, ATTRIBUTE_LANGUAGE) || undefined\n        });\n        var renderer = this.getRenderer(text(elm), elm, elmOptions);\n        var isPre = elm instanceof HTMLPreElement;\n\n        if (isPre) {\n          addClass$1(elm, [ROOT, ROOT + \"--\" + renderer.info.id]);\n        }\n\n        elm.innerHTML = renderer.html(!isPre);\n        renderer.event.emit('applied', elm);\n        this.renderers.push(renderer);\n      }\n    }\n  }\n  /**\r\n   * Returns highlighted HTML by tokenizing the provided code.\r\n   *\r\n   * @param code    - Code to highlight.\r\n   * @param options - Optional. Options.\r\n   *\r\n   * @return Highlighted HTML string.\r\n   */\n  ;\n\n  _proto4.html = function html(code, options) {\n    assert(isString(code), 'Invalid code.');\n    return this.getRenderer(code, null, options).html(true);\n  }\n  /**\r\n   * Destroys the instance.\r\n   */\n  ;\n\n  _proto4.destroy = function destroy() {\n    this.renderers.forEach(function (renderer) {\n      renderer.destroy();\n    });\n  };\n\n  return RyuseiLight;\n}();\n/**\r\n * Composes extensions.\r\n *\r\n * @param extensions - An object literal with Extension functions.\r\n */\n\n\nRyuseiLight.compose = Renderer.compose;\n/**\r\n * The data attribute name for active lines.\r\n * The value must be an array in JSON format, such as \"[ 2, [ 5, 10 ] ]\"\r\n *\r\n * @private\r\n * @since 0.0.1\r\n */\n\nvar ATTRIBUTE_ACTIVE_LINES = \"data-\" + PROJECT_CODE_SHORT + \"-active-lines\";\n/**\r\n * The component for highlighting lines.\r\n *\r\n * @since 0.0.1\r\n */\n\nfunction ActiveLines(_ref) {\n  var event = _ref.event,\n      root = _ref.root,\n      options = _ref.options;\n  var lines = root && parseData(root) || options.activeLines;\n\n  if (isArray(lines)) {\n    var activeLines = normalize(lines);\n    event.on('gutter:row:open', function (html, classes, index) {\n      if (activeLines[index]) {\n        classes.push(activeLines[index]);\n      }\n    });\n    event.on('line:open', function (html, classes, index) {\n      if (activeLines[index]) {\n        classes.push(activeLines[index]);\n      }\n    });\n  }\n}\n/**\r\n * Attempts to get definition of active lines from a data attribute.\r\n *\r\n * @param elm - A root element.\r\n *\r\n * @return An array with line numbers if available, or otherwise `undefined`.\r\n */\n\n\nfunction parseData(elm) {\n  var data = attr(elm, ATTRIBUTE_ACTIVE_LINES);\n\n  if (data) {\n    try {\n      return JSON.parse(data);\n    } catch (e) {\n      error(e.message);\n    }\n  }\n}\n/**\r\n * Normalizes the definition of lines to activate.\r\n *\r\n * @param lines - An array with line numbers.\r\n *\r\n * @return An array with normalized line numbers.\r\n */\n\n\nfunction normalize(lines) {\n  var numbers = [];\n  lines.forEach(function (range) {\n    if (!isArray(range)) {\n      range = [range, range];\n    }\n\n    var start = (+range[0] || 1) - 1;\n    var end = (+range[1] || 1) - 1;\n\n    for (var i = start; i <= end; i++) {\n      numbers[i] = ACTIVE;\n    }\n  });\n  return numbers;\n}\n/**\r\n * The data attribute name for a caption.\r\n *\r\n * @since 0.0.22\r\n */\n\n\nvar ATTRIBUTE_CAPTION = \"data-\" + PROJECT_CODE_SHORT + \"-caption\";\n/**\r\n * The component for wrapping a code snipped by a figure tag and appending a figcaption.\r\n *\r\n * @since 0.0.22\r\n */\n\nfunction Caption(_ref2) {\n  var event = _ref2.event,\n      root = _ref2.root,\n      options = _ref2.options;\n  var attrCaption = root && attr(root, ATTRIBUTE_CAPTION);\n\n  if (!attrCaption && !options.caption) {\n    return;\n  }\n\n  var captionOptions = options.caption;\n\n  var _assign = assign({}, isObject(captionOptions) ? captionOptions : null),\n      position = _assign.position,\n      html = _assign.html;\n\n  var caption = attrCaption || html || (isString(captionOptions) ? captionOptions : '');\n\n  if (caption) {\n    var bottom = position === 'bottom';\n    event.on('open', function (append) {\n      append(\"<figure class=\\\"\" + PROJECT_CODE_SHORT + \"__figure\\\">\");\n\n      if (!bottom) {\n        appendCaption(append, caption);\n      }\n    });\n    event.on('closed', function (append) {\n      if (bottom) {\n        appendCaption(append, caption, true);\n      }\n\n      append('</figure>');\n    });\n  }\n}\n/**\r\n * Appends a figcaption element with a provided caption.\r\n *\r\n * @param append  - The append function.\r\n * @param caption - A caption.\r\n * @param bottom  - Optional. Set `true` for a bottom caption.\r\n */\n\n\nfunction appendCaption(append, caption, bottom) {\n  var className = PROJECT_CODE_SHORT + \"__figcaption\";\n  append(\"<figcaption class=\\\"\" + className + \" \" + (className + (bottom ? '--bottom' : '--top')) + \"\\\">\");\n  append(\"<span>\" + caption + \"</span>\");\n  append(\"</figcaption>\");\n}\n/**\r\n * Default options for the Copy component.\r\n *\r\n * @private\r\n *\r\n * @since 0.0.1\r\n */\n\n\nvar DEFAULT_OPTIONS$1 = {\n  html: 'Copy',\n  activeHtml: 'Done',\n  duration: 1000,\n  ariaLabel: 'Copy code to clipboard',\n  position: 'topRight'\n};\n/**\r\n * The component for creating a copy button and handling click.\r\n *\r\n * @since 0.0.1\r\n */\n\nfunction Copy(_ref3) {\n  var lines = _ref3.lines,\n      event = _ref3.event,\n      options = _ref3.options;\n\n  if (options.copy) {\n    var copyOptions = assign({}, DEFAULT_OPTIONS$1, isObject(options.copy) ? options.copy : {});\n    var buttonClass = PROJECT_CODE_SHORT + \"__copy\";\n    var labelClass = PROJECT_CODE_SHORT + \"__button__label\";\n    options.tools = copyOptions.position;\n    event.on(\"tools:\" + copyOptions.position, function (append) {\n      append(\"<button type=\\\"button\\\" class=\\\"rl__button \" + buttonClass + \"\\\" aria-label=\\\"\" + copyOptions.ariaLabel + \"\\\">\");\n      append(\"<span class=\\\"\" + labelClass + \" \" + labelClass + \"--inactive\\\">\" + copyOptions.html + \"</span>\");\n      append(\"<span class=\\\"\" + labelClass + \" \" + labelClass + \"--active\\\">\" + copyOptions.activeHtml + \"</span>\");\n      append(\"</button>\");\n    });\n    event.on('applied', function (root) {\n      var button = query(\".\" + buttonClass, root);\n      var code = lines.map(function (line) {\n        return line.map(function (token) {\n          return token[1];\n        }).join('');\n      }).join(LINE_BREAK);\n\n      if (button) {\n        var onClick = function onClick() {\n          copy(code, button, copyOptions.duration);\n        };\n\n        button.addEventListener('click', onClick);\n        event.on('destroy', function () {\n          button.removeEventListener('click', onClick);\n        });\n      }\n    });\n  }\n}\n/**\r\n * Attempts to copy the provided code by the Clipboard API.\r\n *\r\n * @param code     - A code to copy.\r\n * @param button   - A button element.\r\n * @param duration - Duration for the button activation.\r\n */\n\n\nfunction copy(code, button, duration) {\n  var onSuccess = function onSuccess() {\n    if (duration) {\n      toggleClass(button, duration);\n    }\n  };\n\n  if (navigator.clipboard) {\n    navigator.clipboard.writeText(code).then(onSuccess)[\"catch\"](function () {\n      return execCopy(code, onSuccess);\n    });\n  } else {\n    execCopy(code, onSuccess);\n  }\n}\n/**\r\n * Attempts to copy the provided code by the `document.execCommand()` for old browsers.\r\n * Note that this method is deprecated.\r\n *\r\n * @param code      - Code to copy.\r\n * @param onSuccess - Called after the copy is done.\r\n */\n\n\nfunction execCopy(code, onSuccess) {\n  var textarea = create('textarea');\n  textarea.textContent = code;\n  styles(textarea, {\n    position: 'absolute',\n    left: '-99999px'\n  });\n  append(document.body, textarea);\n  textarea.focus();\n  textarea.select();\n  var failed;\n\n  try {\n    document.execCommand('copy');\n  } catch (e) {\n    alert('Failed to copy.');\n    failed = true;\n  }\n\n  document.body.removeChild(textarea);\n\n  if (!failed) {\n    onSuccess();\n  }\n}\n/**\r\n * Toggles the active class of the button.\r\n *\r\n * @param button   - A button element.\r\n * @param duration - Duration for the button activation.\r\n */\n\n\nfunction toggleClass(button, duration) {\n  addClass$1(button, ACTIVE);\n  var prop = '_rlTimer';\n\n  if (button[prop]) {\n    clearTimeout(button[prop]);\n  }\n\n  button[prop] = setTimeout(function () {\n    button.classList.remove(ACTIVE);\n  }, duration);\n}\n/**\r\n * The class name for added lines.\r\n *\r\n * @private\r\n * @since 0.0.17\r\n */\n\n\nvar CLASS_ADDED = 'is-added';\n/**\r\n * The class name for deleted lines.\r\n *\r\n * @private\r\n * @since 0.0.17\r\n */\n\nvar CLASS_DELETED = 'is-deleted';\n/**\r\n * The class name for deleted lines.\r\n *\r\n * @private\r\n * @since 0.0.17\r\n */\n\nvar CLASS_DIFF = PROJECT_CODE_SHORT + \"__diff\";\n/**\r\n * Default options for the Diff component.\r\n *\r\n * @since 0.0.17\r\n */\n\nvar DEFAULT_OPTIONS = {\n  addedSymbol: '+',\n  deletedSymbol: '-'\n};\n/**\r\n * The component for highlighting added/deleted lines.\r\n *\r\n * @since 0.0.17\r\n */\n\nfunction Diff(_ref4) {\n  var event = _ref4.event,\n      lines = _ref4.lines,\n      options = _ref4.options;\n\n  if (!options.diff) {\n    return;\n  }\n\n  options.gutter = true;\n  var diffOptions = assign({}, DEFAULT_OPTIONS, isObject(options.diff) ? options.diff : null);\n  var added = [];\n  var deleted = [];\n  lines.forEach(function (tokens, index) {\n    if (tokens.length) {\n      var _text = tokens[0][1];\n      var processed;\n\n      if (startsWith(_text, diffOptions.addedSymbol)) {\n        added.push(index);\n        processed = true;\n      } else if (startsWith(_text, diffOptions.deletedSymbol)) {\n        deleted.push(index);\n        processed = true;\n      }\n\n      if (processed) {\n        convertSymbols(diffOptions.removeSymbols, tokens);\n      }\n    }\n  });\n\n  if (!added.length && !deleted.length) {\n    return;\n  }\n\n  event.on('line:open', function (append, classes, i) {\n    addClass(added, deleted, i, classes);\n  });\n  event.on('gutter:row:open', function (append, classes, i) {\n    addClass(added, deleted, i, classes);\n  });\n  event.on('gutter:row:opened', function (append, i) {\n    var content = LINE_BREAK;\n\n    if (added.indexOf(i) > -1) {\n      content = diffOptions.addedSymbol;\n    } else if (deleted.indexOf(i) > -1) {\n      content = diffOptions.deletedSymbol;\n    }\n\n    append(\"<span class=\\\"\" + CLASS_DIFF + \"\\\">\" + content + \"</span>\");\n  }, 20);\n  event.on('lineNumber:open', function (append, classes, i, data) {\n    data.skip = deleted.indexOf(i) > -1;\n  });\n}\n/**\r\n * Adds a status class according to the added or deleted lines.\r\n *\r\n * @param added   - An array with added line indices.\r\n * @param deleted - An array with deleted line indices.\r\n * @param index   - A line index.\r\n * @param classes - An array with line classes.\r\n */\n\n\nfunction addClass(added, deleted, index, classes) {\n  if (added.indexOf(index) > -1) {\n    classes.push(CLASS_ADDED);\n  } else if (deleted.indexOf(index) > -1) {\n    classes.push(CLASS_DELETED);\n  }\n}\n/**\r\n * Converts +/- symbols to spaces or removes them.\r\n *\r\n * @param remove - Whether to remove symbols or not.\r\n * @param tokens - Target tokens.\r\n */\n\n\nfunction convertSymbols(remove, tokens) {\n  var _tokens$ = tokens[0],\n      category = _tokens$[0],\n      text = _tokens$[1];\n\n  if (remove) {\n    if (text.length === 1) {\n      tokens.shift();\n    } else {\n      tokens[0] = [category, text.slice(1)];\n    }\n  } else {\n    var spaceToken = [CATEGORY_SPACE, ' '];\n\n    if (text.length === 1) {\n      tokens[0] = spaceToken;\n    } else {\n      tokens[0] = [category, text.slice(1)];\n      tokens.unshift(spaceToken);\n    }\n  }\n}\n/**\r\n * The throttle duration in milliseconds for resizing gutter rows.\r\n *\r\n * @since 0.0.1\r\n */\n\n\nvar THROTTLE_DURATION = 100;\n/**\r\n * The class name for a gutter element.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar GUTTER_CLASS_NAME = PROJECT_CODE_SHORT + \"__gutter\";\n/**\r\n * The class name for row element in a gutter.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar GUTTER_ROW_CLASS_NAME = GUTTER_CLASS_NAME + \"__row\";\n/**\r\n * The component for creating a gutter and its rows.\r\n * This is usually activated by other extensions through the `gutter` option.\r\n *\r\n * @since 0.0.1\r\n */\n\nfunction Gutter(_ref5) {\n  var lines = _ref5.lines,\n      event = _ref5.event,\n      root = _ref5.root,\n      options = _ref5.options;\n  // Wait for initialization of other extensions.\n  event.on('mounted', function () {\n    if (!options.gutter) {\n      return;\n    }\n\n    event.on('open', function (append, classes) {\n      classes.push('has-gutter');\n    });\n    event.on('code:open', function (append) {\n      append(\"<div class=\\\"\" + GUTTER_CLASS_NAME + \"\\\" aria-hidden=\\\"true\\\">\");\n\n      for (var i = 0; i < lines.length; i++) {\n        var classes = [GUTTER_ROW_CLASS_NAME];\n        event.emit('gutter:row:open', append, classes, i);\n        append(\"<div class=\\\"\" + classes.join(' ') + \"\\\">\");\n        event.emit('gutter:row:opened', append, i);\n        append(\"</div>\");\n      }\n\n      append(\"</div>\");\n    });\n\n    if (!root || typeof window === 'undefined') {\n      return;\n    }\n\n    window.addEventListener('resize', throttle(resize, THROTTLE_DURATION));\n    resize();\n    event.on('destroy', function () {\n      window.removeEventListener('resize', resize);\n    });\n    /**\r\n     * Resizes rows according to line height.\r\n     */\n\n    function resize() {\n      var rows = root.getElementsByClassName(GUTTER_ROW_CLASS_NAME);\n      var code = query(\".\" + CODE, root);\n\n      if (rows.length && code) {\n        for (var i = 0; i < code.children.length; i++) {\n          var row = rows[i];\n          var line = code.children[i];\n\n          if (isHTMLElement(row) && row.clientHeight !== line.clientHeight) {\n            styles(row, {\n              height: line.clientHeight + \"px\"\n            });\n          }\n        }\n      }\n    }\n  });\n}\n/**\r\n * The component for rendering a language name.\r\n *\r\n * @since 0.0.1\r\n */\n\n\nfunction LanguageName(_ref6) {\n  var event = _ref6.event,\n      info = _ref6.info,\n      options = _ref6.options;\n  var name = info.name;\n\n  if (options.languageName && name) {\n    var position = options.languageName === 'topLeft' ? 'topLeft' : 'topRight';\n    options.overlay = options.overlay || {};\n    options.overlay[position] = true;\n    event.on(\"overlay:\" + position, function (append) {\n      append(\"<span class=\\\"\" + PROJECT_CODE_SHORT + \"__name\\\">\" + info.name + \"</span>\");\n    });\n  }\n}\n/**\r\n * The data attribute name for line numbers.\r\n * This accepts boolean or number as a value.\r\n *\r\n * @private\r\n * @since 0.0.1\r\n */\n\n\nvar ATTRIBUTE_LINE_NUMBERS = \"data-\" + PROJECT_CODE_SHORT + \"-line-numbers\";\n/**\r\n * The class name for each line number element.\r\n *\r\n * @private\r\n * @since 0.0.23\r\n */\n\nvar LINE_NUMBER_CLASS_NAME = PROJECT_CODE_SHORT + \"__line-number\";\n/**\r\n * The component for displaying line numbers in a gutter.\r\n *\r\n * @since 0.0.1\r\n */\n\nfunction LineNumbers(_ref7) {\n  var root = _ref7.root,\n      event = _ref7.event,\n      options = _ref7.options;\n  var data = root ? attr(root, ATTRIBUTE_LINE_NUMBERS) : '';\n  var number = data === '' ? +options.lineNumbers : +data;\n\n  if (number || number === 0) {\n    options.gutter = true;\n    var offset = Math.floor(number) - 1;\n    event.on('gutter:row:opened', function (append, i) {\n      var classes = [LINE_NUMBER_CLASS_NAME];\n      var data = {\n        skip: false,\n        content: i + 1 + offset\n      };\n      event.emit('lineNumber:open', append, classes, i, data);\n\n      if (data.skip) {\n        data.content = LINE_BREAK;\n        offset--;\n      }\n\n      append(\"<span class=\\\"\" + classes.join(' ') + \"\\\">\" + data.content + \"</span>\");\n    });\n  }\n}\n/**\r\n * The component for rendering overlay and tools elements.\r\n *\r\n * @since 0.0.1\r\n */\n\n\nfunction Overlay(_ref8) {\n  var event = _ref8.event,\n      options = _ref8.options;\n  event.on('mounted', function () {\n    var _options$overlay = options.overlay,\n        overlay = _options$overlay === void 0 ? {} : _options$overlay;\n    var tools = options.tools;\n    var topRight = overlay.topRight,\n        topLeft = overlay.topLeft;\n    topRight = topRight || tools === 'topRight';\n    topLeft = topLeft || tools === 'topLeft';\n    [topRight, topLeft].forEach(function (active, index) {\n      if (active) {\n        if (tools) {\n          appendTools(event, index === 1);\n        }\n\n        appendOverlay(event, index === 1);\n      }\n    });\n\n    if (topRight || topLeft) {\n      event.on('open', function (append, classes) {\n        classes.push('has-top-overlay');\n      });\n    }\n  });\n}\n/**\r\n * Appends HTML for the overlay.\r\n *\r\n * @private\r\n *\r\n * @param event - The EventBus object.\r\n * @param left  - Optional. Set `true` for the left overlay.\r\n */\n\n\nfunction appendOverlay(event, left) {\n  var className = PROJECT_CODE_SHORT + \"__overlay\";\n  event.on('close', function (append) {\n    append(\"<div class=\\\"\" + className + \" \" + className + \"--top-\" + (left ? 'left' : 'right') + \"\\\">\");\n    event.emit(\"overlay:top\" + (left ? 'Left' : 'Right'), append);\n    append(\"</div>\");\n  });\n}\n/**\r\n * Appends HTML for tools.\r\n *\r\n * @private\r\n *\r\n * @param event - The EventBus object.\r\n * @param left  - Optional. Set `true` for the left tools.\r\n */\n\n\nfunction appendTools(event, left) {\n  var position = left ? 'Left' : 'Right';\n  event.on(\"overlay:top\" + position, function (append) {\n    append(\"<span class=\\\"\" + PROJECT_CODE_SHORT + \"__tools\\\">\");\n    event.emit(\"tools:top\" + position, append);\n    append(\"</span>\");\n  });\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ActiveLines: ActiveLines,\n  Caption: Caption,\n  Copy: Copy,\n  Diff: Diff,\n  Gutter: Gutter,\n  LanguageName: LanguageName,\n  LineNumbers: LineNumbers,\n  Overlay: Overlay\n});\nexport { ActiveLines, CATEGORY_ATRULE, CATEGORY_ATTRIBUTE, CATEGORY_BOOLEAN, CATEGORY_BRACKET, CATEGORY_CDATA, CATEGORY_CLASS, CATEGORY_COMMENT, CATEGORY_CONSTANT, CATEGORY_DECORATOR, CATEGORY_DELIMITER, CATEGORY_ENTITY, CATEGORY_FUNCTION, CATEGORY_IDENTIFIER, CATEGORY_KEYWORD, CATEGORY_LINEBREAK, CATEGORY_NUMBER, CATEGORY_OPERATOR, CATEGORY_PROLOG, CATEGORY_PROPERTY, CATEGORY_REGEXP, CATEGORY_SELECTOR, CATEGORY_SPACE, CATEGORY_STRING, CATEGORY_SYMBOL, CATEGORY_TAG, CATEGORY_TAG_CLOSE, CATEGORY_TEXT, CATEGORY_VALUE, CATEGORY_VARIABLE, Caption, Copy, Diff, index as Extensions, Gutter, LanguageName, Lexer, LineNumbers, Overlay, RyuseiLight, css, RyuseiLight as default, html, javascript, json, jsx, index$1 as languages, none, scss, svg, tsx, typescript, vue, xml };\n","import { Language, Options, Position, ScanResult, Token, TokenInfo, TokenMatcher } from '@ryusei/code';\nimport { AbstractArrayLike } from '../../classes/AbstractArrayLike/AbstractArrayLike';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { Editor } from '../../core/Editor/Editor';\nimport { EventBus } from '../../event/EventBus';\nimport { forOwn, isUndefined, max, min } from '../../utils';\nimport { matchesToken } from '../../utils/token';\nimport { Line } from './Line';\n\n\n/**\n * The max number of lines to be inserted at once.\n * Inserting many lines harms the performance.\n *\n * @since 0.1.0\n */\nconst MAX_INSERTION_LENGTH = 100;\n\n/**\n * Delay for the asynchronous tokenization.\n *\n * @since 0.1.0\n */\nconst ASYNC_SYNC_DELAY = 10;\n\n/**\n * The class for managing data of all lines.\n *\n * @since 0.1.0\n */\nexport class Lines extends AbstractArrayLike<Line> {\n  /**\n   * Holds the setTimeout ids.\n   */\n  private readonly timers: Record<string, ReturnType<typeof setTimeout>> = {};\n\n  /**\n   * Holds the language object.\n   */\n  private readonly language: Language;\n\n  /**\n   * Holds options.\n   */\n  private readonly options: Options;\n\n  /**\n   * Holds the EventBus object.\n   */\n  private readonly event: EventBus<Editor>;\n\n  /**\n   * The Lines constructor.\n   *\n   * @param event    - An EventBus instance.\n   * @param language - A Language object.\n   * @param options  - Options.\n   */\n  constructor( event: EventBus<Editor>, language: Language, options: Options ) {\n    super();\n\n    this.language = language;\n    this.event    = event;\n    this.options  = options;\n  }\n\n  /**\n   * Inserts a new empty Line instance or instances at the specified row.\n   *\n   * @param row   - A row index.\n   * @param count - A number of lines to insert.\n   */\n  insert( row: number, count?: number ): void {\n    count = count || 1;\n\n    while ( count-- > 0 ) {\n      this.splice( row, 0, new Line( this.options ) );\n    }\n  }\n\n  /**\n   * Deletes a Line instance or instances from the specified row.\n   *\n   * @param row   - A row index.\n   * @param count - A number of lines to delete.\n   */\n  delete( row: number, count: number ): void {\n    this.splice( row, count );\n  }\n\n  /**\n   * Syncs Line instances with the provided code.\n   *\n   * @param row    - A row index where sync starts.\n   * @param code   - Code to sync.\n   * @param limit  - Optional. Limits the number of lines to sync.\n   * @param before - Optional. A pseudo line prepended to the code.\n   * @param time   - Optional. A timestamp when the sync starts.\n   *\n   * @return `true` if the last line is changed, or otherwise `false`.\n   */\n  sync( row: number, code: string, limit?: number, before = '', time?: number ): boolean {\n    if ( before ) {\n      code = before + LINE_BREAK + code;\n\n      if ( limit ) {\n        limit++;\n      }\n    }\n\n    const lines = this.language.lexer.run( code, limit );\n\n    if ( before ) {\n      lines.shift();\n    }\n\n    let changed;\n\n    for ( let i = 0; i < lines.length; i++ ) {\n      const rowIndex = row + i;\n      const tokens   = lines[ i ];\n\n      if ( ! this[ rowIndex ] ) {\n        this.insert( rowIndex );\n      }\n\n      if ( this[ rowIndex ] ) {\n        if ( i === lines.length - 1 ) {\n          changed = ! this.isSame( this[ rowIndex ].tokens, tokens );\n        }\n\n        this[ rowIndex ].set( tokens, time );\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n   * Starts an asynchronous sync process.\n   *\n   * @param id       - A worker ID.\n   * @param row      - A row index where sync starts.\n   * @param code     - Code to sync.\n   * @param limit    - Optional. Limits the number of lines to sync.\n   * @param before   - Optional. A pseudo line prepended to the code.\n   * @param callback - Optional. A function called after syncing.\n   */\n  asyncSync(\n    id: string,\n    row: number,\n    code: string,\n    limit?: number,\n    before = '',\n    callback?: () => void\n  ): void {\n    const { timers } = this;\n\n    if ( timers[ id ] ) {\n      clearTimeout( timers[ id ] );\n    }\n\n    const time = Date.now();\n\n    timers[ id ] = setTimeout( () => {\n      this.sync( row, code, limit, before, time );\n\n      if ( callback ) {\n        callback();\n      }\n    }, ASYNC_SYNC_DELAY );\n  }\n\n  /**\n   * Finds the minimum indent string between the `startRow` and the `endRow`.\n   *\n   * @param startRow - A start row index to search from.\n   * @param endRow   - An end row index to search to.\n   *\n   * @return A minimum indent string.\n   */\n  findMinIndent( startRow: number, endRow: number ): string {\n    let minIndent = undefined;\n\n    for ( let i = startRow; i <= endRow; i++ ) {\n      const indent = this[ i ].getIndent();\n      minIndent = isUndefined( minIndent ) || minIndent.length > indent.length ? indent : minIndent;\n    }\n\n    return minIndent || '';\n  }\n\n  /**\n   * Returns a token info at the specified position.\n   *\n   * @param position - A position to search at.\n   *\n   * @return A TokenInfo if available, or otherwise `undefined`.\n   */\n  getInfoAt( position: Position ): TokenInfo | undefined {\n    const line = this[ position[ 0 ] ];\n    return line ? line.getInfoAt( position[ 1 ] ) : undefined;\n  }\n\n  /**\n   * Searches backwards for a token that matches the matcher.\n   * If the `counterpart` matcher is provided,\n   * this method attempts to match the target and counterpart, such as `{` and `}`.\n   *\n   * @param position    - A position to start searching.\n   * @param matcher     - A matcher.\n   * @param counterpart - Optional. A matcher of the counter part.\n   * @param depth       - Optional. Determines the initial depth.\n   * @param limit       - Optional. Limits the number of lines to scan.\n   *\n   * @return A TokenInfo object if found, or `undefined` if not.\n   */\n  scanUp(\n    position: Position,\n    matcher: TokenMatcher,\n    counterpart?: TokenMatcher,\n    depth = 0,\n    limit?: number\n  ): ScanResult | undefined {\n    const info = this.getInfoAt( position );\n\n    if ( info ) {\n      const [ row ] = position;\n      const min = limit ? max( 0, row - limit ) : 0;\n\n      for ( let i = row; i >= min; i-- ) {\n        const tokens = this[ i ].tokens;\n\n        for ( let j = i === row ? info.index : tokens.length - 1; j >= 0; j-- ) {\n          if ( matchesToken( tokens[ j ], matcher ) ) {\n            if ( ! depth ) {\n              return { row: i, info: this[ i ].getInfo( j ) };\n            }\n\n            depth++;\n          }\n\n          if ( counterpart && matchesToken( tokens[ j ], counterpart ) ) {\n            depth--;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Searches forwards for a token that matches the matcher.\n   * If the `counterpart` matcher is provided,\n   * this method attempts to match the target and counterpart, such as `{` and `}`.\n   *\n   * @param position    - A position to start searching.\n   * @param matcher     - A matcher.\n   * @param counterpart - Optional. A matcher of the counter part.\n   * @param depth       - Optional. Determines the initial depth.\n   * @param limit       - Optional. Limits the number of lines to scan.\n   *\n   * @return A TokenInfo object if found, or `undefined` if not.\n   */\n  scanDown(\n    position: Position,\n    matcher: TokenMatcher,\n    counterpart?: TokenMatcher,\n    depth = 0,\n    limit?: number\n  ): ScanResult | undefined {\n    const info = this.getInfoAt( position );\n\n    if ( info ) {\n      const [ row ] = position;\n      const { length } = this;\n      const max = limit ? min( length, row + limit ) : length;\n\n      for ( let i = row; i < max; i++ ) {\n        const tokens = this[ i ].tokens;\n\n        for ( let j = i === row ? info.index : 0; j < tokens.length; j++ ) {\n          if ( matchesToken( tokens[ j ], matcher ) ) {\n            if ( ! depth ) {\n              return { row: i, info: this[ i ].getInfo( j ) };\n            }\n\n            depth++;\n          }\n\n          if ( counterpart && matchesToken( tokens[ j ], counterpart ) ) {\n            depth--;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Searches for a start position where the split token actually starts.\n   * If the token at the position is not split, this returns `undefined`.\n   *\n   * @param position - A position.\n   *\n   * @return A position where the split token starts if available.\n   */\n  findBlockStart( position: Position ): Position | undefined {\n    const info = this.getInfoAt( position );\n\n    if ( info ) {\n      if ( info.split ) {\n        const startRow = position[ 0 ] - info.distance;\n        const line     = this[ startRow ];\n        const lastInfo = line.getInfo( line.tokens.length - 1 );\n        return [ startRow, lastInfo.from ];\n      }\n\n      return [ position[ 0 ], info.from ];\n    }\n  }\n\n  /**\n   * Searches for an end position where the split token actually ends.\n   * If the token at the position is not split, this returns `undefined`.\n   *\n   * @param position - A position.\n   *\n   * @return A position where the split token ends if available.\n   */\n  findBlockEnd( position: Position ): Position | undefined {\n    const info = this.getInfoAt( position );\n\n    if ( info ) {\n      if ( info.split && ! info.tail ) {\n        for ( let i = position[ 0 ] + 1; i < this.length; i++ ) {\n          const info = this[ i ].getInfo( 0 );\n\n          if ( info && info.tail ) {\n            return [ i, info.to ];\n          }\n        }\n      }\n\n      return [ position[ 0 ], info.to ];\n    }\n  }\n\n  /**\n   * Syncs the number of lines.\n   *\n   * @param row   - A row index.\n   * @param value - A new size.\n   *\n   * @return Increased or decreased number of lines.\n   */\n  syncSize( row: number, value: number ): number {\n    const diff = value - this.length;\n\n    if ( diff > 0 ) {\n      if ( diff < MAX_INSERTION_LENGTH ) {\n        this.insert( row, diff );\n      } else {\n        this.setLength( value );\n      }\n    } else if ( diff < 0 ) {\n      this.delete( row, -diff );\n    }\n\n    return diff;\n  }\n\n  /**\n   * Destroys the instance.\n   *\n   * @internal\n   */\n  destroy(): void {\n    forOwn( this.timers, clearTimeout );\n  }\n\n  /**\n   * Sets the length of this Lines.\n   * All overflown items will be removed from the end, or all missing items are added to the end as empty lines.\n   *\n   * @param value - A new length.\n   */\n  private setLength( value: number ): void {\n    const { length } = this;\n\n    if ( length > value ) {\n      this.splice( value, length - value );\n    } else if ( length < value ) {\n      while ( value-- > length ) {\n        this.push( new Line( this.options ) );\n      }\n    }\n  }\n\n  /**\n   * Checks if the passed 2 arrays with tokens are same or not.\n   *\n   * @param tokens1 - An array with tokens.\n   * @param tokens2 - Another array with tokens.\n   *\n   * @return `true` if they are considered as same, or otherwise `false`.\n   */\n  private isSame( tokens1: readonly Token[], tokens2: readonly Token[] ): boolean {\n    return tokens1.length === tokens2.length && tokens1.every( ( token1, index ) => {\n      const token2 = tokens2[ index ];\n      return token1[ 0 ] === token2[ 0 ] && token1[ 1 ] === token2[ 1 ] && token1[ 2 ].depth === token2[ 2 ].depth;\n    } );\n  }\n}\n","import { Position, Range } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { assert, count, escapeRegExp, isString, nthIndexOf } from '../../utils';\nimport { Lines } from './Lines';\n\n\n/**\n * The class for handling the raw text and syncing it to lines.\n *\n * @since 0.1.0\n */\nexport class Code extends Component {\n  /**\n   * Holds the text data.\n   */\n  protected text: string;\n\n  /**\n   * Holds the minimum row for asynchronous syncing.\n   */\n  protected minStart = Infinity;\n\n  /**\n   * Holds the maximum row for asynchronous syncing.\n   */\n  protected maxEnd = 0;\n\n  /**\n   * Caches the number of lines.\n   */\n  protected sizeCache: number;\n\n  /**\n   * The Lines instance.\n   */\n  Lines: Lines;\n\n  /**\n   * Sets a new value.\n   *\n   * @internal\n   *\n   * @param value - A new value.\n   */\n  init( value: string ): void {\n    if ( ! this.Lines ) {\n      this.Lines = new Lines( this.event, this.Editor.language, this.options );\n    } else {\n      this.Lines.clear();\n    }\n\n    this.value = value;\n    this.Lines.sync( 0, value );\n  }\n\n  /**\n   * Returns a text before the specified row index, including the row itself.\n   *\n   * @param row - A row index.\n   *\n   * @return A sliced text.\n   */\n  before( row: number ): string {\n    const { text } = this;\n\n    if ( row < 0 ) {\n      return '';\n    }\n\n    return text.slice( 0, row < this.size - 1 ? nthIndexOf( text, LINE_BREAK, row + 1 ) + 1 : text.length );\n  }\n\n  /**\n   * Returns a text after the specified row index, including the row itself.\n   *\n   * @param row - A row index.\n   *\n   * @return A sliced text.\n   */\n  after( row: number ): string {\n    const { text } = this;\n\n    if ( row <= 0 ) {\n      return text;\n    }\n\n    return text.slice( row < this.size ? nthIndexOf( text, LINE_BREAK, row ) + 1 : text.length );\n  }\n\n  /**\n   * Returns the code at the row index.\n   * Although the `Lines[ row ]` also returns the code at the row,\n   * which is much faster than this method,\n   * it may not be the latest before the `Sync` finishes syncing process.\n   *\n   * @param row - A row index.\n   *\n   * @return The text of the line at the specified row.\n   */\n  getLine( row: number ): string {\n    return row < this.size ? this.sliceLines( row, row ) : '';\n  }\n\n  /**\n   * Slices the code by the specified row range.\n   *\n   * @example\n   * ```ts\n   * // Gets lines from 1 to 9:\n   * const code = Code.sliceLines( 2, 10 );\n   * ```\n   *\n   * @param startRow - A start row index to start slicing a text.\n   * @param endRow   - An end row index to end slicing a text.\n   *\n   * @return A sliced text.\n   */\n  sliceLines( startRow: number, endRow: number ): string {\n    const { text } = this;\n    const endIndex = endRow < this.size - 1 ? nthIndexOf( text, LINE_BREAK, endRow + 1 ) + 1 : this.text.length;\n    return text.slice( nthIndexOf( text, LINE_BREAK, startRow ) + 1, endIndex );\n  }\n\n  /**\n   * Slices the code by the specified position range.\n   *\n   * @example\n   * ```ts\n   * const code = Code.sliceLines( [ 0, 1 ], [ 2, 9 ] );\n   * ```\n   *\n   * @param start - A start position to start slicing a text.\n   * @param end   - Optional. An end position to end slicing a text.\n   *\n   * @return A sliced text.\n   */\n  sliceRange( start: Position, end?: Position ): string {\n    const startIndex = this.positionToIndex( start );\n    const endIndex   = end ? this.positionToIndex( end ) : this.text.length;\n    return startIndex < endIndex ? this.text.slice( startIndex, endIndex ) : '';\n  }\n\n  /**\n   * Replaces lines by the replacement text.\n   * This method only modifies the raw value,\n   * and you need to call `Sync#sync()` to apply the change to the editor.\n   *\n   * @example\n   * Consider the following HTML as an example:\n   *\n   * ```html\n   * <pre>\n   * function message() {\n   *   console.log( 'Hi!' );\n   * }\n   * </pre>\n   * ```\n   *\n   * The following code replaces line 2 (the row index is `1`),\n   * and syncs the change with the editor.\n   *\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'pre' );\n   *\n   * const { Code, Sync } = ryuseiCode.Editor.Components;\n   *\n   * setTimeout( () => {\n   *   Code.replaceLines( 1, 1, `  console.log( 'Bye!' );\\n` );\n   *   Sync.sync( 1, 1 );\n   * }, 2000 );\n   * ```\n   *\n   * @param startRow    - A start row index.\n   * @param endRow      - An end row index.\n   * @param replacement - A replacement text.\n   */\n  replaceLines( startRow: number, endRow: number, replacement: string ): void {\n    assert( startRow <= endRow );\n    this.text      = this.before( startRow - 1 ) + this.normalize( replacement ) + this.after( endRow + 1 );\n    this.sizeCache = 0;\n  }\n\n  /**\n   * Replaces the code in a specified range by the replacement text.\n   * This method only modifies the raw value,\n   * and you need to call `Sync#sync()` to apply the change to the editor.\n   *\n   * @param start       - A start position.\n   * @param end         - An end position.\n   * @param replacement - A replacement text.\n   */\n  replaceRange( start: Position, end: Position, replacement: string ): void {\n    const startIndex = this.positionToIndex( start );\n    const endIndex   = this.positionToIndex( end );\n    const { value } = this;\n\n    if ( startIndex <= endIndex ) {\n      this.text      = value.slice( 0, startIndex ) + this.normalize( replacement ) + value.slice( endIndex );\n      this.sizeCache = 0;\n    }\n  }\n\n  /**\n   * Replaces lines by the iteratee function invoked for each line.\n   * The returning string of the function will be used as a new line.\n   *\n   * This method only modifies the raw value,\n   * and you need to call `Sync#sync()` to apply the change to the editor.\n   *\n   * @example\n   * Consider the following HTML as an example:\n   *\n   * ```html\n   * <pre>\n   * 1\n   * 2\n   * 3\n   * </pre>\n   * ```\n   *\n   * The following code replaces lines from `0` to `2` by an iteratee function:\n   *\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'pre' );\n   *\n   * const { Code, Sync } = ryuseiCode.Editor.Components;\n   *\n   * setTimeout( () => {\n   *   Code.replaceLinesBy( 0, 2, line => `Line: ${ line }` );\n   *   Sync.sync( 0, 2 );\n   * }, 2000 );\n   * ```\n   *\n   * The result will be:\n   * ```none\n   * Line: 1\n   * Line: 2\n   * Line: 3\n   * ```\n   *\n   * @param startRow - A start row index.\n   * @param endRow   - An end row index.\n   * @param iteratee - An iteratee function invoked for each line.\n   */\n  replaceLinesBy(\n    startRow: number,\n    endRow: number,\n    iteratee: ( line: string, index: number, array: string[] ) => string\n  ): void {\n    const { size } = this;\n    assert( endRow < size );\n\n    const isLast = endRow === size - 1;\n    const lines  = this.sliceLines( startRow, endRow ).split( LINE_BREAK, endRow - startRow + 1 );\n\n    this.replaceLines( startRow, endRow, lines.reduce( ( acc, line, index, array ) => {\n      const lineBreak = isLast && index === array.length - 1 ? '' : LINE_BREAK;\n      return acc + iteratee( line, index, array ) + lineBreak;\n    }, '' ) );\n  }\n\n  /**\n   * Searches the provided word or regexp and returns matched ranges.\n   *\n   * @example\n   * ```html\n   * <pre>\n   * foo\n   * bar\n   * foo\n   * </pre>\n   * ```\n   *\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'pre' );\n   *\n   * const { Code } = ryuseiCode.Editor.Components;\n   * const ranges = Code.search( 'foo' );\n   *\n   * // The ranges will contain 2 results:\n   * // { start: [ 0, 0 ], end: [ 0, 3 ] }\n   * // { start: [ 2, 0 ], end: [ 2, 3 ] }\n   * ```\n   *\n   * @param search     - A string or a regexp object.\n   * @param ignoreCase - Optional. Whether to perform case-insensitive search or not.\n   * @param wholeWord  - Optional. Whether to only match a whole word or not.\n   * @param limit      - Optional. Limits the number of matched results.\n   *\n   * @return An array with Range objects.\n   */\n  search( search: string | RegExp, ignoreCase?: boolean, wholeWord?: boolean, limit?: number ): Range[] {\n    const source = isString( search ) ? escapeRegExp( search ) : search.source;\n    const ranges: Range[] = [];\n\n    if ( source ) {\n      const regexp = new RegExp( wholeWord ? `\\\\b${ source }\\\\b` : source, ignoreCase ? 'gi' : 'g' );\n\n      lines:\n      for ( let i = 0; i < this.Lines.length; i++ ) {\n        const line = this.Lines[ i ];\n\n        let match: RegExpExecArray;\n\n        while ( ( match = regexp.exec( line.text ) ) ) {\n          if ( ! match[ 0 ] ) {\n            regexp.lastIndex++;\n          }\n\n          ranges.push( {\n            start: [ i, match.index ],\n            end  : [ i, match.index + match[ 0 ].length ],\n          } );\n\n          if ( limit && ranges.length >= limit ) {\n            break lines;\n          }\n        }\n      }\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * @internal\n   */\n  destroy(): void {\n    if ( this.Lines ) {\n      this.Lines.destroy();\n    }\n\n    super.destroy();\n  }\n\n  /**\n   * Converts the provided position to the text index.\n   *\n   * @param position - A position to convert.\n   *\n   * @return A converted index.\n   */\n  private positionToIndex( position: Position ): number {\n    const [ row ] = position;\n    assert( row < this.size );\n    return nthIndexOf( this.text, LINE_BREAK, row ) + 1 + position[ 1 ];\n  }\n\n  /**\n   * Normalizes characters of line breaks.\n   *\n   * @param value - A value to normalize.\n   *\n   * @return A normalized text.\n   */\n  protected normalize( value: string ): string {\n    return value.replace( /\\r\\n?/g, '\\n' );\n  }\n\n  /**\n   * Sets a new value.\n   *\n   * @param value - A value to set.\n   */\n  set value( value: string ) {\n    this.text      = this.normalize( value );\n    this.sizeCache = 0;\n  }\n\n  /**\n   * Returns the current code.\n   *\n   * @return The current code.\n   */\n  get value(): string {\n    return this.text;\n  }\n\n  /**\n   * Returns the number of lines by counting line breaks.\n   *\n   * @return The number of lines.\n   */\n  get size(): number {\n    this.sizeCache = this.sizeCache || count( this.text, LINE_BREAK ) + 1;\n    return this.sizeCache;\n  }\n}\n","/**\n * Escapes string for the RegExp source.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n *\n * @param string - A string to escape.\n */\nexport function escapeRegExp( string: string ): string {\n  return string.replace( /[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&' );\n}\n","import { CLASS_ICON } from '../../../constants/classes';\nimport { attr } from '../../dom';\n\n\n/**\n * The SVG view box settings.\n *\n * @since 0.1.0\n */\nexport const VIEW_BOX = '0 0 24 24';\n\n/**\n * Returns an icon SVG element specified by the name.\n *\n * @param d       - The path of the icon element.\n * @param stroke  - Stroke width.\n * @param linecap - Linecap.\n *\n * @return The SVG element of the icon.\n */\nexport function icon( d: string, stroke: number, linecap: string ): SVGElement {\n  const svg  = createSvg( 'svg', { viewBox: VIEW_BOX, class: CLASS_ICON } );\n  const path = createSvg( 'path', { d, fill: 'currentColor' } );\n\n  if ( stroke ) {\n    attr( path, { 'stroke-width': stroke, 'stroke-linecap': linecap, stroke: 'currentColor' } );\n  }\n\n  attr( svg, { viewBox: VIEW_BOX } );\n  svg.appendChild( path );\n\n  return svg;\n}\n\n/**\n * The helper function to create a SVG element.\n *\n * @param tag   - A tag name in the SVG namespace.\n * @param attrs - An object literal with attributes.\n *\n * @return An created element.\n */\nfunction createSvg( tag: string, attrs: Record<string, string | number | boolean> ): SVGElement {\n  const elm = document.createElementNS( 'http://www.w3.org/2000/svg', tag );\n  attr( elm, attrs );\n  return elm;\n}\n","import { Attributes, Elements, UIButtonSettings, UIFieldSettings, UIGroupData } from '@ryusei/code';\nimport { CLASS_ACTIVE, CLASS_BUTTON, CLASS_INPUT } from '../../constants/classes';\nimport {\n  activeElement,\n  addClass,\n  append,\n  assert,\n  attr,\n  create,\n  hasClass,\n  html,\n  isString,\n  isUndefined,\n  normalizeKey,\n  prevent,\n  query,\n  remove,\n  removeClass,\n  toArray,\n} from '../../utils';\nimport { icon } from '../../utils/icon';\nimport { Component } from '../Component/Component';\n\n\n/**\n * The stroke linecap value for the path element.\n */\nexport const STROKE_LINECAP = 'round';\n\n/**\n * The base class for creating UI, such as a toolbar or a dialog.\n *\n * @since 0.1.0\n */\nexport class UIComponent<T extends UIGroupData = UIGroupData> extends Component {\n  /**\n   * Holds the wrapper element.\n   */\n  protected wrapper: HTMLDivElement;\n\n  /**\n   * Holds the active group ID.\n   */\n  protected group: string;\n\n  /**\n   * Stores group elements.\n   */\n  protected groups: Record<string, T> = {};\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.create();\n    this.listen();\n  }\n\n  /**\n   * Creates elements.\n   * Override this method in a child class and provide a wrapper element.\n   */\n  protected create(): void {\n    assert( false );\n  }\n\n  /**\n   * Listens to some events.\n   */\n  protected listen(): void {\n    this.bind( window, 'keydown', this.escape, this );\n  }\n\n  /**\n   * Hides the toolbar when the escape key is pressed.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  protected escape( e: KeyboardEvent ): void {\n    if ( this.isActive() && normalizeKey( e.key ) === 'Escape' ) {\n      this.hide();\n      prevent( e );\n    }\n  }\n\n  /**\n   * Appends the group element to the wrapper element just before displaying the UI.\n   * Override this method to change the default element to append the group to.\n   *\n   * @param group - A group ID.\n   */\n  protected append( group: string ): void {\n    append( this.wrapper, this.groups[ group ].elm );\n  }\n\n  /**\n   * Sets focus to the first element that has the greatest tab index.\n   * If it is not found, sets focus to the first input or button element if available.\n   *\n   * @param group - A group ID.\n   */\n  protected autoFocus( group: string ): void {\n    const { elm } = this.groups[ group ];\n    const target = query<HTMLElement>( elm, '[tabindex]' ) || query( elm, 'input, button' );\n\n    if ( target ) {\n      target.focus();\n\n      if ( target instanceof HTMLInputElement ) {\n        target.select();\n      }\n    }\n  }\n\n  /**\n   * Creates a close button.\n   * The wrapper element must exist and have an ID attribute before calling this method.\n   *\n   * @param attrs - Attributes for the button.\n   *\n   * @return A created button element.\n   */\n  createCloseButton( attrs: Attributes ): HTMLButtonElement {\n    const button = this.createButtons( {\n      id   : 'close',\n      icon : 'close',\n      click: 'hide',\n    }, null, this ).close;\n\n    attr( button, attrs );\n\n    return button;\n  }\n\n  /**\n   * Creates buttons according to the settings.\n   *\n   * @param settings  - A settings object.\n   * @param parent    - A parent element to append the button to.\n   * @param component - A component instance.\n   * @param classes   - Additional classes for buttons.\n   *\n   * @return An object with created buttons.\n   */\n  createButtons<T extends Component>(\n    settings: UIButtonSettings<T> | UIButtonSettings<T>[],\n    parent: HTMLElement,\n    component: T,\n    classes?: string | string[]\n  ): Record<string, HTMLButtonElement> {\n    const buttons = {};\n\n    toArray( settings ).forEach( settings => {\n      const button = this.createButton( settings, parent, classes );\n      const { click } = settings;\n\n      if ( click ) {\n        this.bind( button, 'click', e => {\n          if ( isString( click ) ) {\n            component[ click ]();\n          } else {\n            click( e, this.Editor, settings );\n          }\n        } );\n      }\n\n      buttons[ settings.id ] = button;\n    }, [] );\n\n    return buttons;\n  }\n\n  /**\n   * Creates a button with the provided settings.\n   *\n   * @param settings - A settings object.\n   * @param parent   - A parent element to append the button to.\n   * @param classes  - Additional classes for buttons.\n   *\n   * @return A created button element.\n   */\n  protected createButton<T extends Component>(\n    settings: UIButtonSettings<T>,\n    parent: HTMLElement,\n    classes: string | string[]\n  ): HTMLButtonElement {\n    const { i18n } = this.options;\n    const { checkbox, tabindex, icon: iconName } = settings;\n    const label = i18n[ settings.i18n || settings.id ];\n\n    classes = [ CLASS_BUTTON ].concat( iconName ? `${ CLASS_BUTTON }--icon` : null, classes );\n\n    const button = create( 'button', {\n      title         : iconName ? label : null,\n      type          : 'button',\n      tabindex      : ! isUndefined( tabindex ) ? tabindex : null,\n      role          : checkbox ? 'checkbox' : null,\n      'aria-checked': checkbox ? 'false' : null,\n      'aria-label'  : label,\n    }, parent || settings.parent );\n\n    addClass( button, classes );\n\n    if ( iconName ) {\n      const iconSettings = this.options.icons[ iconName ];\n\n      if ( iconSettings ) {\n        append( button, icon( iconSettings[ 0 ], iconSettings[ 1 ], iconSettings[ 2 ] || STROKE_LINECAP ) );\n      }\n    } else {\n      html( button, settings.html || label );\n    }\n\n    return button;\n  }\n\n  /**\n   * A utility function to create an input field.\n   *\n   * @param settings - A settings object.\n   * @param parent   - A parent element where the created input element will be appended.\n   *\n   * @return A created input element.\n   */\n  createField(\n    settings: UIFieldSettings,\n    parent: HTMLElement\n  ): HTMLInputElement {\n    const label = this.i18n[ settings.i18n || settings.id ];\n    const { tabindex } = settings;\n\n    return create( 'input', {\n      class       : `${ CLASS_INPUT }`,\n      placeholder : label,\n      spellcheck  : false,\n      tabindex    : ! isUndefined( tabindex ) ? tabindex : null,\n      'aria-label': label,\n    }, parent );\n  }\n\n  /**\n   * Displays the UI.\n   *\n   * @param group - A group ID.\n   */\n  show( group: string ): void {\n    if ( this.isActive() ) {\n      remove( this.groups[ this.group ].elm );\n    }\n\n    addClass( this.wrapper, CLASS_ACTIVE );\n\n    this.append( group );\n    this.group = group;\n  }\n\n  /**\n   * Hides the UI.\n   */\n  hide(): void {\n    if ( this.isActive() ) {\n      removeClass( this.wrapper, CLASS_ACTIVE );\n      remove( this.groups[ this.group ].elm );\n    }\n  }\n\n  /**\n   * Checks if the specified group is active or not.\n   * If omitted, this checks any group is active or not.\n   *\n   * @param group - Optional. A group ID to check.\n   */\n  isActive( group?: string ): boolean {\n    return hasClass( this.wrapper, CLASS_ACTIVE ) && ( ! group || this.group === group );\n  }\n\n  /**\n   * Checks if one of the elements in the UI has focus or not.\n   *\n   * @return `true` if an element in the UI has focus, or otherwise `false`.\n   */\n  isFocused(): boolean {\n    return this.wrapper.contains( activeElement() );\n  }\n}\n","import { ContextMenuButtonSettings } from '@ryusei/code';\n\n\n/**\n * The ID for the main context menu.\n */\nexport const MAIN_CONTEXT_MENU_ID = 'main';\n\n/**\n * The collection of \"edit\" items for the context menu.\n *\n * @since 0.1.0\n */\nexport const CONTEXT_MENU_EDIT: ContextMenuButtonSettings[] = [\n  {\n    id      : 'copy',\n    shortcut: [ 'C', true ],\n  },\n  {\n    id               : 'cut',\n    shortcut         : [ 'X', true ],\n    disableOnReadOnly: true,\n  },\n  {\n    id               : 'paste',\n    shortcut         : [ 'V', true ],\n    disableOnReadOnly: true,\n  },\n];\n\n/**\n * The collection of \"selection\" items for the context menu.\n *\n * @since 0.1.0\n */\nexport const CONTEXT_MENU_SELECTION: ContextMenuButtonSettings[] = [\n  {\n    id      : 'selectAll',\n    shortcut: [ 'A', true ],\n  },\n];\n","import { ContextMenuButtonSettings, ContextMenuGroupData } from '@ryusei/code';\nimport { UIComponent } from '../../classes/UIComponent/UIComponent';\nimport {\n  CLASS_CONTEXT_MENU,\n  CLASS_CONTEXT_MENU_BUTTON,\n  CLASS_CONTEXT_MENU_GROUP,\n  CLASS_CONTEXT_MENU_ITEM,\n  CLASS_CONTEXT_MENU_LABEL,\n  CLASS_CONTEXT_MENU_LIST,\n  CLASS_CONTEXT_MENU_SHORTCUT,\n} from '../../constants/classes';\nimport { MAIN_CONTEXT_MENU_ID } from '../../constants/context-menu';\nimport {\n  EVENT_BLUR,\n  EVENT_CONTEXT_MENU_CLICKED,\n  EVENT_CONTEXT_MENU_CLOSED,\n  EVENT_CONTEXT_MENU_OPENED,\n  EVENT_READONLY,\n  EVENT_SCROLLER_SCROLL,\n  EVENT_WINDOW_SCROLL,\n} from '../../constants/events';\nimport { IDLE } from '../../constants/selection-states';\nimport {\n  activeElement,\n  assert,\n  assign,\n  attr,\n  create,\n  div,\n  forOwn,\n  height,\n  isHTMLElement,\n  min,\n  normalizeKey,\n  prevent,\n  queryAll,\n  rect,\n  styles,\n  text,\n  unit,\n} from '../../utils';\n\n\n/**\n * The margin from the menu to the right of the window.\n *\n * @since 0.1.0\n */\nconst MARGIN_RIGHT = 5;\n\n/**\n * The margin from the menu to the bottom of the window.\n *\n * @since 0.1.0\n */\nconst MARGIN_BOTTOM = 5;\n\n/**\n * The class for creating a context menu replacing the native one.\n *\n * @since 0.1.0\n */\nexport class ContextMenu extends UIComponent<ContextMenuGroupData> {\n  /**\n   * The index of the current menu item.\n   */\n  private index = -1;\n\n  /**\n   * Holds buttons that are currently displayed.\n   * This may be null when the menu is hidden.\n   */\n  buttons: Record<string, HTMLButtonElement> | null;\n\n  /**\n   * Listens some events.\n   */\n  protected listen(): void {\n    super.listen();\n\n    const { elements } = this;\n\n    this.bind( elements.editor, 'mousedown', this.onMouseDown, this );\n    this.bind( document, 'contextmenu', this.onContextMenu, this );\n    this.bind( window, 'keydown', this.onKeydown, this );\n\n    this.on( [ EVENT_BLUR, EVENT_SCROLLER_SCROLL, EVENT_WINDOW_SCROLL ], this.hide, this );\n\n    this.bind( elements.root, 'focusin', () => {\n      if ( ! this.contains( activeElement() ) && ! this.wrapper.contains( activeElement() ) ) {\n        this.hide();\n      }\n    } );\n  }\n\n  /**\n   * Creates the context menu elements.\n   *\n   * @link https://www.w3.org/TR/wai-aria-1.2/#menu\n   */\n  protected create(): void {\n    this.wrapper = div( { class: CLASS_CONTEXT_MENU, role: 'menu' }, this.elements.overlay );\n  }\n\n  /**\n   * Called when the mouse button is clicked.\n   * If the button number is 2, which means a right click,\n   * displays the menu and moves it at the cursor location, otherwise hides the menu.\n   *\n   * @param e - A MouseEvent object.\n   */\n  private onMouseDown( e: MouseEvent ): void {\n    if ( e.button === 2 ) {\n      this.show( MAIN_CONTEXT_MENU_ID );\n      this.move( e.clientX, e.clientY );\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Called when the contextmenu event of the document is fired.\n   * Since the context menu may scroll the scroller or the window,\n   * displaying the menu at this moment is too early.\n   *\n   * @param e - An Event object.\n   */\n  private onContextMenu( e: Event ): void {\n    if ( this.isActive() ) {\n      return prevent( e );\n    }\n\n    if ( this.contains( e.target ) ) {\n      const { Selection } = this;\n\n      if ( ! Selection.is( IDLE ) ) {\n        this.View.jump( Selection.focus[ 0 ] );\n\n        requestAnimationFrame( () => {\n          const { rect } = this.Caret;\n          this.show( MAIN_CONTEXT_MENU_ID );\n          this.move( rect.left, rect.bottom );\n        } );\n      }\n\n      prevent( e, true );\n    }\n  }\n\n  /**\n   * Called when the window receives the keydown.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onKeydown( e: KeyboardEvent ): void {\n    if ( this.isActive() ) {\n      const key     = normalizeKey( e.key );\n      const arrowUp = key === 'ArrowUp';\n\n      if ( key === 'ArrowDown' || arrowUp ) {\n        this.focus( arrowUp );\n        prevent( e );\n      }\n    }\n  }\n\n  /**\n   * Sets focus on the menu item in order.\n   *\n   * @param backwards - Whether to decrement or increment the menu index.\n   */\n  private focus( backwards: boolean ): void {\n    const buttons = queryAll<HTMLButtonElement>( this.wrapper, `.${ CLASS_CONTEXT_MENU_BUTTON }` );\n    const { length } = buttons;\n\n    if ( length ) {\n      this.index += backwards ? -1 : 1;\n\n      if ( this.index < 0 ) {\n        this.index = length - 1;\n      } else if ( this.index >= length ) {\n        this.index = 0;\n      }\n\n      buttons[ this.index ].focus();\n    }\n  }\n\n  /**\n   * Moves the menu to the provided client coordinates.\n   *\n   * @param clientX - A client x coordinate.\n   * @param clientY - A client y coordinate.\n   */\n  private move( clientX: number, clientY: number ): void {\n    const { wrapper, wrapper: { clientWidth } } = this;\n    const { documentElement } = document;\n    const rootRect = rect( this.elements.root );\n\n    if ( clientX + clientWidth > documentElement.clientWidth - MARGIN_RIGHT ) {\n      clientX -= clientWidth;\n    }\n\n    clientY = min( clientY, height( documentElement ) - height( wrapper ) - MARGIN_BOTTOM );\n\n    styles( wrapper, {\n      top : unit( clientY - rootRect.top ),\n      left: unit( clientX - rootRect.left ),\n    } );\n  }\n\n  /**\n   * Checks whether the editor contains the passed element/event target or not.\n   *\n   * @param target - An EventTarget object that is an Element instance in most cases.\n   *\n   * @return `true` if the editor contains the target, or otherwise `false`.\n   */\n  private contains( target: EventTarget | Element ): boolean {\n    return isHTMLElement( target ) && this.elements.editor.contains( target );\n  }\n\n  /**\n   * Creates elements for menu items.\n   *\n   * @param group - A group ID.\n   */\n  private build( group: string ): void {\n    const { lists, elm } = this.groups[ group ];\n    text( elm, '' );\n\n    forOwn( lists, ( settings, key ) => {\n      const list = create( 'ul', [ CLASS_CONTEXT_MENU_LIST, `${ CLASS_CONTEXT_MENU_LIST }--${ key }` ], elm );\n\n      settings = settings.map( settings => {\n        settings.parent = create( 'li', CLASS_CONTEXT_MENU_ITEM, list );\n        return settings;\n      } );\n\n      const buttons = this.createButtons<ContextMenu>( settings, null, this, CLASS_CONTEXT_MENU_BUTTON );\n\n      forOwn( buttons, ( button, id ) => {\n        const buttonSettings = this.findSettings( settings, id );\n        assert( buttonSettings );\n\n        attr( button, { role: 'menuitem' } );\n\n        this.bind( button, 'click', () => {\n          this.emit( EVENT_CONTEXT_MENU_CLICKED, this, group, id, button );\n          this.hide();\n        } );\n\n        if ( buttonSettings.disableOnReadOnly ) {\n          button.disabled = this.Editor.readOnly;\n          this.on( EVENT_READONLY, ( e, readOnly ) => { button.disabled = readOnly } );\n        }\n\n        this.bind( button, 'mouseover', () => {\n          button.focus();\n        } );\n      } );\n\n      this.buttons = assign( {}, this.buttons, buttons );\n    } );\n  }\n\n  /**\n   * Finds the each button settings from the array of settings.\n   *\n   * @param settings - An array with settings.\n   * @param id       - A button ID to find.\n   *\n   * @return The found button settings.\n   */\n  private findSettings( settings: ContextMenuButtonSettings[], id: string ): ContextMenuButtonSettings {\n    for ( let i = 0; i < settings.length; i++ ) {\n      if ( settings[ i ].id === id ) {\n        return settings[ i ];\n      }\n    }\n  }\n\n  /**\n   * Registers a menu item or items.\n   *\n   * @example\n   *\n   * Registers a new item to the \"edit\" list in the \"main\" context menu:\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'textarea' );\n   *\n   * const { ContextMenu } = ryuseiCode.Editor.Components;\n   *\n   * ContextMenu.register( 'main', 'edit', {\n   *   id  : 'myButton',\n   *   html: 'Click Me',\n   *   click() {\n   *     console.log( 'Clicked! );\n   *   },\n   * } );\n   * ```\n   *\n   * Registers a new list and items to the the \"main\" context menu:\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'textarea' );\n   *\n   * const { ContextMenu } = ryuseiCode.Editor.Components;\n   *\n   * ContextMenu.register( 'main', 'my-list', [\n   *   {\n   *     id  : 'button1',\n   *     html: 'Button 1',\n   *     click() {\n   *       console.log( 'You clicked the Button 1' );\n   *     },\n   *   },\n   *   {\n   *     id  : 'button2',\n   *     html: 'Button 2',\n   *     click() {\n   *       console.log( 'You clicked the Button 2' );\n   *     },\n   *   },\n   * ] );\n   * ```\n   *\n   * Registers a new group:\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'textarea' );\n   *\n   * const { ContextMenu } = ryuseiCode.Editor.Components;\n   *\n   * ContextMenu.register( 'my-context-menu', 'my-list', [\n   *   ...\n   * ] );\n   *\n   * ContextMenu.show( 'my-context-menu' );\n   * ```\n   *\n   * @param group    - A group ID. If it does not exist, a new group will be generated.\n   * @param list     - A list ID.\n   * @param settings - An menu item or items.\n   */\n  register( group: string, list: string, settings: ContextMenuButtonSettings[] ): void {\n    const { groups } = this;\n\n    if ( ! groups[ group ] ) {\n      groups[ group ] = {\n        elm  : div( [ CLASS_CONTEXT_MENU_GROUP, `${ CLASS_CONTEXT_MENU_GROUP }--${ group }` ] ),\n        lists: {},\n      };\n    }\n\n    settings.forEach( settings => {\n      const label    = this.i18n[ settings.i18n || settings.id ];\n      const shortcut = settings.shortcut ? this.Keymap.getShortcut( settings.shortcut ) : '';\n\n      settings.html = settings.html || `<span class=\"${ CLASS_CONTEXT_MENU_LABEL }\">${ label }</span>`\n        + ( shortcut ? `<span class=\"${ CLASS_CONTEXT_MENU_SHORTCUT }\">${ shortcut }</span>` : '' );\n    } );\n\n    const { lists } = groups[ group ];\n    lists[ list ] = ( lists[ list ] || [] ).concat( settings );\n  }\n\n  /**\n   * Displays the specified context menu.\n   *\n   * @param group - A group ID.\n   */\n  show( group: string ): void {\n    if ( this.groups[ group ] ) {\n      this.build( group );\n      super.show( group );\n      this.index = -1;\n      this.emit( EVENT_CONTEXT_MENU_OPENED );\n    }\n  }\n\n  /**\n   * Hides the context menu.\n   */\n  hide(): void {\n    if ( this.isActive() ) {\n      super.hide();\n      this.buttons = null;\n      this.emit( EVENT_CONTEXT_MENU_CLOSED );\n    }\n  }\n}\n","import { create, focus, remove, styles } from '../../utils';\n\n\n/**\n * The class for normalizing different copy/paste behaviours in browsers.\n *\n * @since 0.1.0\n */\nexport class Clipboard {\n  /**\n   * Creates a temporary textarea element.\n   *\n   * @param text - A value for the textarea.\n   *\n   * @return A created element.\n   */\n  private create( text: string ): HTMLTextAreaElement {\n    const textarea = create( 'textarea', {}, document.body );\n    const offset   = '-999999px';\n    styles( textarea, { position: 'absolute', top: offset, left: offset } );\n\n    textarea.value = text;\n    focus( textarea );\n    textarea.setSelectionRange( 0, text.length );\n\n    return textarea;\n  }\n\n  /**\n   * Pastes the text via execCommand for old browsers.\n   *\n   * @return A pasted text.\n   */\n  private execPaste(): string {\n    const textarea = this.create( '' );\n    document.execCommand( 'paste' );\n\n    const { value } = textarea;\n    remove( textarea );\n\n    return value;\n  }\n\n  /**\n   * Copies the provided text via execCommand for old browsers.\n   *\n   * @param text     - A text to copy.\n   * @param onFailed - Optional. A callback fired when copy failed.\n   */\n  private execCopy( text: string, onFailed?: () => void ): void {\n    const textarea = this.create( text );\n\n    try {\n      document.execCommand( 'copy' );\n    } catch ( e ) {\n      if ( onFailed ) {\n        onFailed();\n      }\n    }\n\n    remove( textarea );\n  }\n\n  /**\n   * Pastes the clipboard text.\n   *\n   * @param onPaste - A callback fired after pasting a text, taking a pasted value as the first argument.\n   */\n  paste( onPaste: ( text: string ) => void ): void {\n    const { clipboard } = navigator;\n\n    if ( clipboard ) {\n      clipboard.readText().then( onPaste );\n    } else {\n      onPaste( this.execPaste() );\n    }\n  }\n\n  /**\n   * Copies the passed text.\n   *\n   * @param text     - A text to copy.\n   * @param onFailed - Optional. A callback fired when copy failed.\n   */\n  copy( text: string, onFailed?: () => void ): void {\n    const { clipboard } = navigator;\n\n    if ( clipboard ) {\n      clipboard.writeText( text ).catch( () => {\n        this.execCopy( text, onFailed );\n      } );\n    } else {\n      this.execCopy( text, onFailed );\n    }\n  }\n}\n","import { Elements, EventBusEvent, Position } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { CONTEXT_MENU_EDIT, CONTEXT_MENU_SELECTION, MAIN_CONTEXT_MENU_ID } from '../../constants/context-menu';\nimport {\n  EVENT_CHANGE,\n  EVENT_CHANGED,\n  EVENT_CONTEXT_MENU_CLICKED,\n  EVENT_COPY,\n  EVENT_CUT,\n  EVENT_KEYDOWN,\n  EVENT_PASTE,\n} from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { count, includes, isIE, isUndefined, normalizeKey, prevent, toArray } from '../../utils';\nimport { ContextMenu } from '../ContextMenu/ContextMenu';\nimport { Clipboard } from './Clipboard';\n\n\n/**\n * The class for editing the code.\n *\n * @since 0.1.0\n */\nexport class Edit extends Component {\n  /**\n   * Indicates whether lines has been deleted by an input or not.\n   */\n  private deletedByInput: boolean;\n\n  /**\n   * Holds the Clipboard instance.\n   */\n  private clipboard = new Clipboard();\n\n  /**\n   * Initializes the component.\n   *\n   * @internal\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.register();\n    this.listen();\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    const { editable } = this.elements;\n\n    this.on( EVENT_KEYDOWN, this.onKeydown, this );\n\n    this.bind( editable, 'paste', this.onPaste, this );\n\n    this.bind( editable, 'copy cut', e => {\n      this[ e.type ]();\n    } );\n\n    this.bind( editable, 'dragover drop paste cut', e => {\n      prevent( e, true );\n    } );\n\n    this.on( EVENT_CONTEXT_MENU_CLICKED, this.onMenuClicked, this );\n\n    if ( isIE() ) {\n      this.bind( editable, 'compositionstart', e => {\n        if ( this.deletedByInput ) {\n          prevent( e, true );\n        }\n      } );\n    }\n  }\n\n  /**\n   * Called when any key is pressed.\n   *\n   * @param e  - An EventBusEvent object.\n   * @param ke - A KeyboardEvent object.\n   */\n  private onKeydown( e: EventBusEvent<Editor>, ke: KeyboardEvent ): void {\n    const { Selection } = this;\n    const key   = normalizeKey( ke.key );\n    const isKey = ( keys: string | string[] ) => includes( toArray( keys ), key );\n\n    this.deletedByInput = false;\n\n    if ( this.Keymap.matches( ke, 'selectAll' ) ) {\n      Selection.selectAll();\n      return prevent( ke, true );\n    }\n\n    if ( ke.altKey || ke.metaKey || ke.ctrlKey ) {\n      return;\n    }\n\n    if ( Selection.isMultiline() ) {\n      if ( key.length === 1 || isKey( [ 'Process', 'Enter' ] ) ) {\n        this.delete();\n        this.deletedByInput = true;\n      } else if ( isKey( [ 'Delete', 'Backspace' ] ) ) {\n        this.delete();\n        prevent( ke );\n      }\n    }\n  }\n\n  /**\n   * Called when the context menu item is clicked.\n   *\n   * @param e           - An EventBusEvent object.\n   * @param ContextMenu - A ContextMenu instance.\n   * @param group       - A group ID.\n   * @param id          - The ID of the clicked item.\n   */\n  private onMenuClicked( e: EventBusEvent<Editor>, ContextMenu: ContextMenu, group: string, id: string ): void {\n    if ( group === MAIN_CONTEXT_MENU_ID ) {\n      const { Selection } = this;\n\n      if ( id === 'copy' || id === 'cut' ) {\n        if ( ! this.isSelected() ) {\n          Selection.selectLine( undefined, id === 'copy', true );\n        }\n\n        this[ id ]();\n      } else if ( id === 'paste' ) {\n        this.clipboard.paste( this.paste.bind( this ) );\n      } else if ( id === 'selectAll' ) {\n        Selection.selectAll();\n      }\n    }\n  }\n\n  /**\n   * Called when the text is being pasted to the editor.\n   *\n   * @param e - A ClipboardEvent object.\n   */\n  private onPaste( e: ClipboardEvent ): void {\n    const string = ( e.clipboardData || window[ 'clipboardData' ] ).getData( 'text' );\n\n    if ( string ) {\n      this.paste( string );\n    }\n\n    prevent( e );\n  }\n\n  /**\n   * Registers items to the context menu.\n   */\n  private register(): void {\n    const { ContextMenu } = this;\n    ContextMenu.register( MAIN_CONTEXT_MENU_ID, 'edit', CONTEXT_MENU_EDIT );\n    ContextMenu.register( MAIN_CONTEXT_MENU_ID, 'selection', CONTEXT_MENU_SELECTION );\n  }\n\n  /**\n   * Checks if some texts are selected or not.\n   * Be aware that this is not same with negating getSelection().isCollapsed.\n   *\n   * @return `true` if some texts are selected, or otherwise `false`.\n   */\n  private isSelected(): boolean {\n    return ! this.Selection.isCollapsed();\n  }\n\n  /**\n   * Checks if the Editor is editable or not.\n   *\n   * @return `true` if the Editor is editable.\n   */\n  private isEditable(): boolean {\n    return ! this.Editor.readOnly;\n  }\n\n  /**\n   * Deletes the selected text. Nothing will happen when the selection is collapsed.\n   */\n  delete(): void {\n    if ( this.isSelected() ) {\n      this.paste( '', 'delete' );\n    }\n  }\n\n  /**\n   * Pastes the provided text at the current position.\n   *\n   * @param string - A string to paste.\n   * @param type   - Optional. Specifies the input type.\n   */\n  paste( string: string, type = 'paste' ): void {\n    if ( ! this.isEditable() ) {\n      return;\n    }\n\n    if ( type === 'paste' ) {\n      this.emit( EVENT_PASTE, string );\n    }\n\n    const { Selection, Code } = this;\n    const { start, end } = Selection.get();\n    const size     = count( string, LINE_BREAK ) + 1;\n    const startRow = start[ 0 ];\n    const endRow   = startRow + size - 1;\n    const endLine  = string.slice( string.lastIndexOf( LINE_BREAK ) + 1 );\n    const col      = endLine.length + ( size > 1 ? 0 : start[ 1 ] );\n    const position = [ endRow, col ] as Position;\n\n    this.emit( EVENT_CHANGE, type );\n\n    Code.replaceRange( start, end, string );\n\n    this.Sync.sync( startRow, endRow, endRow );\n    Selection.set( position );\n\n    this.emit( EVENT_CHANGED, type );\n  }\n\n  /**\n   * Copies the provided text to the clipboard.\n   * If the text is not provided, this method tries to copy the current selection.\n   *\n   * @param string        - Optional. A string to copy.\n   * @param skipSelection - Optional. Whether to restore the selection range after copy or not.\n   */\n  copy( string?: string, skipSelection?: boolean ): void {\n    const { failedToCopy } = this.i18n;\n    const onFailed  = () => {\n      if ( this.require( 'Dialog' ) ) {\n        this.invoke( 'Dialog', 'message', failedToCopy );\n      } else {\n        alert( this.i18n.failedToCopy );\n      }\n    };\n\n    const copySelection = isUndefined( string );\n    string = copySelection ? this.Selection.toString() : string;\n\n    this.emit( EVENT_COPY, string );\n\n    const { Selection } = this;\n    const range = Selection.get( false );\n\n    this.clipboard.copy( string, onFailed );\n\n    if ( ! skipSelection ) {\n      Selection.set( range.start, range.end );\n    }\n  }\n\n  /**\n   * Cuts the selected code. Nothing will happen if the selection is collapsed.\n   */\n  cut(): void {\n    if ( this.isSelected() && this.isEditable() ) {\n      this.emit( EVENT_CUT );\n      this.copy( undefined, true );\n      this.delete();\n    }\n  }\n\n  /**\n   * Cuts the current line.\n   */\n  cutLine(): void {\n    if ( ! this.isEditable() ) {\n      return;\n    }\n\n    this.emit( EVENT_CUT );\n\n    const { Selection } = this;\n    const { start: [ startRow ] } = Selection.get();\n    const position = [ startRow, 0 ] as Position;\n\n    this.View.jump( startRow );\n    Selection.selectLine( startRow, false );\n\n    this.copy( undefined, true );\n\n    Selection.update( position );\n\n    this.emit( EVENT_CHANGE );\n\n    this.Code.replaceLines( startRow, startRow, '' );\n    this.Sync.sync( startRow, startRow );\n\n    Selection.set( position );\n\n    this.emit( EVENT_CHANGED );\n  }\n}\n","import { Elements, InputState, Position, TokenInfo } from '@ryusei/code';\r\nimport { Component } from '../../classes/Component/Component';\r\nimport { LINE_BREAK } from '../../constants/characters';\r\nimport {\r\n  EVENT_CHANGE,\r\n  EVENT_CHANGED,\r\n  EVENT_COMPOSITION_END,\r\n  EVENT_COMPOSITION_START,\r\n  EVENT_COMPOSITION_UPDATE,\r\n  EVENT_FOCUS_LINE_CHANGED,\r\n  EVENT_INPUT,\r\n  EVENT_KEYDOWN, EVENT_MOUNTED,\r\n  EVENT_NEWLINE,\r\n} from '../../constants/events';\r\nimport { ARROW_KEYS } from '../../constants/keys';\r\nimport {\r\n  assign,\r\n  getSelection,\r\n  isIE,\r\n  isPrevented,\r\n  isUndefined,\r\n  nextTick,\r\n  normalizeKey,\r\n  prevent,\r\n  text,\r\n} from '../../utils';\r\n\r\n\r\n/**\r\n * The input type for composition.\r\n *\r\n * @since 0.1.0\r\n */\r\nconst COMPOSITION_INPUT_TYPE = 'composition';\r\n\r\n/**\r\n * The class for handling the user input.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport class Input extends Component {\r\n  /**\r\n   * The `TokenInfo` object saved when any key is pressed.\r\n   *\r\n   * @readonly\r\n   */\r\n  info: TokenInfo | null;\r\n\r\n  /**\r\n   * Indicates whether the input is in composition session or not.\r\n   *\r\n   * @readonly\r\n   */\r\n  composing: boolean;\r\n\r\n  /**\r\n   * Keeps the latest focus line.\r\n   *\r\n   * @readonly\r\n   */\r\n  line: Element;\r\n\r\n  /**\r\n   * Keeps the latest focus row index.\r\n   *\r\n   * @readonly\r\n   */\r\n  row: number;\r\n\r\n  /**\r\n   * Holds the current state.\r\n   */\r\n  private state: InputState;\r\n\r\n  /**\r\n   * Indicates whether the input is currently disabled or not.\r\n   */\r\n  private _disabled: boolean;\r\n\r\n  /**\r\n   * Initialized the component.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param elements - A collection of essential editor elements.\r\n   */\r\n  mount( elements: Elements ): void {\r\n    super.mount( elements );\r\n    this.listen();\r\n  }\r\n\r\n  /**\r\n   * Listen to some events.\r\n   */\r\n  private listen(): void {\r\n    const { editable } = this.elements;\r\n\r\n    this.bind( editable, 'keydown', this.onKeydown, this );\r\n    this.bind( editable, isIE() ? 'textinput' : 'input', this.onInput, this );\r\n    this.bind( editable, 'compositionstart', this.onCompositionStart, this );\r\n    this.bind( editable, 'compositionupdate', this.onCompositionUpdate, this );\r\n    this.bind( editable, 'compositionend', this.onCompositionEnd, this );\r\n\r\n    this.on( EVENT_MOUNTED, () => {\r\n      this.line = this.Chunk.elms[ 0 ];\r\n      this.row  = 0;\r\n    } );\r\n\r\n    this.on( EVENT_FOCUS_LINE_CHANGED, ( e, line, row ) => {\r\n      this.line = line;\r\n      this.row  = row;\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Called when the composition starts.\r\n   * Needs to emit the `change` event at this timing to save the start position.\r\n   * Note that some browsers do not support a CompositionEvent object.\r\n   *\r\n   * @param e - A CompositionEvent object or a regular Event object.\r\n   */\r\n  private onCompositionStart( e: CompositionEvent ): void {\r\n    if ( this.disabled ) {\r\n      const { Editor, Selection } = this;\r\n      const range = Selection.get( false );\r\n      getSelection().removeAllRanges();\r\n      Editor.blur();\r\n\r\n      nextTick( () => {\r\n        Editor.focus();\r\n        Selection.set( range.start, range.end );\r\n      } );\r\n\r\n      return;\r\n    }\r\n\r\n    this.composing = true;\r\n    this.set( COMPOSITION_INPUT_TYPE );\r\n    this.emit( EVENT_COMPOSITION_START, e );\r\n    this.emit( EVENT_CHANGE, COMPOSITION_INPUT_TYPE );\r\n  }\r\n\r\n  /**\r\n   * Called whenever the composing content is updated.\r\n   *\r\n   * @param e - A CompositionEvent object or a regular Event object.\r\n   */\r\n  private onCompositionUpdate( e: CompositionEvent ): void {\r\n    nextTick( () => {\r\n      this.Selection.update( this.getCaretPosition() );\r\n      this.emit( EVENT_COMPOSITION_UPDATE, e );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Called when the composition ends.\r\n   *\r\n   * @param e - A CompositionEvent object or a regular Event object.\r\n   */\r\n  private onCompositionEnd( e: CompositionEvent ): void {\r\n    this.composing = false;\r\n    this.apply();\r\n    this.emit( EVENT_COMPOSITION_END, e );\r\n  }\r\n\r\n  /**\r\n   * Called whenever any key is pressed.\r\n   *\r\n   * @param e - A KeyboardEvent object.\r\n   */\r\n  private onKeydown( e: KeyboardEvent ): void {\r\n    const key = normalizeKey( e.key );\r\n    const { altKey, shiftKey } = e;\r\n\r\n    if ( this.disabled && ! ARROW_KEYS.includes( key ) ) {\r\n      return prevent( e, true );\r\n    }\r\n\r\n    this.emit( EVENT_KEYDOWN, e );\r\n\r\n    if ( isPrevented( e ) ) {\r\n      return;\r\n    }\r\n\r\n    this.info = this.lines.getInfoAt( this.getCaretPosition() );\r\n    this.set( 'input', { key } );\r\n\r\n    if ( key === 'Enter' ) {\r\n      this.handleEnter( e );\r\n      return;\r\n    }\r\n\r\n    if ( this.Selection.isCollapsed() ) {\r\n      if ( key === 'Delete' && ! shiftKey && ! altKey ) {\r\n        this.handleDelete( e );\r\n      } else if ( key === 'Backspace' && ! altKey ) {\r\n        this.handleBackspace( e );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called whenever any input is received.\r\n   * Need to wait for the `compositionend` before calling `apply()`.\r\n   */\r\n  private onInput( e: InputEvent ): void {\r\n    this.emit( EVENT_INPUT, this, e );\r\n\r\n    if ( ! this.composing ) {\r\n      this.apply();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the Enter key.\r\n   *\r\n   * @param e - A KeyboardEvent object.\r\n   */\r\n  private handleEnter( e: KeyboardEvent ): void {\r\n    if ( ! this.composing ) {\r\n      this.set( 'newline', {\r\n        key     : 'Enter',\r\n        value   : this.before + LINE_BREAK + this.after,\r\n        position: [ this.row + 1, 0 ],\r\n      } );\r\n\r\n      this.emit( EVENT_NEWLINE, this );\r\n      this.apply();\r\n      prevent( e );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the delete key.\r\n   *\r\n   * @param e - A KeyboardEvent object.\r\n   */\r\n  private handleDelete( e: KeyboardEvent ): void {\r\n    const { row, lines } = this;\r\n\r\n    if ( this.col === this.value.length && row < lines.length - 1 ) {\r\n      this.apply( {\r\n        type    : 'deleteNext',\r\n        key     : 'Delete',\r\n        value   : this.value + lines[ row + 1 ].text,\r\n        startRow: row,\r\n        endRow  : row + 1,\r\n      } );\r\n\r\n      prevent( e );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the backspace key.\r\n   */\r\n  private handleBackspace( e: KeyboardEvent ): void {\r\n    const { row, col } = this;\r\n\r\n    if ( col === 0 ) {\r\n      if ( row > 0 ) {\r\n        const prev = this.lines[ row - 1 ].text;\r\n\r\n        this.apply( {\r\n          type    : 'removePrev',\r\n          key     : 'Backspace',\r\n          value   : prev + this.value,\r\n          startRow: row - 1,\r\n          position: [ row - 1, prev.length ],\r\n        } );\r\n      }\r\n\r\n      prevent( e );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends a line break if the provided row is not the end of the document.\r\n   *\r\n   * @param value - A value where the line break will be appended.\r\n   * @param row   - Optional. A row index.\r\n   *\r\n   * @return The value with the line break, or the provided value itself.\r\n   */\r\n  private appendLineBreak( value: string, row = this.row ): string {\r\n    return value + ( row < this.lines.length - 1 ? LINE_BREAK : '' );\r\n  }\r\n\r\n  /**\r\n   * Settles the final value to apply.\r\n   *\r\n   * @param value  - A value to settle.\r\n   * @param endRow - An end row index.\r\n   */\r\n  private settleValue( value: string, endRow: number ): string {\r\n    const { state } = this;\r\n\r\n    if ( state ) {\r\n      if ( state.insertion ) {\r\n        value = this.before + state.insertion + this.after;\r\n      } else if ( ! isUndefined( state.value ) ) {\r\n        value = state.value;\r\n      }\r\n    }\r\n\r\n    return this.appendLineBreak( value, endRow );\r\n  }\r\n\r\n  /**\r\n   * Settles the final position to apply.\r\n   *\r\n   * @param position - A position to settle.\r\n   */\r\n  private settlePosition( position: Position ): Position {\r\n    const { state } = this;\r\n\r\n    if ( state ) {\r\n      if ( state.position ) {\r\n        return state.position;\r\n      }\r\n\r\n      position[ 1 ] += state.offset || 0;\r\n    }\r\n\r\n    return position;\r\n  }\r\n\r\n  /**\r\n   * Returns the current caret position.\r\n   *\r\n   * @return A position of the caret.\r\n   */\r\n  private getCaretPosition(): Position {\r\n    return [ this.row, this.col ];\r\n  }\r\n\r\n  /**\r\n   * Sets the input state.\r\n   * If the state with the provided type exists, new props will be assigned to it.\r\n   * The props object accepts following values:\r\n   *\r\n   * | State | Description |\r\n   * |---|---|\r\n   * | `key?` | The key that makes the input. |\r\n   * | `startRow?` | The start row index to replace lines with the current value from. |\r\n   * | `endRow?` | The end row index to replace lines with the current value to. |\r\n   * | `value?` | The value to replace lines with. If omitted, the current value will be used. |\r\n   * | `insertion?` | Specifies the value to insert at the caret position instead of setting the value. |\r\n   * | `offset?` | The number of offset cols after the state is applied. |\r\n   * | `position?` | Explicitly specifies the position after the state is applied. The `offset` will be ignored. |\r\n   *\r\n   * @param type  - The type of the state.\r\n   * @param props - Optional. An object with state values.\r\n   */\r\n  set( type: string, props: Omit<InputState, 'type'> = {} ): void {\r\n    const { state } = this;\r\n\r\n    if ( state && state.type === type ) {\r\n      this.state = assign( state, props );\r\n    } else {\r\n      this.state = assign( { type }, props );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the current state object if available.\r\n   *\r\n   * @return The current state object if available, or `null` if not.\r\n   */\r\n  get(): InputState | null {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Applies the state to the editor and clears it.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const ryuseiCode = new RyuseiCode();\r\n   * ryuseiCode.apply( 'textarea' );\r\n   *\r\n   * ryuseiCode.on( 'focus', () => {\r\n   *   const { Input } = ryuseiCode.Editor.Components;\r\n   *\r\n   *   setTimeout( () => {\r\n   *     Input.apply( {\r\n   *       insertion: 'foo',\r\n   *       offset: 3,\r\n   *     } );\r\n   *   }, 1000 );\r\n   * } );\r\n   * ```\r\n   *\r\n   * @param state - Optional. A new state to apply.\r\n   */\r\n  apply( state?: InputState ): void {\r\n    this.state = state || this.state;\r\n\r\n    if ( ! this.state || ! this.line ) {\r\n      return;\r\n    }\r\n\r\n    const { Selection, row } = this;\r\n    const { type, startRow = row, endRow = row } = this.state;\r\n    const position = this.getCaretPosition();\r\n\r\n    if ( type !== COMPOSITION_INPUT_TYPE ) {\r\n      this.emit( EVENT_CHANGE, type );\r\n    }\r\n\r\n    this.Code.replaceLines( startRow, endRow, this.settleValue( this.value, endRow ) );\r\n    this.Sync.sync( startRow, endRow, endRow );\r\n\r\n    Selection.set( this.settlePosition( position ) );\r\n\r\n    this.emit( EVENT_CHANGED, type );\r\n\r\n    this.state = null;\r\n    this.info  = null;\r\n  }\r\n\r\n  /**\r\n   * Returns a character at the current caret position or specified col index.\r\n   *\r\n   * @param col - Optional. A col index of the desired character.\r\n   *\r\n   * @return A character at the specified position.\r\n   */\r\n  char( col = this.col ): string {\r\n    return this.value.charAt( col );\r\n  }\r\n\r\n  /**\r\n   * Returns the value of the current line without the tailing line break.\r\n   *\r\n   * @return A text of the current line.\r\n   */\r\n  get value(): string {\r\n    return text( this.line ) || '';\r\n  }\r\n\r\n  /**\r\n   * Sets a new value to the current line.\r\n   * In most cases, it's better to use `apply()` to edit the line instead\r\n   * because this does not syncs the change to the editor.\r\n   *\r\n   * @param value - A new value to set.\r\n   */\r\n  set value( value: string ) {\r\n    text( this.line, value );\r\n  }\r\n\r\n  /**\r\n   * Returns the string of the current line before the caret position.\r\n   *\r\n   * @return The string before the caret.\r\n   */\r\n  get before(): string {\r\n    return this.value.slice( 0, this.col );\r\n  }\r\n\r\n  /**\r\n   * Returns the string of the current line after the caret position.\r\n   *\r\n   * @return The string after the caret.\r\n   */\r\n  get after(): string {\r\n    return this.value.slice( this.col );\r\n  }\r\n\r\n  /**\r\n   * Returns the length of the current line.\r\n   *\r\n   * @return The length of the current line.\r\n   */\r\n  get length(): number {\r\n    return this.value.length;\r\n  }\r\n\r\n  /**\r\n   * Returns the current col index.\r\n   *\r\n   * @return The col index of the caret.\r\n   */\r\n  get col(): number {\r\n    const { line } = this;\r\n    const selection = getSelection();\r\n\r\n    if ( line && selection.rangeCount > 0 ) {\r\n      const range = selection.getRangeAt( 0 ).cloneRange();\r\n      range.setStart( line, 0 );\r\n      return range.toString().length;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Returns `true` if the input is disabled.\r\n   *\r\n   * @internal\r\n   *\r\n   * @return `true` if the input is disabled.\r\n   */\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  /**\r\n   * Makes the input disabled.\r\n   * All keys are ignored while it is disabled.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param disabled - Determines whether to disable or enable the input.\r\n   */\r\n  set disabled( disabled: boolean ) {\r\n    this._disabled = disabled;\r\n  }\r\n}\r\n","import { Elements, EventBusEvent, KeyMatcher } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_KEYDOWN, EVENT_KEYMAP } from '../../constants/events';\nimport { KEYMAP, MODIFIER_KEYS } from '../../constants/keymap';\nimport { Editor } from '../../core/Editor/Editor';\nimport { assign, forOwn, includes, isArray, isMac, isString, matchesKey, normalizeKey, toArray } from '../../utils';\n\n\n/**\n * The component for detecting keyboard shortcuts and distributing them as internal events.\n *\n * @since 0.1.0\n */\nexport class Keymap extends Component {\n  /**\n   * Stores the target keys.\n   */\n  private keys: string[] = [];\n\n  /**\n   * The collection of shortcuts.\n   */\n  private keymap: Record<string, KeyMatcher| KeyMatcher[] | null | false>;\n\n  /**\n   * Initializes the component.\n   *\n   * @internal\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    this.keymap = assign( {}, KEYMAP, this.options.keymap );\n\n    forOwn( this.keymap, matchers => {\n      if ( matchers ) {\n        this.keys.push( ...toArray( matchers, true ).map( matcher => {\n          return matcher[ 0 ].toUpperCase();\n        } ) );\n      }\n    } );\n\n    this.on( EVENT_KEYDOWN, this.onKeydown, this, 0 );\n  }\n\n  /**\n   * Called when any key is pressed.\n   *\n   * @param e  - An EventBusEvent object.\n   * @param ke - A KeyboardEvent object.\n   */\n  private onKeydown( e: EventBusEvent<Editor>, ke: KeyboardEvent ): void {\n    if ( ! this.Editor.readOnly ) {\n      if ( includes( this.keys, normalizeKey( ke.key ).toUpperCase() ) ) {\n        const action = this.find( ke );\n\n        if ( action ) {\n          this.emit( `${ EVENT_KEYMAP }:${ action }`, ke, action );\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds the shortcut action from keymap definition.\n   *\n   * @param e - A KeyboardEvent object.\n   *\n   * @return A found action.\n   */\n  private find( e: KeyboardEvent ): string {\n    let action  = '';\n\n    forOwn( this.keymap, ( matchers, id ) => {\n      if ( this.matches( e, id ) ) {\n        action = id;\n        return false;\n      }\n    } );\n\n    return action;\n  }\n\n  /**\n   * Checks if the keyboard event matches keys of the provided action ID or not.\n   *\n   * @param e  - A KeyboardEvent object.\n   * @param id - An ID.\n   *\n   * @return `true` if the keyboard event matches keys of the ID, or otherwise `false`.\n   */\n  matches( e: KeyboardEvent, id: string ): boolean {\n    const matchers = this.keymap[ id ];\n    return matchers && matchesKey( e, matchers );\n  }\n\n  /**\n   * Builds a shortcut string that describes keys of the provided action ID or a KeyMatcher object.\n   * For example, `undo` or `[ 'Z', true ]` will be `Ctrl+Z`.\n   *\n   * @param id - An action ID in the keymap or a KeyMatcher object line.\n   *\n   * @return A built shortcut string. If the ID is not available, it returns an empty string.\n   */\n  getShortcut( id: string | KeyMatcher ): string {\n    const matchers = isString( id ) ? this.keymap[ id ] : id;\n\n    if ( matchers ) {\n      const matcher = isArray( matchers[ 0 ] ) ? matchers[ 0 ] : matchers as KeyMatcher;\n\n      if ( matcher ) {\n        const modifiers = MODIFIER_KEYS[ isMac() ? 'mac' : 'default' ];\n        const keys      = matcher.slice( 1 ).map( ( use, index ) => use && modifiers[ index ] ).filter( Boolean );\n        return keys.concat( matcher[ 0 ] ).join( '+' );\n      }\n    }\n\n    return '';\n  }\n}\n","import { KeyMatcher } from '@ryusei/code';\r\nimport { toArray } from '../../array';\r\nimport { normalizeKey } from '../normalizeKey/normalizeKey';\r\n\r\n\r\n/**\r\n * Checks if the keyboard event matches the provided matcher or not.\r\n *\r\n * @param e        - A KeyboardEvent object.\r\n * @param matchers - A KeyMatcher tuple or an array with matchers.\r\n *\r\n * @return `true` if the keyboard event satisfies the matcher, or otherwise `false`.\r\n */\r\nexport function matchesKey( e: KeyboardEvent, matchers: KeyMatcher | KeyMatcher[] | null | false ): boolean {\r\n  const key = normalizeKey( e.key ).toUpperCase();\r\n\r\n  return matchers && toArray( matchers, true ).some( matcher => {\r\n    return key === matcher[ 0 ].toUpperCase()\r\n      && ! matcher[ 1 ] === ! e.ctrlKey\r\n      && ! matcher[ 2 ] === ! e.shiftKey\r\n      && ! matcher[ 3 ] === ! e.altKey;\r\n  } );\r\n}\r\n","/**\n * Checks is the platform is Mac or not.\n *\n * @return `true` if the platform is Mac, or otherwise `false`.\n */\nexport function isMac(): boolean {\n  return /Mac/i.test( navigator.platform );\n}\n","import { create, isIE, repeat } from '../../utils';\n\n\n/**\n * The utility class for measuring texts.\n *\n * @since 0.1.0\n */\nexport class MeasureText {\n  /**\n   * Holds the context object.\n   */\n  private context: CanvasRenderingContext2D;\n\n  /**\n   * Stores width of characters.\n   */\n  private chars: Record<string, number> = {};\n\n  /**\n   * The MeasureText constructor.\n   *\n   * @param font - A font string for the context.\n   */\n  constructor( font: string ) {\n    this.context = create( 'canvas' ).getContext( '2d' );\n    this.context.font = font;\n  }\n\n  /**\n   * Returns the width of the provided character.\n   * Note that IE rounds the width of the text.\n   *\n   * @param char     - A character to measure.\n   * @param useCache - Optional. Determines whether to use the cached width or not.\n   *\n   * @return The width of the character in pixel.\n   */\n  private getCharWidth( char: string, useCache = true ): number {\n    const { chars, context } = this;\n\n    return ( useCache && chars[ char ] ) || ( chars[ char ] = isIE()\n      ? context.measureText( repeat( char, 10 ) ).width / 10\n      : context.measureText( char ).width );\n  }\n\n  /**\n   * Returns the width of the provided text.\n   *\n   * @param text     - A text to measure.\n   * @param useCache - Optional. Determines whether to use the cached width or not.\n   */\n  measure( text: string, useCache = true ): number {\n    let width = 0;\n\n    for ( let i = 0; i < text.length; i++ ) {\n      width += this.getCharWidth( text.charAt( i ), useCache );\n    }\n\n    return width;\n  }\n\n  /**\n   * Clears cached width.\n   */\n  clear(): void {\n    this.chars = {};\n  }\n}\n","import { Elements, EventBusEvent, OffsetPosition, Position } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { CLASS_LINE } from '../../constants/classes';\nimport {\n  EVENT_FONT_LOADED,\n  EVENT_MOUNT,\n  EVENT_RESIZE,\n  EVENT_SCROLL_HEIGHT_CHANGED,\n  EVENT_SCROLLED,\n  EVENT_WINDOW_SCROLL,\n} from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { clamp, div, rect, remove, round, styles } from '../../utils';\nimport { MeasureText } from './MeasureText';\n\n\n/**\n * The class for measuring offset positions and caches some values.\n *\n * @since 0.1.0\n */\nexport class Measure extends Component {\n  /**\n   * Caches the lineHeight.\n   */\n  private lineHeightCache: number;\n\n  /**\n   * Caches the DOMRect objects of some elements.\n   */\n  private rectCaches: { editor?: DOMRect, scroller?: DOMRect, container?: DOMRect } = {};\n\n  /**\n   * Keeps the current CSS font settings.\n   */\n  private font: string;\n\n  /**\n   * Holds the MeasureText instance.\n   */\n  private measureText: MeasureText;\n\n  /**\n   * An object with padding values as `{ top, right, bottom, left }`;\n   */\n  padding: { top: number, right: number, bottom: number, left: number };\n\n  /**\n   * The Measure constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.on( EVENT_MOUNT, this.onMount, this, 0 );\n  }\n\n  /**\n   * Called just before components are mounted.\n   * This component must be initialized earlier than other components.\n   *\n   * @param e        - An EventBusEvent object.\n   * @param elements - A collection of essential editor elements.\n   */\n  private onMount( e: EventBusEvent<Editor>, elements: Elements ): void {\n    this.elements = elements;\n    this.createMeasureText();\n    this.updatePadding();\n    this.listen();\n  }\n\n  /**\n   * Listens to some events.\n   * The resize handler must be executed after the Style update listener and before others.\n   */\n  private listen(): void {\n    this.on( EVENT_RESIZE, () => {\n      this.lineHeightCache = 0;\n      this.updatePadding();\n      this.createMeasureText();\n      this.clearRectCaches();\n    }, null, 1 );\n\n    this.on( EVENT_FONT_LOADED, () => {\n      this.measureText.clear();\n    }, null, 1 );\n\n    this.on( [ EVENT_SCROLL_HEIGHT_CHANGED, EVENT_SCROLLED, EVENT_WINDOW_SCROLL ], this.clearRectCaches, this, 1 );\n  }\n\n  /**\n   * Updates the cache of the padding.\n   */\n  private updatePadding(): void {\n    const { editor } = this.elements;\n    const line = div( CLASS_LINE, editor );\n\n    this.padding = {\n      top   : parseFloat( styles( editor, 'paddingTop' ) ) || 0,\n      bottom: parseFloat( styles( editor, 'paddingBottom' ) ) || 0,\n      left  : parseFloat( styles( line, 'paddingLeft' ) ) || 0,\n      right : parseFloat( styles( line, 'paddingRight' ) ) || 0,\n    };\n\n    remove( line );\n  }\n\n  /**\n   * Creates a `MeasureText` instance only when the font settings are changed.\n   */\n  private createMeasureText() {\n    const font = this.buildCSSFont();\n\n    if ( this.font !== font ) {\n      this.measureText = new MeasureText( font );\n      this.font = font;\n    }\n  }\n\n  /**\n   * Returns the CSS font string of the current environment.\n   *\n   * @return A built string.\n   */\n  private buildCSSFont(): string {\n    const { lines } = this.elements;\n    return `${ styles( lines, 'fontSize' ) } ${ styles( lines, 'fontFamily' ) }`;\n  }\n\n  /**\n   * Clears the all rect caches.\n   */\n  private clearRectCaches(): void {\n    this.rectCaches = {};\n  }\n\n  /**\n   * Returns the top position of the line at the specified row.\n   * This clamps the row index from 0 and the total length of lines.\n   *\n   * @param row - A row index.\n   *\n   * @return A top position in pixel.\n   */\n  getTop( row: number ): number {\n    return clamp( row, 0, this.lines.length - 1 ) * this.lineHeight;\n  }\n\n  /**\n   * Returns the bottom position of the line at the specified row.\n   * This clamps the row index from 0 and the total length of lines.\n   *\n   * @param row - A row index.\n   *\n   * @return A bottom position in pixel.\n   */\n  getBottom( row: number ): number {\n    const { Code } = this;\n    const isLast = row >= Code.size - 1;\n    return this.getTop( row + 1 ) + ( isLast ? this.lineHeight : 0 );\n  }\n\n  /**\n   * Computes the closest row index to the offset `top` position.\n   *\n   * @param top - A offset position.\n   *\n   * @return The closest row index to the offset position.\n   */\n  closest( top: number ): number {\n    const row = round( ( top - this.padding.top ) / this.lineHeight );\n    return clamp( row, 0, this.lines.length - 1 );\n  }\n\n  /**\n   * Measures the provided string and returns the width.\n   * This method caches each width of the character in the string for performance.\n   *\n   * @param string   - A string to measure.\n   * @param useCache - Optional. Determines whether to use the cached width or not.\n   *\n   * @return The width of the string.\n   */\n  measureWidth( string: string, useCache = true ): number {\n    return this.measureText.measure( string, useCache );\n  }\n\n  /**\n   * Converts the passed position to the OffsetPosition object as `{ top: number, left: number }`.\n   *\n   * @param position - A position to convert.\n   *\n   * @return An object literal with top and left positions.\n   */\n  getOffset( position: Position ): OffsetPosition {\n    const { padding } = this;\n    const line = position[ 0 ] === this.Selection.focus[ 0 ] ? this.Input.value : this.Code.getLine( position[ 0 ] );\n\n    // console.log( line.slice( 0, position[ 1 ] ) );\n\n    return {\n      top : this.getTop( position[ 0 ] ) + padding.top,\n      left: this.measureWidth( line.slice( 0, position[ 1 ] ) ) + padding.left,\n    };\n  }\n\n  /**\n   * Returns a DOMRect object of the editor element.\n   *\n   * @return A DOMRect object.\n   */\n  get editorRect(): DOMRect {\n    return ( this.rectCaches.editor = this.rectCaches.editor || rect( this.elements.editor ) );\n  }\n\n  /**\n   * Returns a DOMRect object of the scroller element.\n   *\n   * @return A DOMRect object.\n   */\n  get scrollerRect(): DOMRect {\n    return ( this.rectCaches.scroller = this.rectCaches.scroller || rect( this.elements.scroller ) );\n  }\n\n  /**\n   * Returns a DOMRect object of the container element.\n   *\n   * @return A DOMRect object.\n   */\n  get containerRect(): DOMRect {\n    return ( this.rectCaches.container = this.rectCaches.container || rect( this.elements.container ) );\n  }\n\n  /**\n   * Returns the editor line height in pixel.\n   *\n   * @return The line height in pixel.\n   */\n  get lineHeight(): number {\n    return ( this.lineHeightCache = this.lineHeightCache\n      || parseFloat( styles( this.elements.editor, 'lineHeight' ) ) );\n  }\n}\n","import { OffsetPosition, Elements, Position } from '@ryusei/code';\nimport { CLASS_MARKER } from '../../constants/classes';\nimport { Editor } from '../../core/Editor/Editor';\nimport { compare, max, unit } from '../../utils';\n\n\n/**\n * The class for highlighting arbitrary texts.\n *\n * @since 0.1.0\n */\nexport class Marker {\n  /**\n   * Holds the Editor instance.\n   */\n  protected Editor: Editor;\n\n  /**\n   * Holds the editor elements.\n   */\n  protected elements: Elements;\n\n  /**\n   * Holds the scroller element.\n   */\n  protected scroller: HTMLElement;\n\n  /**\n   * Caches the generated HTML string.\n   */\n  protected cache: string;\n\n  /**\n   * Holds the marker content.\n   */\n  protected content: string;\n\n  /**\n   * The Marker constructor.\n   *\n   * @param Editor   - An Editor instance.\n   * @param elements - A collection of editor elements.\n   */\n  constructor( Editor: Editor, elements: Elements ) {\n    this.Editor   = Editor;\n    this.elements = elements;\n    this.scroller = elements.scroller;\n  }\n\n  /**\n   * Calculates boundaries for drawing the marker.\n   *\n   * @param anchor - An anchor position.\n   * @param focus  - A focus position.\n   *\n   * @return An object with start and end boundaries.\n   */\n  protected calcBoundaries( anchor: Position, focus: Position ): { start: OffsetPosition, end: OffsetPosition } {\n    const { Measure } = this.Editor.Components;\n    const isBackward = compare( anchor, focus ) > 0;\n\n    return {\n      start: Measure.getOffset( isBackward ? focus : anchor ),\n      end  : Measure.getOffset( isBackward ? anchor : focus ),\n    };\n  }\n\n  /**\n   * Generates HTML of the marker.\n   *\n   * @param anchor   - An anchor position.\n   * @param focus    - A focus position.\n   * @param useCache - A focus position.\n   *\n   * @return The generated HTML string of the marker.\n   */\n  html( anchor: Position, focus: Position, useCache = true ): string {\n    if ( useCache && this.cache ) {\n      return this.cache;\n    }\n\n    const { Measure: { lineHeight, padding } } = this.Editor.Components;\n    const { start, end } = this.calcBoundaries( anchor, focus );\n    const diff       = end.top - start.top;\n    const fillHeight = diff - lineHeight;\n    const startLeft  = max( start.left, padding.left );\n\n    let html = '';\n\n    if ( diff ) {\n      html += this.buildLine( start.top, startLeft, '100%' );\n      html += this.buildLine( end.top, padding.left, max( end.left - padding.left, 0 ) );\n\n      if ( fillHeight > 0 ) {\n        html += this.buildLine( start.top + lineHeight, padding.left, '100%', fillHeight );\n      }\n    } else {\n      html += this.buildLine( start.top, startLeft, max( end.left - startLeft, 0 ) );\n    }\n\n    this.cache = html;\n\n    return html;\n  }\n\n  /**\n   * Builds HTML of each line.\n   *\n   * @param top    - A top position.\n   * @param left   - A left position.\n   * @param width  - Width.\n   * @param height - Optional. Height.\n   *\n   * @return A generated HTML string.\n   */\n  protected buildLine( top: number, left: number, width: number | string, height?: number | string ): string {\n    let styles = `top: ${ unit( top ) }; left: ${ unit( left ) }; width: ${ unit( width ) };`;\n\n    if ( height ) {\n      styles += ` height: ${ unit( height ) };`;\n    }\n\n    return `<div class=\"${ CLASS_MARKER }\" style=\"${ styles }\"></div>`;\n  }\n}\n","import { Elements, Position } from '@ryusei/code';\nimport { CLASS_MARKERS } from '../../constants/classes';\nimport { Editor } from '../../core/Editor/Editor';\nimport { between, div, html, rect, remove } from '../../utils';\nimport { Marker } from './Marker';\n\n\n/**\n * The class for highlighting arbitrary texts.\n *\n * @since 0.1.0\n */\nexport class StandaloneMarker extends Marker {\n  /**\n   * The element for wrapping marker fragments.\n   */\n  private readonly wrapper: HTMLDivElement;\n\n  /**\n   * The Marker constructor.\n   *\n   * @param Editor   - An Editor instance.\n   * @param elements - A collection of editor elements.\n   * @param classes  - Optional. Class names for the wrapper element.\n   */\n  constructor( Editor: Editor, elements: Elements, classes?: string | string[] ) {\n    super( Editor, elements );\n    this.wrapper = div( [ CLASS_MARKERS ].concat( classes ), elements.background );\n  }\n\n  /**\n   * Draws the range for the anchor to the focus.\n   *\n   * @param anchor - An anchor position.\n   * @param focus  - A focus position.\n   */\n  protected draw( anchor: Position, focus: Position ): void {\n    html( this.wrapper, this.html( anchor, focus, false ) );\n  }\n\n  /**\n   * Clears the marker.\n   */\n  protected clear(): void {\n    html( this.wrapper, '' );\n  }\n\n  /**\n   * Checks if the provided client position is inside the current range or not.\n   *\n   * @param clientX - X position that is relative to the client.\n   * @param clientY - Y position that is relative to the client.\n   *\n   * @return `true` if the position is inside the range, or otherwise `false`.\n   */\n  isInside( clientX: number, clientY: number ): boolean {\n    const { children } = this.wrapper;\n\n    for ( let i = 0; i < children.length; i++ ) {\n      const domRect = rect( children[ i ] );\n\n      if( domRect.width\n        && between( clientX, domRect.left, domRect.right )\n        && between( clientY, domRect.top, domRect.bottom )\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    remove( this.wrapper );\n  }\n}\n","import { Elements, EventBusEvent } from '@ryusei/code';\r\nimport { CLASS_MARKERS } from '../../constants/classes';\r\nimport { EVENT_RESIZE, EVENT_SELECTED, EVENT_SELECTING } from '../../constants/events';\r\nimport { CHANGED, CLICKED_RIGHT, COLLAPSED, SELECTED } from '../../constants/selection-states';\r\nimport { Editor } from '../../core/Editor/Editor';\r\nimport { rafThrottle } from '../../utils';\r\nimport { Selection } from '../Selection/Selection';\r\nimport { StandaloneMarker } from './StandaloneMarker';\r\n\r\n\r\n/**\r\n * The modifier class for the selection marker.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport const CLASS_MARKER_SELECTION = `${ CLASS_MARKERS }--selection`;\r\n\r\n/**\r\n * The class for highlighting a selection range.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport class SelectionMarker extends StandaloneMarker {\r\n  /**\r\n   * The SelectionMarker constructor.\r\n   *\r\n   * @param editor   - An Editor instance.\r\n   * @param elements - A collection of editor elements.\r\n   */\r\n  constructor( editor: Editor, elements: Elements ) {\r\n    super( editor, elements, CLASS_MARKER_SELECTION );\r\n    this.listen();\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  protected listen(): void {\r\n    const { event } = this.Editor;\r\n\r\n    event.on( EVENT_SELECTED, this.onStateChanged.bind( this ), this, 0 );\r\n    event.on( EVENT_SELECTING, rafThrottle( this.drawSelection.bind( this ) ) );\r\n    event.on( EVENT_RESIZE, () => {\r\n      this.clear();\r\n      this.drawSelection();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Called when the selection state is changed.\r\n   *\r\n   * @param e         - An EventBusEvent object.\r\n   * @param Selection - A Selection instance.\r\n   * @param state     - A new state.\r\n   * @param prev      - A previous state.\r\n   */\r\n  private onStateChanged( e: EventBusEvent<Editor>, Selection: Selection, state: number, prev: number ): void {\r\n    if ( Selection.is( COLLAPSED, CHANGED ) ) {\r\n      this.clear();\r\n    }\r\n\r\n    if ( Selection.is( CHANGED, SELECTED ) && prev !== CLICKED_RIGHT ) {\r\n      this.drawSelection();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws the current selection.\r\n   */\r\n  private drawSelection(): void {\r\n    const { Selection } = this.Editor.Components;\r\n\r\n    if ( ! Selection.isCollapsed() ) {\r\n      const range = Selection.get( false );\r\n      this.draw( range.start, range.end );\r\n    } else {\r\n      this.clear();\r\n    }\r\n  }\r\n}\r\n","import { Elements, Range as PositionRange, RangeData } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { CLASS_MARKERS } from '../../constants/classes';\nimport { EVENT_CHUNK_MOVED, EVENT_FONT_LOADED, EVENT_RESIZE, EVENT_SCROLLED } from '../../constants/events';\nimport { between, compare, div, forOwn, text, throttle } from '../../utils';\nimport { Marker } from './Marker';\nimport { SelectionMarker } from './SelectionMarker';\n\n\n/**\n * The throttle duration for calling the `observe` method while scrolling.\n *\n * @since 0.1.0\n */\nexport const OBSERVE_THROTTLE_DURATION = 200;\n\n/**\n * Limits the number of ranges to register.\n *\n * @since 0.1.0\n */\nexport const MAX_RANGES = 10000;\n\n/**\n * The class for highlighting the selection and arbitrary ranges.\n *\n * @since 0.1.0\n */\nexport class Range extends Component {\n  /**\n   * Holds the SelectionMarker instance.\n   *\n   * @readonly\n   */\n  selection: SelectionMarker;\n\n  /**\n   * Stores ranges with categorizing them into arbitrary groups.\n   */\n  readonly ranges: Record<string, RangeData[]>= {};\n\n  /**\n   * Stores wrapper elements of markers.\n   */\n  readonly groups: Record<string, HTMLDivElement> = {};\n\n  /**\n   * Initializes the component.\n   *\n   * @internal\n   *\n   * @param elements - A collection of editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.selection = new SelectionMarker( this.Editor, elements );\n\n    const observe = this.observe.bind( this, false );\n    this.on( EVENT_CHUNK_MOVED, throttle( observe, OBSERVE_THROTTLE_DURATION ) );\n    this.on( EVENT_SCROLLED, observe );\n    this.on( [ EVENT_FONT_LOADED, EVENT_RESIZE ], this.observe.bind( this, true ) );\n  }\n\n  /**\n   * Observes ranges and draw/hide them.\n   *\n   * @param refresh - Optional. If `true`, redraws markers without their caches.\n   */\n  private observe( refresh?: boolean ): void {\n    if ( this.Editor ) {\n      forOwn( this.ranges, ( ranges, group ) => {\n        if ( this.groups[ group ] ) {\n          this.draw( group, refresh );\n        }\n      } );\n    }\n  }\n\n  /**\n   * Draws visible markers.\n   *\n   * @param group   - A group to draw.\n   * @param refresh - Optional. If `true`, redraws markers without their caches.\n   */\n  private draw( group: string, refresh?: boolean ): void {\n    const ranges = this.ranges[ group ];\n\n    let html = '';\n\n    ranges.forEach( data => {\n      const { range } = data;\n\n      if ( this.isVisible( range ) ) {\n        html += data.marker.html( range.start, range.end, ! refresh );\n      }\n    } );\n\n    this.groups[ group ].innerHTML = html;\n  }\n\n  /**\n   * Checks if the range should be drawn or not.\n   * This returns `true` when the range boundary is inside the viewport, or the range contains it.\n   *\n   * @param range - A range to check.\n   *\n   * @return `true` if the range should be drawn or otherwise `false`.\n   */\n  private isVisible( range: PositionRange ): boolean {\n    const { Chunk } = this;\n    const [ startRow ] = range.start;\n    const [ endRow ] = range.end;\n    return Chunk.includes( startRow ) || Chunk.includes( endRow ) || between( Chunk.start, startRow, endRow );\n  }\n\n  /**\n   * Registers ranges to the group and draw them as markers.\n   * They will remain until they are explicitly cleared by the `clear()` method.\n   * If `concat` is `true`, sequential ranges will be concatenated as a single range.\n   *\n   * @example\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'textarea' );\n   *\n   * const { Range } = ryuseiCode.Editor.Components;\n   *\n   * Range.register( 'my-ranges', [\n   *   { start: [ 0, 0 ], end: [ 0, 5 ] },\n   *   { start: [ 1, 0 ], end: [ 1, 3 ] },\n   * ] );\n   *\n   * // Clear ranges after 2 seconds.\n   * setTimeout( () => {\n   *   Range.clear( 'my-ranges' );\n   * }, 2000 );\n   * ```\n   *\n   * @param group       - A group name.\n   * @param ranges      - A range or ranges to draw.\n   * @param concat      - Optional. Determines whether to concat sequential ranges into the single one or not.\n   * @param constructor - Optional. Specifies the Marker constructor.\n   */\n  register( group: string, ranges: PositionRange[], concat = true, constructor: typeof Marker = Marker ): void {\n    const { ranges: info } = this;\n    let lastRange: PositionRange;\n\n    info[ group ] = info[ group ] || [];\n    ranges = ranges.slice( 0, MAX_RANGES );\n\n    for ( let i = 0; i < ranges.length; i++ ) {\n      const range = ranges[ i ];\n\n      if ( concat && lastRange && compare( lastRange.end, range.start ) === 0 ) {\n        lastRange.end = range.end;\n      } else {\n        lastRange = { start: range.start, end: range.end };\n        info[ group ].push( { range: lastRange, marker: new constructor( this.Editor, this.elements ) } );\n      }\n    }\n\n    if ( ! this.groups[ group ] ) {\n      const classes = [ CLASS_MARKERS, `${ CLASS_MARKERS }--${ group }` ];\n      this.groups[ group ] = div( classes, this.elements.background );\n    }\n\n    this.observe();\n  }\n\n  /**\n   * Clears ranges and rendered markers that belong to the specified group.\n   * If the group name is omitted, this method clears all ranges.\n   *\n   * @param group - Optional. A group name to clear.\n   */\n  clear( group?: string ): void {\n    if ( group ) {\n      const ranges = this.ranges[ group ];\n\n      if ( ranges ) {\n        text( this.groups[ group ], '' );\n        this.clearRanges( group );\n      }\n    } else {\n      forOwn( this.ranges, ( markers, key ) => { this.clear( key ) } );\n    }\n  }\n\n  /**\n   * Clears ranges in the specified group, but rendered markers will remain.\n   *\n   * @param group - A group name to clear.\n   */\n  clearRanges( group: string ): void {\n    this.ranges[ group ] = [];\n  }\n}\n","import { Position } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { startsWith, toArray } from '../../utils';\n\n\n/**\n * The class for checking a current state or category.\n * States and categories are defined by language tokenizers.\n *\n * @since 0.1.0\n */\nexport class Scope extends Component {\n  /**\n   * Checks if the current or specified position is in the specified state or category.\n   * With the `!` negating notation, this returns `true` if the position is NOT inside the scope.\n   *\n   * Note that the Lexer (RyuseiLight) determines states and categories.\n   *\n   * @example\n   * ```ts\n   * // Returns `true` if the caret is inside a comment.\n   * Scope.isIn( [ 'comment' ] );\n   *\n   * // Returns `true` if the caret is inside a \"attr\" state.\n   * Scope.isIn( [ '#attr' ] );\n   *\n   * // Returns `true` if the caret is not inside a comment and a string.\n   * Scope.isIn( [ '!comment', '!string' ] );\n   * ```\n   *\n   * @param names    - A name or an array with names of states and/or categories.\n   * @param position - Optional. Specifies the position to check.\n   *\n   * @return `true` if the start position is inside the scope.\n   */\n  isIn( names: string | string[], position?: Position ): boolean {\n    names = toArray( names );\n\n    const states     = names.filter( name => name.indexOf( '#' ) > -1 );\n    const categories = names.filter( name => name.indexOf( '#' ) === -1 );\n\n    return this.inState( states, position ) && this.inCategory( categories, position );\n  }\n\n  /**\n   * Checks if the current or specified position is in the specified state or not.\n   * The `!` negating notation is acceptable.\n   *\n   * @param states   - A name or an array with names of states.\n   * @param position - Optional. Specifies the position to check.\n   */\n  inState( states: string | string[], position?: Position ): boolean {\n    return this.inScope( states, false, position );\n  }\n\n  /**\n   * Checks if the current or specified position is in the specified category or not.\n   * The `!` negating notation is acceptable.\n   *\n   * @param categories - A name or an array with names of categories.\n   * @param position   - Optional. Specifies the position to check.\n   */\n  inCategory( categories: string | string[], position?: Position ): boolean {\n    return this.inScope( categories, true, position );\n  }\n\n  /**\n   * Checks if the current start position is in the specified state or not.\n   * If `category` is `true`, this method checks if the position is in the category or not.\n   *\n   * @param names    - A state or state names.\n   * @param category - Optional. Determines whether to check for a category or not.\n   * @param position - Optional. Specifies the position to check.\n   */\n  private inScope( names: string | string[], category: boolean, position?: Position ): boolean {\n    names = toArray( names );\n\n    const negated = names.filter( name => startsWith( name, '!' ) ).map( name => name.slice( 1 ) );\n\n    if ( negated.length && this.inScope( negated, category ) ) {\n      return false;\n    }\n\n    names = names.filter( name => ! startsWith( name, '!' ) );\n\n    return ! names.length || names.some( name => {\n      const info = this.lines.getInfoAt( position || this.Selection.get().start );\n      return info && info[ category ? 'category' : 'state' ] === name;\n    } );\n  }\n}\n","/**\n * Sets the `contentEditable` attribute of the provided element.\n *\n * @param elm      - An element.\n * @param editable - Whether to set the value to `true` or `false`.\n */\nexport function toggleEditable( elm: HTMLElement, editable: boolean ): void {\n  elm.contentEditable = editable ? 'true' : 'false';\n}\n","import { Position } from '@ryusei/code';\n\n\n/**\n * The origin position.\n *\n * @since 0.1.0\n */\nexport const ORIGIN: Position = [ 0, 0 ];\n\n/**\n * The delay time for reselection after scroll ends.\n *\n * @since 0.1.0\n */\nexport const DELAY_FOR_RESELECTION = 5;\n","import { EventBusCallback, EventBusEvent, EventHandler } from '@ryusei/code';\nimport { toArray } from '../utils';\n\n\n/**\n * The class for provides the simple event system.\n *\n * @since 0.1.0\n */\nexport class EventBus<T = undefined> {\n  /**\n   * Holds all handlers.\n   */\n  protected handlers: Record<string, EventHandler[]> = {};\n\n  /**\n   * The owner of the instance.\n   */\n  private readonly owner: T | undefined;\n\n  /**\n   * The EventBus constructor.\n   *\n   * @param owner - Optional. The owner of the instance.\n   */\n  constructor( owner?: T ) {\n    this.owner = owner;\n  }\n\n  /**\n   * Registers an event handler.\n   *\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param callback - A callback function to register.\n   * @param key      - Optional. An object for an identifier of the handler.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   *                   Lower numbers correspond with earlier execution. The default value is 10.\n   */\n  on( events: string | string[], callback: EventBusCallback, key?: object, priority = 10 ): void {\n    toArray( events ).filter( Boolean ).join( ' ' ).split( ' ' ).forEach( eventNS => {\n      const [ event, namespace ] = eventNS.split( '.' );\n      const eventHandlers = this.handlers[ event ] || [];\n\n      eventHandlers.push( { event, callback, namespace, priority, key } );\n      eventHandlers.sort( ( handler1, handler2 ) => handler1.priority - handler2.priority );\n\n      this.handlers[ event ] = eventHandlers;\n    } );\n  }\n\n  /**\n   * Removes event handlers registered by `on()`.\n   * If only the event name is provided, all handlers that associate with the event are removed.\n   * If the event name and namespace are specified, handlers that associate with the event and namespace are removed.\n   *\n   * @param events - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param key    - Optional. An object for an identifier of the handler.\n   */\n  off( events: string | string[], key?: object ): void {\n    toArray( events ).filter( Boolean ).join( ' ' ).split( ' ' ).forEach( eventNS => {\n      const [ event, namespace ] = eventNS.split( '.' );\n      const eventHandlers = this.handlers[ event ];\n\n      if ( eventHandlers ) {\n        if ( key || namespace ) {\n          this.handlers[ event ] = eventHandlers.filter( handler => {\n            return ! ( handler.key === key && handler.namespace === namespace );\n          } );\n        } else {\n          this.handlers[ event ] = [];\n        }\n      }\n    } );\n  }\n\n  /**\n   * Triggers callback functions.\n   *\n   * @param event - An event name.\n   * @param args  - Optional. Any number of arguments to pass to callback functions.\n   */\n  emit( event: string, ...args: any[] ): void {\n    const eventHandlers = this.handlers[ event ];\n    const eventObject: EventBusEvent<T> = { type: event, owner: this.owner };\n\n    if ( eventHandlers ) {\n      eventHandlers.forEach( handler => { handler.callback( eventObject, ...args ) } );\n    }\n  }\n\n  /**\n   * Removes all handlers.\n   */\n  destroy(): void {\n    this.handlers = {};\n  }\n}\n","import { Elements } from '@ryusei/code';\nimport { EVENT_BLUR, EVENT_FOCUS } from '../../constants/events';\nimport { ARROW_KEYS } from '../../constants/keys';\nimport {\n  CHANGED,\n  CLICKED_RIGHT,\n  COLLAPSED,\n  END,\n  EXTEND,\n  IDLE,\n  SELECTED,\n  SELECTING,\n  START,\n  UPDATE,\n} from '../../constants/selection-states';\nimport { Editor } from '../../core/Editor/Editor';\nimport { State as Base } from '../../event/State';\nimport { activeElement, getSelection, includes, isPrevented, normalizeKey, off, on } from '../../utils';\nimport { Selection } from './Selection';\n\n\n/**\n * The class for observing the selection states.\n *\n * @since 0.1.0\n */\nexport class State extends Base<number> {\n  /**\n   * Holds collection of elements.\n   */\n  private readonly elements: Elements;\n\n  /**\n   * Holds the Editor instance.\n   */\n  private readonly Editor: Editor;\n\n  /**\n   * Holds the Selection instance.\n   */\n  private readonly Selection: Selection;\n\n  /**\n   * The WeakMap key for identifying event handlers(just uses a new empty object).\n   */\n  private readonly key = {};\n\n  /**\n   * Describes what device makes the selection change.\n   */\n  device: 'pointer' | 'keyboard';\n\n  /**\n   * The State constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( IDLE );\n    this.Editor    = Editor;\n    this.elements  = Editor.elements;\n    this.Selection = Editor.Components.Selection;\n    this.listen();\n  }\n\n  /**\n   * Listens to some events.\n   * Note that the `mouseup` event of `window` needs to be listened to instead of the editable element,\n   * because users may release the mouse outside of it.\n   */\n  private listen(): void {\n    const { editable } = this.elements;\n    const { event } = this.Editor;\n    const { key } = this;\n\n    const onKeydown = this.onKeydown.bind( this );\n\n    on( document, 'selectionchange', this.onSelectionChange.bind( this ), key );\n    on( window, 'pointerup', this.onSelectionEnd.bind( this ), key );\n\n    on( editable, 'pointerdown', this.onSelectionStart.bind( this ), key );\n    on( editable, 'keydown', onKeydown, key );\n    on( editable, 'keyup', this.onKeyup.bind( this ), key );\n\n    event.on( EVENT_FOCUS, this.onFocus.bind( this ) );\n    event.on( EVENT_BLUR, this.onBlur.bind( this ) );\n  }\n\n  /**\n   * Called when the editor is focused.\n   */\n  private onFocus(): void {\n    if ( this.is( IDLE ) ) {\n      this.set( COLLAPSED );\n    }\n  }\n\n  /**\n   * Called when the editor is blurred.\n   * Needs to check the Components existence because this may be called after destruction.\n   */\n  private onBlur(): void {\n    if ( this.Editor.Components ) {\n      if ( ! this.isFocused() ) {\n        this.set( IDLE );\n      }\n    }\n  }\n\n  /**\n   * Called whenever the selection of the document is changed.\n   * - Only handles the change made by the editable element.\n   * - Detects the selection change that made by the start action, such as `pointerdown` and\n   *   makes the state go into the `CHANGED` state.\n   * - If the selection changes after `CHANGED`, which means user selects texts and the range is not collapsed,\n   *   makes the state go into the `SELECTING` state.\n   * - In FF, the event is sometimes fired after `pointerdown`.\n   * - In iOS, the event is fired after `pointerup`.\n   */\n  private onSelectionChange(): void {\n    if ( activeElement() !== this.Editor.elements.editable ) {\n      return;\n    }\n\n    if ( this.is( START, EXTEND ) ) {\n      this.set( CHANGED );\n    } else if ( this.is( CHANGED ) ) {\n      this.set( SELECTING );\n    } else if ( this.is( COLLAPSED, SELECTED ) ) {\n      if ( getSelection().isCollapsed ) {\n        this.set( CHANGED );\n        this.set( COLLAPSED );\n      } else {\n        this.set( SELECTING );\n        this.set( SELECTED );\n      }\n    }\n  }\n\n  /**\n   * Called when the pointer becomes active or when arrow keys are pressed.\n   * If a shift key is pressed,\n   * that means the existing selection is being updated instead that a new one is created.\n   *\n   * @param e - An event object.\n   */\n  private onSelectionStart( e: PointerEvent | KeyboardEvent ): void {\n    if ( isPrevented( e ) ) {\n      return;\n    }\n\n    this.device = e instanceof PointerEvent ? 'pointer' : 'keyboard';\n\n    const { Selection } = this;\n\n    if ( e instanceof PointerEvent ) {\n      if ( e.button === 2 && Selection.isInside( e.clientX, e.clientY ) ) {\n        this.set( CLICKED_RIGHT );\n        return;\n      }\n    }\n\n    this.set( e.shiftKey ? EXTEND : START );\n  }\n\n  /**\n   * Called when the `pointerup` or `keyup` event is triggered on the window object.\n   * Note that the state goes into `SELECTED` when the previous state is `EXTEND`\n   * even if the native selection is collapsed,\n   * because an anchor node may disappear after scrolling.\n   * The selection is correctly handled by the Selection class.\n   */\n  private onSelectionEnd(): void {\n    if ( this.device && ! this.is( IDLE ) ) {\n      this.device = null;\n\n      if ( ! this.is( CLICKED_RIGHT ) ) {\n        if ( this.is( EXTEND ) ) {\n          this.set( SELECTED );\n        } else {\n          this.set( END );\n          this.set( getSelection().isCollapsed ? COLLAPSED : SELECTED );\n        }\n      }\n    }\n  }\n\n  /**\n   * Called when any key is pressed.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onKeydown( e: KeyboardEvent ): void {\n    if ( includes( ARROW_KEYS, normalizeKey( e.key ) ) ) {\n      this.onSelectionStart( e );\n    }\n  }\n\n  /**\n   * Called when any key is released.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onKeyup( e: KeyboardEvent ): void {\n    if ( includes( ARROW_KEYS, normalizeKey( e.key ) ) ) {\n      this.onSelectionEnd();\n    }\n  }\n\n  /**\n   * Checks if the editor or the context menu has focus or not.\n   *\n   * @return `true` if they have focus or otherwise `false`.\n   */\n  private isFocused(): boolean {\n    return this.elements.editor.contains( activeElement() ) || this.Editor.Components.ContextMenu.isFocused();\n  }\n\n  /**\n   * Should be called when the custom selection is manually updated.\n   *\n   * @param collapsed - Indicates whether the new selection is collapsed or not.\n   */\n  update( collapsed: boolean ): void {\n    if ( ! this.is( START, EXTEND ) ) {\n      this.set( UPDATE );\n      this.set( collapsed ? COLLAPSED : SELECTED );\n    }\n  }\n\n  /**\n   * Attempts to refresh the selection state.\n   *\n   * @param collapsed - Indicates whether the new selection is collapsed or not.\n   */\n  refresh( collapsed: boolean ): void {\n    if ( ! this.is( START, EXTEND ) ) {\n      this.set( START );\n      this.set( CHANGED );\n      this.set( collapsed ? COLLAPSED : SELECTED );\n    }\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    this.event.destroy();\n    off( null, '', this.key );\n  }\n}\n","import { EventBusCallback } from '@ryusei/code';\nimport { includes, slice } from '../utils';\nimport { EventBus } from './EventBus';\n\n\n/**\n * The class for providing a simple state system.\n *\n * @since 0.1.0\n */\nexport class State<T = number> {\n  /**\n   * Indicates the current state.\n   */\n  private state: T;\n\n  /**\n   * Keeps the prev state.\n   */\n  private prev: T | undefined;\n\n  /**\n   * Indicates whether the state change is on hold or not.\n   */\n  private held: boolean;\n\n  /**\n   * The EventBus instance.\n   */\n  protected event = new EventBus();\n\n  /**\n   * The State constructor.\n   *\n   * @param initial - An initial state.\n   */\n  constructor( initial: T ) {\n    this.state = initial;\n  }\n\n  /**\n   * Sets a new state.\n   *\n   * @param state - A state to change to.\n   */\n  set( state: T ): void {\n    if ( this.state !== state && ! this.held ) {\n      this.prev  = this.state;\n      this.state = state;\n      this.event.emit( 'changed', state, this.prev );\n    }\n  }\n\n  /**\n   * Checks if the current state is a provided one or one of them.\n   * If multiple states are passed, this method checks them by the `or` condition.\n   *\n   * @param states - A state or states to check.\n   */\n  is( ...states: T[] ): boolean {\n    return includes( slice( states ), this.state );\n  }\n\n  /**\n   * Checks if the previous state is a provided one or one of them.\n   * If multiple states are passed, this method checks them by the `or` condition.\n   *\n   * @param states - A state or states to check.\n   */\n  isPrev( ...states: T[] ): boolean {\n    return includes( slice( states ), this.prev );\n  }\n\n  /**\n   * Holds the current state so that it won't change.\n   */\n  hold(): void {\n    this.held = true;\n  }\n\n  /**\n   * Disables to hold the state.\n   */\n  release(): void {\n    this.held = false;\n  }\n\n  /**\n   * Registers the event handler.\n   *\n   * @param events   - An event name or names separated by spaces.\n   * @param callback - A callback function to register.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   */\n  on( events: string, callback: EventBusCallback, priority?: number ): void {\n    this.event.on( events, callback, this, priority );\n  }\n}\n","import { Elements, EventBusEvent, Position, Range, SelectionBoundary } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { CLASS_EMPTY, CLASS_LINE } from '../../constants/classes';\nimport {\n  EVENT_SCROLLED,\n  EVENT_SCROLLER_SCROLL,\n  EVENT_SELECTED,\n  EVENT_SELECTING,\n  EVENT_SELECTION_CHANGE,\n  EVENT_WINDOW_SCROLL,\n} from '../../constants/events';\nimport {\n  CHANGED,\n  CLICKED_RIGHT,\n  COLLAPSED,\n  EXTEND,\n  SELECTED,\n  SELECTING,\n  START,\n  UPDATE,\n} from '../../constants/selection-states';\nimport * as STATES from '../../constants/selection-states';\nimport {\n  activeElement,\n  attr,\n  closest,\n  compare,\n  createRange,\n  findSelectionBoundary,\n  format,\n  getSelection,\n  hasClass,\n  isBr,\n  isGecko,\n  isHTMLElement,\n  isIE,\n  isMobile,\n  isText,\n  nextTick,\n  prevent, rect,\n  setSelection,\n  slice,\n} from '../../utils';\nimport { toggleEditable } from '../../utils/dom/toggleEditable/toggleEditable';\nimport { DELAY_FOR_RESELECTION, ORIGIN } from './constants';\nimport { State } from './State';\n\n\n/**\n * The class for handing both a native and custom selection.\n *\n * @since 0.1.0\n */\nexport class Selection extends Component {\n  /**\n   * The collection of selection states.\n   *\n   * | State | Description |\n   * |---|---|\n   * | `IDLE` | The editor is not active. |\n   * | `COLLAPSED` | The selection is collapsed. |\n   * | `START` | The selection will change soon. The native selection has not been updated at this timing. |\n   * | `CHANGED` | The selection has just changed after the `START` or `EXTEND` state. The native selection has been updated. |\n   * | `UPDATE` | The selection has been manually updated via `update()`. |\n   * | `SELECTING` | An user starts selecting texts. |\n   * | `EXTEND` | The existing selection will be extended soon. |\n   * | `END` | An user finishes selection. The native selection has not been updated at this timing (in Gecko). |\n   * | `SELECTED` | The selection which is not collapsed has been settled. |\n   * | `SELECTED_ALL` | All contents has been selected. |\n   * | `CLICKED_RIGHT` | The selection is right-clicked. |\n   */\n  readonly STATES = STATES;\n\n  /**\n   * The State instance that manages the selection states.\n   *\n   * @readonly\n   */\n  state: State;\n\n  /**\n   * The position where the selection starts.\n   *\n   * @readonly\n   */\n  anchor: Position = ORIGIN;\n\n  /**\n   * The position where the selection ends.\n   *\n   * @readonly\n   */\n  focus: Position = ORIGIN;\n\n  /**\n   * Keeps the latest scrollTop amount.\n   */\n  private scrollTop: number;\n\n  /**\n   * Initializes the component.\n   *\n   * @internal\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.state = new State( this.Editor );\n    this.listen();\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    const { editable } = this.elements;\n\n    this.bind( document, 'selectionchange', this.onSelectionChange, this );\n\n    if ( isIE() ) {\n      this.bind( editable, 'dblclick', this.onDblClick, this );\n    } else {\n      this.bind( editable, 'mousedown', this.onMouseDown, this );\n    }\n\n    this.state.on( 'changed', this.onStateChanged.bind( this ) );\n\n    this.on( [ EVENT_SCROLLER_SCROLL, EVENT_WINDOW_SCROLL ], this.onScroll, this );\n    this.on( EVENT_SCROLLED, this.ensureSelection, this );\n  }\n\n  /**\n   * Called whenever the selection is changed.\n   * Be aware that this is fired even when the editor is not focused.\n   */\n  private onSelectionChange(): void {\n    if ( this.isFocused() ) {\n      if ( this.is( SELECTING, EXTEND ) ) {\n        const focus = this.getNativeSelection( true );\n\n        if ( focus ) {\n          this.focus = focus;\n          this.emit( EVENT_SELECTING );\n        }\n      }\n\n      this.emit( EVENT_SELECTION_CHANGE );\n    }\n  }\n\n  /**\n   * Called when the mouse button is pressed.\n   * Detects the double-click earlier than the `dblclick` to prevent the native smart selection.\n   *\n   * @param e - A MouseEvent object.\n   */\n  private onMouseDown( e: MouseEvent ): void {\n    if ( e.detail > 1 ) {\n      this.onDblClick();\n      prevent( e );\n    }\n  }\n\n  /**\n   * Called when the code element is double-clicked.\n   * If a word is clicked, selects it. Otherwise, selects a clicked node.\n   */\n  private onDblClick(): void {\n    const range = this.getWordRangeAt( this.anchor );\n\n    if ( range ) {\n      this.set( range.start, range.end );\n    } else {\n      const boundary = this.getNativeSelectionBoundary( false );\n\n      if ( boundary ) {\n        const { node } = boundary;\n        const selection = getSelection();\n        const range     = createRange();\n\n        range.selectNode( node );\n        selection.removeAllRanges();\n        selection.addRange( range );\n\n        const anchor = this.getNativeSelection();\n        const focus  = this.getNativeSelection( true );\n\n        if ( anchor && focus ) {\n          this.set( anchor, focus );\n        }\n      }\n    }\n  }\n\n  /**\n   * Called whenever the selection state is changed.\n   *\n   * - Updating positions at the `START` state is too early\n   *   because the native selection has not been updated yet.\n   * - Jumps to the focus position just before extending the existing selection by a keyboard\n   *   so that the native selection is able to be updated.\n   * - The `EVENT_SELECTING` event must be emitted after `EVENT_SELECTED` event\n   *   for listeners to prepare something at the `SELECTING` state.\n   * - When the state goes into `SELECTED` state, the custom selection may be collapsed,\n   *   e.g. single backward selection -> shift + arrow. To make sure the state becomes `COLLAPSED`,\n   *   sets the native selection.\n   *\n   * @param e     - An EventBusEvent object.\n   * @param state - A state number.\n   * @param prev  - A previous state number.\n   */\n  private onStateChanged( e: EventBusEvent, state: number, prev: number ): void {\n    if ( prev !== UPDATE && prev !== CLICKED_RIGHT ) {\n      if ( state === COLLAPSED || state === CHANGED || state === SELECTED ) {\n        this.anchor = this.getNativeSelection() || this.anchor;\n        this.focus  = this.getNativeSelection( true ) || this.focus;\n      }\n\n      if ( prev !== START && state === SELECTED ) {\n        if ( this.detectSelectAll() ) {\n          const { lines, lines: { length } } = this;\n          const lastLineLength = lines[ length - 1 ].text.length;\n\n          if ( compare( this.anchor, [ 0, 0 ] ) !== 0\n            || compare( this.focus, [ length - 1, lastLineLength ] ) !== 0 )\n          {\n            this.selectAll();\n            return;\n          }\n        }\n      }\n    }\n\n    this.emit( EVENT_SELECTED, this, state, prev );\n\n    if ( state === SELECTING ) {\n      this.emit( EVENT_SELECTING );\n    }\n  }\n\n  /**\n   * Called when the window or scroller scrolls.\n   */\n  private onScroll(): void {\n    const { Input } = this;\n    const top = window.pageYOffset + this.elements.scroller.scrollTop;\n\n    if ( this.isMultiline() && ! Input.disabled && top !== this.scrollTop ) {\n      this.Input.disabled = true;\n      this.scrollTop = top;\n    }\n  }\n\n  /**\n   * Sets a new selection.\n   *\n   * @param anchor - An anchor position.\n   * @param focus  - Optional. A focus position. If omitted, the selection will be collapsed to the anchor.\n   */\n  set( anchor: Position, focus?: Position ): void {\n    this.setNativeSelection( anchor, focus ) || this.update( anchor, focus );\n  }\n\n  /**\n   * Returns positions of the current selection.\n   * If the `normalize` is `true`, the `start` will be always preceding position.\n   *\n   * @param normalize - Optional. Whether to normalize the position or not.\n   *\n   * @return An object literal with anchor and focus positions.\n   */\n  get( normalize = true ): Range {\n    const { anchor, focus } = this;\n    const isBackward = this.isBackward();\n\n    return {\n      start: isBackward && normalize ? focus : anchor,\n      end  : isBackward && normalize ? anchor : focus,\n    };\n  }\n\n  /**\n   * Updates the custom selection range without using the native selection.\n   *\n   * @param anchor   - An anchor position.\n   * @param focus    - Optional. A focus position.\n   * @param silently - Optional. Whether to change the state or not.\n   */\n  update( anchor: Position, focus?: Position, silently?: boolean ): void {\n    this.anchor = anchor;\n    this.focus  = focus || anchor;\n\n    if ( ! silently ) {\n      this.state.update( this.isCollapsed() );\n    }\n  }\n\n  /**\n   * Selects the current or specified line.\n   *\n   * @param row       - Optional. A row index where to select.\n   * @param refresh   - Optional. Determines whether to refresh the current selection or not.\n   * @param backwards - Optional. Determines whether to select a line backwards or not.\n   */\n  selectLine( row = this.focus[ 0 ], refresh = true, backwards?: boolean ): void {\n    const { lines } = this;\n    const line = lines[ row ];\n\n    if ( line ) {\n      const start: Position = [ row, 0 ];\n      const end: Position   = row < lines.length - 1 ? [ row + 1, 0 ] : [ row, line.text.length ];\n\n      const anchor = backwards ? end : start;\n      const focus  = backwards ? start : end;\n\n      if ( refresh ) {\n        this.set( anchor, focus );\n      } else {\n        this.update( anchor, focus, true );\n      }\n    }\n  }\n\n  /**\n   * Selects again the current selection.\n   */\n  reselect(): void {\n    this.set( this.anchor, this.focus );\n  }\n\n  /**\n   * Selects the whole code.\n   */\n  selectAll(): void {\n    const { lines } = this;\n    const endRow = lines.length - 1;\n    this.set( [ 0, 0 ], [ endRow, lines[ endRow ].text.length ] );\n  }\n\n  /**\n   * Holds the current state so that it won't change.\n   */\n  hold(): void {\n    this.state.hold();\n  }\n\n  /**\n   * Disables to hold the state so that it will change.\n   */\n  release(): void {\n    this.state.release();\n  }\n\n  /**\n   * Converts the selection to a string.\n   * This returns an empty string when the selection is collapsed.\n   *\n   * @return A string representing the current selection.\n   */\n  toString(): string {\n    const range = this.get();\n    return this.Code.sliceRange( range.start, range.end );\n  }\n\n  /**\n   * Returns the DOMRect object of the native selection boundary.\n   * Note that the boundary node is usually a Text node,\n   * but sometimes the line or the editable element.\n   *\n   * @param focus - Determines whether to get the DOMRect of the focus or anchor node.\n   *\n   * @return A DOMRect object if available, or otherwise `null`.\n   */\n  getRect( focus: boolean ): DOMRect | null {\n    const boundary = this.getNativeSelectionBoundary( focus );\n\n    if ( boundary ) {\n      let { node, offset } = boundary;\n\n      while ( isHTMLElement( node ) ) {\n        node   = node.firstChild;\n        offset = 0;\n\n        if ( isBr( node ) ) {\n          return rect( node );\n        }\n      }\n\n      if ( node ) {\n        const range = createRange();\n        range.setStart( node, offset );\n        range.collapse( true );\n\n        return rect( range );\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns the current location as a string formatted by the i18n definition, such as `'Line: %s, Column: %s'`.\n   *\n   * @return A string that describes the current location.\n   */\n  getLocation(): string {\n    const { focus } = this;\n    return format( this.i18n.location, focus[ 0 ] + 1, focus[ 1 ] + 1 );\n  }\n\n  /**\n   * Checks if the selection state is one of the provided states or not.\n   * This is just an alias of the `state.is()` method.\n   *\n   * @example\n   * ```ts\n   * // Checks if the state is COLLAPSED or not:\n   * Selection.is( Selection.STATES.COLLAPSED );\n   *\n   * // Checks if the state is START, EXTEND or not:\n   * Selection.is( Selection.STATES.START, Selection.STATES.EXTEND );\n   * ```\n   *\n   * @param states - A state or states to check.\n   *\n   * @return `true` if the current state is one of the provided states, or otherwise `false`.\n   */\n  is( ...states: number[] ): boolean {\n    return this.state.is( ...states );\n  }\n\n  /**\n   * Collapses the selection to the anchor or focus position.\n   *\n   * @param toFocus - Optional. Collapses the selection to the focus position.\n   */\n  collapse( toFocus?: boolean ): void {\n    this.set( toFocus ? this.focus : this.anchor );\n  }\n\n  /**\n   * Checks is the selection is backward or not.\n   *\n   * @return `true` if the selection is backward, or otherwise `false`.\n   */\n  isBackward(): boolean {\n    return compare( this.anchor, this.focus ) > 0;\n  }\n\n  /**\n   * Checks if the selection is collapsed or not.\n   *\n   * @return `true` if the selection is collapsed, or otherwise `false`.\n   */\n  isCollapsed(): boolean {\n    return compare( this.anchor, this.focus ) === 0;\n  }\n\n  /**\n   * Checks if more than one line is selected or not.\n   *\n   * @return `true` if more than one line is selected or otherwise `false`.\n   */\n  isMultiline(): boolean {\n    return this.anchor[ 0 ] !== this.focus[ 0 ];\n  }\n\n  /**\n   * Checks if the provided client position is inside the current selection or not.\n   *\n   * @param clientX - The X position that is relative to the client.\n   * @param clientY - The Y position that is relative to the client.\n   *\n   * @return `true` if the position is inside the selection, or otherwise `false`.\n   */\n  isInside( clientX: number, clientY: number ): boolean {\n    return this.Range.selection.isInside( clientX, clientY );\n  }\n\n  /**\n   * Destroys the instance.\n   *\n   * @internal\n   */\n  destroy(): void {\n    this.state.destroy();\n    super.destroy();\n  }\n\n  /**\n   * Sets a native selection range.\n   * Be aware that calling `setSelection` emits `selectionchange` only in IE, but does not in others.\n   *\n   * @param start - A start position.\n   * @param end   - Optional. An end position. If omitted, the start position is used alternatively.\n   *\n   * @return `true` if the selection is successfully changed, or otherwise `undefined`.\n   */\n  private setNativeSelection( start: Position, end = start ): boolean {\n    const { Chunk } = this;\n    const isSingle  = start[ 0 ] === end[ 0 ];\n    const startLine = Chunk.getLine( start[ 0 ] ) || Chunk.addPreservedLine( false, start[ 0 ] );\n    const endLine   = isSingle ? startLine : Chunk.getLine( end[ 0 ] ) || Chunk.addPreservedLine( true, end[ 0 ] );\n    const collapsed = compare( start, end ) === 0;\n    const anchor    = findSelectionBoundary( startLine, start[ 1 ] );\n    const focus     = collapsed ? anchor : findSelectionBoundary( endLine, end[ 1 ] );\n\n    if ( anchor && focus ) {\n      const anchorNode = anchor.node;\n      const focusNode  = focus.node;\n\n      anchor.node = isBr( anchorNode ) ? anchorNode.parentNode : anchorNode;\n      focus.node  = isBr( focusNode ) ? focusNode.parentNode : focusNode;\n\n      this.hold();\n      setSelection( anchor, focus );\n      this.release();\n\n      this.state.refresh( collapsed );\n    }\n\n    return true;\n  }\n\n  /**\n   * Converts the native selection boundary to a position represented as [ row, col ].\n   * In FF, the selection\n   *\n   * @param focus - Optional. Whether to returns a position on the focus boundary or not.\n   *\n   * @return A converted position. If the position is not found, always returns [ 0, 0 ].\n   */\n  private getNativeSelection( focus?: boolean ): Position | null {\n    const line     = this.findActiveLine( focus );\n    const boundary = this.getNativeSelectionBoundary( focus );\n\n    if ( line && boundary ) {\n      const { Chunk } = this;\n      const range = createRange();\n\n      range.setStart( line, 0 );\n      range.setEnd( boundary.node, boundary.offset );\n\n      let row = Chunk.getRow( line );\n\n      if ( row < 0 ) {\n        const anchor = Chunk.getBoundary( false );\n        const focus  = Chunk.getBoundary( true );\n\n        if ( anchor.line === line ) {\n          row = anchor.row;\n        } else if ( focus.line === line ) {\n          row = focus.row;\n        }\n      }\n\n      if ( row > -1 ) {\n        return [ row, range.toString().length ];\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Finds a line where the native anchor node belongs.\n   * If the `focus` is set to `true`, finds a line where the native focus node belongs.\n   *\n   * @param focus - Determines whether to find a line that has focus node or not.\n   *\n   * @return A line where an anchor or a focus node belongs.\n   */\n  private findActiveLine( focus?: boolean ): HTMLElement | null {\n    const boundary = this.getNativeSelectionBoundary( focus );\n\n    if ( boundary ) {\n      const { node } = boundary;\n      const elm = isText( node ) ? node.parentNode : node;\n\n      if ( isHTMLElement( elm ) ) {\n        return closest( elm, `.${ CLASS_LINE }` );\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Converts the provided position to the range for wrapping the word at the position.\n   * If the text at the position is not a word, such as `/` or `-`, this returns `null`.\n   *\n   * @param row - A row index.\n   * @param col - A col index.\n   *\n   * @return An object that describes the range of the word at the position.\n   *         If the text is not a word, returns `null`.\n   */\n  private getWordRangeAt( [ row, col ]: Position ): Range {\n    const line = this.lines[ row ];\n\n    if ( line ) {\n      const string = line.text;\n      const words  = string.split( /[^\\w]/ );\n\n      let index = 0;\n\n      for ( let i = 0; i < words.length; i++ ) {\n        const from = i > 0 ? index + 1 : 0;\n        const to   = from + words[ i ].length;\n\n        if ( from <= col && col < to ) {\n          return { start: [ row, from ], end: [ row, to ] };\n        }\n\n        index = to;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns a boundary node and offset of the native selection.\n   * Be aware that the target node must be in the chunk,\n   * or otherwise this method returns `null`.\n   * Besides, IE returns a parent node as a boundary node, and child index as a offset\n   * if the boundary is `<br>`(an empty line).\n   *\n   * @param focus - Whether to get the focus boundary or not.\n   *\n   * @return An object literal with a node and offset.\n   */\n  private getNativeSelectionBoundary( focus: boolean ): SelectionBoundary {\n    const { editable } = this.elements;\n    const selection = getSelection();\n    const prefix    = focus ? 'focus' : 'anchor';\n\n    let node   = selection[ `${ prefix }Node` ];\n    let offset = selection[ `${ prefix }Offset` ];\n\n    if ( node === editable ) {\n      node   = editable.children[ offset ];\n      offset = 0;\n    }\n\n    return node ? { node, offset } : null;\n  }\n\n  /**\n   * Detects selection of all contents in a immediate way, such as the `Select All` iOS context menu.\n   *\n   * @return `true` if all contents are selected, or otherwise `false`.\n   */\n  private detectSelectAll(): boolean {\n    const { lines } = this.elements;\n    const anchorLine = this.findActiveLine( false );\n    const focusLine  = this.findActiveLine( true );\n    const elms       = slice( lines.children ).filter( elm => ! hasClass( elm, CLASS_EMPTY ) );\n\n    return anchorLine === elms[ 0 ]\n      && focusLine === elms[ elms.length - 1 ]\n      && compare( this.anchor, this.focus )\n      && this.anchor[ 1 ] === 0\n      && this.focus[ 1 ] === focusLine.textContent.length;\n  }\n\n  /**\n   * The dirty code to ensure the selection contains the latest nodes.\n   */\n  private ensureSelection(): void {\n    const { Input } = this;\n    const { editable } = this.elements;\n    const selection = getSelection();\n\n    if ( ! isMobile() && this.isMultiline() && activeElement() === editable && selection.setBaseAndExtent ) {\n      const { editable } = this.elements;\n      const { anchorOffset, focusOffset } = selection;\n      let { anchorNode, focusNode } = selection;\n      attr( editable, { 'aria-hidden': true } );\n\n      this.hold();\n      selection.removeAllRanges();\n\n      if ( isGecko() ) {\n        const anchorClone = anchorNode.cloneNode( true );\n        const focusClone  = focusNode.cloneNode( true );\n\n        anchorNode.parentNode.replaceChild( anchorClone, anchorNode );\n        focusNode.parentNode.replaceChild( focusClone, focusNode );\n\n        anchorNode = anchorClone;\n        focusNode  = focusClone;\n      } else {\n        toggleEditable( editable, false );\n      }\n\n      setTimeout( () => {\n        selection.setBaseAndExtent( anchorNode, anchorOffset, focusNode, focusOffset );\n\n        nextTick( () => {\n          this.Editor.focus();\n          Input.disabled = false;\n          toggleEditable( editable, true );\n          attr( editable, { 'aria-hidden': null } );\n          this.release();\n        } );\n      }, DELAY_FOR_RESELECTION );\n    } else {\n      Input.disabled = false;\n    }\n  }\n\n  /**\n   * Checks if the editor is focused or not.\n   *\n   * @return `true` if the editor is focused, or otherwise `false`.\n   */\n  private isFocused(): boolean {\n    return this.Editor && this.Editor.isFocused();\n  }\n}\n","import { SelectionBoundary } from '@ryusei/code';\r\nimport { getSelection } from '../getSelection/getSelection';\r\n\r\n\r\n/**\r\n * Sets a selection by an anchor and a focus object.\r\n * Note that the Range constructor does not supported by IE.\r\n *\r\n * @param anchor - An anchor boundary object.\r\n * @param focus  - A focus boundary object.\r\n */\r\nexport function setSelection( anchor: SelectionBoundary, focus: SelectionBoundary ): void {\r\n  if ( anchor && focus ) {\r\n    const selection = getSelection();\r\n\r\n    if ( selection.setBaseAndExtent ) {\r\n      selection.setBaseAndExtent( anchor.node, anchor.offset, focus.node, focus.offset );\r\n    } else {\r\n      const range = selection.rangeCount > 0 ? selection.getRangeAt( 0 ) : document.createRange();\r\n\r\n      range.setStart( anchor.node, anchor.offset );\r\n      range.setEnd( focus.node, focus.offset );\r\n      selection.removeAllRanges();\r\n      selection.addRange( range );\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Checks is the browser is based on the Gecko engine or not.\r\n *\r\n * @return `true` if the browser is the browser is based on the Gecko (Firefox), or otherwise `false`.\r\n */\r\nexport function isGecko(): boolean {\r\n  return !! window[ 'InstallTrigger' ];\r\n}\r\n","import { EVENT_FONT_LOADED } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { Measure } from '../Measure/Measure';\n\n\n/**\n * The sample string.\n *\n * @since 0.1.3\n */\nconst SAMPLE = '    ';\n\n/**\n * The timeout duration in milliseconds.\n *\n * @since 0.1.3\n */\nconst TIMEOUT = 5000;\n\n/**\n * The class for observing the font loading.\n *\n * @since 0.1.3\n */\nexport class FontObserver {\n  /**\n   * Keeps the initial width of the sample string.\n   */\n  private readonly initialWidth: number;\n\n  /**\n   * Holds the Editor instance.\n   */\n  private readonly Editor: Editor;\n\n  /**\n   * Holds the Measure instance.\n   */\n  private readonly Measure: Measure;\n\n  /**\n   * Keeps the time when the instance is created.\n   */\n  private readonly time = Date.now();\n\n  /**\n   * The Observer constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    this.Editor       = Editor;\n    this.Measure      = this.Editor.Components.Measure;\n    this.initialWidth = this.Measure.measureWidth( SAMPLE );\n\n    this.observe();\n  }\n\n  /**\n   * Observes the font loading.\n   */\n  private observe(): void {\n    const width = this.Measure.measureWidth( SAMPLE, false );\n\n    if ( width !== this.initialWidth ) {\n      this.Editor.event.emit( EVENT_FONT_LOADED );\n    } else {\n      if ( Date.now() - this.time < TIMEOUT ) {\n        requestAnimationFrame( this.observe.bind( this ) );\n      }\n    }\n  }\n}\n","import { Elements } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport {\n  CLASS_CARET,\n  CLASS_EDITOR,\n  CLASS_EMPTY,\n  CLASS_LINE,\n  CLASS_MARKER,\n  CLASS_PRESERVED,\n} from '../../constants/classes';\nimport { EVENT_INIT_STYLE } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { append, camelToKebab, forOwn, isString, isUndefined, query, remove, text, unit } from '../../utils';\nimport { FontObserver } from './FontObserver';\n\n\n/**\n * The component for customizing some styles of the editor.\n *\n * @since 0.1.0\n */\nexport class Style extends Component {\n  /**\n   * Stores all styles.\n   */\n  private selectors: Record<string, Record<string, number | string>> = {};\n\n  /**\n   * Holds the style element.\n   */\n  private style: HTMLStyleElement;\n\n  /**\n   * The Style constructor.\n   *\n   * @param Editor - An Editor element.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n\n    this.init();\n\n    this.on( 'view:open', ( e, append ) => {\n      this.emit( EVENT_INIT_STYLE, this.add.bind( this ) );\n      append( `<style id=\"${ this.options.id }-style\">${ this.build() }</style>` );\n    } );\n  }\n\n  /**\n   * Adds styles defined in options.\n   */\n  private init(): void {\n    const { options, options: { lineHeight, tabSize } } = this;\n\n    [ 'width', 'height', 'minWidth', 'minHeight', 'maxWidth', 'maxHeight' ].forEach( prop => {\n      const value = options[ prop ];\n\n      if ( value ) {\n        this.add( 'root', prop, unit( value ) );\n      }\n    } );\n\n    if ( tabSize ) {\n      this.add( 'root', '-moz-tab-size', tabSize );\n      this.add( 'root', 'tabSize', tabSize );\n    }\n\n    const height = lineHeight ? `${ lineHeight }em` : undefined;\n\n    this.add( `.${ CLASS_EDITOR }`, {\n      lineHeight: lineHeight,\n      fontFamily: options.monospaceFont,\n    } );\n\n    this.add( `.${ CLASS_MARKER }`, 'minHeight', height );\n    this.add( `.${ CLASS_CARET }`, 'height', height );\n    this.add( `.${ CLASS_LINE }:not(.${ CLASS_EMPTY }):not(.${ CLASS_PRESERVED })`, 'height', height );\n  }\n\n  /**\n   * Converts the selectors object into a single style string.\n   *\n   * @return A built string.\n   */\n  private build(): string {\n    let html = '';\n\n    forOwn( this.selectors, ( styles, selector ) => {\n      let props = '';\n\n      forOwn( styles, ( value, prop ) => {\n        if ( ! isUndefined( value ) ) {\n          props += `${ camelToKebab( prop ) }: ${ value };`;\n        }\n      } );\n\n      if ( props ) {\n        html += `${ selector }{${ props }}`;\n      }\n    } );\n\n    return html;\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @internal\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    this.style = query( elements.root, 'style' );\n    append( query( document, 'head' ), this.style );\n\n    if ( this.options.monospaceFont ) {\n      new FontObserver( this.Editor );\n    }\n  }\n\n  /**\n   * Adds styles to the specified selector.\n   * The `Editor#apply()` or `Editor#html()` applies the registered styles once,\n   * and therefore initial styles must be added before them.\n   * Otherwise, you should manually invoke the `apply()` method.\n   *\n   * @param selector - A selector string.\n   * @param prop     - A CSS property or an objet literal with properties and values.\n   * @param value    - Optional. A value for the property.\n   */\n  add( selector: string, prop: string | Record<string, number | string>, value?: number | string ): void {\n    if ( isString( prop ) ) {\n      if ( ! isUndefined( value ) ) {\n        const { selectors } = this;\n        selector = `#${ this.options.id }${ selector === 'root' ? '' : ' ' + selector }`;\n        selectors[ selector ] = selectors[ selector ] || {};\n        selectors[ selector ][ prop ] = value;\n      }\n    } else {\n      forOwn( prop, ( value, key ) => {\n        this.add( selector, key, value );\n      } );\n    }\n  }\n\n  /**\n   * Applies registered styles to the style element.\n   */\n  apply(): void {\n    text( this.style, this.build() );\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * @internal\n   */\n  destroy(): void {\n    super.destroy();\n    remove( this.style );\n  }\n}\n","/**\r\n * Converts the provided string in the camel case to the kebab case.\r\n *\r\n * @param string - A string to convert.\r\n */\r\nexport function camelToKebab( string: string ): string {\r\n  return string.replace( /([a-z0-9])([A-Z])/g, '$1-$2' ).toLowerCase();\r\n}\r\n","import { RowRange } from '@ryusei/code';\r\nimport { Component } from '../../classes/Component/Component';\r\nimport { EVENT_SYNCED } from '../../constants/events';\r\nimport { between, isUndefined, max, min } from '../../utils';\r\nimport { ASYNC_SYNC_LINES, ASYNC_SYNC_LINES_BACKWARDS, SYNC_LINES_BACKWARDS } from './constants';\r\n\r\n\r\n/**\r\n * The type for an object with the number to start syncing the code and a prefix.\r\n *\r\n * @since 0.1.0\r\n */\r\ntype SyncStartInfo = { startRow: number, before: string };\r\n\r\n/**\r\n * The class for syncing changes to Lines and View components.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport class Sync extends Component {\r\n  /**\r\n   * Holds the minimum row for asynchronous syncing.\r\n   */\r\n  private minStart = Infinity;\r\n\r\n  /**\r\n   * Holds the maximum row for asynchronous syncing.\r\n   */\r\n  private maxEnd = 0;\r\n\r\n  /**\r\n   * Indicates whether the asynchronous syncing is on going or not.\r\n   */\r\n  private syncing: boolean;\r\n\r\n  /**\r\n   * Syncs changes between the start and end rows to other components.\r\n   *\r\n   * @example\r\n   * Consider the following HTML as an example:\r\n   *\r\n   * ```html\r\n   * <pre>\r\n   * function message() {\r\n   *   console.log( 'Hi!' );\r\n   * }\r\n   * </pre>\r\n   * ```\r\n   *\r\n   * Let's attempt to modify the line 2 (the row index is `1`):\r\n   *\r\n   * ```ts\r\n   * const ryuseiCode = new RyuseiCode();\r\n   * ryuseiCode.apply( 'pre' );\r\n   *\r\n   * const { Code, Sync } = ryuseiCode.Editor.Components;\r\n   *\r\n   * // Only the Code component knows the change\r\n   * Code.replaceLines( 1, 1, `  console.warn( 'error' );\\n` );\r\n   *\r\n   * // Syncs the change to other components\r\n   * Sync.sync( 1, 1 );\r\n   * ```\r\n   *\r\n   * @param startRow - A start row index.\r\n   * @param endRow   - An end row index.\r\n   * @param jumpTo   - Optional. Jumps to the specified row before starting synchronization.\r\n   */\r\n  sync( startRow: number, endRow: number, jumpTo?: number ): void {\r\n    const { Chunk, View } = this;\r\n    const diff = this.lines.syncSize( startRow, this.Code.size );\r\n\r\n    View.autoHeight();\r\n    View.autoWidth();\r\n\r\n    if ( ! isUndefined( jumpTo ) ) {\r\n      View.jump( jumpTo );\r\n    }\r\n\r\n    if ( Chunk.includes( startRow ) ) {\r\n      this.run( startRow, Chunk.end - startRow + 1 );\r\n    } else {\r\n      const { start, end } = Chunk;\r\n      this.run( start, end - start + 1, false );\r\n      this.syncLines( startRow, endRow );\r\n    }\r\n\r\n    Chunk.syncDiff( startRow, diff );\r\n    Chunk.sync();\r\n  }\r\n\r\n  /**\r\n   * Starts the sync sequence.\r\n   *\r\n   * @param row    - A row index.\r\n   * @param limit  - Limits the number of synchronously syncing.\r\n   * @param strict - Optional. Determines whether the synchronization must be strict or not.\r\n   */\r\n  private run( row: number, limit: number, strict = true ): void {\r\n    const result = this.find( row, SYNC_LINES_BACKWARDS );\r\n\r\n    let { startRow } = result;\r\n\r\n    if ( ! strict && row - startRow > SYNC_LINES_BACKWARDS ) {\r\n      startRow = row - SYNC_LINES_BACKWARDS;\r\n    }\r\n\r\n    limit = row - startRow + limit;\r\n\r\n    const changed = this.lines.sync( startRow, this.Code.after( startRow ), limit, result.before );\r\n\r\n    if ( changed || this.syncing ) {\r\n      const { size } = this.Code;\r\n\r\n      startRow = startRow + limit;\r\n\r\n      if ( startRow < size ) {\r\n        this.syncLines( startRow, size - 1 );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Asynchronously syncs lines between the provided range.\r\n   * If the range is wider than the current running process, cancels it and starts a new process.\r\n   *\r\n   * @param startRow - A start row index.\r\n   * @param endRow   - An end row index.\r\n   */\r\n  private syncLines( startRow: number, endRow: number ): void {\r\n    this.minStart = min( startRow, this.minStart );\r\n    this.maxEnd   = max( endRow, this.maxEnd );\r\n    this.syncing  = true;\r\n\r\n    const ranges = this.splitRows( this.minStart, this.maxEnd );\r\n\r\n    this.syncRanges( ranges, () => {\r\n      this.minStart = Infinity;\r\n      this.maxEnd   = 0;\r\n      this.syncing  = false;\r\n      this.Chunk.sync();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Syncs provided ranges step by step.\r\n   *\r\n   * @param ranges   - An array with row ranges.\r\n   * @param callback - Optional. A callback fired after the sync is completed.\r\n   */\r\n  private syncRanges( ranges: RowRange[], callback?: () => void ): void {\r\n    const range = ranges.shift();\r\n    const { startRow, before } = this.find( range[ 0 ], ASYNC_SYNC_LINES_BACKWARDS );\r\n    const limit = range[ 1 ] - startRow + 1;\r\n\r\n    this.lines.asyncSync( 'syncRanges', startRow, this.Code.after( startRow ), limit, before, () => {\r\n      if ( ranges.length ) {\r\n        this.syncRanges( ranges, callback );\r\n        this.emit( EVENT_SYNCED, this, false );\r\n      } else {\r\n        if ( callback ) {\r\n          callback();\r\n        }\r\n\r\n        this.emit( EVENT_SYNCED, this, true );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Splits the provided row range into small fragments.\r\n   *\r\n   * @param startRow - A start row index.\r\n   * @param endRow   - An end row index.\r\n   *\r\n   * @return An array with row ranges.\r\n   */\r\n  private splitRows( startRow: number, endRow: number ): RowRange[] {\r\n    const ranges: RowRange[] = [];\r\n\r\n    while ( startRow <= endRow ) {\r\n      ranges.push( [ startRow, min( startRow + ASYNC_SYNC_LINES - 1, endRow ) ] );\r\n      startRow += ASYNC_SYNC_LINES;\r\n    }\r\n\r\n    return ranges;\r\n  }\r\n\r\n  /**\r\n   * Returns an info object to start syncing.\r\n   *\r\n   * @param row   - A row index.\r\n   * @param limit - Limits the number of lines.\r\n   *\r\n   * @return An object with a start row index and code to prepend.\r\n   */\r\n  private find( row: number, limit: number ): SyncStartInfo {\r\n    if ( this.isEmbedded( row ) ) {\r\n      return this.findStartInLanguageBlock( row, limit );\r\n    }\r\n\r\n    const startRow = this.findRoot( row );\r\n\r\n    if ( row - startRow > limit ) {\r\n      if ( this.isEmbedded( row - limit ) ) {\r\n        return this.findStartInLanguageBlock( row - limit, limit / 2 );\r\n      }\r\n\r\n      return this.compress( startRow, row, '', limit );\r\n    }\r\n\r\n    return { startRow, before: '' };\r\n  }\r\n\r\n  /**\r\n   * If the distance from the `row` to `startRow` is greater than the `limit`,\r\n   * attempt to shorten the distance by generating pseudo code.\r\n   *\r\n   * @param startRow - A start row index.\r\n   * @param row      - An original row index.\r\n   * @param before   - A pseudo line to prepend.\r\n   * @param limit    - A limit number of lines.\r\n   *\r\n   * @return An object with a start row index and code to prepend.\r\n   */\r\n  private compress( startRow: number, row: number, before: string, limit: number ): SyncStartInfo {\r\n    if ( row - startRow > limit ) {\r\n      const start = this.lines.findBlockStart( [ row - 1, 0 ] );\r\n\r\n      if ( start ) {\r\n        const { multiline } = this.getLanguage( start );\r\n        const info = this.lines.getInfoAt( start );\r\n\r\n        if ( info && multiline ) {\r\n          for ( let i = 0; i < multiline.length; i++ ) {\r\n            const item = multiline[ i ];\r\n\r\n            if ( info.category === item[ 2 ] && ( ! item[ 3 ] || info.state === item[ 3 ] ) ) {\r\n              startRow = start[ 0 ] + 1;\r\n              before   += item[ 0 ];\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return { startRow, before };\r\n  }\r\n\r\n  /**\r\n   * Finds the likely appropriate index where tokenization should start.\r\n   *\r\n   * @param row   - A row index.\r\n   * @param depth - Optional. Minimum depth of a line that can be a candidate.\r\n   *\r\n   * @return A better index for starting tokenization.\r\n   */\r\n  private findRoot( row: number, depth = 0 ): number {\r\n    const { lines } = this;\r\n\r\n    if ( between( row, 0, lines.length, true ) ) {\r\n      for ( let i = row - 1; i >= 0; i-- ) {\r\n        const line = lines[ i ];\r\n\r\n        if ( line.depth <= depth && line.tokens.length && ! line.isEmpty() ) {\r\n          if ( line.split ) {\r\n            i -= line.first[ 2 ].distance + 1;\r\n          } else {\r\n            return i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Finds a sync start info in an embedded language block.\r\n   *\r\n   * @param row   - A row index.\r\n   * @param limit - A limit number of lines.\r\n   *\r\n   * @return An object with a start row index and code to prepend.\r\n   */\r\n  private findStartInLanguageBlock( row: number, limit: number ): SyncStartInfo {\r\n    const { lines } = this;\r\n    const lang      = lines[ row ].language;\r\n    const config    = this.language.use[ lang ];\r\n    const startRow  = this.findRoot( row, config.depth );\r\n    const startLang = lines[ startRow ].language;\r\n\r\n    if ( startLang === lang ) {\r\n      return this.compress( startRow, row, config.code, limit );\r\n    }\r\n\r\n    return { startRow, before: '' };\r\n  }\r\n\r\n  /**\r\n   * Checks if the line at the specified row is inside an embedded block or not.\r\n   *\r\n   * @param row - A row index.\r\n   *\r\n   * @return `true` if the row is inside an embedded block, or otherwise `false`.\r\n   */\r\n  private isEmbedded( row: number ): boolean {\r\n    const line = this.lines[ row ];\r\n\r\n    if ( line ) {\r\n      const { language } = line;\r\n      return language && this.language.language.id !== language;\r\n    }\r\n  }\r\n}\r\n","/**\n * Max lines to asynchronously sync code to the Lines instance at once.\n *\n * @since 0.1.0\n */\nexport const ASYNC_SYNC_LINES = 3000;\n\n/**\n * Max lines to scan up for asynchronously sync.\n *\n * @since 0.1.0\n */\nexport const ASYNC_SYNC_LINES_BACKWARDS = 100;\n\n/**\n * Max lines to scan up for synchronously sync.\n *\n * @since 0.1.0\n */\nexport const SYNC_LINES_BACKWARDS = 100;\n","import { CLASS_DRAGGING } from '../../constants/classes';\nimport { div, forOwn, off, on, prevent, toggleClass } from '../../utils';\n\n\n/**\n * Event names for the beginning of dragging.\n *\n * @since 0.1.0\n */\nexport const DRAG_START_EVENTS = 'pointerdown';\n\n/**\n * Event names for the end of dragging.\n *\n * @since 0.1.0\n */\nexport const DRAG_END_EVENTS = 'pointerup';\n\n/**\n * Event names on dragging.\n *\n * @since 0.1.0\n */\nexport const DRAGGING_EVENTS = 'pointermove';\n\n/**\n * The conversion map for vertical/horizontal props.\n *\n * @since 0.1.0\n */\nconst ORIENTATION_MAP = {\n  vertical    : 'horizontal',\n  scrollHeight: 'scrollWidth',\n  clientHeight: 'clientWidth',\n  scrollTop   : 'scrollLeft',\n  minHeight   : 'minWidth',\n  maxHeight   : 'maxWidth',\n  height      : 'width',\n  top         : 'left',\n  pageY       : 'pageX',\n  translateY  : 'translateX',\n};\n\n/**\n * The abstract class for creating a draggable bar.\n *\n * @since 0.1.0\n */\nexport abstract class AbstractDraggableBar {\n  /**\n   * Indicates whether the bar is a vertical or horizontal sizer or not.\n   */\n  protected readonly vertical: boolean;\n\n  /**\n   * Holds the parent element.\n   */\n  protected readonly parent: HTMLElement;\n\n  /**\n   * The bar element.\n   */\n  protected readonly elm: HTMLDivElement;\n\n  /**\n   * Holds the prop names determined by the bar direction.\n   */\n  protected readonly names: Record<string, string> = {};\n\n  /**\n   * Keeps the coordinate at the drag start.\n   */\n  protected startCoord: number;\n\n  /**\n   * Keeps the last coordinate.\n   */\n  protected lastCoord: number;\n\n  /**\n   * The AbstractDraggableBar constructor.\n   *\n   * @param classes  - A class or classes of the bar.\n   * @param parent   - A parent element of the bar.\n   * @param vertical - Determines whether to create a vertical or horizontal bar.\n   */\n  protected constructor( classes: string | string[], parent: HTMLElement, vertical: boolean ) {\n    this.elm      = div( classes, parent );\n    this.parent   = parent;\n    this.vertical = vertical;\n\n    forOwn( ORIENTATION_MAP, ( prop, key ) => {\n      this.names[ key ] = vertical ? key : prop;\n    } );\n\n    this.bind();\n  }\n\n  /**\n   * Listens to some events.\n   */\n  protected bind(): void {\n    this.onDrag     = this.onDrag.bind( this );\n    this.onDragging = this.onDragging.bind( this );\n    this.onDragged  = this.onDragged.bind( this );\n\n    on( this.elm, DRAG_START_EVENTS, this.onDrag );\n  }\n\n  /**\n   * Called when the element starts being dragged.\n   *\n   * @param e - A PointerEvent object.\n   */\n  protected onDrag( e: PointerEvent ): void {\n    on( window, DRAG_END_EVENTS, this.onDragged );\n    on( window, DRAGGING_EVENTS, this.onDragging );\n\n    this.startCoord = this.getCoord( e );\n    this.lastCoord  = this.startCoord;\n    this.toggleClass( true );\n\n    prevent( e );\n  }\n\n  /**\n   * Called while the element is dragged.\n   *\n   * @param e - A PointerEvent object.\n   */\n  protected onDragging( e: PointerEvent ): void {\n    prevent( e );\n  }\n\n  /**\n   * Called when the element is released.\n   */\n  protected onDragged(): void {\n    off( window, DRAG_END_EVENTS, this.onDragged );\n    off( window, DRAGGING_EVENTS, this.onDragging );\n    this.toggleClass( false );\n  }\n\n  /**\n   * Returns the `pageX` and `pageY` coordinates provided by the event.\n   *\n   * @param e - A PointerEvent object.\n   *\n   * @return A pageX or pageY coordinate.\n   */\n  protected getCoord( e: PointerEvent ): number {\n    return e[ this.names.pageY ];\n  }\n\n  /**\n   * Toggles \"dragging\" classes of the element and parent element.\n   *\n   * @param add - Determines whether to add or remove classes.\n   */\n  protected toggleClass( add: boolean ): void {\n    toggleClass( this.elm, CLASS_DRAGGING, add );\n    toggleClass(\n      this.parent,\n      [ CLASS_DRAGGING, `${ CLASS_DRAGGING }--${ this.names.vertical }` ],\n      add\n    );\n  }\n\n  /**\n   * Destroys the bar.\n   */\n  destroy(): void {\n    off( this.elm, DRAG_START_EVENTS, this.onDrag );\n    off( window, DRAG_END_EVENTS, this.onDragged );\n    off( window, DRAGGING_EVENTS, this.onDragging );\n  }\n}\n","import {\r\n  EVENT_MOUNTED,\r\n  EVENT_RESIZE,\r\n  EVENT_SCROLL,\r\n  EVENT_SCROLL_HEIGHT_CHANGED,\r\n  EVENT_SCROLL_WIDTH_CHANGED,\r\n} from '../../constants/events';\r\nimport { rafThrottle, throttle } from '../../utils';\r\nimport { Scrollbar } from './Scrollbar';\r\n\r\n\r\n/**\r\n * The class for creating a scrollbar.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport class EditorScrollbar extends Scrollbar {\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  protected listen(): void {\r\n    const { event } = this.Editor;\r\n\r\n    event.on(\r\n      [ EVENT_MOUNTED, EVENT_RESIZE, EVENT_SCROLL_HEIGHT_CHANGED, EVENT_SCROLL_WIDTH_CHANGED ],\r\n      throttle( rafThrottle( () => {\r\n        this.toggle();\r\n        this.update();\r\n      } ), 1 )\r\n    );\r\n\r\n    event.on( EVENT_SCROLL, rafThrottle( this.update ) );\r\n  }\r\n}\r\n","import { AbstractDraggableBar } from '../../classes/AbstractDraggableBar/AbstractDraggableBar';\r\nimport { CLASS_ACTIVE, CLASS_SCROLLBAR } from '../../constants/classes';\r\nimport { EVENT_MOUNTED, EVENT_RESIZE } from '../../constants/events';\r\nimport { Editor } from '../../core/Editor/Editor';\r\nimport { attr, hasClass, isArray, off, on, rafThrottle, round, toggleClass, unit } from '../../utils';\r\n\r\n\r\n/**\r\n * The class for creating a scrollbar.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport class Scrollbar extends AbstractDraggableBar {\r\n  /**\r\n   * Holds the Editor element.\r\n   */\r\n  protected readonly Editor: Editor;\r\n\r\n  /**\r\n   * The target element to scroll.\r\n   */\r\n  protected readonly scroller: HTMLElement;\r\n\r\n  /**\r\n   * Holds the margin settings.\r\n   */\r\n  private readonly margin: () => [ number, number ];\r\n\r\n  /**\r\n   * Keeps the scrollbar height.\r\n   */\r\n  private lastHeight: number;\r\n\r\n  /**\r\n   * The conversion ratio from the scroll offset to the bar offset.\r\n   * - top = scrollTop * ratio\r\n   * - scrollTop = top / ratio\r\n   */\r\n  private ratio = 1;\r\n\r\n  /**\r\n   * The Scrollbar constructor.\r\n   *\r\n   * @param Editor   - An EventBus instance.\r\n   * @param parent   - A parent element.\r\n   * @param scroller - A target element to scroll.\r\n   * @param vertical - Determines whether to create a vertical or horizontal scroll bar.\r\n   * @param margin   - Optional. Margins in pixel as `[ top, bottom ]` ( or `[ left, right ]` ).\r\n   */\r\n  constructor(\r\n    Editor: Editor,\r\n    parent: HTMLElement,\r\n    scroller: HTMLElement,\r\n    vertical: boolean,\r\n    margin: [ number, number ] | ( () => [ number, number ] ) = [ 0, 0 ]\r\n  ) {\r\n    super( [ CLASS_SCROLLBAR, `${ CLASS_SCROLLBAR }--${ vertical ? 'vertical' : 'horizontal' }` ], parent, vertical );\r\n\r\n    this.Editor   = Editor;\r\n    this.scroller = scroller;\r\n    this.margin   = isArray( margin ) ? () => margin : margin;\r\n\r\n    this.init();\r\n    this.listen();\r\n  }\r\n\r\n  /**\r\n   * Initializes the instance.\r\n   * Note that `aria-valuemin` and `aria-valuemax` is not necessary because their default values are `0` and `100`.\r\n   *\r\n   * @link https://www.w3.org/TR/wai-aria-1.2/#scrollbar\r\n   */\r\n  private init(): void {\r\n    const { Editor, scroller } = this;\r\n\r\n    attr( this.elm, {\r\n      role              : 'scrollbar',\r\n      'aria-controls'   : scroller.id,\r\n      'aria-orientation': this.names.vertical,\r\n      'aria-valuenow'   : 0,\r\n      'aria-label'      : Editor.options.i18n.scrollbar,\r\n    } );\r\n\r\n    this.update = this.update.bind( this );\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  protected listen(): void {\r\n    on( this.scroller, 'scroll', rafThrottle( this.update ), this );\r\n\r\n    this.Editor.event.on( [ EVENT_MOUNTED, EVENT_RESIZE ], rafThrottle( () => {\r\n      this.toggle();\r\n      this.update();\r\n    } ) );\r\n  }\r\n\r\n  /**\r\n   * Called while the bar is dragged.\r\n   *\r\n   * @param e - A PointerEvent object.\r\n   */\r\n  protected onDragging( e: PointerEvent ): void {\r\n    super.onDragging( e );\r\n\r\n    const coord = this.getCoord( e );\r\n    const diff  = coord - this.lastCoord;\r\n\r\n    this.scroller[ this.names.scrollTop ] += diff / this.ratio;\r\n    this.lastCoord = coord;\r\n  }\r\n\r\n  /**\r\n   * Updates the scrollbar height and offset according to the current scroll offset.\r\n   */\r\n  protected update(): void {\r\n    const { scroller, names, elm } = this;\r\n    const { style } = elm;\r\n    const sh          = scroller[ names.scrollHeight ];\r\n    const ch          = scroller[ names.clientHeight ];\r\n    const st          = scroller[ names.scrollTop ];\r\n    const margin      = this.margin();\r\n    const heightRatio = 1 - ( ( margin[ 0 ] + margin[ 1 ] ) / ch );\r\n    const height      = ( ch * ch / sh ) * heightRatio;\r\n\r\n    if ( this.lastHeight !== height ) {\r\n      style[ names.height ] = unit( height );\r\n      this.lastHeight = height;\r\n    }\r\n\r\n    if ( this.isActive() ) {\r\n      const offsetRatio = ( ch * heightRatio - elm[ names.clientHeight ] ) / ( sh - ch );\r\n      style.transform = `${ names.translateY }(${ unit( st * offsetRatio + margin[ 0 ] ) })`;\r\n      attr( elm, { 'aria-valuenow': round( 100 * 100 * st / ( sh - ch ) ) / 100 } );\r\n\r\n      this.ratio = offsetRatio;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the scrollbar is active or not.\r\n   *\r\n   * @return `true` if the scrollbar is active, or otherwise `false`.\r\n   */\r\n  private isActive(): boolean {\r\n    return hasClass( this.elm, CLASS_ACTIVE );\r\n  }\r\n\r\n  /**\r\n   * Toggles the scrollbar.\r\n   */\r\n  protected toggle(): void {\r\n    const { scroller, names, elm } = this;\r\n    toggleClass( elm, CLASS_ACTIVE, scroller[ names.scrollHeight ] > scroller[ names.clientHeight ] );\r\n  }\r\n\r\n  /**\r\n   * Destroys the instance.\r\n   */\r\n  destroy(): void {\r\n    off( null, '', this );\r\n    super.destroy();\r\n  }\r\n}\r\n","import { Elements, EventBusEvent } from '@ryusei/code';\r\nimport { Component } from '../../classes/Component/Component';\r\nimport { CLASS_PLACEHOLDER, CLASS_SCROLLBARS } from '../../constants/classes';\r\nimport {\r\n  EVENT_MOUNTED,\r\n  EVENT_RESIZE,\r\n  EVENT_SCROLL_HEIGHT_CHANGED,\r\n  EVENT_SCROLL_WIDTH_CHANGED,\r\n  EVENT_SCROLLED,\r\n  EVENT_SELECTED,\r\n  EVENT_SELECTING,\r\n} from '../../constants/events';\r\nimport { CHANGED, EXTEND, SELECTED, SELECTING, START } from '../../constants/selection-states';\r\nimport { Editor } from '../../core/Editor/Editor';\r\nimport { div, isIE, isMobile, max, min, rafThrottle, rect, styles, text, unit } from '../../utils';\r\nimport { Throttle } from '../../utils/function/throttle/throttle';\r\nimport { Selection } from '../Selection/Selection';\r\nimport { JUMP_OFFSET } from './constants';\r\nimport { EditorScrollbar } from './EditorScrollbar';\r\nimport { Scrollbar } from './Scrollbar';\r\n\r\n\r\n/**\r\n * The class for managing the viewport.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport class View extends Component {\r\n  /**\r\n   * Emits the resize event with reducing frequency by the animation frame.\r\n   *\r\n   * @readonly\r\n   */\r\n  emitResize: Throttle<() => void>;\r\n\r\n  /**\r\n   * Keeps the previous width of the viewport.\r\n   */\r\n  private lastWidth = 0;\r\n\r\n  /**\r\n   * Keeps the number of lines when the height is adjusted.\r\n   */\r\n  private lastLength: number;\r\n\r\n  /**\r\n   * Holds Scrollbar elements.\r\n   */\r\n  private scrollbars: Scrollbar[] = [];\r\n\r\n  /**\r\n   * Initializes the instance.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param elements - A collection of essential editor elements.\r\n   */\r\n  mount( elements: Elements ): void {\r\n    super.mount( elements );\r\n\r\n    this.emitResize = rafThrottle( this.emit.bind( this, 'resize' ) );\r\n    elements.scroller.scrollTop = 0;\r\n\r\n    this.create();\r\n    this.autoHeight();\r\n    this.listen();\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  private listen(): void {\r\n    this.bind( window, 'resize', this.emitResize );\r\n\r\n    this.on( [ EVENT_MOUNTED, EVENT_RESIZE, EVENT_SCROLLED ], this.autoWidth, this );\r\n    this.on( EVENT_RESIZE, this.autoHeight.bind( this, true ), null, 2 );\r\n    this.on( EVENT_SELECTED, this.onSelected, this );\r\n    this.on( EVENT_SELECTING, this.clipScrollOffset, this );\r\n  }\r\n\r\n  /**\r\n   * Called when the selection state is changed.\r\n   *\r\n   * @param e         - An EventBusEvent object.\r\n   * @param Selection - A Selection instance.\r\n   */\r\n  private onSelected( e: EventBusEvent<Editor>, Selection: Selection ): void {\r\n    if ( Selection.is( START, EXTEND ) && Selection.state.device === 'keyboard' ) {\r\n      this.jump( Selection.focus[ 0 ] );\r\n    }\r\n\r\n    if ( Selection.is( CHANGED, SELECTING, SELECTED ) ) {\r\n      this.clipScrollOffset();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the scrollbar elements.\r\n   */\r\n  private create(): void {\r\n    const { elements, elements: { scroller }, Editor } = this;\r\n    const wrapper = div( CLASS_SCROLLBARS, elements.body );\r\n\r\n    if ( ! isMobile() ) {\r\n      this.scrollbars = [\r\n        new EditorScrollbar( Editor, wrapper, scroller, true ),\r\n        new EditorScrollbar( Editor, wrapper, scroller, false, () => [ this.getWidthBeforeContainer(), 0 ] ),\r\n      ];\r\n    }\r\n\r\n    const { placeholder } = this.options;\r\n\r\n    if ( placeholder ) {\r\n      const placeholderElm = div( CLASS_PLACEHOLDER, elements.background );\r\n      text( placeholderElm, placeholder );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clips the caret position by all sides of the editor.\r\n   * Only the left border refers the editor rect so that it includes the width of the fixed gutter.\r\n   */\r\n  private clipScrollOffset(): void {\r\n    const { rect: caretRect } = this.Caret;\r\n    const { focus } = this.Selection;\r\n\r\n    if ( ! caretRect || ! this.Chunk.includes( focus[ 0 ] ) ) {\r\n      return;\r\n    }\r\n\r\n    const { Measure } = this;\r\n    const { scroller } = this.elements;\r\n    const { padding, scrollerRect, lineHeight } = Measure;\r\n    const { top: caretTop, right: caretRight, bottom: caretBottom, left: caretLeft } = caretRect;\r\n    const editorRect = rect( this.elements.editor );\r\n\r\n    let { scrollTop, scrollLeft } = scroller;\r\n\r\n    const top    = scrollerRect.top + lineHeight / 2 + padding.top;\r\n    const bottom = scrollerRect.bottom - lineHeight / 2 - padding.bottom;\r\n    const left   = ( isIE() ? scrollerRect.left : ( editorRect.left + scrollLeft ) ) + max( padding.left, lineHeight );\r\n    const right  = scrollerRect.right - max( padding.right, lineHeight );\r\n\r\n    if ( caretTop < top ) {\r\n      scrollTop -= top - caretTop;\r\n    }\r\n\r\n    if ( caretBottom > bottom ) {\r\n      scrollTop += caretBottom - bottom;\r\n    }\r\n\r\n    if ( caretLeft < left ) {\r\n      scrollLeft -= left - caretLeft;\r\n    }\r\n\r\n    if ( caretRight > right ) {\r\n      scrollLeft += caretRight - right;\r\n    }\r\n\r\n    if ( ! focus[ 1 ] ) {\r\n      scrollLeft = 0;\r\n    }\r\n\r\n    scroller.scrollTop  = scrollTop;\r\n    scroller.scrollLeft = scrollLeft;\r\n  }\r\n\r\n  /**\r\n   * Returns the width before the container element.\r\n   *\r\n   * @return The width before the container.\r\n   */\r\n  private getWidthBeforeContainer(): number {\r\n    const { Measure } = this;\r\n    return Measure.editorRect.left - Measure.containerRect.left;\r\n  }\r\n\r\n  /**\r\n   * Jumps to the specified row if it's not visible in the scroller.\r\n   * If the `middle` is `true`, this method try to vertically center the target line.\r\n   *\r\n   * @param row        - A row index to jump to.\r\n   * @param middle     - Optional. Determines whether to jump to the middle of the viewport or not.\r\n   * @param lineOffset - Optional. A number of lines to offset.\r\n   */\r\n  jump( row: number, middle?: boolean, lineOffset = JUMP_OFFSET ): void {\r\n    const { Measure, Chunk, Measure: { scrollerRect } } = this;\r\n\r\n    if ( middle ) {\r\n      Chunk.scroll( Measure.getBottom( row ) - scrollerRect.height / 2 + Measure.lineHeight * lineOffset );\r\n      return;\r\n    }\r\n\r\n    if ( ! this.isVisible( row ) ) {\r\n      const center = Chunk.start + ( Chunk.length - 1 ) / 2;\r\n\r\n      let scrollTop;\r\n\r\n      if ( row > center ) {\r\n        row = min( row + lineOffset, this.lines.length - 1 );\r\n        scrollTop = Measure.getBottom( row ) - scrollerRect.height + Measure.padding.top;\r\n      } else {\r\n        scrollTop = Measure.getTop( max( row - lineOffset, 0 ) );\r\n      }\r\n\r\n      Chunk.scroll( scrollTop );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adjusts the width of the container element so that it can contain the longest line in the chunk.\r\n   */\r\n  autoWidth(): void {\r\n    const { Measure, elements } = this;\r\n    const width = elements.editor.clientWidth + this.getWidthBeforeContainer();\r\n\r\n    if ( width > Measure.scrollerRect.width && width > this.lastWidth ) {\r\n      styles( elements.container, { minWidth: unit( width ) } );\r\n      this.lastWidth = width;\r\n      this.emit( EVENT_SCROLL_WIDTH_CHANGED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adjusts the height of the container element so that it can contain all lines.\r\n   * It won't be smaller than the scroller element when the editor has explicit height.\r\n   *\r\n   * @param skipLengthCheck - Optional. Whether to skip checking the number of lines or not.\r\n   */\r\n  autoHeight( skipLengthCheck?: boolean ): void {\r\n    const { elements, lines: { length } } = this;\r\n\r\n    if ( skipLengthCheck || length !== this.lastLength ) {\r\n      const { Measure, Measure: { padding } } = this;\r\n      let height = Measure.lineHeight * ( length || 1 ) + padding.top + padding.bottom;\r\n\r\n      if ( elements.root.style.height || this.options.height ) {\r\n        height = max( height, Measure.scrollerRect.height );\r\n      }\r\n\r\n      styles( elements.container, { height: unit( height ) } );\r\n      this.lastLength = length;\r\n\r\n      this.emit( EVENT_SCROLL_HEIGHT_CHANGED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the specified row is visible in the scroller or not.\r\n   *\r\n   * @param row        - A row index to check.\r\n   * @param lineOffset - Optional. A number of lines to offset top and bottom borders.\r\n   *\r\n   * @return `true` if the row is in the scroller viewport, or otherwise `false`.\r\n   */\r\n  isVisible( row: number, lineOffset = 0 ): boolean {\r\n    const { Chunk, Measure } = this;\r\n\r\n    if ( Chunk.includes( row ) ) {\r\n      const line = Chunk.getLine( row );\r\n\r\n      if ( line ) {\r\n        const { scrollerRect } = Measure;\r\n        const lineRect = rect( line );\r\n        const offset   = Measure.lineHeight * lineOffset;\r\n        return lineRect.top >= scrollerRect.top + offset && lineRect.bottom <= scrollerRect.bottom - offset;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @internal\r\n   */\r\n  destroy(): void {\r\n    this.scrollbars.forEach( bar => { bar.destroy() } );\r\n    super.destroy();\r\n  }\r\n}\r\n","\n/**\n * The number of margin lines when jumping to a particular line.\n *\n * @since 0.1.0\n */\nexport const JUMP_OFFSET = 1;\n\n/**\n * Throttle duration for the resize function.\n *\n * @since 0.1.0\n */\nexport const RESIZE_THROTTLE_DURATION = 60;\n\n/**\n * Minimum required amount of the scroll offset to update.\n *\n * @since 0.1.0\n */\nexport const MIN_SCROLL_DIFF = 3;\n","/**\n * Attributes for the editable area.\n *\n * @link https://www.w3.org/TR/wai-aria-1.2/#aria-roledescription\n * @link https://www.w3.org/TR/wai-aria-1.2/#aria-multiline\n *\n * @since 0.1.0\n */\nexport const ATTRIBUTES_EDITABLE_AREA = {\n  autocorrect           : 'off',\n  autocapitalize        : 'off',\n  spellcheck            : 'false',\n  role                  : 'textbox',\n  'aria-multiline'      : true,\n  'aria-roledescription': 'editor',\n};\n","import { Attributes, Options } from '@ryusei/code';\nimport { Code } from '../../components';\nimport { Lines } from '../../components/Code/Lines';\nimport { ATTRIBUTES_EDITABLE_AREA } from '../../constants/attributes';\nimport {\n  CLASS_BODY,\n  CLASS_CONTAINER,\n  CLASS_EDITOR,\n  CLASS_LINE,\n  CLASS_LINES,\n  CLASS_RENDERED,\n  CLASS_ROOT,\n  CLASS_SCROLLER,\n  CLASS_SOURCE,\n  CLASS_VIEW,\n} from '../../constants/classes';\nimport { EventBus } from '../../event/EventBus';\nimport { assign, min, repeat, tag } from '../../utils';\nimport { Editor } from '../Editor/Editor';\n\n\n/**\n * The class for rendering the editor.\n *\n * @since 0.1.0\n */\nexport class Renderer {\n  /**\n   * Holds the EventBus instance.\n   */\n  protected readonly event: EventBus<Editor>\n\n  /**\n   * Holds the Code instance.\n   */\n  protected readonly Code: Code;\n\n  /**\n   * Holds the lines instance.\n   */\n  protected readonly lines: Lines;\n\n  /**\n   * Holds options.\n   */\n  protected readonly options: Options;\n\n  /**\n   * The Renderer constructor.\n   *\n   * @param Code    - A Code instance.\n   * @param event   - An EventBus instance.\n   * @param options - Options.\n   */\n  constructor( Code: Code, event: EventBus<Editor>, options: Options ) {\n    this.Code    = Code;\n    this.lines   = Code.Lines;\n    this.event   = event;\n    this.options = options;\n  }\n\n  /**\n   * Render lines until the number reaches the `maxInitialLines`.\n   * Rest lines are rendered in the temporary `pre` element.\n   *\n   * @param append - The function to append a HTML string.\n   */\n  protected renderLines( append: ( string: string ) => void ): void {\n    const { lines } = this;\n    const max = min( lines.length, this.options.maxInitialLines );\n\n    for ( let i = 0; i < max; i++ ) {\n      append( tag( CLASS_LINE ) + lines[ i ].html + '</div>' );\n    }\n  }\n\n  /**\n   * Builds the HTML for the editor.\n   *\n   * @param source - Optional. Determines whether to embed the source code as a pre element or not.\n   *\n   * @return The built HTML string.\n   */\n  html( source?: boolean ): string {\n    let html = '';\n\n    const { options, options: { id } } = this;\n    const append  = ( string: string ) => { html += string };\n    const classes = [ CLASS_ROOT, CLASS_RENDERED ].concat( options.rootClasses );\n\n    const divs: [ string, string[], Attributes? ][] = [\n      [ 'root', classes, { id, role: 'code' } ],\n      [ 'view', [ CLASS_VIEW ].concat( options.viewClasses ) ],\n      [ 'body', [ CLASS_BODY ] ],\n      [ 'scroller', [ CLASS_SCROLLER ] ],\n      [ 'container', [ CLASS_CONTAINER ] ],\n      [ 'editor', [ CLASS_EDITOR ] ],\n    ];\n\n    divs.forEach( settings => {\n      this.event.emit( `${ settings[ 0 ] }:open`, append, settings[ 1 ], this.lines );\n      const attrs = assign( { id: `${ id }-${ settings[ 0 ] }` }, settings[ 2 ] );\n      html += tag( settings[ 1 ], attrs );\n    } );\n\n    html += tag( [ CLASS_LINES ], assign( { 'aria-label': options.i18n.inputLabel }, ATTRIBUTES_EDITABLE_AREA ) );\n    this.renderLines( append );\n    html += '</div>';\n\n    if ( source ) {\n      html += `<pre class=\"${ CLASS_SOURCE }\">${ this.Code.value }</pre>`;\n    }\n\n    return html + repeat( '</div>', divs.length );\n  }\n}\n","import { Components, Elements, Extensions, Language, Options } from '@ryusei/code';\r\nimport { AnyFunction } from '@ryusei/light/dist/types/types';\r\nimport * as CoreComponents from '../../components';\r\nimport {\r\n  CLASS_BACKGROUND,\r\n  CLASS_BODY,\r\n  CLASS_CONTAINER,\r\n  CLASS_EDITOR,\r\n  CLASS_EMPTY,\r\n  CLASS_FOCUSED,\r\n  CLASS_INITIALIZED,\r\n  CLASS_LINES,\r\n  CLASS_MOBILE,\r\n  CLASS_OVERLAY,\r\n  CLASS_READONLY,\r\n  CLASS_RENDERED,\r\n  CLASS_SCROLLER,\r\n  CLASS_VIEW,\r\n} from '../../constants/classes';\r\nimport {\r\n  EVENT_BLUR,\r\n  EVENT_CHANGED,\r\n  EVENT_COMPOSITION_START,\r\n  EVENT_DESTROYED,\r\n  EVENT_FOCUS,\r\n  EVENT_MOUNT,\r\n  EVENT_MOUNTED,\r\n  EVENT_READONLY,\r\n  EVENT_RESET,\r\n} from '../../constants/events';\r\nimport { PROJECT_CODE } from '../../constants/project';\r\nimport { EventBus } from '../../event/EventBus';\r\nimport {\r\n  activeElement,\r\n  addClass,\r\n  assert,\r\n  assign,\r\n  attr,\r\n  debounce,\r\n  div,\r\n  escapeHtml,\r\n  focus,\r\n  forOwn,\r\n  hasClass,\r\n  isFunction,\r\n  isHTMLElement,\r\n  isMobile,\r\n  isString,\r\n  isUndefined,\r\n  nextTick,\r\n  on,\r\n  query,\r\n  remove,\r\n  removeClass,\r\n  styles,\r\n  text,\r\n  toggleClass,\r\n  uniqueId,\r\n  unit,\r\n} from '../../utils';\r\nimport { toggleEditable } from '../../utils/dom/toggleEditable/toggleEditable';\r\nimport { Renderer } from '../Renderer/Renderer';\r\n\r\n\r\n/**\r\n * The debounce duration for evaluating `focusout` of the editor.\r\n *\r\n * @since 0.1.0\r\n */\r\nconst FOCUSOUT_DEBOUNCE_DURATION = 10;\r\n\r\n/**\r\n * The core class for the editor.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport class Editor {\r\n  /**\r\n   * The collection of essential editor elements.\r\n   *\r\n   * <div class=\"caution\">\r\n   *   This collection is empty before components are mounted by the <code>Editor#apply()</code>.\r\n   * </div>\r\n   *\r\n   * @readonly\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const ryuseiCode = new RyuseiCode();\r\n   * ryuseiCode.apply( 'textarea' );\r\n   *\r\n   * const { scroller } = ryuseiCode.Editor.elements;\r\n   * console.log( scroller.id );\r\n   * ```\r\n   */\r\n  elements: Elements;\r\n\r\n  /**\r\n   * The collection of all core components.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const ryuseiCode = new RyuseiCode();\r\n   * const { Selection } = ryuseiCode.Editor.Components;\r\n   * ```\r\n   */\r\n  Components: Partial<Components> = {};\r\n\r\n  /**\r\n   * Holds Extension instances.\r\n   */\r\n  private Extensions: Partial<Extensions> = {};\r\n\r\n  /**\r\n   * The collection of all options.\r\n   */\r\n  readonly options: Options;\r\n\r\n  /**\r\n   * The EventBus instance.\r\n   * Although you can attach or detach event handlers by this instance,\r\n   * `RyuseiCode#on()` or `RyuseiCode#off()` is more useful.\r\n   */\r\n  readonly event: EventBus<Editor>;\r\n\r\n  /**\r\n   * The source element where the editor has been applied to.\r\n   */\r\n  protected source: HTMLElement;\r\n\r\n  /**\r\n   * The root element of the editor that is same with the `elements.root`.\r\n   */\r\n  protected root: HTMLElement;\r\n\r\n  /**\r\n   * The Language object.\r\n   */\r\n  readonly language: Language;\r\n\r\n  /**\r\n   * Indicates whether the editor is readonly or not.\r\n   */\r\n  private _readOnly: boolean;\r\n\r\n  /**\r\n   * The Editor constructor.\r\n   *\r\n   * @param language   - A Language object.\r\n   * @param options    - Options.\r\n   * @param extensions - An object with additional components.\r\n   */\r\n  constructor( language: Language, options: Options, extensions: Partial<Extensions> = {} ) {\r\n    this.language   = language;\r\n    this.options    = options;\r\n    this.event      = new EventBus( this );\r\n    this.options.id = this.options.id || uniqueId( PROJECT_CODE );\r\n\r\n    forOwn( CoreComponents, ( Component, name ) => {\r\n      this.Components[ name ] = new Component( this );\r\n    } );\r\n\r\n    forOwn( extensions, ( Extension, name ) => {\r\n      const value = this.options[ name.charAt( 0 ).toLowerCase() + name.slice( 1 ) ];\r\n\r\n      if ( isUndefined( value ) || value ) {\r\n        this.Extensions[ name ] = new Extension( this );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Initializes the editor and components.\r\n   */\r\n  private mount(): void {\r\n    const { options, event, elements } = this;\r\n\r\n    this.listen();\r\n    event.emit( EVENT_MOUNT, elements );\r\n\r\n    forOwn( this.Components, Component => {\r\n      Component.mount( elements );\r\n    } );\r\n\r\n    forOwn( this.Extensions, Extension => {\r\n      Extension.mount( elements );\r\n    } );\r\n\r\n    event.emit( EVENT_MOUNTED, elements );\r\n\r\n    this.readOnly = options.readOnly;\r\n\r\n    if ( options.autoFocus ) {\r\n      this.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collects essential elements that constitute the code editor.\r\n   */\r\n  private collect(): void {\r\n    const { root } = this;\r\n    const editor = query<HTMLDivElement>( root, `.${ CLASS_EDITOR }` );\r\n    const lines  = query<HTMLDivElement>( root, `.${ CLASS_LINES }` );\r\n\r\n    toggleEditable( lines, true );\r\n    attr( lines, { tabindex: 0 } );\r\n\r\n    this.elements = Object.freeze( {\r\n      root,\r\n      editor,\r\n      lines,\r\n      editable  : lines,\r\n      view      : query<HTMLDivElement>( root, `.${ CLASS_VIEW }` ),\r\n      body      : query<HTMLDivElement>( root, `.${ CLASS_BODY }` ),\r\n      scroller  : query<HTMLDivElement>( root, `.${ CLASS_SCROLLER }` ),\r\n      container : query<HTMLDivElement>( root, `.${ CLASS_CONTAINER }` ),\r\n      overlay   : div( CLASS_OVERLAY, root ),\r\n      background: div( { class: CLASS_BACKGROUND, 'aria-hidden': true }, editor ),\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  private listen(): void {\r\n    const { elements, elements: { root }, event } = this;\r\n    const isFocused = this.isFocused.bind( this );\r\n\r\n    let type: string;\r\n\r\n    this.bind( root, 'pointerdown', () => {\r\n      type = 'pointer';\r\n    } );\r\n\r\n    this.bind( elements.editor, 'click', () => {\r\n      if ( ! isFocused() ) {\r\n        this.focus( true );\r\n      }\r\n    } );\r\n\r\n    this.bind( root, 'focusin', () => {\r\n      if ( isFocused() && ! hasClass( root, CLASS_FOCUSED ) ) {\r\n        addClass( root, CLASS_FOCUSED );\r\n        event.emit( EVENT_FOCUS, type );\r\n      }\r\n    } );\r\n\r\n    this.bind( root, 'focusout', debounce( () => {\r\n      if ( ! isFocused() && hasClass( root, CLASS_FOCUSED ) ) {\r\n        removeClass( root, CLASS_FOCUSED );\r\n        event.emit( EVENT_BLUR );\r\n        type = '';\r\n      }\r\n    }, FOCUSOUT_DEBOUNCE_DURATION ) );\r\n\r\n    event.on( [ EVENT_MOUNTED, EVENT_CHANGED, EVENT_COMPOSITION_START, EVENT_RESET ], () => {\r\n      nextTick( () => {\r\n        toggleClass( root, CLASS_EMPTY, ! this.value && ! this.Components.Input.composing );\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Listens to native events.\r\n   *\r\n   * @param elm      - A document, a window or an element.\r\n   * @param events   - An event name or names.\r\n   * @param callback - A callback function.\r\n   */\r\n  private bind( elm: Document | Window | Element, events: string, callback: ( e: Event ) => void ): void {\r\n    on( elm, events, callback, this );\r\n  }\r\n\r\n  /**\r\n   * Applies the editor to the target element.\r\n   *\r\n   * @param target - A selector to find the target element, or a target element itself.\r\n   * @param code   - Optional. The code to overwrite the content of the target element.\r\n   */\r\n  apply( target: string | Element, code?: string ): void {\r\n    assert( ! this.root, 'Already initialized.' );\r\n\r\n    const elm = isString( target ) ? query( document, target ) : target;\r\n\r\n    if ( isHTMLElement( elm ) ) {\r\n      this.source = elm;\r\n\r\n      if ( hasClass( elm, CLASS_RENDERED ) ) {\r\n        this.root = elm;\r\n        const pre = query( elm, 'pre' );\r\n        this.Components.Code.init( text( pre ) || '' );\r\n        remove( pre );\r\n      } else {\r\n        elm.insertAdjacentHTML( 'afterend', this.html( isUndefined( code ) ? text( elm ) : code, false ) );\r\n        styles( elm, { display: 'none' } );\r\n        this.root = elm.nextElementSibling as HTMLElement;\r\n      }\r\n\r\n      addClass( this.root, [ CLASS_INITIALIZED, isMobile() ? CLASS_MOBILE : '' ] );\r\n\r\n      this.collect();\r\n      this.mount();\r\n    } else {\r\n      assert( false, `${ target } is invalid.` );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Builds the HTML of the editor. This works without `document` and `window` objects,\r\n   * but has no functionality.\r\n   *\r\n   * The [`maxInitialLines`](/guides/options#max-initial-lines) option limits the number of lines to generate.\r\n   *\r\n   * @param code   - The code for the editor.\r\n   * @param source - Optional. Whether to embed the source code into the editor or not.\r\n   *\r\n   * @return The HTML of the editor.\r\n   */\r\n  html( code: string, source?: boolean ): string {\r\n    const { Code } = this.Components;\r\n    Code.init( code );\r\n    return new Renderer( Code, this.event, this.options ).html( source );\r\n  }\r\n\r\n  /**\r\n   * Saves the content to the source element if available.\r\n   *\r\n   * For example, if you apply the editor to the empty `textarea` element,\r\n   * it remains empty even after you edit the code by the editor.\r\n   *\r\n   * This method applies back the change to the `textarea` element.\r\n   */\r\n  save(): void {\r\n    const { source, value } = this;\r\n\r\n    if ( source instanceof HTMLTextAreaElement ) {\r\n      source.value = value;\r\n    } else {\r\n      text( source, escapeHtml( value ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the editor.\r\n   *\r\n   * @param reselect - Determines whether to reselect the last position or not.\r\n   */\r\n  focus( reselect?: boolean ): void {\r\n    if ( reselect ) {\r\n      this.Components.Selection.reselect();\r\n    } else {\r\n      focus( this.elements.editable );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the focus from the editor.\r\n   */\r\n  blur(): void {\r\n    const elm = activeElement();\r\n\r\n    if ( this.isFocused() && isHTMLElement( elm ) ) {\r\n      elm.blur();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts to invoke the public method of the specified extension.\r\n   * In terms of the \"loose coupling\", you'd better try not to use this method.\r\n   * Using events is enough in most cases.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * // Attempts to show the \"search\" toolbar.\r\n   * Editor.invoke( 'Toolbar', 'show', 'search' );\r\n   * ```\r\n   *\r\n   * @param name   - A name of the extension.\r\n   * @param method - A method name to invoke.\r\n   * @param args   - Optional. Arguments for the method.\r\n   *\r\n   * @return The return value of the method.\r\n   */\r\n  invoke<K extends keyof Extensions, P extends keyof Extensions[ K ], V extends Extensions[ K ][ P ]>(\r\n    name: K,\r\n    method: P,\r\n    ...args: V extends AnyFunction ? Parameters<V> : any[]\r\n  ): V extends AnyFunction ? ReturnType<V> : void {\r\n    const extension = this.Extensions[ name ];\r\n\r\n    if ( extension && isFunction( extension[ method ] ) ) {\r\n      return extension[ method ]( ...args );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the specified extension.\r\n   * In terms of the \"loose coupling\", you'd better try not to use this method.\r\n   * Using events is enough in most cases.\r\n   *\r\n   * @param name - A name of an extension.\r\n   *\r\n   * @return The specified extension if found, or otherwise `undefined`.\r\n   */\r\n  require<K extends keyof Extensions>( name: K ): Extensions[ K ] | undefined {\r\n    return this.Extensions[ name ];\r\n  }\r\n\r\n  /**\r\n   * Checks if the editor has focus or not.\r\n   *\r\n   * @return `true` if the editor has focus, or otherwise `false`.\r\n   */\r\n  isFocused(): boolean {\r\n    return this.root.contains( activeElement() );\r\n  }\r\n\r\n  /**\r\n   * Saves the final value to the source element and destroys the editor for releasing the memory.\r\n   */\r\n  destroy(): void {\r\n    const { event } = this;\r\n\r\n    this.save();\r\n\r\n    forOwn( assign( this.Components, this.Extensions ), Component => {\r\n      Component.destroy();\r\n    } );\r\n\r\n    delete this.Components;\r\n    delete this.Extensions;\r\n\r\n    styles( this.source, { display: '' } );\r\n    remove( this.elements.root );\r\n\r\n    event.emit( EVENT_DESTROYED );\r\n    event.destroy();\r\n  }\r\n\r\n  /**\r\n   * Sets a new value to the editor and resets the editor.\r\n   *\r\n   * @param value - A new value.\r\n   */\r\n  set value( value: string ) {\r\n    const { Components, Components: { Code, Selection } } = this;\r\n    Code.value = value;\r\n\r\n    Components.View.jump( 0 );\r\n    Components.Sync.sync( 0, Code.size - 1 );\r\n\r\n    if ( this.isFocused() ) {\r\n      Selection.set( [ 0, 0 ] );\r\n    } else {\r\n      Selection.update( [ 0, 0 ], [ 0, 0 ], true );\r\n    }\r\n\r\n    this.event.emit( EVENT_RESET );\r\n  }\r\n\r\n  /**\r\n   * Returns the current value of the editor.\r\n   *\r\n   * @return The current value.\r\n   */\r\n  get value(): string {\r\n    return this.Components.Code.value;\r\n  }\r\n\r\n  /**\r\n   * Sets width of the root element.\r\n   *\r\n   * @param width - Width to set in pixel or in the CSS format, such as '50%'.\r\n   */\r\n  set width( width: number | string ) {\r\n    styles( this.root, { width: unit( width ) } );\r\n    this.Components.View.emitResize();\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the editor in pixel.\r\n   *\r\n   * @return The width of the editor in pixel.\r\n   */\r\n  get width(): number {\r\n    return this.root.clientWidth;\r\n  }\r\n\r\n  /**\r\n   * Sets the height of the root element.\r\n   *\r\n   * @param height - Height to set in pixel or in the CSS format, such as '50%'.\r\n   */\r\n  set height( height: number | string ) {\r\n    styles( this.root, { height: unit( height ) } );\r\n    this.Components.View.emitResize();\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the editor in pixel.\r\n   *\r\n   * @return The height of the editor.\r\n   */\r\n  get height(): number {\r\n    return this.root.clientHeight;\r\n  }\r\n\r\n  /**\r\n   * Makes the editor mutable or immutable.\r\n   * In the read-only mode, the primary caret gets hidden.\r\n   *\r\n   * @param readOnly - Whether to make the editor immutable or mutable.\r\n   */\r\n  set readOnly( readOnly: boolean ) {\r\n    const { elements } = this;\r\n\r\n    toggleClass( elements.root, CLASS_READONLY, readOnly );\r\n    toggleEditable( elements.editable, ! readOnly );\r\n\r\n    this._readOnly = readOnly;\r\n    this.event.emit( EVENT_READONLY, readOnly );\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the editor is read-only or not.\r\n   *\r\n   * @return - `true` if the editor is read-only or `false` if not.\r\n   */\r\n  get readOnly(): boolean {\r\n    return this._readOnly;\r\n  }\r\n}\r\n","/**\r\n * Converts essential HTML special characters to HTML entities.\r\n *\r\n * @param string - A string to escape.\r\n *\r\n * @return An escaped string.\r\n */\r\nexport function escapeHtml( string: string ): string {\r\n  return string.replace( /&/g, '&amp;' ).replace( /</g, '&lt;' ).replace( />/g, '&gt;' );\r\n}\r\n","import { EventBusCallback, Extensions, Language, Options, Position } from '@ryusei/code';\nimport { DEFAULT_OPTIONS } from '../../constants/defaults';\nimport { assert, assign, forOwn, isObject, isUndefined, toArray } from '../../utils';\nimport { Editor } from '../Editor/Editor';\n\n\n/**\n * The frontend class for the editor.\n *\n * @since 0.1.0\n */\nexport class RyuseiCode {\n  /**\n   * Stores all language objects.\n   */\n  private static languages: Record<string, Language> = {};\n\n  /**\n   * Stores all Component classes.\n   */\n  private static Extensions: Partial<Extensions> = {};\n\n  /**\n   * Registers a language or languages.\n   *\n   * @example\n   * ```js\n   * import { RyuseiCode, javascript, html } from '@ryusei/code';\n   *\n   * RyuseiLight.register( javascript() );\n   *\n   * // Or pass an array:\n   * RyuseiLight.register( [ javascript(), html() ] );\n   * ```\n   *\n   * If you want to register all languages the `languages` object is helpful:\n   *\n   * ```js\n   * import { RyuseiCode, languages } from '@ryusei/code';\n   *\n   * RyuseiLight.register( Object.values( languages ).map( lang => lang() ) );\n   * ```\n   *\n   * @param languages - A Language object or an array with objects.\n   */\n  static register( languages: Language | Language[] ): void {\n    toArray( languages ).forEach( language => {\n      const { language: lang, id } = language;\n\n      if ( ! RyuseiCode.languages[ id ] ) {\n        ( lang.alias || [] ).concat( id ).forEach( ( id: string ) => {\n          RyuseiCode.languages[ id ] = language;\n        } );\n      }\n    } );\n  }\n\n  /**\n   * Registers extensions.\n   *\n   * @example\n   * ```js\n   * import { RyuseiCode, ActiveLine, History } from '@ryusei/code';\n   *\n   * RyuseiLight.register( { ActiveLine, History } );\n   * ```\n   *\n   * If you want to compose all extensions, the `Extensions` object is helpful:\n   *\n   * ```js\n   * import { RyuseiCode, Extensions } from '@ryusei/code';\n   *\n   * RyuseiLight.register( Extensions );\n   * ```\n   *\n   * @param extensions - An object literal with extensions.\n   */\n  static compose( extensions: Partial<Extensions> ): void {\n    forOwn( extensions, ( Extension, name ) => {\n      RyuseiCode.Extensions[ name ] = Extension;\n    } );\n  }\n\n  /**\n   * Returns a Language object.\n   *\n   * @param id - The language ID.\n   *\n   * @return A Language object.\n   */\n  static get( id: string ): Language {\n    const { languages } = RyuseiCode;\n    assert( languages[ id ], `${ id } was not found.` );\n    return languages[ id ];\n  }\n\n  /**\n   * An object with all options.\n   */\n  options: Options;\n\n  /**\n   * The Editor instance.\n   */\n  Editor: Editor;\n\n  /**\n   * The Language object.\n   */\n  language: Language;\n\n  /**\n   * The constructor.\n   *\n   * @param options - Optional. Options.\n   */\n  constructor( options?: Options ) {\n    this.mergeOptions( options );\n    this.language = RyuseiCode.get( this.options.language );\n    this.Editor   = new Editor( this.language, this.options, RyuseiCode.Extensions );\n  }\n\n  /**\n   * Merges options with default values.\n   *\n   * @param options - Options to merge.\n   */\n  private mergeOptions( options: Options | undefined ): void {\n    this.options = assign( {}, DEFAULT_OPTIONS );\n\n    forOwn( options, ( value, key ) => {\n      if ( ! isUndefined( value ) ) {\n        if ( isObject( DEFAULT_OPTIONS[ key ] ) ) {\n          if ( isObject( value ) ) {\n            this.options[ key ] = assign( {}, DEFAULT_OPTIONS[ key ], value );\n          }\n        } else {\n          this.options[ key ] = value;\n        }\n      }\n    } );\n  }\n\n  /**\n   * Applies the editor to the specified target element.\n   *\n   * @example\n   * ```js\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'textarea' );\n   *\n   * // or\n   * const textarea = document.querySelector( 'textarea' );\n   * ryuseiCode.apply( textarea )\n   * ```\n   *\n   * <div class=\"caution\">\n   * The instance can not have multiple targets.\n   * If the <code>apply()</code> method is called twice to the same element, it throws an error.\n   * </div>\n   *\n   * @param target - A selector to find the target element, or a target element itself.\n   * @param code   - Optional. The code to overwrite the content of the target element.\n   */\n  apply( target: string | Element, code?: string ): void {\n    this.Editor.apply( target, code );\n  }\n\n  /**\n   * Builds the HTML of the editor. This works without `document` and `window` objects,\n   * but has no functionality.\n   *\n   * The [`maxInitialLines`](/guides/options#max-initial-lines) option limits the number of lines to generate.\n   *\n   * @param code - The code for the editor.\n   *\n   * @return The HTML string for the editor.\n   */\n  html( code: string ): string {\n    return this.Editor.html( code, true );\n  }\n\n  /**\n   * Attaches an event handler to the editor event or events.\n   *\n   * ```js\n   * // ke is the native KeyboardEvent object\n   * ryuseiCode.on( 'keydown', ( e, ke ) => {\n   *   console.log( ke.key );\n   * } );\n   *\n   * // With a namespace:\n   * ryuseiCode.on( 'keydown.myNamespace', ( e, ke ) => {\n   *   console.log( ke.key );\n   * } );\n   * ```\n   *\n   * @param events   - An event name or names separated by spaces, or an array with event names.\n   *                   Use a dot(.) to add a namespace.\n   * @param callback - A callback function.\n   */\n  on( events: string | string[], callback: EventBusCallback ): void {\n    this.Editor.event.on( events, callback );\n  }\n\n  /**\n   * Detaches an event handler registered by `on()`.\n   *\n   * ```js\n   * // Detach all handlers:\n   * ryuseiCode.off( 'keydown' );\n   *\n   * // Detach handlers only in the namespace:\n   * ryuseiCode.off( 'keydown.myNamespace' );\n   * ```\n   *\n   * @param events - An event name or names separated by spaces, or or an array with event names.\n   *                 Use a dot(.) to add a namespace.\n   */\n  off( events: string | string[] ): void {\n    this.Editor.event.off( events );\n  }\n\n  /**\n   * Saves the content to the source element if available.\n   *\n   * For example, if you apply the editor to the empty `textarea` element,\n   * it remains empty even after you edit the code by the editor.\n   *\n   * This method applies back the change to the `textarea` element.\n   */\n  save(): void {\n    this.Editor.save();\n  }\n\n  /**\n   * Sets focus on the editor.\n   *\n   * @param reselect - Determines whether to reselect the last position or not.\n   */\n  focus( reselect?: boolean ): void {\n    this.Editor.focus( reselect );\n  }\n\n  /**\n   * Sets the caret position or selection range.\n   *\n   * @param start - A start position as `[ row, col ]`.\n   * @param end   - Optional. An end position. If omitted, the selection will be collapsed to the start.\n   */\n  setRange( start: Position, end?: Position ): void {\n    this.Editor.Components.Selection.set( start, end );\n  }\n\n  /**\n   * The alias of the `value` property that returns the current code as a string.\n   *\n   * @return The current code as a string.\n   */\n  toString(): string {\n    return this.value;\n  }\n\n  /**\n   * Saves the final value to the source element and destroys the editor for releasing the memory.\n   */\n  destroy(): void {\n    this.Editor.destroy();\n    delete this.Editor;\n  }\n\n  /**\n   * Sets a new value to the editor and resets the editor.\n   *\n   * @param value - A new value.\n   */\n  set value( value: string ) {\n    this.Editor.value = value;\n  }\n\n  /**\n   * Returns the current value as a string.\n   *\n   * @return The current value.\n   */\n  get value(): string {\n    return this.Editor.value;\n  }\n}\n","import { UIButtonSettings } from '@ryusei/code';\nimport { Dialog } from './Dialog';\n\n\n/**\n * A collection of settings for general UI buttons.\n *\n * @since 0.1.0\n */\nexport const GENERAL_UI_BUTTONS: Record<string, UIButtonSettings<Dialog>> = {\n  confirm: {\n    id   : 'confirm',\n    click: 'confirm',\n  },\n  cancel : {\n    id      : 'cancel',\n    click   : 'hide',\n    tabindex: 0,\n  },\n};\n","import { PROJECT_CODE } from '../../constants/project';\n\n\n/**\n * Classes for dialog components.\n *\n * @since 0.1.0\n */\nexport const CLASS_DIALOG        = `${ PROJECT_CODE }__dialog`;\nexport const CLASS_DIALOG_GROUP  = `${ CLASS_DIALOG }__group`;\nexport const CLASS_DIALOG_HEADER = `${ CLASS_DIALOG }__header`;\nexport const CLASS_DIALOG_TITLE  = `${ CLASS_DIALOG }__title`;\nexport const CLASS_DIALOG_BODY   = `${ CLASS_DIALOG }__body`;\nexport const CLASS_DIALOG_FOOTER = `${ CLASS_DIALOG }__footer`;\n","import { DialogGroupData, Elements, UIButtonSettings } from '@ryusei/code';\nimport { UIComponent } from '../../classes/UIComponent/UIComponent';\nimport { CLASS_ACTIVE } from '../../constants/classes';\nimport { EVENT_INIT_STYLE } from '../../constants/events';\nimport { PROJECT_CODE } from '../../constants/project';\nimport { addClass, append, assert, attr, create, div, isString, removeClass, text } from '../../utils';\nimport { GENERAL_UI_BUTTONS } from './buttons';\nimport {\n  CLASS_DIALOG,\n  CLASS_DIALOG_BODY,\n  CLASS_DIALOG_FOOTER,\n  CLASS_DIALOG_GROUP,\n  CLASS_DIALOG_HEADER,\n  CLASS_DIALOG_TITLE,\n} from './classes';\n\n\n/**\n * The group ID of the common dialog.\n *\n * @since 0.1.0\n */\nconst COMMON_DIALOG_GROUP = `${ PROJECT_CODE }-common`;\n\n/**\n * The component for displaying a dialog.\n *\n * @since 0.1.0\n */\nexport class Dialog extends UIComponent<DialogGroupData> {\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.register( COMMON_DIALOG_GROUP, div(), '' );\n  }\n\n  /**\n   * Listens to some events.\n   */\n  protected listen(): void {\n    this.bind( window, 'click', e => {\n      if ( ! this.wrapper.contains( e.target as Node ) ) {\n        this.hide();\n      }\n    } );\n\n    this.on( EVENT_INIT_STYLE, ( e, add ) => {\n      add( `.${ CLASS_DIALOG } code`, 'fontFamily', this.options.monospaceFont );\n    } );\n  }\n\n  /**\n   * Creates dialog elements.\n   * Note that the dialog element must/should have:\n   * - an accessible name by `aria-label` or `aria-labelledby`.\n   * - at least one focusable descendant element.\n   *\n   * @link https://www.w3.org/TR/wai-aria-1.2/#dialog\n   */\n  protected create(): void {\n    const { elements } = this;\n    const id = `${ elements.root.id }-dialog`;\n\n    this.wrapper = div( {\n      id,\n      class             : CLASS_DIALOG,\n      role              : 'dialog',\n      'aria-labelledby' : `${ id }-title`,\n      'aria-describedby': `${ id }-body`,\n    }, elements.overlay );\n  }\n\n  /**\n   * Called when the general confirm button is clicked.\n   *\n   * @internal\n   */\n  confirm(): void {\n    this.emit( `dialog:${ this.group }:confirmed`, this );\n    this.hide();\n  }\n\n  /**\n   * Registers a new dialog.\n   * Use `message()` instead just for showing a message.\n   *\n   * @example\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * const Dialog     = ryuseiCode.Editor.require( 'Dialog' );\n   *\n   * // The Dialog extension may not exist.\n   * if ( Dialog ) {\n   *   const body = document.createElement( 'p' );\n   *   body.textContent = 'Hello!';\n   *   Dialog.register( 'sample', body, 'Sample Dialog', [ 'confirm' ] );\n   *   Dialog.show( 'sample' );\n   * }\n   * ```\n   *\n   * If you want to add custom buttons, pass an array with button settings to the `buttons`.\n   *\n   * ```ts\n   * const settings = [\n   *   {\n   *     id: 'myButton',\n   *     html: 'Click Me',\n   *     click() {\n   *       console.log( 'Clicked!' );\n   *     },\n   *   }\n   * ];\n   *\n   * Dialog.register( 'sample', body, 'Sample Dialog', settings );\n   * ```\n   *\n   * @param group   - A group ID.\n   * @param elm     - An element to display as a dialog body.\n   * @param title   - A title of a dialog.\n   * @param buttons - Optional. General button names, `'confirm'`, `'cancel'`, or objects with button settings.\n   */\n  register(\n    group: string,\n    elm: HTMLElement,\n    title: string,\n    buttons?: Array<keyof typeof GENERAL_UI_BUTTONS | UIButtonSettings<Dialog>>\n  ): void {\n    const settings = ( buttons || [ 'confirm' ] )\n      .map( settings => isString( settings ) ? GENERAL_UI_BUTTONS[ settings ] : settings )\n      .filter( Boolean );\n\n    assert( settings.length );\n\n    const { id } = this.wrapper;\n    const groupElm  = div( CLASS_DIALOG_GROUP );\n    const headerElm = create( 'header', CLASS_DIALOG_HEADER );\n    const titleElm  = create( 'h3', { id: `${ id }-title`, class: CLASS_DIALOG_TITLE }, headerElm );\n    const footerElm = create( 'footer', CLASS_DIALOG_FOOTER );\n    const button    = this.createCloseButton( { 'aria-controls': id } );\n\n    attr( elm, { id: `${ id }-body`, class: CLASS_DIALOG_BODY } );\n    text( titleElm, title );\n    addClass( button, `${ CLASS_DIALOG }__close` );\n    append( groupElm, [ headerElm, elm, footerElm, button ] );\n\n    this.groups[ group ] = {\n      elm    : groupElm,\n      title  : titleElm,\n      body   : elm,\n      buttons: this.createButtons<Dialog>( settings, footerElm, this ),\n    };\n  }\n\n  /**\n   * Opens the specified dialog. The dialog must be registered by `register()` before opening it.\n   *\n   * @param group - A dialog ID to open.\n   */\n  show( group: string ): void {\n    this.hide();\n    super.show( group );\n\n    this.Editor.readOnly = true;\n    addClass( this.elements.overlay, CLASS_ACTIVE );\n\n    this.autoFocus( group );\n    this.emit( 'dialog:opened', this, group );\n  }\n\n  /**\n   * Closes the dialog which is visible now. Nothing will happen when there is no shown dialog.\n   */\n  hide(): void {\n    if ( this.isActive() ) {\n      this.Editor.readOnly = false;\n\n      super.hide();\n      removeClass( this.elements.overlay, CLASS_ACTIVE );\n\n      this.Selection.reselect();\n      this.emit( 'dialog:closed', this, this.group );\n    }\n  }\n\n  /**\n   * Displays a message with a common dialog. No registration required.\n   *\n   * @param message - A message to display.\n   * @param title   - Optional. A title of a dialog. If omitted, uses the `notice` in the `i18n` collection.\n   */\n  message( message: string, title?: string ): void {\n    const data = this.groups[ COMMON_DIALOG_GROUP ];\n\n    text( data.title, title || this.i18n.notice );\n    text( data.body, message );\n\n    this.show( COMMON_DIALOG_GROUP );\n  }\n}\n","import { HistoryOptions } from '@ryusei/code';\n\n\n/**\n * The default options for the History component.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: HistoryOptions = {\n  limit   : 100,\n  debounce: 300,\n};\n","import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The collection of shortcuts for the History extension.\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[]> = {\n  undo: [ 'Z', true, false ],\n  redo: [ 'Z', true, true ],\n};\n","import { Elements, EventBusEvent, HistoryOptions, Range } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_CHANGE, EVENT_CHANGED, EVENT_KEYMAP, EVENT_RESET } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { compare, debounce } from '../../utils';\nimport { Throttle } from '../../utils/function/throttle/throttle';\nimport { DEFAULT_OPTIONS } from './defaults';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * The interface of each record for the history.\n */\nexport interface HistoryRecord {\n  /**\n   * A Range object.\n   */\n  range: Range;\n\n  /**\n   * A pure text of the code.\n   */\n  value: string;\n\n  /**\n   * A number of lines.\n   */\n  length: number;\n\n  /**\n   * Additional data to store in the record.\n   */\n  data?: Record<string, any>;\n}\n\n/**\n * The input type of the history.\n *\n * @since 0.1.0\n */\nconst RESTORATION_INPUT_TYPE = 'history';\n\n/**\n * The component for managing history.\n * This component requires the Keymap component.\n *\n * @since 0.1.0\n */\nexport class History extends Component {\n  /**\n   * Holds history records.\n   */\n  private history: HistoryRecord[] = [];\n\n  /**\n   * Indicates the current history index.\n   */\n  private index = 0;\n\n  /**\n   * The debounced `push` function.\n   */\n  private debouncedPush: Throttle;\n\n  /**\n   * Holds history options.\n   */\n  private opts: HistoryOptions;\n\n  /**\n   * The Comment constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.addKeyBindings( KEYMAP );\n  }\n\n  /**\n   * Initialized the instance.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    this.opts          = this.getOptions( 'history', DEFAULT_OPTIONS );\n    this.debouncedPush = debounce( this.push.bind( this ), this.opts.debounce );\n    this.listen();\n  }\n\n  /**\n   * Listens to some internal events.\n   */\n  private listen(): void {\n    this.on( EVENT_CHANGE, this.onChange, this );\n    this.on( EVENT_CHANGED, this.onChanged, this );\n\n    this.on( `${ EVENT_KEYMAP }:undo ${ EVENT_KEYMAP }:redo`, ( e, ke, action ) => {\n      ke.preventDefault();\n\n      if ( ! this.Editor.readOnly ) {\n        this[ action ]();\n      }\n    } );\n\n    this.on( EVENT_RESET, () => {\n      this.history.length = 0;\n    } );\n  }\n\n  /**\n   * Creates a history record object.\n   *\n   * @return A created HistoryRecord object.\n   */\n  private record(): HistoryRecord {\n    return {\n      range : this.Selection.get(),\n      value : this.Code.value,\n      length: this.lines.length,\n    };\n  }\n\n  /**\n   * Restores the provided record.\n   * Needs to apply the latest code to the input before sync.\n   *\n   * @param record - A record to restore.\n   */\n  private restore( record: HistoryRecord ): void {\n    const { range, length } = record;\n    const { start, end } = range;\n\n    this.emit( EVENT_CHANGE, RESTORATION_INPUT_TYPE );\n\n    this.Code.value = record.value;\n    this.Sync.sync( 0, length - 1, start[ 0 ] );\n    this.Selection.set( start, end );\n\n    this.emit( EVENT_CHANGED, RESTORATION_INPUT_TYPE );\n    this.emit( 'history:restored', record );\n  }\n\n  /**\n   * Pushes a record to the history and resets the index.\n   * If the `record` is not provided, a new record will be generated via the current editor status.\n   *\n   * @param record - Optional. A record to push.\n   */\n  private push( record: HistoryRecord ): void {\n    const current = this.history[ this.index ];\n\n    if ( current && this.isSame( current, record ) ) {\n      return;\n    }\n\n    this.history.push( record );\n\n    if ( this.length > this.opts.limit ) {\n      this.history.shift();\n    }\n\n    this.index = this.length - 1;\n    this.emit( 'history:pushed', record );\n\n    this.debouncedPush.cancel();\n  }\n\n  /**\n   * Checks if the provided 2 records are same or not.\n   *\n   * @param record1 - A record to check.\n   * @param record2 - Another record to check.\n   *\n   * @return `true` if the records are same, or otherwise `false`.\n   */\n  private isSame( record1: HistoryRecord, record2: HistoryRecord ): boolean {\n    return record1.value === record2.value\n      && ! compare( record1.range.start, record2.range.start )\n      && ! compare( record1.range.end, record2.range.end );\n  }\n\n  /**\n   * Checks if an old record is now active or not.\n   *\n   * @return `true` if an old record is active, or `false` otherwise.\n   */\n  private isUndoing(): boolean {\n    return this.index !== this.length - 1;\n  }\n\n  /**\n   * Called when the code is being changed.\n   *\n   * @param e    - A EventBusEvent object.\n   * @param type - An input type. This may be empty.\n   */\n  private onChange( e: EventBusEvent<Editor>, type: string ): void {\n    if ( type !== RESTORATION_INPUT_TYPE ) {\n      const { history } = this;\n\n      if ( this.isUndoing() ) {\n        history.splice( this.index + 1, history.length );\n      }\n\n      if ( ! this.Selection.isCollapsed() || ! this.length || type === 'replace' ) {\n        this.push( this.record() );\n      }\n    }\n  }\n\n  /**\n   * Called just after the code is changed.\n   *\n   * @param e    - A EventBusEvent object.\n   * @param type - An input type. This may be empty.\n   */\n  private onChanged( e: EventBusEvent<Editor>, type: string ): void {\n    if ( ! this.Input.composing && type !== RESTORATION_INPUT_TYPE ) {\n      if ( type === 'input' ) {\n        this.debouncedPush( this.record() );\n      } else {\n        this.push( this.record() );\n      }\n    }\n  }\n\n  /**\n   * Performs undo.\n   */\n  undo(): void {\n    this.debouncedPush.invoke();\n\n    if ( 0 < this.index && this.index < this.length ) {\n      this.restore( this.history[ --this.index ] );\n    }\n  }\n\n  /**\n   * Performs redo only if previously undo() is operated.\n   */\n  redo(): void {\n    if ( this.index < this.length - 1 ) {\n      this.restore( this.history[ ++this.index ] );\n    }\n  }\n\n  /**\n   * Returns the current history length.\n   *\n   * @return The number of records.\n   */\n  get length(): number {\n    return this.history.length;\n  }\n}\n","import { IndentationOptions } from '@ryusei/code';\n\n\n/**\n * The default options for the Tab component.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: IndentationOptions = {\n  help      : true,\n  deepIndent: true,\n};\n","/**\n * The collection of i18n strings.\n *\n * @since 0.1.0\n */\nexport const I18N = {\n  indentNotice  : 'Indent/Move Focus',\n  indentDisabled: 'Inserting indents by the Tab is currently disabled. You can toggle it by %s.',\n};\n","import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The collection of shortcuts for the Indentation extension.\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[]> = {\n  indent       : [ 'Tab' ],\n  unindent     : [ 'Tab', false, true ],\n  toggleTabMode: [ 'M', true ],\n};\n","import { Elements, EventBusEvent, IndentationOptions, IndentConfig, Position } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { LINE_BREAK } from '../../constants/characters';\nimport {\n  EVENT_CHANGE,\n  EVENT_CHANGED,\n  EVENT_FOCUS,\n  EVENT_KEYDOWN,\n  EVENT_KEYMAP,\n  EVENT_NEWLINE,\n} from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { div, format, html, isFunction, max, prevent } from '../../utils';\nimport { Dialog } from '../Dialog/Dialog';\nimport { DEFAULT_OPTIONS } from './defaults';\nimport { I18N } from './i18n';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * The dialog ID for the indent notice.\n *\n * @since 0.1.0\n */\nconst DIALOG_ID = 'tab-notice';\n\n/**\n * The component for handing the Tab key to insert/remove indents.\n * Just overriding the default behavior of the Tab key can not satisfy the \"No Keyboard Trap\" criterion.\n * Therefore as default, the Tab indentation is initially disabled, and it will be enabled when:\n * - the editor is focused by pointer devices, such as a mouse\n * - users explicitly enable it via CTRL+M\n *\n * @link https://www.w3.org/TR/WCAG21/#no-keyboard-trap\n *\n * @since 0.1.0\n */\nexport class Indentation extends Component {\n  /**\n   * Indicates whether the notification message has been already shown or not.\n   */\n  private static noticed: boolean;\n\n  /**\n   * Holds the indent representation.\n   */\n  private space: string;\n\n  /**\n   * Indicates whether to disable tab indentation or not.\n   */\n  private disabled: boolean;\n\n  /**\n   * Holds options.\n   */\n  private opts: IndentationOptions;\n\n  /**\n   * Holds the Dialog component.\n   */\n  private Dialog: Dialog;\n\n  /**\n   * The Indentation constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.addI18n( I18N );\n    this.addKeyBindings( KEYMAP );\n  }\n\n  /**\n   * Initializes the component.\n   * This component requires the Dialog component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    if ( ! ( this.Dialog = this.require( 'Dialog' ) ) ) {\n      return;\n    }\n\n    super.mount( elements );\n\n    this.space    = this.options.indent;\n    this.opts     = this.getOptions<IndentationOptions>( 'indentation', DEFAULT_OPTIONS );\n    this.disabled = this.opts.activation !== 'load';\n\n    this.register();\n    this.listen();\n  }\n\n  /**\n   * Explicitly enables or disables the component.\n   *\n   * @param disabled - Determines whether to disable the component or not.\n   */\n  setDisabled( disabled: boolean ): void {\n    this.disabled = disabled;\n    Indentation.noticed = true;\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    let focused: boolean;\n\n    this.on( EVENT_FOCUS, ( e, type ) => {\n      if ( type === 'pointer' && ! focused ) {\n        this.setDisabled( false );\n      }\n\n      focused = true;\n    } );\n\n    this.on( `${ EVENT_KEYMAP }:indent ${ EVENT_KEYMAP }:unindent`, ( e, ke, action ) => {\n      if ( ! this.disabled ) {\n        if ( action === 'indent' ) {\n          this.indent();\n        } else {\n          this.unindent();\n        }\n\n        prevent( ke );\n      }\n    } );\n\n    this.on( `${ EVENT_KEYMAP }:toggleTabMode`, ( e, ke ) => {\n      this.setDisabled( ! this.disabled );\n      prevent( ke );\n    } );\n\n    this.on( EVENT_NEWLINE, () => {\n      this.indentNewline();\n\n      if ( this.opts.deepIndent ) {\n        this.indentDeep();\n      }\n    } );\n\n    this.on( EVENT_KEYDOWN, this.onKeydown, this );\n  }\n\n  /**\n   * Called when any key is pressed on the editor.\n   *\n   * @param e     - An EventBusEvent object.\n   * @param ke    - A KeyboardEvent object.\n   */\n  private onKeydown( e: EventBusEvent<Editor>, ke: KeyboardEvent ): void {\n    if ( this.opts.help && ! Indentation.noticed && ke.key === 'Tab' ) {\n      this.Dialog.show( DIALOG_ID );\n      Indentation.noticed = true;\n      prevent( ke );\n      return;\n    }\n\n    this.remove( ke );\n  }\n\n  /**\n   * Registers the dialog for the indentation notice.\n   */\n  private register(): void {\n    const { i18n } = this;\n    const body = div();\n\n    html( body, format(\n      `<p>${ i18n.indentDisabled }</p>`,\n      `<strong>${ this.Keymap.getShortcut( 'toggleTabMode' ) }</strong>`\n    ) );\n\n    this.Dialog.register( DIALOG_ID, body, i18n.indentNotice, [\n      {\n        id   : 'activate',\n        click: () => {\n          this.setDisabled( false );\n          this.Dialog.hide();\n        },\n      },\n      'confirm',\n    ] );\n  }\n\n  /**\n   * Prepends indents to all selected lines.\n   */\n  private indent(): void {\n    const { Input, Selection, space, space: { length: size } } = this;\n\n    if ( Selection.isCollapsed() ) {\n      Input.apply( { type: 'indent', insertion: space, offset: size } );\n    } else {\n      this.emit( EVENT_CHANGE );\n\n      const { start, end } = Selection.get();\n      this.Code.replaceLinesBy( start[ 0 ], end[ 0 ], line => space + line );\n      this.Sync.sync( start[ 0 ], end[ 0 ] );\n      Selection.set( [ start[ 0 ], start[ 1 ] + size ], [ end[ 0 ], end[ 1 ] + size ] );\n\n      this.emit( EVENT_CHANGED );\n    }\n  }\n\n  /**\n   * Removes indents from all selected lines.\n   */\n  private unindent(): void {\n    const { space } = this;\n    const { start, end } = this.Selection.get();\n\n    let startOffset = 0;\n    let endOffset   = 0;\n    let changed;\n\n    this.Code.replaceLinesBy( start[ 0 ], end[ 0 ], ( line, index, array ) => {\n      const match = line.match( new RegExp( `^(${ space }| {0,${ space.length }})` ) );\n\n      if ( match ) {\n        const [ indent ] = match;\n        line = line.replace( indent, '' );\n\n        if ( index === 0 ) {\n          this.emit( EVENT_CHANGE );\n          startOffset -= indent.length;\n        }\n\n        if ( index === array.length - 1 ) {\n          endOffset -= indent.length;\n        }\n\n        changed = true;\n      }\n\n      return line;\n    } );\n\n    if ( changed ) {\n      const startCol = max( start[ 1 ] + startOffset, 0 );\n      const endCol   = max( end[ 1 ] + endOffset, 0 );\n\n      this.Sync.sync( start[ 0 ], end[ 0 ] );\n      this.Selection.set( [ start[ 0 ], startCol ], [ end[ 0 ], endCol ] );\n      this.emit( EVENT_CHANGED );\n    }\n  }\n\n  /**\n   * Adds an indent to the newline when the enter key is pressed.\n   */\n  private indentNewline(): void {\n    const { Input } = this;\n    const indent = this.lines[ Input.row ].getIndent();\n\n    if ( indent ) {\n      Input.set( 'newline', {\n        value   : Input.before + LINE_BREAK + indent + Input.after.replace( /^[ \\t]+/, '' ),\n        position: [ Input.row + 1, indent.length ],\n      } );\n    }\n  }\n\n  /**\n   * Adds an indent after specific patterns.\n   */\n  private indentDeep(): void {\n    const index = this.findConfigIndex();\n\n    if ( index > -1 && this.shouldIndentDeep( index ) ) {\n      const { Input, space } = this;\n      const indent = this.lines[ Input.row ].getIndent();\n      const string = LINE_BREAK + indent + space + ( this.isClosed( index ) ? LINE_BREAK + indent : '' );\n\n      Input.set( 'indentDeep', {\n        key      : 'Enter',\n        insertion: string,\n        position : [ Input.row + 1, indent.length + space.length ],\n      } );\n    }\n  }\n\n  /**\n   * Returns an indent config index.\n   *\n   * @return A config index if found, or -1 if not.\n   */\n  private findConfigIndex(): number {\n    const config = this.getConfig();\n\n    for ( let i = 0; i < config.length; i++ ) {\n      const settings = config[ i ];\n\n      if ( isFunction( settings[ 0 ] ) ) {\n        return settings[ 0 ]( this.Editor ) ? i : -1;\n      }\n\n      const { Input } = this;\n\n      if ( settings[ 0 ].test( Input.before.trim() ) ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Determines whether to increase the indent level or not.\n   *\n   * @param index - A config index.\n   *\n   * @return `true` if the level should be increased, or otherwise `false`.\n   */\n  private shouldIndentDeep( index: number ): boolean {\n    const config    = this.getConfig()[ index ];\n    const condition = config && config[ 2 ];\n\n    if ( isFunction( condition ) ) {\n      return condition( this.Editor );\n    }\n\n    return ! condition || this.Scope.isIn( condition );\n  }\n\n  /**\n   * Checks if the position where the indentation is being added is enclosed by paired characters or not.\n   *\n   * @param index - A config index.\n   *\n   * @return `true` if the closing representation is found, or otherwise `false`.\n   */\n  private isClosed( index: number ): boolean {\n    const config    = this.getConfig()[ index ];\n    const condition = config && config[ 1 ];\n\n    if ( ! condition ) {\n      return false;\n    }\n\n    if ( isFunction( condition ) ) {\n      return condition( this.Editor );\n    }\n\n    const { Input } = this;\n    return condition.test( Input.after.trim() );\n  }\n\n  /**\n   * When the backspace key is pressed,\n   * removes indents of a line if they are same with the previous one's.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private remove( e: KeyboardEvent ): void {\n    const { Selection } = this;\n\n    if ( e.key === 'Backspace' && Selection.isCollapsed() ) {\n      const { lines } = this;\n      const { start } = Selection.get();\n      const prevRow  = start[ 0 ] - 1;\n      const prevLine = lines[ prevRow ];\n\n      if ( ! prevLine ) {\n        return;\n      }\n\n      const prevIndent = prevLine.getIndent();\n      const curIndent  = lines[ start[ 0 ] ].getIndent();\n\n      if ( prevIndent && prevIndent === curIndent && start[ 1 ] === curIndent.length ) {\n        this.emit( EVENT_CHANGE );\n\n        const position = [ prevRow, prevLine.text.length ] as Position;\n\n        this.Code.replaceRange( position, start, '' );\n        this.Sync.sync( prevRow, start[ 0 ] );\n        Selection.set( position );\n\n        this.emit( EVENT_CHANGED );\n\n        prevent( e );\n      }\n    }\n  }\n\n  /**\n   * Returns a config for indentation.\n   *\n   * @return A config array.\n   */\n  private getConfig(): IndentConfig[] {\n    return this.getLanguage().indent || [];\n  }\n}\n","import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The collection of shortcuts for the Shortcut extension.\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[]> = {\n  cutLine : [ 'X', true ],\n  copyLine: [ 'C', true ],\n  moveUp  : [ 'ArrowUp', true ],\n  moveDown: [ 'ArrowDown', true ],\n};\n","import { Elements } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_KEYMAP } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { endsWith, isPrevented, prevent } from '../../utils';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * The class for handling some shortcuts.\n *\n * @since 0.1.0\n */\nexport class Shortcut extends Component {\n  /**\n   * The Search constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.addKeyBindings( KEYMAP );\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    const { Selection, Measure, Edit } = this;\n\n    this.on( `${ EVENT_KEYMAP }:copyLine`, ( e, ke ) => {\n      if ( Selection.isCollapsed() && ! isPrevented( ke ) ) {\n        Selection.selectLine( undefined, true, true );\n        Edit.copy();\n        prevent( ke );\n      }\n    } );\n\n    this.on( `${ EVENT_KEYMAP }:cutLine`, ( e, ke ) => {\n      if ( Selection.isCollapsed() && ! isPrevented( ke ) ) {\n        Edit.cutLine();\n        prevent( ke );\n      }\n    } );\n\n    this.on( `${ EVENT_KEYMAP }:moveUp ${ EVENT_KEYMAP }:moveDown`, ( e, ke ) => {\n      const { scroller } = elements;\n      scroller.scrollTop += ( endsWith( e.type, 'n' ) ? 1 : -1 ) * Measure.lineHeight;\n      prevent( ke );\n    } );\n  }\n}\n","/**\n * Checks if the string ends with the `search` string or not.\n *\n * @param string - A string to check.\n * @param search - A string to search.\n *\n * @return `true` if the string ends with the `search`, or otherwise `false`.\n */\nexport function endsWith( string: string, search: string ): boolean {\n  return string.slice( - search.length ) === search;\n}\n","import { RyuseiCode } from '../../core/RyuseiCode/RyuseiCode';\r\nimport { Dialog, Indentation, History, Shortcut } from '../../extensions';\r\n\r\n\r\nRyuseiCode.compose( { Dialog, Indentation, History, Shortcut } );\r\n\r\nexport { RyuseiCode as default } from '../../core/RyuseiCode/RyuseiCode';\r\n\r\n"],"names":["KEYMAP","selectAll","MODIFIER_KEYS","default","mac","DEFAULT_OPTIONS","language","placeholder","minWidth","maxWidth","minHeight","maxHeight","indent","tabSize","tabIndex","keymap","maxInitialLines","icons","arrowUp","arrowDown","close","i18n","copy","cut","paste","confirm","activate","notice","cancel","failedToCopy","scrollbar","inputLabel","location","includes","array","value","indexOf","isObject","subject","isArray","Array","isFunction","isString","isUndefined","isText","Text","isHTMLElement","HTMLElement","isBr","HTMLBRElement","toArray","nest","arrayProto","prototype","slice","arrayLike","start","end","call","splice","deleteCount","args","activeElement","document","toggleClass","elm","classes","add","forEach","name","classList","addClass","append","parent","children","appendChild","bind","forOwn","object","iteratee","keys","Object","i","length","assign","sources","source","key","attr","attrs","getAttribute","removeAttribute","setAttribute","String","before","nodes","ref","node","parentNode","insertBefore","closest","selector","Element","matches","parentElement","create","tag","createElement","div","focus","preventScroll","hasClass","className","contains","height","clientHeight","html","innerHTML","isPrevented","e","defaultPrevented","handlerMap","WeakMap","on","events","callback","split","event","addEventListener","handlers","get","push","set","off","callbackOrKey","removeEventListener","handler","delete","prevent","stopPropagation","cancelable","preventDefault","query","querySelector","queryAll","querySelectorAll","rect","target","getBoundingClientRect","remove","removeChild","removeClass","styles","getComputedStyle","style","class","filter","Boolean","join","result","prop","trim","text","textContent","unit","isIE","isMobile","test","navigator","userAgent","maxTouchPoints","PROJECT_CODE","assert","condition","message","Error","throttle","func","interval","initialCall","debounce","raf","id","invoker","throttled","invoke","this","requestAnimationFrame","setTimeout","apply","cancelAnimationFrame","clearTimeout","duration","nextTick","rafThrottle","ARROW_KEYS","NORMALIZATION_MAP","Up","Down","Right","Left","Del","Esc","Spacebar","normalizeKey","between","number","minOrMax","maxOrMin","exclusive","min","Math","max","clamp","x","y","minimum","maximum","floor","ceil","abs","round","compare","position1","position2","createRange","getSelection","window","findSelectionBoundary","offset","childNodes","found","count","string","search","from","to","match","RegExp","format","replace","nthIndexOf","nth","index","repeat","startsWith","ids","Component","Editor","mount","elements","_this","destroy","thisArg","priority","emit","getLanguage","position","info","use","config","method","require","addIcons","options","addI18n","addKeyBindings","shortcuts","getOptions","defaults","CLASS_ROOT","CLASS_VIEW","CLASS_BODY","CLASS_SCROLLER","CLASS_CONTAINER","CLASS_EDITOR","CLASS_SCROLLBAR","CLASS_LINES","CLASS_LINE","CLASS_CARET","CLASS_MARKERS","CLASS_MARKER","CLASS_CONTEXT_MENU","CLASS_CONTEXT_MENU_GROUP","CLASS_CONTEXT_MENU_LIST","CLASS_CONTEXT_MENU_BUTTON","CLASS_BUTTON","CLASS_ACTIVE","CLASS_RENDERED","CLASS_ANCHOR","CLASS_FOCUS","CLASS_PRESERVED","CLASS_FOCUSED","CLASS_DRAGGING","CLASS_EMPTY","EVENT_MOUNTED","EVENT_FOCUS","EVENT_BLUR","EVENT_READONLY","EVENT_KEYDOWN","EVENT_NEWLINE","EVENT_CHANGE","EVENT_CHANGED","EVENT_COMPOSITION_START","EVENT_FOCUS_LINE_CHANGED","EVENT_KEYMAP","EVENT_CHUNK_MOVED","EVENT_SELECTING","EVENT_SELECTED","EVENT_SCROLLED","EVENT_SCROLLER_SCROLL","EVENT_WINDOW_SCROLL","EVENT_RESIZE","EVENT_SCROLL_WIDTH_CHANGED","EVENT_SCROLL_HEIGHT_CHANGED","EVENT_CONTEXT_MENU_CLICKED","EVENT_RESET","EVENT_INIT_STYLE","EVENT_FONT_LOADED","CustomCaret","_this2","move","Measure","getOffset","top","left","animation","show","hide","_private_blink","PRIMARY_CARET_ID","Caret","_private_create","role","editor","_private_listen","editable","primary","readOnly","_this4","_private_onSelected","Selection","_private_update","register","carets","caret","Chunk","scroller","lines","pageYOffset","scrollTop","onScroll","_this6","_private_onScroll","byScroller","_private_onScrolled","_private_activate","anotherBoundary","row","boundary","line","_private_deactivate","_private_emitChangedEvent","_private_setBoundaryChanged","changed","_private_supply","lineHeight","scrollerRect","innerHeight","visibleLines","totalLength","diff","_private_remove","elms","_private_html","where","insertAdjacentHTML","_private_moveDown","lengthToMove","_private_moveUp","_private_computeLengthToMoveDown","margin","border","_private_computeLengthToMoveUp","paddingBottom","padding","bottom","topBorder","bottomBorder","_private_detach","reduce","detached","isAnchor","isFocus","_private_attach","anchorIndex","focusIndex","firstElm","anchorLine","_private_anchor","focusLine","_private_focus","anchor","includesAnchor","includesFocus","includesPreservedAnchor","includesPreservedFocus","firstIndex","secondIndex","backward","secondElm","topElms","middleElms","bottomElms","nextElementSibling","_private_offset","offsetY","_private_jumpIntoView","_private_reposition","focusRow","_private_isVisible","_private_jump","paddingTop","offsetRows","getBoundary","addPreservedLine","child","firstChild","sync","syncDiff","refresh","scroll","getRow","getLine","domRect","LINE_BREAK","AbstractArrayLike","items","clear","matchesToken","token","matcher","state","Line","init","first","depth","undefined","tokens","time","Date","now","getIndent","getInfo","getInfoAt","col","isEmpty","Lines","insert","code","limit","lexer","run","shift","rowIndex","asyncSync","timers","_this8","findMinIndent","startRow","endRow","minIndent","scanUp","counterpart","j","scanDown","findBlockStart","distance","findBlockEnd","tail","syncSize","_private_setLength","_private_isSame","tokens1","tokens2","every","token1","token2","Code","Infinity","after","sliceLines","endIndex","sliceRange","startIndex","replaceLines","replacement","replaceRange","replaceLinesBy","size","isLast","acc","lineBreak","ignoreCase","wholeWord","ranges","regexp","exec","lastIndex","_private_positionToIndex","normalize","VIEW_BOX","createSvg","createElementNS","UIComponent","listen","escape","group","autoFocus","HTMLInputElement","select","createCloseButton","button","icon","click","createButtons","settings","component","buttons","_this11","createButton","checkbox","tabindex","iconName","label","concat","title","type","iconSettings","d","stroke","linecap","svg","viewBox","path","fill","createField","spellcheck","isActive","isFocused","MAIN_CONTEXT_MENU_ID","CONTEXT_MENU_EDIT","shortcut","disableOnReadOnly","CONTEXT_MENU_SELECTION","ContextMenu","root","_this13","overlay","_private_onMouseDown","clientX","clientY","_private_onContextMenu","_this14","_private_onKeydown","backwards","_private_move","wrapper","clientWidth","documentElement","rootRect","_private_contains","_private_build","lists","list","map","_this15","buttonSettings","disabled","_private_findSettings","groups","_this16","Clipboard","textarea","body","setSelectionRange","_private_execPaste","execCommand","_private_execCopy","onFailed","onPaste","clipboard","readText","then","writeText","catch","_this17","Edit","_this19","ke","isKey","altKey","metaKey","ctrlKey","_private_onMenuClicked","_private_onPaste","clipboardData","getData","_private_register","_private_isSelected","_private_isEditable","lastIndexOf","skipSelection","toString","range","_this20","alert","cutLine","COMPOSITION_INPUT_TYPE","Input","_this21","_private_onCompositionStart","removeAllRanges","_private_onCompositionUpdate","_this22","_private_onCompositionEnd","shiftKey","_private_onInput","_private_handleEnter","_private_handleDelete","_private_handleBackspace","prev","_private_appendLineBreak","_private_settleValue","insertion","_private_settlePosition","_private_getCaretPosition","props","char","charAt","selection","rangeCount","getRangeAt","cloneRange","setStart","Keymap","matchers","_this24","toUpperCase","action","_private_find","_this25","some","getShortcut","modifiers","platform","MeasureText","font","getContext","_private_getCharWidth","useCache","chars","context","measureText","width","measure","_this26","_private_onMount","_this27","_private_updatePadding","parseFloat","right","_private_createMeasureText","_private_buildCSSFont","_private_clearRectCaches","getTop","getBottom","measureWidth","container","Marker","calcBoundaries","isBackward","fillHeight","startLeft","buildLine","StandaloneMarker","background","draw","isInside","CLASS_MARKER_SELECTION","SelectionMarker","_this30","_private_onStateChanged","_private_drawSelection","isCollapsed","Range","observe","_private_observe","_this32","_private_draw","data","_this33","marker","constructor","lastRange","markers","_this34","clearRanges","Scope","isIn","names","states","categories","inState","inCategory","_private_inScope","category","negated","_this35","toggleEditable","contentEditable","ORIGIN","EventBus","owner","eventNS","namespace","eventHandlers","_this36","sort","handler1","handler2","_this37","eventObject","State","onKeydown","_private_onFocus","_private_onBlur","_private_onSelectionChange","_private_onSelectionStart","PointerEvent","_private_onSelectionEnd","_private_onKeyup","_private_isFocused","update","collapsed","initial","is","isPrev","hold","release","STATES","detail","_private_onDblClick","selectNode","addRange","lastLineLength","silently","selectLine","reselect","getRect","collapse","getLocation","toFocus","isMultiline","_private_setNativeSelection","isSingle","startLine","endLine","anchorNode","focusNode","setBaseAndExtent","setEnd","_private_getNativeSelection","_private_findActiveLine","_private_getWordRangeAt","words","_private_getNativeSelectionBoundary","prefix","_private_detectSelectAll","_private_ensureSelection","anchorOffset","focusOffset","anchorClone","cloneNode","focusClone","replaceChild","_this40","FontObserver","Style","_this41","_private_init","_this42","fontFamily","monospaceFont","toLowerCase","selectors","_this43","Sync","jumpTo","View","_private_run","strict","_private_syncLines","_this45","_private_syncRanges","_this46","_private_splitRows","_private_compress","multiline","item","_private_findRoot","_private_findStartInLanguageBlock","lang","_private_isEmbedded","DRAG_START_EVENTS","DRAG_END_EVENTS","DRAGGING_EVENTS","ORIENTATION_MAP","vertical","scrollHeight","pageY","translateY","EditorScrollbar","_this50","_this49","onDragging","coord","sh","ch","st","heightRatio","offsetRatio","transform","_private_isActive","toggle","_this47","onDrag","onDragged","getCoord","_this52","_private_clipScrollOffset","caretRight","caretBottom","caretLeft","scrollLeft","caretRect","caretTop","editorRect","_private_getWidthBeforeContainer","jump","middle","lineOffset","autoWidth","autoHeight","skipLengthCheck","isVisible","lineRect","bar","ATTRIBUTES_EDITABLE_AREA","autocorrect","autocapitalize","Renderer","renderLines","divs","rootClasses","viewClasses","_this53","extensions","idNumber","CoreComponents","_this54","Extension","_private_mount","_private_collect","freeze","view","_this55","composing","_private_bind","pre","display","save","HTMLTextAreaElement","blur","extension","Components","emitResize","RyuseiCode","languages","alias","_private_mergeOptions","_this56","setRange","GENERAL_UI_BUTTONS","CLASS_DIALOG","COMMON_DIALOG_GROUP","Dialog","_this57","groupElm","headerElm","titleElm","footerElm","undo","redo","RESTORATION_INPUT_TYPE","History","_this59","_private_record","_private_restore","record","_private_push","current","record1","record2","_private_isUndoing","_private_onChange","history","_private_onChanged","help","deepIndent","I18N","indentNotice","indentDisabled","unindent","toggleTabMode","DIALOG_ID","Indentation","activation","setDisabled","focused","_this61","_this62","_private_indent","space","_private_space","_private_unindent","startCol","startOffset","endOffset","_this63","endCol","_private_indentNewline","_private_indentDeep","_private_findConfigIndex","_private_shouldIndentDeep","_private_isClosed","prevRow","prevIndent","curIndent","prevLine","_private_getConfig","copyLine","moveUp","moveDown","Shortcut"],"mappings":"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"}