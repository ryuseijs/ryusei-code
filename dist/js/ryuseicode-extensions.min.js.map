{"version":3,"file":"ryuseicode-extensions.min.js","sources":["../../src/js/constants/keymap.ts","../../src/js/constants/defaults.ts","../../src/js/constants/icons.ts","../../src/js/constants/i18n.ts","../../src/js/utils/array/includes/includes.ts","../../src/js/utils/type/type.ts","../../src/js/utils/array/toArray/toArray.ts","../../src/js/utils/array/index.ts","../../src/js/utils/arrayLike/slice/slice.ts","../../src/js/utils/arrayLike/splice/splice.ts","../../src/js/utils/dom/activeElement/activeElement.ts","../../src/js/utils/dom/toggleClass/toggleClass.ts","../../src/js/utils/dom/addClass/addClass.ts","../../src/js/utils/dom/append/append.ts","../../src/js/utils/object/forOwn/forOwn.ts","../../src/js/utils/object/assign/assign.ts","../../src/js/utils/dom/attr/attr.ts","../../src/js/utils/dom/before/before.ts","../../src/js/utils/dom/closest/closest.ts","../../src/js/utils/dom/matches/matches.ts","../../src/js/utils/dom/create/create.ts","../../src/js/utils/dom/div/div.ts","../../src/js/utils/dom/focus/focus.ts","../../src/js/utils/dom/hasClass/hasClass.ts","../../src/js/utils/dom/height/height.ts","../../src/js/utils/dom/html/html.ts","../../src/js/utils/dom/isPrevented/isPrevented.ts","../../src/js/utils/dom/on/on.ts","../../src/js/utils/dom/off/off.ts","../../src/js/utils/dom/prepend/prepend.ts","../../src/js/utils/dom/prevent/prevent.ts","../../src/js/utils/dom/query/query.ts","../../src/js/utils/dom/queryAll/queryAll.ts","../../src/js/utils/dom/rect/rect.ts","../../src/js/utils/dom/remove/remove.ts","../../src/js/utils/dom/removeClass/removeClass.ts","../../src/js/utils/dom/styles/styles.ts","../../src/js/utils/dom/tag/tag.ts","../../src/js/utils/dom/joinAttrs/joinAttrs.ts","../../src/js/utils/dom/text/text.ts","../../src/js/utils/dom/unit/unit.ts","../../src/js/utils/environment/isGecko/isGecko.ts","../../src/js/utils/environment/isIE/isIE.ts","../../src/js/utils/environment/isMobile/isMobile.ts","../../src/js/utils/environment/isAndroid/isAndroid.ts","../../src/js/utils/environment/isIOS/isIOS.ts","../../src/js/constants/project.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/utils/function/throttle/throttle.ts","../../src/js/utils/function/debounce/debounce.ts","../../src/js/utils/function/nextTick/nextTick.ts","../../src/js/utils/function/rafThrottle/rafThrottle.ts","../../src/js/constants/keys.ts","../../src/js/utils/key/normalizeKey/normalizeKey.ts","../../src/js/utils/key/matchesKey/matchesKey.ts","../../src/js/utils/math/between/between.ts","../../src/js/utils/math/clamp/clamp.ts","../../src/js/utils/math/index.ts","../../src/js/utils/selection/compare/compare.ts","../../src/js/utils/selection/createRange/createRange.ts","../../src/js/utils/selection/getSelection/getSelection.ts","../../src/js/utils/selection/findSelectionBoundary/findSelectionBoundary.ts","../../src/js/utils/string/count/count.ts","../../src/js/utils/string/endsWith/endsWith.ts","../../src/js/utils/string/escapeRegExp/escapeRegExp.ts","../../src/js/utils/string/format/format.ts","../../src/js/utils/string/nthIndexOf/nthIndexOf.ts","../../src/js/utils/string/repeat/repeat.ts","../../src/js/utils/string/startsWith/startsWith.ts","../../src/js/utils/string/uniqueId/uniqueId.ts","../../src/js/classes/Component/Component.ts","../../src/js/constants/classes.ts","../../src/js/constants/events.ts","../../src/js/components/Caret/CustomCaret.ts","../../src/js/components/Caret/Caret.ts","../../src/js/constants/selection-states.ts","../../src/js/components/Chunk/Chunk.ts","../../src/js/components/Chunk/constants.ts","../../src/js/constants/characters.ts","../../src/js/classes/AbstractArrayLike/AbstractArrayLike.ts","../../src/js/utils/token/matchesToken/matchesToken.ts","../../node_modules/@ryusei/light/dist/js/ryuseilight.esm.js","../../src/js/components/Code/Line.ts","../../src/js/components/Code/Lines.ts","../../src/js/components/Code/Code.ts","../../src/js/utils/icon/icon/icon.ts","../../src/js/classes/UIComponent/UIComponent.ts","../../src/js/constants/context-menu.ts","../../src/js/components/ContextMenu/ContextMenu.ts","../../src/js/components/Edit/Clipboard.ts","../../src/js/components/Edit/Edit.ts","../../src/js/components/Input/Input.ts","../../src/js/components/Keymap/Keymap.ts","../../src/js/utils/environment/isMac/isMac.ts","../../src/js/components/Measure/MeasureText.ts","../../src/js/components/Measure/Measure.ts","../../src/js/components/Range/Marker.ts","../../src/js/components/Range/StandaloneMarker.ts","../../src/js/components/Range/SelectionMarker.ts","../../src/js/components/Range/Range.ts","../../src/js/components/Scope/Scope.ts","../../src/js/utils/dom/toggleEditable/toggleEditable.ts","../../src/js/components/Selection/constants.ts","../../src/js/event/EventBus.ts","../../src/js/components/Selection/State.ts","../../src/js/event/State.ts","../../src/js/components/Selection/Selection.ts","../../src/js/utils/selection/setSelection/setSelection.ts","../../src/js/components/Style/Style.ts","../../src/js/utils/string/camelToKebab/camelToKebab.ts","../../src/js/components/Sync/Sync.ts","../../src/js/components/Sync/constants.ts","../../src/js/classes/AbstractDraggableBar/AbstractDraggableBar.ts","../../src/js/components/View/EditorScrollbar.ts","../../src/js/components/View/Scrollbar.ts","../../src/js/components/View/View.ts","../../src/js/components/View/constants.ts","../../src/js/constants/attributes.ts","../../src/js/core/Renderer/Renderer.ts","../../src/js/core/Editor/Editor.ts","../../src/js/utils/string/escapeHtml/escapeHtml.ts","../../src/js/core/RyuseiCode/RyuseiCode.ts","../../src/js/extensions/ActiveLine/ActiveLine.ts","../../src/js/extensions/AutoClose/AutoClose.ts","../../src/js/extensions/BracketMatching/defaults.ts","../../src/js/extensions/BracketMatching/BracketMatching.ts","../../src/js/extensions/Comment/keymap.ts","../../src/js/extensions/Comment/Comment.ts","../../src/js/extensions/Dialog/buttons.ts","../../src/js/extensions/Dialog/classes.ts","../../src/js/extensions/Dialog/Dialog.ts","../../src/js/extensions/Guide/IndentMarker.ts","../../src/js/extensions/Guide/Guide.ts","../../src/js/extensions/Gutter/classes.ts","../../src/js/extensions/Gutter/defaults.ts","../../src/js/extensions/Gutter/Gutter.ts","../../src/js/extensions/History/defaults.ts","../../src/js/extensions/History/keymap.ts","../../src/js/extensions/History/History.ts","../../src/js/extensions/Indentation/defaults.ts","../../src/js/extensions/Indentation/i18n.ts","../../src/js/extensions/Indentation/keymap.ts","../../src/js/extensions/Indentation/Indentation.ts","../../src/js/extensions/Jump/i18n.ts","../../src/js/extensions/Jump/keymap.ts","../../src/js/extensions/Jump/Jump.ts","../../src/js/extensions/Resize/defaults.ts","../../src/js/extensions/Resize/i18n.ts","../../src/js/extensions/Resize/ResizeBar.ts","../../src/js/extensions/Resize/Resize.ts","../../src/js/extensions/Search/buttons.ts","../../src/js/extensions/Search/classes.ts","../../src/js/extensions/Search/constants.ts","../../src/js/extensions/Search/defaults.ts","../../src/js/extensions/Search/i18n.ts","../../src/js/extensions/Search/icons.ts","../../src/js/extensions/Search/keymap.ts","../../src/js/extensions/Search/Search.ts","../../src/js/extensions/Shortcut/keymap.ts","../../src/js/extensions/Shortcut/Shortcut.ts","../../src/js/extensions/Toolbar/classes.ts","../../src/js/build/extensions/extensions.ts","../../src/js/extensions/Toolbar/Toolbar.ts"],"sourcesContent":["import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The map for kay bindings (`[ key, ctrl, shift, alt ]`).\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[] | null | false> = {\n  selectAll: [ 'A', true ],\n};\n\n/**\n * The collection of modifier keys.\n *\n * @since 0.1.0\n */\nexport const MODIFIER_KEYS = {\n  default: [ 'Ctrl', 'Shift', 'Alt' ],\n  mac    : [ '⌘', '⇧', '⌥' ],\n};\n","import { Options } from '@ryusei/code';\nimport { I18N } from './i18n';\nimport { ICONS } from './icons';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * Default values for the editor options.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: Options = {\n  language       : 'javascript',\n  placeholder    : 'Enter code here…',\n  minWidth       : '200px',\n  maxWidth       : '100%',\n  minHeight      : '16em',\n  maxHeight      : '40em',\n  indent         : '  ',\n  tabSize        : 2,\n  tabIndex       : 0,\n  keymap         : KEYMAP,\n  maxInitialLines: 200,\n  icons          : ICONS,\n  i18n           : I18N,\n};\n","import { IconSettings } from '@ryusei/code';\n\n\n/**\n * Icon settings as [ path, stroke?, linecap? ].\n *\n * @since 0.1.0\n */\nexport const ICONS: Record<string, IconSettings> = {\n  arrowUp: [\n    'm18.6 10.3c-6.59-6.85-6.59-6.85-6.59-6.85m-6.59 6.85 6.59-6.85m0 17v-17',\n    3,\n  ],\n  arrowDown: [\n    'm5.41 13.7 6.59 6.85m6.59-6.85c-6.59 6.85-6.59 6.85-6.59 6.85m0-17v17',\n    3,\n  ],\n  close: [\n    'm19 18-14-13m0 13 14-13',\n    3,\n  ],\n};\n","/**\n * The collection of i18n strings.\n *\n * @since 0.1.0\n */\nexport const I18N = {\n  copy        : 'Copy',\n  cut         : 'Cut',\n  paste       : 'Paste',\n  selectAll   : 'Select All',\n  close       : 'Close',\n  confirm     : 'OK',\n  activate    : 'Activate',\n  notice      : 'Notice',\n  cancel      : 'Cancel',\n  failedToCopy: 'Can not copy on your environment.',\n  scrollbar   : 'Drag to Scroll',\n  inputLabel  : 'Edit the code.',\n  location    : 'Line: %s, Column: %s',\n};\n","/**\n * Checks if the array includes the value or not.\n * `Array#includes` is not supported by IE.\n *\n * @param array - An array.\n * @param value - A value to search for.\n *\n * @return `true` if the array includes the value, or otherwise `false`.\n */\nexport function includes<T>( array: T[], value: T ): boolean {\n  return array.indexOf( value ) > -1;\n}\n","/**\r\n * Checks if the given subject is an object or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an object, or otherwise `false`.\r\n */\r\nexport function isObject( subject: any ): subject is object {\r\n  return subject !== null && typeof subject === 'object';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an array or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an array, or otherwise `false`.\r\n */\r\nexport function isArray<T>( subject: any ): subject is T[] {\r\n  return Array.isArray( subject );\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a function or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a function, or otherwise `false`.\r\n */\r\nexport function isFunction( subject: any ): subject is ( ...args: any[] ) => any {\r\n  return typeof subject === 'function';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a string or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a string, or otherwise `false`.\r\n */\r\nexport function isString( subject: any ): subject is string {\r\n  return typeof subject === 'string';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is `undefined` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `undefined`, or otherwise `false`.\r\n */\r\nexport function isUndefined( subject: any ): subject is undefined {\r\n  return typeof subject === 'undefined';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a Text node or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a Text node, or otherwise `false`.\r\n */\r\nexport function isText( subject: any ): subject is Text {\r\n  return subject instanceof Text;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a HTMLElement instance or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a HTMLElement instance, or otherwise `false`.\r\n */\r\nexport function isHTMLElement( subject: any ): subject is HTMLElement {\r\n  return subject instanceof HTMLElement;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a BR element or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a BR element, or otherwise `false`.\r\n */\r\nexport function isBr( subject: any ): subject is HTMLBRElement {\r\n  return subject instanceof HTMLBRElement;\r\n}\r\n","import { isArray } from '../../type/type';\n\n\nexport function toArray<T>( value: T | T[], nest: true ): T extends any[] ? T[] : T[][];\nexport function toArray<T>( value: T | T[] ): T[];\n\n/**\n * Push the provided value to an array if the value is not an array.\n *\n * @param value - A value to push.\n * @param nest  - Optional. Whether to push the value to an array if the value is already an array.\n *\n * @return An array containing the value, or the value itself if it is already an array.\n *         If the `nest` is `true` and the first child of the array is not an array,\n *         this returns an array with the provided array.\n */\nexport function toArray<T>( value: T | T[], nest = false ): T[] | T[][] {\n  if ( isArray( value ) ) {\n    if ( nest && ! isArray( value[ 0 ] ) ) {\n      return [ value ];\n    }\n\n    return value;\n  }\n\n  return [ value ];\n}\n","export { includes } from './includes/includes';\r\nexport { toArray } from './toArray/toArray';\r\n\r\nexport const arrayProto = Array.prototype;\r\n","import { arrayProto } from '../../array';\r\n\r\n\r\n/**\r\n * The slice method for an array-like object.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param start     - Optional. A start index.\r\n * @param end       - Optional. A end index.\r\n *\r\n * @return An array with sliced elements.\r\n */\r\nexport function slice<T>( arrayLike: ArrayLike<T>, start?: number, end?: number ): T[] {\r\n  return arrayProto.slice.call( arrayLike, start, end );\r\n}\r\n","import { arrayProto } from '../../array';\r\n\r\n\r\n/**\r\n * The splice method for an array-like object.\r\n *\r\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\r\n *\r\n * @param arrayLike   - An array-like object.\r\n * @param start       - A start index.\r\n * @param deleteCount - Optional. A number of elements to remove from the `start` index.\r\n * @param args        - Optional. Any number of items to add.\r\n *\r\n * @return An array with deleted items.\r\n */\r\nexport function splice<T>( arrayLike: ArrayLike<T>, start: number, deleteCount?: number, ...args: T[] ): T[] {\r\n  return arrayProto.splice.call( arrayLike, start, deleteCount, ...args );\r\n}\r\n","/**\r\n * Returns the active element.\r\n * This is just an alias of `document.activeElement`.\r\n *\r\n * @return An active element.\r\n */\r\nexport function activeElement(): Element {\r\n  return document.activeElement;\r\n}\r\n","import { toArray } from '../../array';\n\n\n/**\n * Toggles the provided class or classes by following the `add` boolean.\n *\n * @param elm     - An element whose classes are toggled.\n * @param classes - A class or class names.\n * @param add     - Whether to add or remove a class.\n */\nexport function toggleClass( elm: Element, classes: string | string[], add: boolean ): void {\n  if ( elm ) {\n    toArray( classes ).forEach( name => {\n      if ( name ) {\n        elm.classList[ add ? 'add' : 'remove' ]( name );\n      }\n    } );\n  }\n}\n","import { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Adds classes to the element.\r\n *\r\n * @param elm     - An element to add classes to.\r\n * @param classes - Classes to add.\r\n */\r\nexport function addClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, classes, true );\r\n}\r\n","import { toArray } from '../../array';\r\n\r\n\r\n/**\r\n * Appends children to the parent element.\r\n *\r\n * @param parent   - A parent element.\r\n * @param children - A child or children to append to the parent.\r\n */\r\nexport function append( parent: Element, children: Node | Node[] ): void {\r\n  toArray( children ).forEach( parent.appendChild.bind( parent ) );\r\n}\r\n","/**\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\n *\n * @param object   - An object to iterate over.\n * @param iteratee - An iteratee function that takes the value and key as arguments.\n *\n * @return A provided object itself.\n */\nexport function forOwn<T extends object>(\n  object: T,\n  iteratee: ( value: T[ keyof T ], key: string ) => boolean | void\n): T {\n  if ( object ) {\n    const keys = Object.keys( object );\n\n    for ( let i = 0; i < keys.length; i++ ) {\n      if ( iteratee( object[ keys[ i ] ], keys[ i ] ) === false ) {\n        break;\n      }\n    }\n  }\n\n  return object;\n}\n","import { isObject, isUndefined } from '../../type/type';\nimport { forOwn } from '../forOwn/forOwn';\n\n\n/**\n * Assign U to T.\n *\n * @typeParam T - An object to assign to.\n * @typeParam U - An object to assign.\n *\n * @return An assigned object type.\n */\nexport type Assign<T, U> = Omit<T, keyof U> & U;\n\nexport function assign<T extends object>( object: T ): T;\n\n// There is a way to type arguments recursively, but these fixed definitions are enough for this project.\nexport function assign<T extends object, U extends object>( object: T, source: U ): Assign<T, U>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object>(\n  object: T, source1: U1, source2: U2\n): Assign<Assign<T, U1>, U2>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object, U3 extends object>(\n  object: T, source1: U1, source2: U2, source3: U3\n): Assign<Assign<Assign<T, U1>, U2>, U3>;\n\n/**\n * Assigns all own enumerable properties of all source objects to the provided object.\n * `undefined` in source objects will be skipped.\n *\n * @param object  - An object to assign properties to.\n * @param sources - Objects to assign properties from.\n *\n * @return An object assigned properties of the sources to.\n */\nexport function assign<T extends object, U extends object>( object: T, ...sources: U[] ): any {\n  sources.forEach( source => {\n    if ( isObject( source ) ) {\n      forOwn( source, ( value, key ) => {\n        if ( ! isUndefined( source[ key ] ) ) {\n          object[ key ] = source[ key ];\n        }\n      } );\n    }\n  } );\n\n  return object;\n}\n","import { forOwn } from '../../object';\r\nimport { isObject, isString } from '../../type/type';\r\n\r\n\r\nexport function attr( elm: Element, attrs: string ): string;\r\nexport function attr( elm: Element, attrs: Record<string, string | number | boolean> ): void;\r\n\r\n/**\r\n * Sets new attributes to the passed element if the `attrs` is an object literal,\r\n * or gets an attribute value from it if the `attrs` is a string.\r\n *\r\n * @param elm   - An element to set or get an attribute.\r\n * @param attrs - An attribute name as a string or new attributes as an object literal.\r\n */\r\nexport function attr( elm: Element, attrs: string | Record<string, string | number | boolean> ): string | void {\r\n  if ( elm ) {\r\n    if ( isString( attrs ) ) {\r\n      return elm.getAttribute( attrs ) || '';\r\n    }\r\n\r\n    if ( isObject( attrs ) ) {\r\n      forOwn( attrs, ( value, key ) => {\r\n        if ( value === null ) {\r\n          elm.removeAttribute( key );\r\n        } else {\r\n          elm.setAttribute( key, String( value ) );\r\n        }\r\n      } );\r\n    }\r\n  }\r\n}\r\n","import { toArray } from '../../array';\r\n\r\n\r\n/**\r\n * Inserts a node or nodes before the specified reference node.\r\n *\r\n * @param nodes - A node or nodes to insert.\r\n * @param ref   - A reference node.\r\n */\r\nexport function before( nodes: Node | Node[], ref: Node ): void {\r\n  toArray( nodes ).forEach( node => {\r\n    if ( node ) {\r\n      const parent = node.parentNode || ( ref && ref.parentNode );\r\n\r\n      if ( parent ) {\r\n        parent.insertBefore( node, ref );\r\n      }\r\n    }\r\n  } );\r\n}\r\n","import { isFunction } from '../../type/type';\nimport { matches } from '../matches/matches';\n\n\n/**\n * With starting at the given element,\n * finds the closest parent element that matches the selector.\n *\n * @since 0.1.0\n *\n * @param elm      - A start element.\n * @param selector - A selector to search for.\n *\n * @return The closest element if found, or `null` if not.\n *\n * @throws TypeError\n */\nexport function closest( elm: HTMLElement, selector: string ): HTMLElement | null {\n  if ( isFunction( elm.closest ) ) {\n    return elm.closest( selector );\n  }\n\n  while ( elm ) {\n    if ( matches( elm, selector ) ) {\n      return elm;\n    }\n\n    elm = elm.parentElement;\n  }\n\n  return null;\n}\n","/**\n * Extends the HTMLElement interface for IE.\n *\n * @private\n * @since 0.1.0\n */\ninterface HTMLElementIE extends HTMLElement {\n  msMatchesSelector( selector: string ): boolean;\n}\n\n/**\n * Checks if the element matches the provided selector, or passes the predicate function.\n *\n * @since 0.1.0\n *\n * @param elm      - An element to test.\n * @param selector - A selector string to match.\n *\n * @return `true` if the element matches the selector.\n */\nexport function matches( elm: Element, selector: string ): boolean {\n  Element.prototype.matches = Element.prototype.matches || ( Element.prototype as HTMLElementIE ).msMatchesSelector;\n  return elm.matches( selector );\n}\n","import { isArray, isString } from '../../type/type';\nimport { addClass } from '../addClass/addClass';\nimport { append } from '../append/append';\nimport { attr } from '../attr/attr';\n\n\n/**\n * Creates a HTML element.\n *\n * @param tag    - A tag name.\n * @param attrs  - Optional. An object with attributes to apply the created element to, or a string with classes.\n * @param parent - Optional. A parent element where the created element is appended.\n */\nexport function create<K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  attrs?: Record<string, string | number | boolean> | string | string[],\n  parent?: HTMLElement\n): HTMLElementTagNameMap[ K ] {\n  const elm = document.createElement( tag );\n\n  if ( attrs ) {\n    if ( isString( attrs ) || isArray( attrs ) ) {\n      addClass( elm, attrs );\n    } else {\n      attr( elm, attrs );\n    }\n  }\n\n  if ( parent ) {\n    append( parent, elm );\n  }\n\n  return elm;\n}\n","import { create } from '../create/create';\r\n\r\n\r\n/**\r\n * The `create` function whose tag argument is fixed to `div`.\r\n *\r\n * @param attrs  - Optional. An object with attributes to apply the created element to, or a string with classes.\r\n * @param parent - Optional. A parent element where the created element is appended.\r\n */\r\nexport function div(\r\n  attrs?: Record<string, string | number | boolean> | string | string[],\r\n  parent?: HTMLElement\r\n): HTMLDivElement {\r\n  return create( 'div', attrs, parent );\r\n}\r\n","import { isFunction } from '../../type/type';\n\n\n/**\n * Focuses the provided element without scrolling the ascendant element.\n *\n * @param elm - An element to focus.\n */\nexport function focus( elm: HTMLElement ): void {\n  if ( isFunction( elm[ 'setActive' ] ) ) {\n    elm[ 'setActive' ]();\n  } else {\n    elm.focus( { preventScroll: true } );\n  }\n}\n","/**\r\n * Checks if the element contains the specified class or not.\r\n *\r\n * @param elm       - An element to check.\r\n * @param className - A class name that may be contained by the element.\r\n *\r\n * @return `true` if the element contains the class, or otherwise `false`.\r\n */\r\nexport function hasClass( elm: Element, className: string ): boolean {\r\n  return elm && elm.classList.contains( className );\r\n}\r\n","/**\n * Returns client height of the element.\n *\n * @param elm - An element to get height.\n */\nexport function height( elm: Element ): number {\n  return elm.clientHeight;\n}\n","import { isUndefined } from '../../type/type';\r\n\r\n\r\nexport function html( elm: Element ): string;\r\nexport function html( elm: Element, html: string ): void;\r\n\r\n/**\r\n * Sets or gets HTML of the provided element.\r\n *\r\n * @param elm - A element to get or set HTML.\r\n * @param html - Optional. HTML to set.\r\n */\r\nexport function html( elm: Element, html?: string ): string | void {\r\n  if ( elm ) {\r\n    if ( isUndefined( html ) ) {\r\n      return elm.innerHTML;\r\n    }\r\n\r\n    if ( elm.innerHTML !== html ) {\r\n      elm.innerHTML = html;\r\n    }\r\n  }\r\n}\r\n","/**\n * Checks if the default action of the event is prevented or not.\n *\n * @param e - An Event object.\n *\n * @return `true` if the default action is prevented, or otherwise `false`.\n */\nexport function isPrevented( e: Event ): boolean {\n  return e && e.defaultPrevented;\n}\n","/**\n * Stores registered handlers which has a key.\n *\n * @since 0.1.0\n */\nexport const handlerMap = new WeakMap<object, Array<{\n  elm: Document | Window | Element,\n  events: string,\n  callback: ( e: Event ) => void\n}>>();\n\nexport function on<K extends keyof DocumentEventMap>(\n  elm: Document,\n  events: K,\n  callback: ( e: DocumentEventMap[ K ] ) => void,\n  key?: object\n): void;\n\nexport function on<K extends keyof WindowEventMap>(\n  elm: Window,\n  events: K,\n  callback: ( e: WindowEventMap[ K ] ) => void,\n  key?: object\n): void;\n\nexport function on<K extends keyof HTMLElementEventMap>(\n  elm: HTMLElement,\n  events: K,\n  callback: ( e: HTMLElementEventMap[ K ] ) => void,\n  key?: object\n): void;\n\nexport function on<K extends keyof ElementEventMap>(\n  elm: Element,\n  events: K,\n  callback: ( e: ElementEventMap[ K ] ) => void,\n  key?: object\n): void;\n\nexport function on<T extends Event = Event>(\n  elm: Window | Document | Element,\n  events: string,\n  callback: ( e: T ) => void,\n  key?: object\n): void;\n\n/**\n * Attaches a handler to the event.\n *\n * @param elm      - An element, a window or a document.\n * @param events   - An event name or names.\n * @param callback - A handler to attach.\n * @param key      - Optional. The key for identifying the registered handler.\n */\nexport function on(\n  elm: Element | Window | Document,\n  events: string,\n  callback: ( e: Event ) => void,\n  key?: object\n): void {\n  events.split( ' ' ).forEach( event => {\n    elm.addEventListener( event, callback );\n\n    if ( key ) {\n      const handlers = handlerMap.get( key ) || [];\n      handlers.push( { elm, events, callback } );\n      handlerMap.set( key, handlers );\n    }\n  } );\n}\n","import { isFunction } from '../../type/type';\nimport { handlerMap } from '../on/on';\n\n\nexport function off<K extends keyof WindowEventMap>(\n  elm: Window,\n  events: K,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void;\n\nexport function off<K extends keyof DocumentEventMap>(\n  elm: Document,\n  events: K,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void;\n\nexport function off<K extends keyof HTMLElementEventMap>(\n  elm: HTMLElement,\n  events: K,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void;\n\nexport function off<K extends keyof SVGElementEventMap>(\n  elm: SVGElement,\n  events: K,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void;\n\nexport function off<K extends keyof ElementEventMap>(\n  elm: Element,\n  events: K,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void;\n\nexport function off<T extends Event = Event>(\n  elm: Window | Document | Element,\n  events: string,\n  callbackOrKey: object | ( ( e: T ) => void )\n): void;\n\n\n/**\n * Detaches a handler from the event or events.\n *\n * @param elm           - An element where events are removed.\n * @param events        - Optional. An event name or names.\n * @param callbackOrKey - Optional. A handler to remove or an object key.\n */\nexport function off(\n  elm: Window | Document | Element,\n  events: string,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void {\n  if ( isFunction( callbackOrKey ) ) {\n    events.split( ' ' ).forEach( event => {\n      elm.removeEventListener( event, callbackOrKey );\n    } );\n  } else {\n    const handlers = handlerMap.get( callbackOrKey );\n\n    if ( handlers ) {\n      handlers.forEach( handler => {\n        off( handler.elm, handler.events, handler.callback );\n      } );\n\n      handlerMap.delete( callbackOrKey );\n    }\n  }\n}\n","import { toArray } from '../../array';\r\n\r\n\r\n/**\r\n * Prepends children to the specified parent node.\r\n *\r\n * @param parent   - A parent node.\r\n * @param children - A child or children to prepend to the parent.\r\n */\r\nexport function prepend( parent: Node, children: Node | Node[] ): void {\r\n  toArray( children ).forEach( child => {\r\n    parent.insertBefore( child, parent.firstChild );\r\n  } );\r\n}\r\n","/**\r\n * Call the `preventDefault()` of the provided event.\r\n *\r\n * @param e               - An Event object.\r\n * @param stopPropagation - Optional. Whether to stop the event propergation or not.\r\n */\r\nexport function prevent( e: Event, stopPropagation?: boolean ): void {\r\n  if ( e ) {\r\n    if ( e.cancelable ) {\r\n      e.preventDefault();\r\n    }\r\n\r\n    if ( stopPropagation ) {\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Returns an element that matches the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return A found element or `null`.\r\n */\r\nexport function query<E extends Element = Element>( parent: Element | Document, selector?: string ): E | null {\r\n  return parent.querySelector( selector );\r\n}\r\n","/**\r\n * Returns elements that match the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return The NodeList object that contains matched elements.\r\n */\r\nexport function queryAll<E extends Element = Element>( parent: Element | Document, selector: string ): NodeListOf<E> {\r\n  return parent.querySelectorAll( selector );\r\n}\r\n","/**\n * Returns a DOMRect object of the provided element or the selection range.\n *\n * @param target - An element or a range instance.\n */\nexport function rect( target: Element | Range ): DOMRect {\n  return target.getBoundingClientRect();\n}\n","import { toArray } from '../../array';\n\n\n/**\n * Removes the provided node from its parent.\n *\n * @param nodes - A node or nodes to remove.\n */\nexport function remove( nodes: Node | Node[] ): void {\n  toArray( nodes ).forEach( node => {\n    if ( node && node.parentNode ) {\n      node.parentNode.removeChild( node );\n    }\n  } );\n}\n","import { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Removes classes from the element.\r\n *\r\n * @param elm     - An element to remove classes from.\r\n * @param classes - Classes to remove.\r\n */\r\nexport function removeClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, classes, false );\r\n}\r\n","import { forOwn } from '../../object';\nimport { isString, isUndefined } from '../../type/type';\n\n\n/**\n * The union for CSS style properties, such as \"padding\", \"fontSize\", etc.\n *\n * @since 0.1.0\n */\nexport type CSSStyleProperties = Exclude<keyof CSSStyleDeclaration, number>;\n\nexport function styles(\n  elm: HTMLElement,\n  styles: Record<string, string | number>\n): void;\n\nexport function styles<K extends CSSStyleProperties>(\n  elm: HTMLElement,\n  styles: K\n): CSSStyleDeclaration[ K ];\n\nexport function styles(\n  elm: HTMLElement,\n  styles: string\n): string;\n\n\n/**\n * Applies inline styles to the provided element by an object literal.\n *\n * @param elm    - An element to apply styles to.\n * @param styles - An object literal with styles.\n */\nexport function styles<K extends CSSStyleProperties>(\n  elm: HTMLElement,\n  styles: Record<string, string | number> | K\n): CSSStyleDeclaration[ K ] | void {\n  if ( isString( styles ) ) {\n    return getComputedStyle( elm )[ styles ];\n  }\n\n  forOwn( styles, ( value, key ) => {\n    if ( ! isUndefined( value ) ) {\n      elm.style[ key ] = String( value );\n    }\n  } );\n}\n","import { toArray } from '../../array';\r\nimport { assign } from '../../object';\r\nimport { joinAttrs } from '../joinAttrs/joinAttrs';\r\n\r\n\r\n/**\r\n * Returns an open tag with provided classes.\r\n *\r\n * @param classes - Classes.\r\n * @param attrs   - Optional. An object with attributes.\r\n * @param tag     - Optional. A tag name.\r\n */\r\nexport function tag(\r\n  classes: string | string[],\r\n  attrs: Record<string, string | number | boolean> = {},\r\n  tag?: string\r\n): string {\r\n  return `<${ tag || 'div' } ${ joinAttrs( assign( attrs, {\r\n    class: toArray( classes ).filter( Boolean ).join( ' ' ),\r\n  } ) ) }>`;\r\n}\r\n","import { forOwn } from '../../object';\n\n\n/**\n * Joins the provided object as a single line for DOM attributes.\n *\n * @param attrs - An object literal for attributes.\n *\n * @return A single string containing all attributes.\n */\nexport function joinAttrs( attrs: Record<string, string | number | boolean> ): string {\n  let result = '';\n\n  forOwn( attrs, ( value, prop ) => {\n    if ( prop && ( value || value === false || value === 0 ) ) {\n      result += ` ${ prop }=\"${ value }\"`;\n    }\n  } );\n\n  return result.trim();\n}\n","import { isUndefined } from '../../type/type';\n\n\nexport function text( node: Node ): string;\nexport function text( node: Node, text: string ): void;\n\n/**\n * Sets or gets a text content of the provided node.\n *\n * @param node - A node to get or set a text.\n * @param text - Optional. A text to set.\n */\nexport function text( node: Node, text?: string ): string | void {\n  if ( node ) {\n    if ( isUndefined( text ) ) {\n      return node.textContent;\n    }\n\n    node.textContent = text;\n  }\n}\n","import { isString } from '../../type/type';\n\n\n/**\n * Appends `px` to the value.\n * If the value is already string, just returns it.\n *\n * @param value - A value to append `px` to.\n */\nexport function unit( value: number | string ): string {\n  return isString( value ) ? value : `${ value }px`;\n}\n","/**\r\n * Checks is the browser is based on the Gecko engine or not.\r\n *\r\n * @return `true` if the browser is the browser is based on the Gecko (Firefox), or otherwise `false`.\r\n */\r\nexport function isGecko(): boolean {\r\n  return !! window[ 'InstallTrigger' ];\r\n}\r\n","/**\n * Checks is the browser is IE or not.\n *\n * @return `true` if the browser is IE, or otherwise `false`.\n */\nexport function isIE(): boolean {\n  return /*@cc_on!@*/false || !! document[ 'documentMode' ];\n}\n","import { isAndroid } from '../isAndroid/isAndroid';\r\nimport { isIOS } from '../isIOS/isIOS';\r\n\r\n\r\n/**\r\n * Checks if the device is likely mobile or not.\r\n *\r\n * @return `true` if the device is likely mobile, or otherwise `false`.\r\n */\r\nexport function isMobile(): boolean {\r\n  return isAndroid() || isIOS();\r\n}\r\n","/**\r\n * Checks if the client is Android or not.\r\n *\r\n * @return `true` if the client is Android, or otherwise `false`.\r\n */\r\nexport function isAndroid(): boolean {\r\n  return /android/i.test( navigator.userAgent );\r\n}\r\n","/**\r\n * Checks if the client is iOS or not.\r\n *\r\n * @return `true` if the client is iOS, or otherwise `false`.\r\n */\r\nexport function isIOS(): boolean {\r\n  const { userAgent } = navigator;\r\n  return /iPad|iPhone|iPod/.test( userAgent )\r\n    || ( userAgent.indexOf( 'Mac' ) > -1 && navigator.maxTouchPoints > 1 );\r\n}\r\n","/**\n * The project code.\n *\n * @since 0.1.0\n */\nexport const PROJECT_CODE = 'ryuseicode';\n\n/**\n * The abbreviated project code.\n *\n * @since 0.1.0\n */\nexport const PROJECT_CODE_SHORT = 'rc';\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert( condition: any, message = '' ): void {\r\n  if ( ! condition ) {\r\n    throw new Error( `[${ PROJECT_CODE }] ${ message }` );\r\n  }\r\n}\r\n","import { AnyFunction } from '@ryusei/code';\nimport { isUndefined } from '../../type/type';\n\n\n/**\n * The interface for a throttled function.\n *\n * @since 0.1.0\n */\nexport interface Throttle<F extends AnyFunction = AnyFunction> extends Function {\n  ( ...args: Parameters<F> ): void,\n\n  /**\n   * Cancels the active timer.\n   */\n  cancel: () => void;\n\n  /**\n   * Invokes the pending process immediately.\n   */\n  invoke: () => void;\n}\n\n/**\n * Returns a function that invokes the provided function at most once in the specified duration.\n *\n * @since 0.1.0\n *\n * @param func        - A function to throttle.\n * @param interval    - A throttle duration in milliseconds.\n * @param initialCall - Optional. Determines whether to call the function initially.\n * @param debounce    - Optional. If `true`, the function returns a debounced function instead of throttled one.\n * @param raf         - Optional. Determines whether to use the `requestAnimationFrame` or not.\n *\n * @return A throttled function.\n */\nexport function throttle<F extends AnyFunction = AnyFunction>(\n  func: F,\n  interval: number,\n  initialCall?: boolean,\n  debounce?: boolean,\n  raf?: boolean\n): Throttle<F> {\n  let id: any;\n  let invoker: () => void;\n\n  function throttled( this: ThisParameterType<F>, ...args: Parameters<F> ): void {\n    if ( debounce ) {\n      cancel();\n    }\n\n    invoker = invoke.bind( this, ...args );\n\n    if ( ! id ) {\n      if ( isUndefined( id ) && initialCall ) {\n        invoker();\n      } else {\n        id = raf ? requestAnimationFrame( invoker ) : setTimeout( invoker, interval );\n      }\n    }\n  }\n\n  function invoke( this: ThisParameterType<F>, ...args: Parameters<F> ): void {\n    func.apply( this, args );\n    cancel();\n  }\n\n  function cancel(): void {\n    raf ? cancelAnimationFrame( id ) : clearTimeout( id );\n    id = null;\n  }\n\n  throttled.cancel = cancel;\n\n  throttled.invoke = () => {\n    if ( id ) {\n      invoker();\n    }\n  };\n\n  return throttled;\n}\n","import { AnyFunction } from '@ryusei/code';\r\nimport { Throttle, throttle } from '../throttle/throttle';\r\n\r\n\r\n/**\r\n * Returns a debounced function that invokes the provided function only after the internal timer expires.\r\n * The timer is reset whenever the debounced function is called.\r\n *\r\n * @param func     - A callback function.\r\n * @param duration - Debounce duration in milliseconds.\r\n *\r\n * @return A debounced function.\r\n */\r\nexport function debounce<F extends AnyFunction = AnyFunction>( func: AnyFunction, duration: number ): Throttle<F> {\r\n  return throttle( func, duration, false, true );\r\n}\r\n","import { AnyFunction } from '@ryusei/code';\r\n\r\n\r\n/**\r\n * Fires the provided function on the next tick.\r\n *\r\n * @param func - A function to call.\r\n */\r\nexport function nextTick( func: AnyFunction ): void {\r\n  setTimeout( func );\r\n}\r\n","import { AnyFunction } from '@ryusei/code';\r\nimport { Throttle, throttle } from '../throttle/throttle';\r\n\r\n\r\n/**\r\n * Implements the `throttle` function via requestAnimationFrame.\r\n *\r\n * @param func - A function to throttle.\r\n * @param initialCall - Optional. Determines whether to call the function initially.\r\n *\r\n * @return A throttled function.\r\n */\r\nexport function rafThrottle<F extends AnyFunction = AnyFunction>(\r\n  func: F,\r\n  initialCall?: boolean\r\n): Throttle<F> {\r\n  return throttle( func, 0, initialCall, false, true );\r\n}\r\n","/**\n * The collection of forward arrow keys.\n *\n * @private\n * @since 0.1.0\n */\nexport const ARROW_FORWARD = [\n  'ArrowDown',\n  'ArrowRight',\n];\n\n/**\n * The collection of backward arrow keys.\n *\n * @private\n * @since 0.1.0\n */\nexport const ARROW_BACKWARD = [\n  'ArrowUp',\n  'ArrowLeft',\n];\n\n/**\n * The collection of all arrow keys.\n *\n * @private\n * @since 0.1.0\n */\nexport const ARROW_KEYS = [\n  ...ARROW_FORWARD,\n  ...ARROW_BACKWARD,\n];\n\n\n/**\n * The map for normalizing differences of keys in browsers.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\n *\n * @private\n * @since 0.1.0\n */\nexport const NORMALIZATION_MAP = {\n  Up      : 'ArrowUp',\n  Down    : 'ArrowDown',\n  Right   : 'ArrowRight',\n  Left    : 'ArrowLeft',\n  Del     : 'Delete',\n  Esc     : 'Escape',\n  Spacebar: ' ',\n};\n","import { NORMALIZATION_MAP } from '../../../constants/keys';\n\n\n/**\n * Normalizes the provided key for different browsers.\n *\n * @param key - A key to normalize.\n */\nexport function normalizeKey( key: string ): string {\n  return NORMALIZATION_MAP[ key ] || key;\n}\n","import { KeyMatcher } from '@ryusei/code';\r\nimport { toArray } from '../../array';\r\nimport { normalizeKey } from '../normalizeKey/normalizeKey';\r\n\r\n\r\n/**\r\n * Checks if the keyboard event matches the provided matcher or not.\r\n *\r\n * @param e        - A KeyboardEvent object.\r\n * @param matchers - A KeyMatcher tuple or an array with matchers.\r\n *\r\n * @return `true` if the keyboard event satisfies the matcher, or otherwise `false`.\r\n */\r\nexport function matchesKey( e: KeyboardEvent, matchers: KeyMatcher | KeyMatcher[] | null | false ): boolean {\r\n  const key = normalizeKey( e.key ).toUpperCase();\r\n\r\n  return matchers && toArray( matchers, true ).some( matcher => {\r\n    return key === matcher[ 0 ].toUpperCase()\r\n      && ! matcher[ 1 ] === ! e.ctrlKey\r\n      && ! matcher[ 2 ] === ! e.shiftKey\r\n      && ! matcher[ 3 ] === ! e.altKey;\r\n  } );\r\n}\r\n","/**\r\n * Checks if the subject number is between `minOrMax` and `maxOrMin`.\r\n *\r\n * @param number    - A subject number to check.\r\n * @param minOrMax  - A min or max number.\r\n * @param maxOrMin  - A max or min number.\r\n * @param exclusive - Optional. Whether to exclude `x` or `y`.\r\n */\r\nexport function between( number: number, minOrMax: number, maxOrMin: number, exclusive?: boolean ): boolean {\r\n  const min = Math.min( minOrMax, maxOrMin );\r\n  const max = Math.max( minOrMax, maxOrMin );\r\n  return exclusive ? min < number && number < max : min <= number && number <= max;\r\n}\r\n","const { max, min } = Math;\r\n\r\n/**\r\n * Clamps a number.\r\n *\r\n * @param number - A subject number to check.\r\n * @param x      - A min or max number.\r\n * @param y      - A min or max number.\r\n */\r\nexport function clamp( number: number, x: number, y: number ): number {\r\n  const minimum = min( x, y );\r\n  const maximum = max( x, y );\r\n  return min( max( minimum, number ), maximum );\r\n}\r\n","export { between } from './between/between';\r\nexport { clamp }   from './clamp/clamp';\r\n\r\nexport const { min, max, floor, ceil, abs, round } = Math;\r\n","import { Position } from '@ryusei/code';\r\n\r\n\r\n/**\r\n * Compares the provided 2 positions.\r\n *\r\n * @return If the `position1` is preceding, returns a negative number,\r\n *         or if it is following, returns a positive one. If they are same, returns `0`.\r\n */\r\nexport function compare( position1: Position, position2: Position ): number {\r\n  return position1[ 0 ] - position2[ 0 ] || position1[ 1 ] - position2[ 1 ];\r\n}\r\n","/**\n * The alias of document.createRange.\n * The Range constructor is not supported by IE.\n *\n * @since 0.1.0\n */\nexport const createRange: () => Range = document.createRange.bind( document );\n","/**\n * The alias of window.getSelection.\n *\n * @since 0.1.0\n */\nexport const getSelection = window.getSelection;\n","import { SelectionBoundary } from '@ryusei/code';\r\nimport { isText } from '../../type/type';\r\n\r\n\r\n/**\r\n * Finds a node that the offset number belongs to.\r\n *\r\n * @param elm    - An element to find in.\r\n * @param offset - An offset index.\r\n *\r\n * @return An object that contains a found node and a offset number.\r\n */\r\nexport function findSelectionBoundary( elm: Element, offset: number ): SelectionBoundary | null {\r\n  const children = elm.childNodes;\r\n\r\n  if ( ! children.length && ! offset ) {\r\n    return { node: elm, offset: 0 };\r\n  }\r\n\r\n  if ( offset <= elm.textContent.length ) {\r\n    for ( let i = 0; i < children.length; i++ ) {\r\n      const node   = children[ i ];\r\n      const length = node.textContent.length;\r\n\r\n      if ( isText( node ) ) {\r\n        if ( offset <= length ) {\r\n          return { node, offset };\r\n        }\r\n      } else if ( node instanceof Element ) {\r\n        const found = findSelectionBoundary( node, offset );\r\n\r\n        if ( found ) {\r\n          return found;\r\n        }\r\n      }\r\n\r\n      offset -= length;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n","/**\n * Counts the search string occurrence in the provided sting.\n *\n * @param string - A string to search in.\n * @param search - A string to search for.\n * @param from   - An index to search from.\n * @param to     - An index to search to.\n *\n * @return A number of occurrence.\n */\nexport function count( string: string, search: string, from = 0, to = string.length ): number {\n  if ( from || to !== string.length ) {\n    string = string.slice( from, to );\n  }\n\n  return ( string.match( new RegExp( search, 'g' ) ) || [] ).length;\n}\n","/**\n * Checks if the string ends with the `search` string or not.\n *\n * @param string - A string to check.\n * @param search - A string to search.\n *\n * @return `true` if the string ends with the `search`, or otherwise `false`.\n */\nexport function endsWith( string: string, search: string ): boolean {\n  return string.slice( - search.length ) === search;\n}\n","/**\n * Escapes string for the RegExp source.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n *\n * @param string - A string to escape.\n */\nexport function escapeRegExp( string: string ): string {\n  return string.replace( /[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&' );\n}\n","/**\n * Formats a string.\n *\n * @param string       - A string to format.\n * @param replacements - A replacement or replacements.\n *\n * @return A formatted string.\n */\nexport function format( string: string, ...replacements: Array<string | number> ): string {\n  for ( let i = 0; i < replacements.length; i++ ) {\n    string = string.replace( '%s', String( replacements[ i ] ) );\n  }\n\n  return string;\n}\n","/**\n * Returns the index within the provided string of the nth occurrence.\n * The optional `from` index determines the start position to search the target from.\n *\n * @param string - A string to search in.\n * @param search - A string to search startsWith\n * @param nth    - A number of the occurrence.\n * @param from   - Optional. A start index to search from.\n *\n * @return An index if the nth occurrence of the `search` string is found, or `-1` if not.\n */\nexport function nthIndexOf( string: string, search: string, nth: number, from = 0 ): number {\n  let index = from - 1;\n  let count = nth;\n\n  while( ( index !== -1 || nth === count ) && count-- ) {\n    index = string.indexOf( search, index + 1 );\n  }\n\n  return index;\n}\n","import { floor } from '../../math';\r\n\r\n\r\n/**\r\n * Returns a new string filled with a number of copies of the provided string.\r\n *\r\n * @param string - A string to repeat.\r\n * @param count  - An integer for determining the number of repeats.\r\n *\r\n * @return A new string containing copies of the provided string.\r\n */\r\nexport function repeat( string: string, count: number ): string {\r\n  if ( ! String.prototype.repeat ) {\r\n    let result = '';\r\n\r\n    while ( count > 0 ) {\r\n      if ( count % 2 ) {\r\n        result += string;\r\n      }\r\n\r\n      count = floor( count / 2 );\r\n      string += string;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  return string.repeat( count );\r\n}\r\n","/**\n * Checks if the string starts with the `search` string or not.\n *\n * @param string - A string to check.\n * @param search - A string to search.\n *\n * @return `true` if the string starts with the `search`, or otherwise `false`.\n */\nexport function startsWith( string: string, search: string ): boolean {\n  return string.slice( 0, search.length ) === search;\n}\n","const ids: Record<string, number> = {};\n\n/**\n * Returns a sequential unique ID as \"{ prefix }-{ number }\".\n *\n * @param prefix - A prefix for the ID.\n */\nexport function uniqueId( prefix: string ): string {\n  const number   = ( ids[ prefix ] || 0 ) + 1;\n  const idNumber = number < 10 ? `0${ number }` : number;\n\n  ids[ prefix ] = number;\n\n  return `${ prefix }${ idNumber }`;\n}\n","import {\n  Elements,\n  EventBusCallback,\n  Extensions,\n  IconSettings, KeyMatcher,\n  Language,\n  LanguageConfig,\n  Options,\n  Position,\n} from '@ryusei/code';\nimport { AnyFunction } from '@ryusei/light/dist/types/types';\nimport {\n  Caret,\n  Chunk,\n  Code,\n  ContextMenu,\n  Edit,\n  Input,\n  Keymap,\n  Measure,\n  Range,\n  Scope,\n  Selection,\n  Style,\n  Sync,\n  View,\n} from '../../components';\nimport { Lines } from '../../components/Code/Lines';\nimport { Editor } from '../../core/Editor/Editor';\nimport { EventBus } from '../../event/EventBus';\nimport { assert, assign, forOwn, isObject, isUndefined, off, on } from '../../utils';\n\n\n/**\n * The base class for a component.\n *\n * @since 0.1.0\n */\nexport class Component {\n  /**\n   * Holds the EventBus instance.\n   */\n  protected readonly event: EventBus;\n\n  /**\n   * Holds options.\n   */\n  protected readonly options: Options;\n\n  /**\n   * Holds the Editor instance.\n   */\n  protected Editor: Editor;\n\n  /**\n   * Holds the Caret instance.\n   */\n  protected Caret: Caret;\n\n  /**\n   * Holds the Chunk instance.\n   */\n  protected Chunk: Chunk;\n\n  /**\n   * Holds the Code instance.\n   */\n  protected Code: Code;\n\n  /**\n   * Holds the ContextMenu instance.\n   */\n  protected ContextMenu: ContextMenu;\n\n  /**\n   * Holds the Edit instance.\n   */\n  protected Edit: Edit;\n\n  /**\n   * Holds the Input instance.\n   */\n  protected Input: Input;\n\n  /**\n   * Holds the Input instance.\n   */\n  protected Keymap: Keymap;\n\n  /**\n   * Holds the Measure instance.\n   */\n  protected Measure: Measure;\n\n  /**\n   * Holds the Range instance.\n   */\n  protected Range: Range;\n\n  /**\n   * Holds the Scope instance.\n   */\n  protected Scope: Scope;\n\n  /**\n   * Holds the Selection instance.\n   */\n  protected Selection: Selection;\n\n  /**\n   * Holds the Style instance.\n   */\n  protected Style: Style;\n\n  /**\n   * Holds the Sync instance.\n   */\n  protected Sync: Sync;\n\n  /**\n   * Holds the View instance.\n   */\n  protected View: View;\n\n  /**\n   * Holds the collection of the editor elements.\n   */\n  protected elements: Elements;\n\n  /**\n   * Holds the Language object.\n   */\n  protected language: Language;\n\n  /**\n   * The Component constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    this.Editor   = Editor;\n    this.event    = Editor.event;\n    this.options  = Editor.options;\n    this.language = Editor.language;\n  }\n\n  /**\n   * Called when the component is mounted.\n   *\n   * @param elements - A collection of editor elements.\n   */\n  mount( elements: Elements ): void {\n    this.elements = elements;\n\n    forOwn( this.Editor.Components, ( Component, key ) => {\n      this[ key ] = Component;\n    } );\n  }\n\n  /**\n   * Attaches an event handler with passing this instance as a key.\n   * All handlers can only be detached by the `off()` method below.\n   *\n   * @param events   - An event name or names.\n   * @param callback - A callback function.\n   * @param thisArg  - Optional. Specifies the `this` parameter of the callback function.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   */\n  on<F extends EventBusCallback>(\n    events: string | string[],\n    callback: EventBusCallback,\n    thisArg?: ThisParameterType<F>,\n    priority?: number\n  ): void {\n    this.event.on( events, thisArg ? callback.bind( thisArg ) : callback, this, priority );\n  }\n\n  /**\n   * Detaches event handlers registered by `on()` without removing other handlers.\n   *\n   * @param events - An event name or names.\n   */\n  off( events: string | string[] ): void {\n    this.event.off( events, this );\n  }\n\n  /**\n   * Triggers callback functions.\n   *\n   * @param event - An event name.\n   * @param args  - Optional. Any number of arguments to pass to callback functions.\n   */\n  emit( event: string, ...args: any[] ): void {\n    this.event.emit( event, ...args );\n  }\n\n  /**\n   * Listens to native events.\n   * All handlers will be stored for destruction.\n   *\n   * @param elm      - A document, a window or an element.\n   * @param events   - An event name or names.\n   * @param callback - A callback function.\n   * @param thisArg  - Optional. Specifies the `this` parameter of the callback function.\n   */\n  bind<F extends ( e: Event ) => void>(\n    elm: Document | Window | Element,\n    events: string,\n    callback: F,\n    thisArg?: ThisParameterType<F>\n  ): void {\n    on( elm, events, thisArg ? callback.bind( thisArg ) : callback, this );\n  }\n\n  /**\n   * Returns a Language or LanguageConfig object at the specified position.\n   *\n   * @param position - Optional. A position.\n   *\n   * @return A main Language object or sub language config object.\n   */\n  getLanguage( position?: Position ): Language | LanguageConfig {\n    position = position || this.Selection.get().start;\n\n    const { language } = this;\n    const info = this.lines.getInfoAt( position );\n\n    if ( info && info.language && language.use && language.use[ info.language ] ) {\n      return language.use[ info.language ].config;\n    }\n\n    return language;\n  }\n\n  /**\n   * Called when the editor is destroyed.\n   */\n  destroy(): void {\n    off( null, '', this );\n  }\n\n  /**\n   * Attempts to invoke the method of the specified extension.\n   *\n   * @param name   - A name of the extension.\n   * @param method - A method name to invoke.\n   * @param args   - Optional. Arguments for the method.\n   *\n   * @return The return value of the method.\n   */\n  protected invoke< K extends keyof Extensions, P extends keyof Extensions[ K ], V extends Extensions[ K ][ P ]>(\n    name: K,\n    method: P,\n    ...args: V extends AnyFunction ? Parameters<V> : any[]\n  ): V extends AnyFunction ? ReturnType<V> : void {\n    return this.Editor.invoke( name, method, ...args );\n  }\n\n  /**\n   * Returns the extension of the specified name.\n   *\n   * @param name - A name of an extension.\n   *\n   * @return An extension if found, or otherwise `undefined`.\n   */\n  protected require<K extends keyof Extensions>( name: K ): Extensions[ K ] | undefined {\n    return this.Editor.require( name );\n  }\n\n  /**\n   * Adds default icon strings. They can be still overridden by options.\n   *\n   * @param icons - Additional icon strings.\n   */\n  protected addIcons( icons: Record<string, IconSettings> ): void {\n    const { options } = this;\n    options.icons = assign( {}, icons, options.icons );\n  }\n\n  /**\n   * Adds default i18n strings. They can be still overridden by options.\n   *\n   * @param i18n - Additional i18n strings.\n   */\n  protected addI18n( i18n: Record<string, string> ): void {\n    const { options } = this;\n    options.i18n = assign( {}, i18n, options.i18n );\n  }\n\n  /**\n   * Adds default shortcuts to the keymap object. They can be still overridden by options.\n   *\n   * @param shortcuts - Additional shortcuts.\n   */\n  protected addKeyBindings( shortcuts: Record<string, KeyMatcher | KeyMatcher[]> ): void {\n    const { options } = this;\n    options.keymap = assign( {}, shortcuts, options.keymap );\n  }\n\n  /**\n   * Returns options for each component with merging default values.\n   * If the returned value is `null`, that means the component should not be active.\n   *\n   * @param name     - An option name.\n   * @param defaults - Default values.\n   *\n   * @return A merged options, or `null`.\n   */\n  protected getOptions<T extends object>( name: string, defaults?: T ): T {\n    const options = this.options[ name ];\n\n    if ( isUndefined( options ) || options === true ) {\n      return defaults || {} as T;\n    }\n\n    if ( isObject( options ) ) {\n      return assign( {}, defaults, options );\n    }\n\n    assert( false );\n  }\n\n  /**\n   * Returns the latest Lines instance.\n   *\n   * @return The Lines instance.\n   */\n  get lines(): Lines {\n    return this.Code.Lines;\n  }\n\n  /**\n   * Returns the current i18n collection.\n   *\n   * @return An object with i18n strings.\n   */\n  get i18n(): Record<string, string> {\n    return this.options.i18n;\n  }\n}\n","import { PROJECT_CODE } from './project';\r\n\r\n\r\nexport const CLASS_ROOT                  = PROJECT_CODE;\r\nexport const CLASS_BODY                  = `${ PROJECT_CODE }__body`;\r\nexport const CLASS_SCROLLER              = `${ PROJECT_CODE }__scroller`;\r\nexport const CLASS_CONTAINER             = `${ PROJECT_CODE }__container`;\r\nexport const CLASS_EDITOR                = `${ PROJECT_CODE }__editor`;\r\nexport const CLASS_TEXTAREA              = `${ PROJECT_CODE }__textarea`;\r\nexport const CLASS_SCROLLBARS            = `${ PROJECT_CODE }__scrollbars`;\r\nexport const CLASS_SCROLLBAR             = `${ PROJECT_CODE }__scrollbar`;\r\nexport const CLASS_LINES                 = `${ PROJECT_CODE }__lines`;\r\nexport const CLASS_LINE                  = `${ PROJECT_CODE }__line`;\r\nexport const CLASS_SOURCE                = `${ PROJECT_CODE }__source`;\r\nexport const CLASS_BACKGROUND            = `${ PROJECT_CODE }__background`;\r\nexport const CLASS_CARETS                = `${ PROJECT_CODE }__carets`;\r\nexport const CLASS_CARET                 = `${ PROJECT_CODE }__caret`;\r\nexport const CLASS_MARKERS               = `${ PROJECT_CODE }__markers`;\r\nexport const CLASS_MARKER                = `${ PROJECT_CODE }__marker`;\r\nexport const CLASS_OVERLAY               = `${ PROJECT_CODE }__overlay`;\r\nexport const CLASS_CONTEXT_MENU          = `${ PROJECT_CODE }__context-menu`;\r\nexport const CLASS_CONTEXT_MENU_GROUP    = `${ CLASS_CONTEXT_MENU }__group`;\r\nexport const CLASS_CONTEXT_MENU_LIST     = `${ CLASS_CONTEXT_MENU }__list`;\r\nexport const CLASS_CONTEXT_MENU_ITEM     = `${ CLASS_CONTEXT_MENU }__item`;\r\nexport const CLASS_CONTEXT_MENU_BUTTON   = `${ CLASS_CONTEXT_MENU }__button`;\r\nexport const CLASS_CONTEXT_MENU_LABEL    = `${ CLASS_CONTEXT_MENU_BUTTON }__label`;\r\nexport const CLASS_CONTEXT_MENU_SHORTCUT = `${ CLASS_CONTEXT_MENU_BUTTON }__shortcut`;\r\nexport const CLASS_TOKEN                 = `${ PROJECT_CODE }__token`;\r\nexport const CLASS_INPUT                 = `${ PROJECT_CODE }__input`;\r\nexport const CLASS_BUTTON                = `${ PROJECT_CODE }__button`;\r\nexport const CLASS_ICON                  = `${ PROJECT_CODE }__icon`;\r\nexport const CLASS_PLACEHOLDER           = `${ PROJECT_CODE }__placeholder`;\r\n\r\nexport const CLASS_ACTIVE      = 'is-active';\r\nexport const CLASS_RENDERED    = 'is-rendered';\r\nexport const CLASS_INITIALIZED = 'is-initialized';\r\nexport const CLASS_ANCHOR      = 'is-anchor';\r\nexport const CLASS_FOCUS       = 'is-focus';\r\nexport const CLASS_PRESERVED   = 'is-preserved';\r\nexport const CLASS_FOCUSED     = 'is-focused';\r\nexport const CLASS_READONLY    = 'is-readonly';\r\nexport const CLASS_DRAGGING    = 'is-dragging';\r\nexport const CLASS_EMPTY       = 'is-empty';\r\nexport const CLASS_MOBILE      = 'is-mobile';\r\n","export const EVENT_MOUNT                 = 'mount';\nexport const EVENT_MOUNTED               = 'mounted';\nexport const EVENT_FOCUS                 = 'focus';\nexport const EVENT_BLUR                  = 'blur';\nexport const EVENT_READONLY              = 'readOnly';\nexport const EVENT_KEYDOWN               = 'keydown';\nexport const EVENT_INPUT                 = 'input';\nexport const EVENT_NEWLINE               = 'newline';\nexport const EVENT_CHANGE                = 'change';\nexport const EVENT_CHANGED               = 'changed';\nexport const EVENT_COMPOSITION_START     = 'compositionStart';\nexport const EVENT_COMPOSITION_UPDATE    = 'compositionUpdate';\nexport const EVENT_COMPOSITION_END       = 'compositionEnd';\nexport const EVENT_ANCHOR_LINE_CHANGED   = 'anchorLineChanged';\nexport const EVENT_FOCUS_LINE_CHANGED    = 'focusLineChanged';\nexport const EVENT_COPY                  = 'copy';\nexport const EVENT_CUT                   = 'cut';\nexport const EVENT_PASTE                 = 'paste';\nexport const EVENT_KEYMAP                = 'keymap';\nexport const EVENT_CHUNK_MOVED           = 'chunkMoved';\nexport const EVENT_CHUNK_SUPPLIED        = 'chunkSupplied';\nexport const EVENT_SELECTING             = 'selecting';\nexport const EVENT_SELECTED              = 'selected';\nexport const EVENT_SELECTION_CHANGE      = 'selectionChanged';\nexport const EVENT_SCROLL                = 'scroll';\nexport const EVENT_SCROLLED              = 'scrolled';\nexport const EVENT_SCROLLER_SCROLL       = 'scrollerScroll';\nexport const EVENT_WINDOW_SCROLL         = 'windowScroll';\nexport const EVENT_RESIZE                = 'resize';\nexport const EVENT_SCROLL_WIDTH_CHANGED  = 'scrollWidthChanged';\nexport const EVENT_SCROLL_HEIGHT_CHANGED = 'scrollHeightChanged';\nexport const EVENT_SYNCED                = 'synced';\nexport const EVENT_CONTEXT_MENU_OPENED   = 'contextMenuOpened';\nexport const EVENT_CONTEXT_MENU_CLOSED   = 'contextMenuClosed';\nexport const EVENT_CONTEXT_MENU_CLICKED  = 'contextMenuClicked';\nexport const EVENT_RESET                 = 'reset';\nexport const EVENT_INIT_STYLE            = 'initStyle';\nexport const EVENT_DESTROYED             = 'destroyed';\n","import { Position } from '@ryusei/code';\nimport { CLASS_ACTIVE, CLASS_CARET } from '../../constants/classes';\nimport { EVENT_RESIZE } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { addClass, debounce, div, removeClass, styles, unit } from '../../utils';\n\n\n/**\n * The offset amount for the horizontal position of the caret.\n *\n * @since 0.1.0\n */\nconst HORIZONTAL_OFFSET = -1;\n\n/**\n * The debounce duration for the `blink` method.\n *\n * @since 0.1.0\n */\nconst BLINK_DEBOUNCE_DURATION = 30;\n\n/**\n * The class for creating and controlling the caret element.\n *\n * @since 0.1.0\n */\nexport class CustomCaret {\n  /**\n   * The caret element.\n   */\n  readonly caret: HTMLDivElement;\n\n  /**\n   * Holds the Editor instance.\n   */\n  private readonly Editor: Editor;\n\n  /**\n   * Keeps the current position.\n   */\n  private position: Position;\n\n  /**\n   * The Caret constructor.\n   *\n   * @param Editor - An Editor instance.\n   * @param id     - An ID for the caret.\n   * @param parent - A parent element where the caret is appended.\n   */\n  constructor( Editor: Editor, id: string, parent: HTMLElement ) {\n    this.Editor = Editor;\n    this.caret  = div( [ CLASS_CARET, `${ CLASS_CARET }--${ id }` ], parent );\n    this.blink  = debounce( this.blink.bind( this ), BLINK_DEBOUNCE_DURATION );\n\n    Editor.event.on( EVENT_RESIZE, () => {\n      if ( this.position ) {\n        this.move( this.position );\n      }\n    } );\n  }\n\n  /**\n   * Sets the position of the caret.\n   *\n   * @param position - A position to set as [ row, col ].\n   */\n  move( position: Position ): void {\n    const { Measure } = this.Editor.Components;\n    const rect = Measure.getOffset( position );\n\n    styles( this.caret, {\n      top      : unit( rect.top ),\n      left     : unit( rect.left + HORIZONTAL_OFFSET ),\n      animation: 'none',\n    } );\n\n    this.blink();\n    this.position = position;\n  }\n\n  /**\n   * Displays the caret.\n   */\n  show(): void {\n    addClass( this.caret, CLASS_ACTIVE );\n  }\n\n  /**\n   * Hides teh caret.\n   */\n  hide(): void {\n    removeClass( this.caret, CLASS_ACTIVE );\n  }\n\n  /**\n   * Starts the blink animation by removing the `none` value from the `animation`.\n   */\n  private blink(): void {\n    styles( this.caret, { animation: '' } );\n  }\n}\n","import { Elements, EventBusEvent } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { CLASS_CARETS } from '../../constants/classes';\nimport { EVENT_READONLY, EVENT_SELECTED, EVENT_SELECTING } from '../../constants/events';\nimport { CHANGED, COLLAPSED, SELECTED } from '../../constants/selection-states';\nimport { assert, div, isIE, isMobile, rafThrottle } from '../../utils';\nimport { Selection } from '../Selection/Selection';\nimport { CustomCaret } from './CustomCaret';\n\n\n/**\n * The ID of the primary caret.\n *\n * @since 0.1.0\n */\nexport const PRIMARY_CARET_ID = 'primary';\n\n/**\n * The component for generating and handling carets.\n *\n * @since 0.1.0\n */\nexport class Caret extends Component {\n  /**\n   * The wrapper element that contains caret elements.\n   */\n  private wrapper: HTMLDivElement;\n\n  /**\n   * Stores the all registered Caret instances.\n   */\n  private carets: Record<string, CustomCaret> = {};\n\n  /**\n   * Holds the primary Caret instance.\n   */\n  private primary: CustomCaret;\n\n  /**\n   * Mounts the component.\n   * Uses the native caret on IE and mobile devices.\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.create();\n\n    if ( ! isIE() && ! isMobile() ) {\n      this.register( PRIMARY_CARET_ID );\n      this.primary = this.get( PRIMARY_CARET_ID );\n      this.listen();\n    }\n  }\n\n  /**\n   * Creates a wrapper element that contains carets.\n   */\n  private create(): void {\n    this.wrapper = div( {\n      class        : CLASS_CARETS,\n      role         : 'presentation',\n      'aria-hidden': true,\n    }, this.elements.editor );\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    const { editable } = this.elements;\n    const { primary, Editor } = this;\n\n    this.bind( editable, 'focus', () => {\n      if ( ! Editor.readOnly ) {\n        primary.show();\n      }\n    } );\n\n    this.bind( editable, 'blur', () => {\n      primary.hide();\n    } );\n\n    this.update = rafThrottle( this.update.bind( this ) );\n\n    this.on( EVENT_READONLY, ( e, readOnly ) => {\n      if ( readOnly ) {\n        primary.hide();\n      } else {\n        if ( Editor.isFocused() ) {\n          this.update();\n          primary.show();\n        }\n      }\n    } );\n\n    this.on( EVENT_SELECTED, this.onSelected, this );\n    this.on( EVENT_SELECTING, this.update );\n  }\n\n  /**\n   * Called when the selection state is changed.\n   *\n   * @param e         - An EventBusEvent object.\n   * @param Selection - A Selection instance.\n   */\n  private onSelected( e: EventBusEvent, Selection: Selection ): void {\n    if ( ! this.Editor.readOnly ) {\n      if ( Selection.is( CHANGED, COLLAPSED, SELECTED ) ) {\n        this.update();\n      }\n    }\n  }\n\n  /**\n   * Updates the primary caret position on the animation frame.\n   */\n  private update(): void {\n    this.primary.move( this.Selection.get( false ).end );\n  }\n\n  /**\n   * Registers a new caret.\n   *\n   * @param id - An ID for the caret to register.\n   *\n   * @return A registered Caret instance.\n   */\n  register( id: string ): CustomCaret {\n    const { carets } = this;\n    assert( ! carets[ id ] );\n\n    const caret = new CustomCaret( this.Editor, id, this.wrapper );\n    carets[ id ] = caret;\n\n    return caret;\n  }\n\n  /**\n   * Returns the primary or the particular caret.\n   *\n   * @param id - Optional. A caret ID.\n   *\n   * @return A Caret instance if available, or otherwise `undefined`.\n   */\n  get( id = PRIMARY_CARET_ID ): CustomCaret | undefined {\n    return this.carets[ id ];\n  }\n\n  /**\n   * Returns the DOMRect object of the native caret.\n   *\n   * @return A DOMRect object.\n   */\n  get rect(): DOMRect | null {\n    return this.Selection.getRect( true );\n  }\n}\n","/**\r\n * The editor is not active.\r\n */\r\nexport const IDLE = 0;\r\n\r\n/**\r\n * The selection is collapsed.\r\n */\r\nexport const COLLAPSED = 1;\r\n\r\n/**\r\n * The selection will change soon. The native selection has not been updated at this timing.\r\n */\r\nexport const START = 2;\r\n\r\n/**\r\n * The selection has just changed after the `START` state. The native selection has been updated.\r\n */\r\nexport const CHANGED = 3;\r\n\r\n/**\r\n * The selection has been programmatically updated.\r\n */\r\nexport const UPDATE = 4;\r\n\r\n/**\r\n * An user is selecting a document.\r\n */\r\nexport const SELECTING = 5;\r\n\r\n/**\r\n * The existing selection is being extended.\r\n */\r\nexport const EXTEND = 6;\r\n\r\n/**\r\n * User finishes the selection. The native selection has not been updated at this timing (in FF).\r\n */\r\nexport const END = 7;\r\n\r\n/**\r\n * The selection is settled and it is not collapsed.\r\n */\r\nexport const SELECTED = 8;\r\n\r\n/**\r\n * All contents are selected.\r\n */\r\nexport const SELECTED_ALL = 9;\r\n\r\n/**\r\n * The selection is right-clicked.\r\n */\r\nexport const CLICKED_RIGHT = 10;\r\n","import { Elements, EventBusEvent } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { CLASS_ANCHOR, CLASS_EMPTY, CLASS_FOCUS, CLASS_LINE, CLASS_PRESERVED } from '../../constants/classes';\nimport {\n  EVENT_ANCHOR_LINE_CHANGED,\n  EVENT_CHUNK_MOVED,\n  EVENT_CHUNK_SUPPLIED,\n  EVENT_FOCUS_LINE_CHANGED,\n  EVENT_RESIZE,\n  EVENT_SCROLL,\n  EVENT_SCROLL_HEIGHT_CHANGED,\n  EVENT_SCROLLED,\n  EVENT_SCROLLER_SCROLL,\n  EVENT_SELECTED,\n  EVENT_SELECTING,\n  EVENT_WINDOW_SCROLL,\n} from '../../constants/events';\nimport { CHANGED, COLLAPSED } from '../../constants/selection-states';\nimport {\n  abs,\n  addClass,\n  append,\n  assert,\n  assign,\n  attr,\n  before,\n  between,\n  ceil,\n  clamp,\n  debounce,\n  div,\n  floor,\n  hasClass,\n  html,\n  max,\n  min,\n  prepend,\n  queryAll,\n  rafThrottle,\n  rect,\n  remove,\n  removeClass,\n  slice,\n  tag,\n  text,\n} from '../../utils';\nimport { Selection } from '../Selection/Selection';\nimport { MARGIN_LINES, SCROLL_END_DEBOUNCE_DURATION } from './constants';\n\n\n/**\n * The type for the data of the anchor or focus line.\n *\n * @since 0.1.0\n */\ntype LineBoundaryData = { line?: Element, row?: number };\n\n/**\n * The class for handling line elements.\n *\n * @since 0.1.0\n */\nexport class Chunk extends Component {\n  /**\n   * Indicates what row corresponds with the first line element.\n   * The number can be negative.\n   */\n  start = 0;\n\n  /**\n   * The number of lines for margin.\n   */\n  margin = MARGIN_LINES;\n\n  /**\n   * The number of visible lines.\n   */\n  visibleLines: number;\n\n  /**\n   * The current offset amount in pixel.\n   */\n  offsetY = 0;\n\n  /**\n   * The anchor line data.\n   */\n  private anchor: LineBoundaryData = {};\n\n  /**\n   * The focus line data.\n   */\n  private focus: LineBoundaryData  = {};\n\n  /**\n   * Indicates whether the anchor line is changed or not.\n   */\n  private anchorChanged: boolean;\n\n  /**\n   * Indicates whether the focus line is changed or not.\n   */\n  private focusChanged: boolean;\n\n  /**\n   * Holds the previous scroll position.\n   */\n  private scrollTop = 0;\n\n  /**\n   * Holds the scroller element.\n   */\n  private scroller: HTMLElement;\n\n  /**\n   * Holds the parent element of lines.\n   */\n  private parent: HTMLElement;\n\n  /**\n   * Indicates the chunk is active or not.\n   */\n  private active: boolean;\n\n  /**\n   * Caches the border positions.\n   */\n  private borderCache: [ number, number ];\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    const { scroller } = elements;\n\n    this.scroller   = scroller;\n    this.parent     = elements.lines;\n    this.scrollTop  = window.pageYOffset + scroller.scrollTop;\n    this.active     = this.isVisible();\n    this.onScrolled = debounce( this.onScrolled.bind( this ), SCROLL_END_DEBOUNCE_DURATION );\n\n    this.supply();\n    this.remove();\n    this.listen();\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    const onScroll = rafThrottle( this.onScroll.bind( this ) );\n\n    this.bind( this.scroller, 'scroll', () => {\n      onScroll( true );\n      this.emit( EVENT_SCROLLER_SCROLL );\n    } );\n\n    this.bind( window, 'scroll', () => {\n      onScroll( false );\n      this.emit( EVENT_WINDOW_SCROLL );\n    } );\n\n    this.bind( window, 'scroll', rafThrottle( () => {\n      this.active      = this.isVisible();\n      this.borderCache = null;\n    } ) );\n\n    this.on( EVENT_RESIZE, () => {\n      this.borderCache = null;\n      this.reposition();\n    } );\n\n    this.on( EVENT_SCROLL_HEIGHT_CHANGED, () => {\n      this.supply();\n      this.borderCache = null;\n    } );\n\n    this.on( EVENT_SELECTED, this.onSelected, this, 0 );\n    this.on( EVENT_SELECTING, () => {\n      this.activate( true );\n\n      if ( this.focusChanged ) {\n        this.emitChangedEvent( true );\n      }\n    } );\n  }\n\n  /**\n   * Called whenever the selection state changes.\n   *\n   * @param e         - An EventBusEvent object.\n   * @param Selection - A Selection instance.\n   */\n  private onSelected( e: EventBusEvent, Selection: Selection ): void {\n    if ( Selection.is( COLLAPSED, CHANGED ) ) {\n      this.activate( true );\n      this.activate( false );\n\n      if ( this.anchorChanged ) {\n        this.emitChangedEvent( false );\n      }\n\n      if ( this.focusChanged ) {\n        this.emitChangedEvent( true );\n      }\n    }\n  }\n\n  /**\n   * Called whenever the editor scrolls.\n   * Be aware that the `scrollY` property is not supported in IE.\n   *\n   * @return byScroller - Indicates whether the editor is scrolled by the editor element itself or the window.\n   */\n  private onScroll( byScroller: boolean ): void {\n    const top = window.pageYOffset + this.scroller.scrollTop;\n\n    if ( this.active ) {\n      const { scrollTop } = this;\n\n      if ( scrollTop < top ) {\n        this.moveDown();\n      } else if ( scrollTop > top ) {\n        this.moveUp();\n      }\n\n      this.emit( EVENT_SCROLL, true );\n      this.onScrolled( byScroller );\n    }\n\n    this.scrollTop = top;\n  }\n\n  /**\n   * Called the scroll likely ends.\n   *\n   * @return byScroller - Indicates whether the editor is scrolled by the editor element itself or the window.\n   */\n  private onScrolled( byScroller: boolean ): void {\n    this.emit( EVENT_SCROLLED, byScroller );\n  }\n\n  /**\n   * Activates the anchor or focus line.\n   * - If the selection is collapsed outside of the view,\n   *   the anchor and focus lines are merged into a single boundary line.\n   * - If the line is not available but there is a boundary,\n   *   that means the boundary has been added manually by the Selection component.\n   *\n   * @param focus - Determines whether to activate focus or anchor line.\n   */\n  private activate( focus: boolean ): void {\n    const className = focus ? CLASS_FOCUS : CLASS_ANCHOR;\n    const row       = this.Selection.get( false )[ focus ? 'end' : 'start' ][ 0 ];\n    const boundary  = this.getBoundary( focus );\n\n    let line = this.getLine( row );\n\n    if ( ! line ) {\n      const anotherBoundary = this.getBoundary( ! focus );\n\n      if ( anotherBoundary.row === row ) {\n        line = anotherBoundary.line;\n      }\n    }\n\n    if ( line ) {\n      if ( ! hasClass( line, className ) ) {\n        this.deactivate( focus );\n\n        addClass( line, className );\n        assign( boundary, { line, row } );\n\n        this.setBoundaryChanged( focus, true );\n      }\n    }\n  }\n\n  /**\n   * Deactivates the anchor or focus line if it is changed.\n   *\n   * @param focus - Determines whether to deactivate focus or anchor line.\n   */\n  private deactivate( focus: boolean ): void {\n    const boundary = this.getBoundary( focus );\n    const { line } = boundary;\n\n    if ( line ) {\n      if ( hasClass( line, CLASS_PRESERVED ) && ! hasClass( line, focus ? CLASS_ANCHOR : CLASS_FOCUS ) ) {\n        remove( line );\n      } else {\n        removeClass( line, focus ? CLASS_FOCUS : CLASS_ANCHOR );\n      }\n\n      boundary.line = null;\n      boundary.row  = null;\n    }\n  }\n\n  /**\n   * Emits the `changed` event for an anchor or focus line.\n   *\n   * @param focus - Determines whether to emit the event for the focus or anchor line.\n   */\n  private emitChangedEvent( focus: boolean ): void {\n    const boundary = this.getBoundary( focus );\n    assert( boundary.line );\n    this.emit( focus ? EVENT_FOCUS_LINE_CHANGED : EVENT_ANCHOR_LINE_CHANGED, boundary.line, boundary.row );\n\n    if ( focus ) {\n      this.focusChanged = false;\n    } else {\n      this.anchorChanged = false;\n    }\n  }\n\n  /**\n   * Sets the `anchorChanged` or `focusChanged` property.\n   *\n   * @param focus   - Determines which property should be changed.\n   * @param changed - The value for the property.\n   */\n  private setBoundaryChanged( focus: boolean, changed: boolean ): void {\n    if ( focus ) {\n      this.focusChanged = changed;\n    } else {\n      this.anchorChanged = changed;\n    }\n  }\n\n  /**\n   * Supplies line elements so that they can fill the viewport.\n   */\n  private supply(): void {\n    const { lineHeight, scrollerRect } = this.Measure;\n\n    const maxHeight    = min( scrollerRect.height, window.innerHeight );\n    const visibleLines = ceil( maxHeight / lineHeight );\n    const totalLength  = visibleLines + this.margin * 2;\n\n    if ( visibleLines !== this.visibleLines ) {\n      const { elms } = this;\n      const { length } = elms;\n      const diff = totalLength - length;\n\n      if ( diff > 0 ) {\n        this.html( this.start + length, diff, 'beforeend' );\n        this.emit( EVENT_CHUNK_SUPPLIED, this, diff );\n      }\n\n      this.visibleLines = visibleLines;\n    }\n  }\n\n  /**\n   * Removes unnecessary lines.\n   */\n  private remove(): void {\n    const { elms, length } = this;\n\n    if ( elms.length > length ) {\n      remove( elms.slice( length - elms.length ) );\n    }\n  }\n\n  /**\n   * Returns a HTML string of lines.\n   *\n   * @param start  - A start row index.\n   * @param length - A number of lines.\n   * @param where  - Optional. If provided, built HTML will be inserted to the parent by the `insertAdjacentHTML`.\n   *\n   * @return A built HTML.\n   */\n  private html( start: number, length: number, where?: InsertPosition ): string {\n    let html = '';\n\n    for ( let i = 0; i < length; i++ ) {\n      const row  = start + i;\n      const line = this.lines[ row ];\n\n      html += tag( [ CLASS_LINE, line ? '' : CLASS_EMPTY ] );\n      html += line ? line.html : '';\n      html += '</div>';\n    }\n\n    if ( where ) {\n      this.parent.insertAdjacentHTML( where, html );\n    }\n\n    return html;\n  }\n\n  /**\n   * Moves down elements which are outside of the border.\n   */\n  private moveDown(): void {\n    const lengthToMove = this.computeLengthToMoveDown();\n\n    if ( lengthToMove >= this.length ) {\n      this.jumpIntoView();\n    } else if ( lengthToMove > 0 ) {\n      const { lineHeight } = this.Measure;\n\n      this.offsetY += lineHeight * lengthToMove;\n\n      if ( this.start < 0 ) {\n        this.offsetY = max( this.offsetY + this.start * lineHeight, 0 );\n      }\n\n      const { elms } = this;\n      const html = this.html( this.start + elms.length, lengthToMove );\n      elms[ elms.length - 1 ].insertAdjacentHTML( 'afterend', html );\n\n      remove( this.detach( 0, lengthToMove ) );\n\n      this.start += lengthToMove;\n\n      this.attach();\n      this.offset();\n\n      this.emit( EVENT_CHUNK_MOVED, this );\n    }\n  }\n\n  /**\n   * Moves up elements which are outside of the border.\n   */\n  private moveUp(): void {\n    const lengthToMove = this.computeLengthToMoveUp();\n\n    if ( lengthToMove >= this.length ) {\n      this.jumpIntoView();\n    } else if ( lengthToMove > 0 ) {\n      const { lineHeight } = this.Measure;\n\n      remove( this.detach( - lengthToMove ) );\n\n      const { elms } = this;\n      const html = this.html( this.start - lengthToMove, lengthToMove );\n      elms[ 0 ].insertAdjacentHTML( 'beforebegin', html );\n\n      this.start -= lengthToMove;\n      this.offsetY = max( this.offsetY - lineHeight * lengthToMove, 0 );\n\n      this.attach();\n      this.offset();\n\n      this.emit( EVENT_CHUNK_MOVED, this );\n    }\n  }\n\n  /**\n   * Computes the number of lines to move down.\n   *\n   * @return A number of lines to move down.\n   */\n  private computeLengthToMoveDown(): number {\n    if ( this.end < this.lines.length ) {\n      const { Measure: { lineHeight }, margin } = this;\n      const { top } = rect( this.parent );\n      const border = this.border[ 0 ];\n\n      if ( top + lineHeight * margin < border ) {\n        return floor( ( border - top ) / lineHeight );\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Computes the number of lines to move up.\n   *\n   * @return A number of lines to move up.\n   */\n  private computeLengthToMoveUp(): number  {\n    if ( this.start > 0 ) {\n      const { Measure: { lineHeight, padding: { bottom: paddingBottom } }, margin } = this;\n      const { top, bottom } = rect( this.parent );\n      const [ topBorder, bottomBorder ] = this.border;\n\n      if ( top > topBorder ) {\n        return margin + floor( ( top - topBorder ) / lineHeight );\n      }\n\n      if ( bottom - lineHeight * margin - paddingBottom > bottomBorder ) {\n        return floor( ( bottom - paddingBottom - bottomBorder ) / lineHeight );\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Detaches lines in the specified lines from the chunk.\n   * Both anchor and focus lines will be preserved, and others will be returned.\n   *\n   * @param start - A start index.\n   * @param end   - An end index.\n   *\n   * @return An array with detached elements.\n   */\n  private detach( start: number, end?: number ): HTMLElement[] {\n    return this.elms.slice( start, end ).reduce( ( detached: HTMLElement[], elm: HTMLElement ) => {\n      const isAnchor = hasClass( elm, CLASS_ANCHOR );\n      const isFocus  = hasClass( elm, CLASS_FOCUS );\n\n      if ( isAnchor || isFocus ) {\n        addClass( elm, CLASS_PRESERVED );\n        attr( elm, { 'aria-hidden': true } );\n      } else {\n        detached.push( elm );\n      }\n\n      return detached;\n    }, [] );\n  }\n\n  /**\n   * Attaches detached anchor and focus lines to the chunk.\n   * Do not move the anchor and focus lines to keep the native selection.\n   */\n  private attach(): void {\n    const { Selection, anchor: { line: anchorLine }, focus: { line: focusLine } } = this;\n    const { anchor, focus } = Selection;\n    const includesAnchor          = this.includes( anchor[ 0 ] );\n    const includesFocus           = this.includes( focus[ 0 ] );\n    const includesPreservedAnchor = includesAnchor && hasClass( anchorLine, CLASS_PRESERVED );\n    const includesPreservedFocus  = includesFocus && hasClass( focusLine, CLASS_PRESERVED );\n\n    if ( includesPreservedAnchor || includesPreservedFocus ) {\n      const anchorIndex = includesAnchor ? anchor[ 0 ] - this.start : -1;\n      const focusIndex  = includesFocus ? focus[ 0 ] - this.start : -1;\n      const firstIndex  = min( anchorIndex, focusIndex );\n      const secondIndex = max( anchorIndex, focusIndex );\n      const backward    = Selection.isBackward();\n\n      let firstElm: Element, secondElm: Element;\n\n      if ( firstIndex > -1 ) {\n        firstElm  = backward ? focusLine : anchorLine;\n        secondElm = backward ? anchorLine : focusLine;\n      } else {\n        secondElm = includesAnchor ? anchorLine : focusLine;\n      }\n\n      const { elms } = this;\n      const topElms    = firstElm ? elms.slice( 0, firstIndex ) : elms.slice( 0, secondIndex );\n      const middleElms = firstElm ? elms.slice( firstIndex + 1, secondIndex ) : [];\n      const bottomElms = elms.slice( secondIndex + 1 );\n\n      if ( includesPreservedAnchor ) {\n        removeClass( anchorLine, CLASS_PRESERVED );\n        attr( anchorLine, { 'aria-hidden': null } );\n        remove( elms[ anchorIndex ] );\n      }\n\n      if ( includesPreservedFocus && anchorIndex !== focusIndex ) {\n        removeClass( focusLine, CLASS_PRESERVED );\n        attr( focusLine, { 'aria-hidden': null } );\n        remove( elms[ focusIndex ] );\n      }\n\n      before( topElms, firstElm || secondElm );\n      before( middleElms, secondElm );\n\n      const { nextElementSibling } = secondElm;\n\n      if ( bottomElms.length && bottomElms[ 0 ] !== nextElementSibling ) {\n        before( bottomElms, nextElementSibling );\n      }\n    }\n  }\n\n  /**\n   * Offsets the parent element to make it visible inside the viewport.\n   *\n   * @param offsetY - Optional. Amount of the offset. If empty, the current `offsetY` will be used.\n   */\n  private offset( offsetY = this.offsetY ): void {\n    this.parent.style.top = `${ offsetY }px`;\n  }\n\n  /**\n   * Makes the chunk jump so that it is visible in the view.\n   */\n  private jumpIntoView(): void {\n    this.jump( this.Measure.closest( this.scroller.scrollTop ) );\n  }\n\n  /**\n   * Repositions the chunk to the current scroll top position.\n   */\n  private reposition(): void {\n    const top = this.Measure.getTop( this.start );\n\n    if ( top !== this.offsetY ) {\n      const focusRow      = this.focus.row;\n      const includesFocus = this.includes( focusRow );\n\n      this.jumpIntoView();\n\n      if ( includesFocus ) {\n        this.View.jump( focusRow );\n      }\n    }\n  }\n\n  /**\n   * Checks if the part of the scroller element is vertically visible or not.\n   * This method does not care the horizontal visibility.\n   *\n   * @return `true` if the scroller is visible, or otherwise `false`.\n   */\n  private isVisible(): boolean {\n    const { top, bottom } = rect( this.scroller );\n    const { innerHeight } = window;\n    return between( top, 0, innerHeight ) || between( bottom, 0, innerHeight ) || top < 0 && bottom > innerHeight;\n  }\n\n  /**\n   * Returns the focus or anchor boundary data.\n   *\n   * @param focus - Determines whether to return the focus or anchor boundary data.\n   *\n   * @return The boundary data object.\n   */\n  getBoundary( focus: boolean ): LineBoundaryData {\n    return focus ? this.focus : this.anchor;\n  }\n\n  /**\n   * Manually adds preserved line.\n   * This method should be only used by the Selection component.\n   * Note that the `changed` event will be emitted by the `activate` method.\n   *\n   * @param focus - Determines whether to add a focus or anchor line.\n   * @param row   - A row index.\n   *\n   * @return A created preserved line element.\n   */\n  addPreservedLine( focus: boolean, row: number ): Element {\n    const { parent } = this;\n    const classes = `${ CLASS_LINE } ${ focus ? CLASS_FOCUS : CLASS_ANCHOR } ${ CLASS_PRESERVED }`;\n    const line    = div( { class: classes, 'aria-hidden': true } );\n\n    this.deactivate( focus );\n\n    html( line, this.lines[ row ].html );\n\n    if ( row < this.start ) {\n      prepend( parent, line );\n    } else {\n      append( parent, line );\n    }\n\n    assign( this.getBoundary( focus ), { line, row } );\n    this.setBoundaryChanged( focus, true );\n\n    return line;\n  }\n\n  /**\n   * Updates HTML of elements by current lines.\n   *\n   * @param elms  - Elements to sync.\n   * @param start - A start index.\n   */\n  sync( elms = this.elms, start = this.start ): void {\n    for ( let i = 0; i < elms.length; i++ ) {\n      const line = this.lines[ i + start ];\n      const elm  = elms[ i ];\n\n      if ( line ) {\n        html( elm, line.html );\n        removeClass( elm, CLASS_EMPTY );\n      } else {\n        text( elm, '' );\n        addClass( elm, CLASS_EMPTY );\n      }\n    }\n  }\n\n  /**\n   * Syncs difference of the number of lines before syncing each HTML for performance.\n   * If the diff length is greater than the margin, this method does nothing.\n   *\n   * @param row  - A row index.\n   * @param diff - Difference of the number of lines before and after editing.\n   */\n  syncDiff( row: number, diff: number ): void {\n    if ( abs( diff ) < MARGIN_LINES ) {\n      const index = row - this.start;\n      const { elms } = this;\n\n      if ( diff > 0 ) {\n        before( elms.slice( - diff ), elms[ index ].nextElementSibling );\n      } else if ( diff < 0 ) {\n        append( this.parent, elms.slice( index + 1, index + 1 - diff ) );\n      }\n    }\n  }\n\n  /**\n   * Updates the position and contents of line elements.\n   */\n  refresh(): void {\n    this.moveDown();\n    this.moveUp();\n  }\n\n  /**\n   * Makes the chunk jump to the specified row index.\n   *\n   * @param row - A row to jump to.\n   */\n  jump( row: number ): void {\n    const { Measure, length } = this;\n    const { padding: { top: paddingTop }, lineHeight } = Measure;\n    const offsetRows = ceil( paddingTop / lineHeight );\n\n    this.start   = clamp( row - offsetRows, 0, max( this.lines.length - length + this.margin, 0 ) );\n    this.offsetY = Measure.getTop( this.start );\n\n    const elms = this.detach( 0 );\n\n    elms[ 0 ].insertAdjacentHTML( 'afterend', this.html( this.start, length ) );\n    remove( elms );\n\n    this.offset();\n    this.attach();\n\n    this.emit( EVENT_CHUNK_MOVED, this );\n  }\n\n  /**\n   * Scrolls to the specified top position\n   * and manually calls the `onScroll` handler for succeeding synchronous processes.\n   *\n   * @param scrollTop - A scroll position.\n   */\n  scroll( scrollTop: number ): void {\n    this.scroller.scrollTop = scrollTop;\n    this.onScroll( true );\n  }\n\n  /**\n   * Returns the row index which the provided line element corresponds with.\n   *\n   * @param elm - A line element.\n   *\n   * @return The row index if available, or otherwise -1.\n   */\n  getRow( elm: HTMLElement ): number {\n    const row = this.elms.indexOf( elm );\n    return row > -1 ? row + this.start : -1;\n  }\n\n  /**\n   * Returns the line at the specified row if available.\n   *\n   * @param row - A row index.\n   *\n   * @return A line element if available, or `undefined` if not.\n   */\n  getLine( row: number ): Element | undefined {\n    return this.elms[ row - this.start ];\n  }\n\n  /**\n   * Checks if the chunk includes the specified row or not.\n   *\n   * @param row - A row index.\n   *\n   * @return `true` if the chunk includes the row, or otherwise `false`.\n   */\n  includes( row: number ): boolean {\n    return between( row, this.start, this.end );\n  }\n\n  /**\n   * Returns the end index of the chunk lines.\n   * This may be greater than the total number of actual lines.\n   *\n   * @return An end index of the chunk.\n   */\n  get end(): number {\n    return this.start + this.length - 1;\n  }\n\n  /**\n   * Returns the number of chunk lines without preserved lines.\n   *\n   * @return A number of elements.\n   */\n  get length(): number {\n    return this.visibleLines + this.margin * 2;\n  }\n\n  /**\n   * Returns chunk lines without preserved lines.\n   *\n   * @return An array containing chunk line elements.\n   */\n  get elms(): Element[] {\n    return slice( queryAll( this.parent, `.${ CLASS_LINE }:not(.${ CLASS_PRESERVED })` ) );\n  }\n\n  /**\n   * Returns borders to move elements up or down.\n   *\n   * @return A tuple containing top and bottom borders.\n   */\n  get border(): [ number, number ] {\n    if ( ! this.borderCache ) {\n      const domRect = rect( this.scroller );\n      const top     = max( domRect.top, 0 );\n      const bottom  = min( domRect.bottom, window.innerHeight );\n\n      this.borderCache = [ top, bottom ];\n    }\n\n    return this.borderCache;\n  }\n}\n","/**\n * Debounce duration for invoking the `scrollEnd()`.\n * This must not be less than the native scroll interval.\n *\n * @since 0.1.0\n */\nexport const SCROLL_END_DEBOUNCE_DURATION = 60;\n\n/**\n * The number of lines for margin.\n *\n * @since 0.1.0\n */\nexport const MARGIN_LINES = 10;\n","/**\n * The line break character.\n *\n * @private\n * @since 0.1.0\n */\nexport const LINE_BREAK = '\\n';\n\n/**\n * The space that has no width.\n *\n * @private\n * @since 0.1.0\n */\nexport const ZERO_WIDTH_SPACE = '\\ufeff';\n","import { arrayProto, splice } from '../../utils';\n\n\n/**\n * The abstract class for implementing an ArrayLike class.\n *\n * @since 0.1.0\n *\n * @typeParam T - A type for each element.\n */\nexport abstract class AbstractArrayLike<T> implements ArrayLike<T> {\n  /**\n   * The length of elements.\n   */\n  length = 0;\n\n  /**\n   * The index signature for behaving an array-like object.\n   */\n  [ index: number ]: T;\n\n  /**\n   * Implements the `push` method by using native method.\n   *\n   * @param items - Items to push.\n   */\n  push( ...items: T[] ): void {\n    arrayProto.push.apply( this, items );\n  }\n\n  /**\n   * Implements the `splice` method by using native method.\n   *\n   * @param start       - A start index.\n   * @param deleteCount - The number of items to delete from the start index.\n   * @param items       - New items to insert at the start index.\n   */\n  splice( start: number, deleteCount?: number, ...items: T[] ): void {\n    splice( this, start, deleteCount, ...items );\n  }\n\n  /**\n   * Clears elements.\n   */\n  clear(): void {\n    splice( this, 0, this.length );\n  }\n}\n","import { Token, TokenMatcher } from '@ryusei/code';\r\nimport { isUndefined } from '../../type/type';\r\n\r\n\r\n/**\r\n * Checks if the token matches the provided matcher or not.\r\n *\r\n * @param token   - A token to test.\r\n * @param matcher - An array described as a TokenMatcher tuple.\r\n */\r\nexport function matchesToken( token: Token, matcher: TokenMatcher ): boolean {\r\n  if ( token && token[ 0 ] === matcher[ 0 ] && ( ! matcher[ 1 ] || matcher[ 1 ].test( token[ 1 ] ) ) ) {\r\n    return isUndefined( matcher[ 2 ] ) || token[ 2 ].state === matcher[ 2 ];\r\n  }\r\n\r\n  return false;\r\n}\r\n","/*!\n * RyuseiLight.js\n * Version  : 1.1.8\n * License  : MIT\n * Copyright: 2020 Naotoshi Fujita\n */\n\n/**\r\n * The line break character.\r\n *\r\n * @private\r\n * @since 0.0.1\r\n */\nvar LINE_BREAK = '\\n';\nvar CATEGORY_KEYWORD = 'keyword';\nvar CATEGORY_CONSTANT = 'constant';\nvar CATEGORY_COMMENT = 'comment';\nvar CATEGORY_TAG = 'tag';\nvar CATEGORY_TAG_CLOSE = 'tag.close';\nvar CATEGORY_SELECTOR = 'selector';\nvar CATEGORY_ATRULE = 'atrule';\nvar CATEGORY_ATTRIBUTE = 'attr';\nvar CATEGORY_PROPERTY = 'prop';\nvar CATEGORY_VALUE = 'value';\nvar CATEGORY_VARIABLE = 'variable';\nvar CATEGORY_ENTITY = 'entity';\nvar CATEGORY_CDATA = 'cdata';\nvar CATEGORY_PROLOG = 'prolog';\nvar CATEGORY_IDENTIFIER = 'identifier';\nvar CATEGORY_STRING = 'string';\nvar CATEGORY_NUMBER = 'number';\nvar CATEGORY_BOOLEAN = 'boolean';\nvar CATEGORY_FUNCTION = 'function';\nvar CATEGORY_CLASS = 'class';\nvar CATEGORY_DECORATOR = 'decorator';\nvar CATEGORY_REGEXP = 'regexp';\nvar CATEGORY_OPERATOR = 'operator';\nvar CATEGORY_BRACKET = 'bracket';\nvar CATEGORY_DELIMITER = 'delimiter';\nvar CATEGORY_SYMBOL = 'symbol';\nvar CATEGORY_SPACE = 'space';\nvar CATEGORY_TEXT = 'text'; // Internal use only\n\nvar CATEGORY_LINEBREAK = 'lb';\n/**\r\n * Checks if the given subject is an object or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an object, or otherwise `false`.\r\n */\n\nfunction isObject(subject) {\n  return subject !== null && typeof subject === 'object';\n}\n/**\r\n * Checks if the given subject is an array or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an array, or otherwise `false`.\r\n */\n\n\nfunction isArray(subject) {\n  return Array.isArray(subject);\n}\n/**\r\n * Checks if the given subject is a string or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a string, or otherwise `false`.\r\n */\n\n\nfunction isString(subject) {\n  return typeof subject === 'string';\n}\n/**\r\n * Checks if the given subject is `undefined` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `undefined`, or otherwise `false`.\r\n */\n\n\nfunction isUndefined(subject) {\n  return typeof subject === 'undefined';\n}\n/**\r\n * Checks if the given subject is an HTMLElement instance or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\r\n */\n\n\nfunction isHTMLElement(subject) {\n  return subject instanceof HTMLElement;\n}\n/**\r\n * Push the provided value to an array only if the value is not an array.\r\n *\r\n * @param value - A value to push.\r\n *\r\n * @return An array containing the value, or the value itself if it is already an array.\r\n */\n\n\nfunction toArray(value) {\n  return isArray(value) ? value : [value];\n}\n/**\r\n * Adds classes to the element.\r\n *\r\n * @param elm     - An element to add classes to.\r\n * @param classes - Classes to add.\r\n */\n\n\nfunction addClass$1(elm, classes) {\n  toArray(classes).forEach(function (name) {\n    if (name) {\n      elm.classList.add(name);\n    }\n  });\n}\n/**\r\n * Appends children to the parent element.\r\n *\r\n * @param parent   - A parent element.\r\n * @param children - A child or children to append to the parent.\r\n */\n\n\nfunction append(parent, children) {\n  children = toArray(children);\n\n  for (var i = 0; i < children.length; i++) {\n    parent.appendChild(children[i]);\n  }\n}\n/**\r\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\r\n *\r\n * @param object   - An object to iterate over.\r\n * @param iteratee - An iteratee function that takes the value and key as arguments.\r\n *\r\n * @return A provided object itself.\r\n */\n\n\nfunction forOwn(object, iteratee) {\n  if (object) {\n    var keys = Object.keys(object);\n\n    for (var i = 0; i < keys.length; i++) {\n      iteratee(object[keys[i]], keys[i]);\n    }\n  }\n}\n/**\r\n * Assigns all own enumerable properties of all source objects to the provided object.\r\n * `undefined` in source objects will be skipped.\r\n *\r\n * @param object  - An object to assign properties to.\r\n * @param sources - Objects to assign properties from.\r\n *\r\n * @return An object assigned properties of the sources to.\r\n */\n\n\nfunction assign(object) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  sources.forEach(function (source) {\n    if (isObject(source)) {\n      forOwn(source, function (value, key) {\n        if (!isUndefined(source[key])) {\n          object[key] = source[key];\n        }\n      });\n    }\n  });\n  return object;\n}\n/**\r\n * Sets new attributes to the passed element if the `attrs` is an object literal,\r\n * or gets an attribute value from it if the `attrs` is a string.\r\n *\r\n * @param elm   - An element to set or get an attribute.\r\n * @param attrs - An attribute name as a string or new attributes as an object literal.\r\n */\n\n\nfunction attr(elm, attrs) {\n  if (isString(attrs)) {\n    return elm.getAttribute(attrs) || '';\n  }\n\n  if (isObject(attrs)) {\n    forOwn(attrs, function (value, key) {\n      elm.setAttribute(key, String(value));\n    });\n  }\n}\n/**\r\n * Creates an HTML element.\r\n *\r\n * @param tag     - A tag name.\r\n * @param classes - Optional. Classes to add.\r\n * @param parent  - Optional. A parent element where the created element is appended.\r\n */\n\n\nfunction create(tag, classes, parent) {\n  var elm = document.createElement(tag);\n\n  if (classes) {\n    addClass$1(elm, classes);\n  }\n\n  if (parent) {\n    append(parent, elm);\n  }\n\n  return elm;\n}\n/**\r\n * Returns an element that matches the provided selector.\r\n *\r\n * @param selector - A selector.\r\n * @param parent   - Optional. A parent element to start searching elements from.\r\n *\r\n * @return A found element or `null`.\r\n */\n\n\nfunction query(selector, parent) {\n  if (parent === void 0) {\n    parent = document;\n  }\n\n  return parent.querySelector(selector);\n}\n/**\r\n * Applies inline styles to the provided element by an object literal.\r\n *\r\n * @param elm    - An element to apply styles to.\r\n * @param styles - An object literal with styles.\r\n */\n\n\nfunction styles(elm, styles) {\n  forOwn(styles, function (value, key) {\n    elm.style[key] = String(value);\n  });\n}\n/**\r\n * Returns an open tag with provided classes.\r\n *\r\n * @param classes - Classes.\r\n * @param tag     - Optional. A tag name.\r\n */\n\n\nfunction tag(classes, tag) {\n  return \"<\" + (tag || 'div') + \" class=\\\"\" + classes.join(' ') + \"\\\">\";\n}\n/**\r\n * Sets or gets a text content of the provided node.\r\n *\r\n * @param node - A node to get or set a text.\r\n * @param text - Optional. A text to set.\r\n */\n\n\nfunction text(node, text) {\n  if (isUndefined(text)) {\n    return node.textContent;\n  }\n\n  node.textContent = text;\n}\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message for the error.\r\n */\n\n\nfunction assert(condition, message) {\n  if (message === void 0) {\n    message = '';\n  }\n\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n/**\r\n * The project code name.\r\n *\r\n * @since 0.0.1\r\n */\n\n\nvar PROJECT_CODE = 'ryuseilight';\n/**\r\n * The abbreviated project code.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar PROJECT_CODE_SHORT = 'rl';\n/**\r\n * Displays an error message on the console.\r\n *\r\n * @param message - An error message.\r\n */\n\nfunction error(message) {\n  console.error(\"[\" + PROJECT_CODE + \"] \" + message);\n}\n/**\r\n * Returns a function that invokes the provided function at most once in the specified duration.\r\n *\r\n * @since 0.0.1\r\n *\r\n * @param callback - A function to throttle.\r\n * @param interval - A throttle duration in milliseconds.\r\n *\r\n * @return A throttled function.\r\n */\n\n\nfunction throttle(callback, interval) {\n  var timer;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function () {\n        callback();\n        timer = null;\n      }, interval);\n    }\n  };\n}\n/**\r\n * Finds the provided key from a map and returns its index.\r\n *\r\n * @param map - A map to search in.\r\n * @param key - A key to search for.\r\n *\r\n * @return An index if found, or `-1` otherwise.\r\n */\n\n\nfunction find(map, key) {\n  for (var i = 0; i < map.length; i++) {\n    if (map[i][0] === key) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\r\n * Insert entries before the reference entry specified by the `ref`.\r\n * If the reference is not found, a new entry is created.\r\n *\r\n * @param map     - A map to insert values to.\r\n * @param ref     - A reference key.\r\n * @param entries - entries to insert.\r\n */\n\n\nfunction before(map, ref, entries) {\n  var index = find(map, ref);\n\n  if (index > -1) {\n    map.splice.apply(map, [index, 0].concat(entries));\n  } else {\n    map.push.apply(map, entries);\n  }\n}\n/**\r\n * Converts essential HTML special characters to HTML entities.\r\n *\r\n * @param string - A string to escape.\r\n *\r\n * @return An escaped string.\r\n */\n\n\nfunction escapeHtml(string) {\n  return string.replace(/&/g, '&amp;').replace(/</g, '&lt;');\n}\n/**\r\n * Checks if the string starts with the `char` or not.\r\n *\r\n * @param string - A string to check.\r\n * @param char   - A character.\r\n *\r\n * @return `true` if the string starts with the `char`, or otherwise `false`.\r\n */\n\n\nfunction startsWith(string, _char) {\n  return string.charAt(0) === _char;\n}\n/**\r\n * Checks if the RegExp supports the sticky flag or not.\r\n */\n\n\nvar isStickySupported = !isUndefined(/x/.sticky);\n/**\r\n * The class for creating a simple lexer by a Language object.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar Lexer = /*#__PURE__*/function () {\n  /**\r\n   * The Lexer constructor.\r\n   *\r\n   * @param language - A Language object.\r\n   */\n  function Lexer(language) {\n    this.language = language;\n    this.init(language);\n  }\n  /**\r\n   * Initializes the language object.\r\n   *\r\n   * @param language - A Language object to initialize.\r\n   */\n\n\n  var _proto = Lexer.prototype;\n\n  _proto.init = function init(language) {\n    var _this = this;\n\n    forOwn(language.grammar, function (tokenizers, key) {\n      language.grammar[key] = _this.merge(language, tokenizers);\n    });\n    forOwn(language.use, this.init.bind(this));\n  }\n  /**\r\n   * Includes tokenizers required by `#` annotation and flatten them.\r\n   *\r\n   * @param language   - A language object.\r\n   * @param tokenizers - Tokenizers.\r\n   *\r\n   * @return Merged tokenizers.\r\n   */\n  ;\n\n  _proto.merge = function merge(language, tokenizers) {\n    var merged = [];\n\n    for (var i = 0; i < tokenizers.length; i++) {\n      var tokenizer = tokenizers[i];\n      var _tokenizers$i = tokenizers[i],\n          category = _tokenizers$i[0],\n          regexp = _tokenizers$i[1];\n\n      if (startsWith(category, '#') && !regexp) {\n        merged.push.apply(merged, this.merge(language, language.grammar[category.slice(1)]));\n      } else {\n        (function () {\n          var flags = regexp.toString().match(/[gimsy]*$/)[0].replace(/[gy]/g, '');\n          var source = regexp.source + (isStickySupported ? '' : '|()');\n          forOwn(language.source, function (replacement, key) {\n            source = source.replace(new RegExp(\"%\" + key, 'g'), replacement.source);\n          });\n          tokenizer[1] = new RegExp(source, (isStickySupported ? 'y' : 'g') + flags);\n          merged.push(tokenizer);\n        })();\n      }\n    }\n\n    return merged;\n  }\n  /**\r\n   * Parses the text by the provided language and tokenizers.\r\n   *\r\n   * @param text       - A text to tokenize.\r\n   * @param language   - A Language object.\r\n   * @param tokenizers - An array with tokenizers.\r\n   * @param state      - Optional. The current state name.\r\n   *\r\n   * @return An index of the text where the handling ends.\r\n   */\n  ;\n\n  _proto.parse = function parse(text, language, tokenizers, state) {\n    var index = 0;\n    var position = 0;\n    this.depth++;\n\n    main: while (index < text.length && !this.aborted) {\n      for (var i = 0; i < tokenizers.length; i++) {\n        var tokenizer = tokenizers[i];\n        var regexp = tokenizer[1],\n            action = tokenizer[2];\n        regexp.lastIndex = index;\n        var match = regexp.exec(text);\n\n        if (!match || !match[0]) {\n          continue;\n        }\n\n        if (position < index) {\n          this.push([CATEGORY_TEXT, text.slice(position, index)], language, state);\n        }\n\n        if (action === '@back') {\n          position = index;\n          break main;\n        }\n\n        var offset = this.handle(match, language, tokenizer, state);\n        index += offset || 1;\n        position = index;\n\n        if (action === '@break') {\n          break main;\n        }\n\n        continue main;\n      }\n\n      index++;\n    }\n\n    if (position < index) {\n      this.push([CATEGORY_TEXT, text.slice(position)], language, state);\n    }\n\n    this.depth--;\n    return index;\n  }\n  /**\r\n   * Pushes the provided token to the lines array.\r\n   *\r\n   * @param token    - A token to push.\r\n   * @param language - A Language object.\r\n   * @param state    - A state name.\r\n   */\n  ;\n\n  _proto.push = function push(token, language, state) {\n    var depth = this.depth;\n    var category = token[0],\n        text = token[1];\n    var start = this.index;\n    var index = 0;\n    var from = 0;\n\n    while (index > -1 && !this.aborted) {\n      index = text.indexOf(LINE_BREAK, from);\n      var line = this.lines[this.index];\n      var empty = from === index && !line.length;\n      var code = empty ? LINE_BREAK : text.slice(from, index < 0 ? undefined : index);\n      var info = {\n        depth: depth,\n        language: language.id,\n        state: state\n      };\n\n      if (code) {\n        if (category !== CATEGORY_TEXT) {\n          info.head = index > -1 && !from;\n          info.tail = index < 0 && !!from;\n          info.split = index > -1 || !!from;\n          info.distance = this.index - start;\n        }\n\n        line.push([category === CATEGORY_TEXT && empty ? CATEGORY_LINEBREAK : category, code, info]);\n      }\n\n      if (index > -1) {\n        this.index++;\n        this.aborted = this.limit && this.index >= this.limit;\n\n        if (!this.aborted) {\n          from = index + 1;\n          this.lines[this.index] = [];\n        }\n      }\n    }\n  }\n  /**\r\n   * Handles the matched text.\r\n   *\r\n   * @param match     - A matched result.\r\n   * @param language  - A Language object.\r\n   * @param tokenizer - A tokenizer that has been matched with the text.\r\n   * @param state     - A state name.\r\n   *\r\n   * @return An index of the text where the handling ends.\r\n   */\n  ;\n\n  _proto.handle = function handle(match, language, tokenizer, state) {\n    var category = tokenizer[0];\n\n    if (!category) {\n      return 0;\n    }\n\n    var text = match[0];\n\n    if (tokenizer[3] === '@debug') {\n      // eslint-disable-next-line\n      console.log(text, tokenizer);\n    }\n\n    if (startsWith(category, '@')) {\n      assert(language.use);\n      var lang = language.use[category.slice(1)];\n      assert(lang);\n      return this.parse(text, lang, lang.grammar.main, category);\n    }\n\n    if (startsWith(category, '#')) {\n      var tokenizers = language.grammar[category.slice(1)];\n      assert(tokenizers);\n\n      if (tokenizer[2] === '@rest') {\n        text = match.input.slice(match.index);\n      }\n\n      return this.parse(text, language, tokenizers, category);\n    }\n\n    this.push([category, text], language, state);\n    return text.length;\n  }\n  /**\r\n   * Tokenizes the text by the current language.\r\n   *\r\n   * @param text  - A text to tokenize.\r\n   * @param limit - Optional. Limits the number of lines.\r\n   *\r\n   * @return An array with tokens.\r\n   */\n  ;\n\n  _proto.tokenize = function tokenize(text, limit) {\n    this.lines = [[]];\n    this.index = 0;\n    this.depth = -1;\n    this.limit = limit || 0;\n    this.aborted = false;\n    this.parse(text, this.language, this.language.grammar.main, '#main');\n    return this.lines;\n  };\n\n  return Lexer;\n}();\n\nvar ROOT = PROJECT_CODE;\nvar CONTAINER = PROJECT_CODE_SHORT + \"__container\";\nvar BODY = PROJECT_CODE_SHORT + \"__body\";\nvar CODE = PROJECT_CODE_SHORT + \"__code\";\nvar LINE = PROJECT_CODE_SHORT + \"__line\";\nvar TOKEN = PROJECT_CODE_SHORT + \"__token\";\nvar ACTIVE = 'is-active';\n/**\r\n * The class for providing the very simple event bus.\r\n *\r\n * @private\r\n * @since 0.0.1\r\n */\n\nvar EventBus = /*#__PURE__*/function () {\n  function EventBus() {\n    /**\r\n     * Holds handlers.\r\n     */\n    this.handlers = {};\n  }\n  /**\r\n   * Attaches a handler.\r\n   *\r\n   * @param event    - An event name.\r\n   * @param callback - A callback function to register.\r\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\r\n   */\n\n\n  var _proto2 = EventBus.prototype;\n\n  _proto2.on = function on(event, callback, priority) {\n    if (priority === void 0) {\n      priority = 10;\n    }\n\n    var handlers = this.handlers[event] = this.handlers[event] || [];\n    handlers.push({\n      callback: callback,\n      priority: priority\n    });\n    handlers.sort(function (handler1, handler2) {\n      return handler1.priority - handler2.priority;\n    });\n  }\n  /**\r\n   * Emits an event.\r\n   *\r\n   * @param event - An event name.\r\n   * @param args  - Optional. Any number of arguments to pass to callbacks.\r\n   */\n  ;\n\n  _proto2.emit = function emit(event) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    (this.handlers[event] || []).forEach(function (handler) {\n      handler.callback.apply(handler, args);\n    });\n  }\n  /**\r\n   * Destroys the event bus.\r\n   */\n  ;\n\n  _proto2.destroy = function destroy() {\n    this.handlers = {};\n  };\n\n  return EventBus;\n}();\n/**\r\n * Stores all Component functions.\r\n */\n\n\nvar Components = {};\n/**\r\n * The class for highlighting code via provided tokens.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar Renderer = /*#__PURE__*/function () {\n  /**\r\n   * The Renderer constructor.\r\n   *\r\n   * @param lines   - Lines with tokens to render.\r\n   * @param info    - The language info object.\r\n   * @param root    - Optional. A root element to highlight.\r\n   * @param options - Options.\r\n   */\n  function Renderer(lines, info, root, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    /**\r\n     * Holds lines with tokens.\r\n     */\n    this.lines = [];\n    /**\r\n     * Holds the EventBus instance.\r\n     */\n\n    this.event = new EventBus();\n    this.lines = lines;\n    this.info = info;\n    this.root = root;\n    this.options = options;\n    this.init();\n  }\n  /**\r\n   * Adds components.\r\n   *\r\n   * @param components - An object literal with Component functions.\r\n   */\n\n\n  Renderer.compose = function compose(components) {\n    forOwn(components, function (Component, name) {\n      Components[name] = Component;\n    });\n  }\n  /**\r\n   * Initializes the instance.\r\n   */\n  ;\n\n  var _proto3 = Renderer.prototype;\n\n  _proto3.init = function init() {\n    var _this2 = this;\n\n    var lines = this.lines;\n\n    if (lines.length) {\n      var tokens = lines[lines.length - 1];\n\n      if (!tokens.length || tokens.length === 1 && !tokens[0][1].trim()) {\n        // Removes the last empty line.\n        lines.pop();\n      }\n    }\n\n    forOwn(Components, function (Component) {\n      Component(_this2);\n    });\n    this.event.emit('mounted');\n  }\n  /**\r\n   * Renders lines as HTML.\r\n   *\r\n   * @param append - A function to add fragments to the HTML string.\r\n   *\r\n   * @return A rendered HTML string.\r\n   */\n  ;\n\n  _proto3.renderLines = function renderLines(append) {\n    var event = this.event;\n    var tagName = this.options.span ? 'span' : 'code';\n\n    for (var i = 0; i < this.lines.length; i++) {\n      var tokens = this.lines[i];\n      var classes = [LINE];\n      event.emit('line:open', append, classes, i);\n      append(tag(classes));\n\n      var _loop = function _loop(j) {\n        var token = tokens[j];\n        var categories = token[0].split('.');\n        var className = PROJECT_CODE_SHORT + \"__\" + categories[0];\n        var modifiers = categories.slice(1).map(function (sub) {\n          return className + \"--\" + sub;\n        });\n        var classes = [TOKEN, className].concat(modifiers);\n        event.emit('token', token, classes);\n        append(\"\" + tag(classes, tagName) + escapeHtml(token[1]) + \"</\" + tagName + \">\");\n      };\n\n      for (var j = 0; j < tokens.length; j++) {\n        _loop(j);\n      }\n\n      append('</div>');\n      event.emit('line:closed', append, i);\n    }\n  }\n  /**\r\n   * Returns all lines and wrapper elements.\r\n   *\r\n   * @param pre - Whether to wrap elements by `pre` or not.\r\n   *\r\n   * @return An HTML string.\r\n   */\n  ;\n\n  _proto3.html = function html(pre) {\n    var event = this.event;\n    var closeTag = '</div>';\n    var html = '';\n\n    var append = function append(fragment) {\n      html += fragment;\n    };\n\n    if (pre) {\n      html += tag([ROOT + \" \" + ROOT + \"--\" + this.info.id], 'pre');\n    }\n\n    var containerClasses = [CONTAINER];\n    event.emit('open', append, containerClasses);\n    html += tag(containerClasses);\n    var bodyClasses = [\"\" + BODY + (this.options.wrap ? \" \" + BODY + \"--wrap\" : '')];\n    event.emit('body:open', append, bodyClasses);\n    html += tag(bodyClasses);\n    event.emit('code:open', append);\n    html += tag([CODE]);\n    this.renderLines(append);\n    html += closeTag; // code\n\n    event.emit('body:close', append);\n    html += closeTag; // body\n\n    event.emit('close', append);\n    html += closeTag; // container\n\n    event.emit('closed', append);\n\n    if (pre) {\n      html += \"</pre>\";\n    }\n\n    return html;\n  }\n  /**\r\n   * Destroys the instance.\r\n   */\n  ;\n\n  _proto3.destroy = function destroy() {\n    this.event.emit('destroy');\n    this.event.destroy();\n  };\n\n  return Renderer;\n}();\n/**\r\n * The data attribute name for a language.\r\n *\r\n * @since 0.0.1\r\n */\n\n\nvar ATTRIBUTE_LANGUAGE = \"data-\" + PROJECT_CODE_SHORT + \"-language\";\nvar REGEXP_NUMBER = /[+-]?(\\d+\\.?\\d*|\\d*\\.?\\d+)([eE][+-]?\\d+)?/;\nvar REGEXP_BOOLEAN = /\\b(?:true|false)\\b/;\nvar REGEXP_BRACKET = /[[\\]{}()]/;\nvar REGEXP_SPACE = /[ \\t]+/;\nvar REGEXP_QUOTE = /'(?:\\\\'|.)*?'/;\nvar REGEXP_DOUBLE_QUOTE = /\"(?:\\\\\"|.)*?\"/;\nvar REGEXP_MULTILINE_COMMENT = /\\/\\*[\\s\\S]*?(\\*\\/|$)/;\nvar REGEXP_SLASH_COMMENT = /\\/\\/.*/;\nvar REGEXP_GENERAL_KEYWORDS = /\\b(?:break|catch|class|continue|do|else|extends|finally|for|function|if|implements|in|instanceof|interface|new|null|return|throw|try|while)\\b/;\n/**\r\n * Returns the CSS language definition.\r\n *\r\n * @return A Language object.\r\n */\n\nfunction css() {\n  return {\n    id: 'css',\n    name: 'CSS',\n    grammar: {\n      main: [['#common'], // An atrule without a block\n      ['#findSingleAtrule'], // Blocks including atrules\n      ['#findBlock']],\n      findBlock: [['#block', /(?:(?![\\t\\n\\r ;\\{\\}])[\\s\\S])(?:(?![;\\{\\}])[\\s\\S])*\\{[\\s\\S]*?\\}/, '@rest']],\n      findSingleAtrule: [['#atrule', /@(?:(?![;\\{])[\\s\\S])+?;/]],\n      // Finds atrules before { and ;\n      findAtrule: [['#atrule', /@(?:(?![;\\{])[\\s\\S])*?(?=[;\\{])/]],\n      // May not start with digits\n      findSelector: [['#selector', /(?:(?![\\t\\n\\r ;\\{\\}])[\\s\\S])[\\s\\S]*?(?=\\{)/]],\n      common: [[CATEGORY_STRING, /([\"'])[\\s\\S]*?(?:(?!\\\\)[\\s\\S])\\1/], [CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT], [CATEGORY_SPACE, REGEXP_SPACE]],\n      block: [['#inner', /{/, '@rest'], [CATEGORY_BRACKET, /}/, '@break'], ['#findAtrule'], ['#findSelector'], [CATEGORY_SPACE, REGEXP_SPACE]],\n      inner: [[CATEGORY_BRACKET, /{/], ['#common'], ['#findBlock'], ['#props'], ['#findAtrule'], ['', /}/, '@back']],\n      atrule: [['#common'], ['#url', /\\burl\\(/, '@rest'], [CATEGORY_SPACE, REGEXP_SPACE], [CATEGORY_ATRULE, /[^\\s();]+/], [CATEGORY_DELIMITER, /[:;,]/], ['#paren', /\\(/, '@rest']],\n      paren: [[CATEGORY_BRACKET, /^\\(/], ['#common'], ['#paren', /\\(/, '@rest'], [CATEGORY_BRACKET, /\\)/, '@break'], ['#props']],\n      selector: [['#common'], [CATEGORY_OPERATOR, /[>+~]/], [CATEGORY_BRACKET, /[[\\]()]/], [CATEGORY_DELIMITER, /=/], [CATEGORY_SELECTOR, /::?\\S+/], [CATEGORY_SELECTOR, /[\\W\\d]\\S+/], [CATEGORY_TAG, /\\b[a-z]+|\\*/i], [CATEGORY_SELECTOR, /\\S+/]],\n      url: [['#common'], [CATEGORY_FUNCTION, /^url/], [CATEGORY_BRACKET, /\\(/], [CATEGORY_STRING, /[^)]+/], [CATEGORY_BRACKET, /\\)/, '@break']],\n      props: [[CATEGORY_PROPERTY, /[a-z0-9-_\\xA0-\\uFFFF]+(?=:)/i], ['#url', /\\burl\\(/, '@rest'], [CATEGORY_FUNCTION, /\\b[\\w-]+(?=\\()\\b/], [CATEGORY_KEYWORD, /!important|\\b(?:initial|inherit|unset)/], [CATEGORY_PROPERTY, /[a-z0-9-]+(?=:)/], [CATEGORY_NUMBER, /#([0-9a-f]{6}|[0-9a-f]{3})/i], [CATEGORY_NUMBER, /\\bU\\+[0-9a-f?-]+/i], [CATEGORY_NUMBER, /[+-]?(\\d+\\.?\\d*|\\d*\\.?\\d+)/], [CATEGORY_DELIMITER, /[:;,]/], ['#paren', /\\(/, '@rest'], [CATEGORY_BRACKET, /[[\\])]/], [CATEGORY_SPACE, REGEXP_SPACE]]\n    }\n  };\n}\n/**\r\n * Returns the JavaScript language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction javascript() {\n  return {\n    id: 'javascript',\n    name: 'JavaScript',\n    alias: ['js'],\n    source: {\n      func: /[_$a-z\\xA0-\\uFFFF][_$a-z0-9\\xA0-\\uFFFF]*/\n    },\n    grammar: {\n      main: [[CATEGORY_STRING, REGEXP_QUOTE], [CATEGORY_STRING, REGEXP_DOUBLE_QUOTE], ['#backtick', /`/, '@rest'], [CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT], [CATEGORY_COMMENT, REGEXP_SLASH_COMMENT], [CATEGORY_REGEXP, /\\/(\\[.*?]|\\\\\\/|.)+?\\/[gimsuy]*/], [CATEGORY_KEYWORD, REGEXP_GENERAL_KEYWORDS], [CATEGORY_KEYWORD, /\\b(?:as|async|await|case|catch|const|debugger|default|delete|enum|export|from|import|let|package|private|protected|public|super|switch|static|this|typeof|undefined|var|void|with|yield)\\b/], [CATEGORY_KEYWORD, /\\b((get|set)(?=\\s+%func))/i], [CATEGORY_CLASS, /\\b[A-Z][\\w$]*\\b/], [CATEGORY_FUNCTION, /%func(?=\\s*\\()/i], [CATEGORY_BOOLEAN, REGEXP_BOOLEAN], [CATEGORY_DECORATOR, /@[^\\s(@]+/], [CATEGORY_IDENTIFIER, /\\b[a-z_$][\\w$]*\\b/], [CATEGORY_NUMBER, REGEXP_NUMBER], [CATEGORY_OPERATOR, /=>/], [CATEGORY_OPERATOR, /\\+[+=]?|-[-=]?|\\*\\*?=?|[/%^]=?|&&?=?|\\|\\|?=?|\\?\\??=?|<<?=?|>>>=?|>>?=?|[!=]=?=?|[~:^]/], [CATEGORY_BRACKET, REGEXP_BRACKET], [CATEGORY_DELIMITER, /[;.,]+/], [CATEGORY_SPACE, REGEXP_SPACE]],\n      backtick: [[CATEGORY_STRING, /^`/], [CATEGORY_STRING, /(\\$[^{]|\\\\[$`]|[^`$])+/], ['#expression', /\\${/, '@rest'], [CATEGORY_STRING, /`/, '@break']],\n      expression: [[CATEGORY_DELIMITER, /^\\${/], [CATEGORY_DELIMITER, /}/, '@break'], ['#main']]\n    }\n  };\n}\n/**\r\n * Returns the HTML language definition.\r\n *\r\n * @param options - Optional. Options.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction html(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var script = (options.script || javascript)();\n  var style = (options.style || css)();\n  var cdata = [CATEGORY_CDATA, /<!\\[CDATA\\[[\\s\\S]*\\]\\]>/i]; // Embedded scripts or styles may contain CDATA sections.\n\n  script.grammar.main.unshift(cdata);\n  style.grammar.main.unshift(cdata);\n  return {\n    id: 'html',\n    alias: ['markup'],\n    name: 'HTML',\n    use: {\n      script: script,\n      style: style\n    },\n    grammar: {\n      main: [[CATEGORY_COMMENT, /<!\\x2D\\x2D[\\s\\S]*?\\x2D\\x2D>/], [CATEGORY_PROLOG, /<!DOCTYPE[\\s\\S]*?>/i], cdata, ['#script', /<script[\\s\\S]*?>[\\s\\S]*?<\\/script>/], ['#style', /<style[\\s\\S]*?>[\\s\\S]*?<\\/style>/], ['#tag', /<[\\s\\S]*?>/], [CATEGORY_ENTITY, /&[\\da-z]+;|&#\\d+;/i], [CATEGORY_SPACE, REGEXP_SPACE]],\n      script: [['#tag', /^<script[\\s\\S]*?>/], cdata, ['@script', /[\\s\\S]+(?=<\\/script>)/], ['#tag', /<\\/script>/]],\n      style: [['#tag', /^<style[\\s\\S]*?>/], ['@style', /[\\s\\S]+(?=<\\/style>)/], ['#tag', /<\\/style>/]],\n      tag: [['#closeTag', /<\\/.+>/], ['#tagContent']],\n      closeTag: [[CATEGORY_TAG_CLOSE, /[^\\s/<>\"'=]+/], ['#tagContent']],\n      tagContent: [['#attr', /[\\t\\n\\r ]+[\\s\\S]+(?=[\\t\\n\\r \\/>])/], [CATEGORY_TAG, /[^\\s/<>\"'=]+/], [CATEGORY_BRACKET, /[<>]/], [CATEGORY_DELIMITER, /[/]/]],\n      attr: [[CATEGORY_SPACE, REGEXP_SPACE], [CATEGORY_VALUE, /(['\"])(\\\\\\1|.)*?\\1/], [CATEGORY_DELIMITER, /[/=]/], [CATEGORY_ATTRIBUTE, /[^\\s/>\"'=]+/]]\n    }\n  };\n}\n/**\r\n * Returns the JSON language definition.\r\n *\r\n * @link https://www.json.org/json-en.html\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction json() {\n  return {\n    id: 'json',\n    name: 'JSON',\n    grammar: {\n      main: [[CATEGORY_PROPERTY, /\".*?[^\\\\]\"(?=:)/], [CATEGORY_STRING, REGEXP_DOUBLE_QUOTE], [CATEGORY_KEYWORD, /\\bnull\\b/], [CATEGORY_NUMBER, /[+-]?(\\d+\\.?\\d*)([eE][+-]?\\d+)?/], [CATEGORY_BRACKET, /[{}[\\]]/], [CATEGORY_BOOLEAN, REGEXP_BOOLEAN], [CATEGORY_OPERATOR, /:/], [CATEGORY_DELIMITER, /,/], [CATEGORY_SPACE, REGEXP_SPACE]]\n    }\n  };\n}\n/**\r\n * Returns the JSX language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction jsx(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var language = assign((options.base || javascript)(), {\n    id: 'jsx',\n    name: 'JSX',\n    alias: ['react']\n  });\n  var grammar = language.grammar;\n  before(grammar.main, CATEGORY_CLASS, [['#findPairedTag'], ['#findSelfClosedTag']]);\n  assign(grammar, {\n    // This doesn't pick correct paired tags if nested, but they are incrementally searched later.\n    findPairedTag: [['#pairedTag', /(?:<[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*?([0-9A-Z_a-z]+)[\\s\\S]*?>[\\s\\S]*?<\\/\\1>)|<[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*?>[\\s\\S]*?<\\/>/, '@rest']],\n    // Should not match the closing delimiter inside `{}`, `''` and `\"\"`.\n    findSelfClosedTag: [['#selfClosedTag', /<(?:\\{[\\s\\S]*?\\}|([\"'])[\\s\\S]*?\\1|(?:(?!>)[\\s\\S]))+?\\/>/]],\n    findBracket: [['#code', /{/, '@rest']],\n    pairedTag: [['#openTag', /^</, '@rest'], ['#findBracket'], ['#findPairedTag'], ['#findSelfClosedTag'], ['#tagName', /<\\/([\\w][^\\s]*?)?>/, '@break'], [CATEGORY_SPACE, REGEXP_SPACE]],\n    code: [[CATEGORY_BRACKET, /^{/], [CATEGORY_BRACKET, /}/, '@break'], ['#findBracket'], ['#main']],\n    selfClosedTag: [['#openTag', /^</, '@rest']],\n    openTag: [['#tagName', /<\\s*[^\\s/>\"'=]*/], ['#findBracket'], [CATEGORY_ATTRIBUTE, /[^\\s/>\"'=]+/], [CATEGORY_VALUE, /(['\"])(\\\\\\1|.)*?\\1/], [CATEGORY_SPACE, REGEXP_SPACE], [CATEGORY_DELIMITER, /[/=]/], [CATEGORY_BRACKET, />/, '@break']],\n    tagName: [[CATEGORY_BRACKET, /[<>]/], [CATEGORY_SPACE, REGEXP_SPACE], [CATEGORY_DELIMITER, /\\//], [CATEGORY_CLASS, /[A-Z][\\w$-]*/], [CATEGORY_TAG, /[^\\s/>\"'=]+/]]\n  });\n  return language;\n}\n/**\r\n * Returns the None language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction none() {\n  return {\n    id: 'none',\n    name: '',\n    grammar: {\n      main: []\n    }\n  };\n}\n/**\r\n * Returns the SCSS language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction scss() {\n  var language = assign(css(), {\n    id: 'scss',\n    name: 'SCSS'\n  });\n  var grammar = language.grammar;\n  assign(grammar, {\n    findBlock: [\n    /**\r\n     * Include: div {}, .class {}, #id {}, * {}, *{}, #{ $variable } {}, .something__#{ $variable } {}\r\n     * Exclude: #{ variable }: value\r\n     */\n    ['#block', /([\\*-_a-z]|#\\{(?:(?!;)[\\s\\S])*?\\}|((#\\{(?:(?!;)[\\s\\S])*?\\}|(?:(?![\\t-\\r ;\\{\\}\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF])[\\s\\S]))(#\\{(?:(?!;)[\\s\\S])*?\\}|(?:(?![#;\\{\\}])[\\s\\S])|#(?:(?!\\{)[\\s\\S]))+?))(?!#)\\{[\\s\\S]*?\\}/i, '@rest']],\n    // May contain #{} interpolation\n    findSingleAtrule: [['#atrule', /@(#\\{|(?:(?![;\\{])[\\s\\S]))+?;/]],\n    findAtrule: [['#atrule', /@(#\\{|(?:(?![;\\{])[\\s\\S]))*?(?=[;\\{])/]],\n    // May contain #{} interpolation\n    findSelector: [['#selector', /(?:(?!;)[\\s\\S])*?(?:(?!#)[\\s\\S])(?=\\{)/, '']],\n    findInterp: [['#interp', /#{/, '@rest']],\n    common: [['#string'], [CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT], [CATEGORY_COMMENT, REGEXP_SLASH_COMMENT], [CATEGORY_DELIMITER, /;/], [CATEGORY_SPACE, REGEXP_SPACE]],\n    string: [['#singleQuote', /'/, '@rest'], ['#doubleQuote', /\"/, '@rest']],\n    singleQuote: [[CATEGORY_STRING, /^'/], ['#findInterp'], [CATEGORY_STRING, /(\\\\'|#[^{]|[^'#])+/], [CATEGORY_STRING, /'/, '@break']],\n    doubleQuote: [[CATEGORY_STRING, /^\"/], ['#findInterp'], [CATEGORY_STRING, /(\\\\\"|#[^{]|[^\"#])+/], [CATEGORY_STRING, /\"/, '@break']],\n    selector: [['#common'], ['#findInterp'], [CATEGORY_OPERATOR, /[>+~]/], [CATEGORY_BRACKET, /[[\\]()]/], [CATEGORY_DELIMITER, /=/], [CATEGORY_SELECTOR, /::?\\S+(?=#{)/], [CATEGORY_SELECTOR, /[\\W\\d]\\S+(?=#{)/], [CATEGORY_TAG, /\\b[a-zA-Z]+\\b|\\*/], [CATEGORY_SELECTOR, /([^#\\s]|#[^{\\s])+/]],\n    url: [['#common'], ['#findInterp'], [CATEGORY_FUNCTION, /^url/], [CATEGORY_BRACKET, /\\(/], [CATEGORY_STRING, /[^)]+(?=#{)/], [CATEGORY_STRING, /[^)]+/], [CATEGORY_BRACKET, /\\)/, '@break']],\n    interp: [[CATEGORY_DELIMITER, /#{/], [CATEGORY_DELIMITER, /}/, '@break'], ['#common'], ['#props']]\n  });\n  grammar.inner.unshift(['#findInterp']);\n  before(grammar.atrule, '#url', [['#findInterp']]);\n  before(grammar.props, CATEGORY_PROPERTY, [['#findInterp'], [CATEGORY_VARIABLE, /\\$[\\w-_]+/]]);\n  return language;\n}\n/**\r\n * Returns the XML language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction xml() {\n  var language = assign(html(), {\n    id: 'xml',\n    name: 'XML',\n    alias: []\n  });\n  language.grammar.main.unshift([CATEGORY_PROLOG, /<\\?[\\s\\S]*?\\?>/]);\n  return language;\n}\n/**\r\n * Returns the XML language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction svg() {\n  return assign(xml(), {\n    id: 'svg',\n    name: 'SVG',\n    alias: []\n  });\n}\n/**\r\n * Returns the Typescript language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction typescript() {\n  var language = assign(javascript(), {\n    id: 'typescript',\n    name: 'TypeScript',\n    alias: ['ts']\n  });\n  var grammar = language.grammar;\n  var main = grammar.main;\n  before(main, CATEGORY_KEYWORD, [[CATEGORY_KEYWORD, /\\b(?:declare|keyof|namespace|readonly|type|string|number|boolean|bigint|symbol|object|any|never|unknown|infer|is)\\b/]]);\n  before(main, CATEGORY_FUNCTION, [['#functions', /([_$a-z\\xA0-\\uFFFF][_$a-z0-9\\xA0-\\uFFFF]*)?(?:<[^>]+?>)?\\s*?\\(/]]);\n  assign(grammar, {\n    functions: [[CATEGORY_FUNCTION, /^[\\w$]+/]].concat(main.filter(function (tokenizer) {\n      return tokenizer[0] !== '#functions';\n    }))\n  });\n  return language;\n}\n/**\r\n * Returns the TSX language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction tsx() {\n  return assign(jsx({\n    base: typescript\n  }), {\n    id: 'tsx',\n    name: 'TSX'\n  });\n}\n/**\r\n * Returns the VUE language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction vue(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var language = assign(html(options), {\n    id: 'vue',\n    name: 'Vue',\n    alias: []\n  }); // Vue uses Mustache syntax for writing code inside tags.\n\n  language.grammar.main.push(['@script', /{{[\\s\\S]*?}}/]);\n  return language;\n} // export { common }     from './common/common';\n\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  css: css,\n  html: html,\n  javascript: javascript,\n  json: json,\n  jsx: jsx,\n  none: none,\n  scss: scss,\n  svg: svg,\n  tsx: tsx,\n  typescript: typescript,\n  vue: vue,\n  xml: xml\n});\n/**\r\n * Stores all Lexer instances.\r\n */\n\nvar lexers = {};\n/**\r\n * The class that tokenizes code for syntax highlighting.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar RyuseiLight = /*#__PURE__*/function () {\n  /**\r\n   * The RyuseiLight constructor.\r\n   *\r\n   * @param options  - Optional. Options.\r\n   */\n  function RyuseiLight(options) {\n    /**\r\n     * Holds all renderers.\r\n     */\n    this.renderers = [];\n    this.options = assign({}, options);\n  }\n  /**\r\n   * Registers languages.\r\n   *\r\n   * @param languages - A Language object or objects.\r\n   */\n\n\n  RyuseiLight.register = function register(languages) {\n    toArray(languages).forEach(function (language) {\n      var id = language.id;\n\n      if (id && !lexers[id]) {\n        (language.alias || []).concat(id).forEach(function (id) {\n          lexers[id] = new Lexer(language);\n        });\n      }\n    });\n  }\n  /**\r\n   * Tokenizes the provided string.\r\n   *\r\n   * @param code     - A string to tokenize.\r\n   * @param language - A language ID.\r\n   * @param limit    - Optional. Limits the (ideal) number of lines.\r\n   *\r\n   * @return An array of arrays with tokens as [ string, string ].\r\n   */\n  ;\n\n  RyuseiLight.tokenize = function tokenize(code, language, limit) {\n    return RyuseiLight.getLexer(language).tokenize(code, limit);\n  }\n  /**\r\n   * Checks if the given language has been already registered or not.\r\n   *\r\n   * @param language - A language to check.\r\n   */\n  ;\n\n  RyuseiLight.has = function has(language) {\n    return !!lexers[language];\n  }\n  /**\r\n   * Returns a registered Lexer instance.\r\n   * If it's not found, the `none` lexer will be returned.\r\n   *\r\n   * @param language - A language name.\r\n   */\n  ;\n\n  RyuseiLight.getLexer = function getLexer(language) {\n    if (!lexers.none) {\n      RyuseiLight.register(none());\n    }\n\n    return lexers[language] || lexers.none;\n  }\n  /**\r\n   * Returns a new Renderer instance.\r\n   *\r\n   * @param code    - A code to highlight.\r\n   * @param elm     - Optional. An element to highlight.\r\n   * @param options - Optional. Options.\r\n   */\n  ;\n\n  var _proto4 = RyuseiLight.prototype;\n\n  _proto4.getRenderer = function getRenderer(code, elm, options) {\n    options = assign({}, this.options, options);\n    var language = options.language;\n    var _RyuseiLight$getLexer = RyuseiLight.getLexer(language).language,\n        name = _RyuseiLight$getLexer.name,\n        id = _RyuseiLight$getLexer.id;\n    return new Renderer(RyuseiLight.tokenize(code, language), {\n      name: name,\n      id: id\n    }, elm, options);\n  }\n  /**\r\n   * Applies the highlighter to elements that matches the selector or the provided element.\r\n   *\r\n   * @param target  - A selector or an element.\r\n   * @param options - Optional. Options.\r\n   */\n  ;\n\n  _proto4.apply = function apply(target, options) {\n    var elms = isString(target) ? document.querySelectorAll(target) : [target];\n\n    for (var i = 0; i < elms.length; i++) {\n      var elm = elms[i];\n\n      if (isHTMLElement(elm)) {\n        var elmOptions = assign({}, options, {\n          language: attr(elm, ATTRIBUTE_LANGUAGE) || undefined\n        });\n        var renderer = this.getRenderer(text(elm), elm, elmOptions);\n        var isPre = elm instanceof HTMLPreElement;\n\n        if (isPre) {\n          addClass$1(elm, [ROOT, ROOT + \"--\" + renderer.info.id]);\n        }\n\n        elm.innerHTML = renderer.html(!isPre);\n        renderer.event.emit('applied', elm);\n        this.renderers.push(renderer);\n      }\n    }\n  }\n  /**\r\n   * Returns highlighted HTML by tokenizing the provided code.\r\n   *\r\n   * @param code    - Code to highlight.\r\n   * @param options - Optional. Options.\r\n   *\r\n   * @return Highlighted HTML string.\r\n   */\n  ;\n\n  _proto4.html = function html(code, options) {\n    assert(isString(code), 'Invalid code.');\n    return this.getRenderer(code, null, options).html(true);\n  }\n  /**\r\n   * Destroys the instance.\r\n   */\n  ;\n\n  _proto4.destroy = function destroy() {\n    this.renderers.forEach(function (renderer) {\n      renderer.destroy();\n    });\n  };\n\n  return RyuseiLight;\n}();\n/**\r\n * Adds components.\r\n *\r\n * @param components - An object literal with Component functions.\r\n */\n\n\nRyuseiLight.compose = Renderer.compose;\n/**\r\n * The data attribute name for active lines.\r\n * The value must be an array in JSON format, such as \"[ 2, [ 5, 10 ] ]\"\r\n *\r\n * @private\r\n * @since 0.0.1\r\n */\n\nvar ATTRIBUTE_ACTIVE_LINES = \"data-\" + PROJECT_CODE_SHORT + \"-active-lines\";\n/**\r\n * The component for highlighting lines.\r\n *\r\n * @since 0.0.1\r\n */\n\nfunction ActiveLines(_ref) {\n  var event = _ref.event,\n      root = _ref.root,\n      options = _ref.options;\n  var lines = root && parseData(root) || options.activeLines;\n\n  if (isArray(lines)) {\n    var activeLines = normalize(lines);\n    event.on('gutter:row:open', function (html, classes, index) {\n      if (activeLines[index]) {\n        classes.push(activeLines[index]);\n      }\n    });\n    event.on('line:open', function (html, classes, index) {\n      if (activeLines[index]) {\n        classes.push(activeLines[index]);\n      }\n    });\n  }\n}\n/**\r\n * Attempts to get definition of active lines from a data attribute.\r\n *\r\n * @param elm - A root element.\r\n *\r\n * @return An array with line numbers if available, or otherwise `undefined`.\r\n */\n\n\nfunction parseData(elm) {\n  var data = attr(elm, ATTRIBUTE_ACTIVE_LINES);\n\n  if (data) {\n    try {\n      return JSON.parse(data);\n    } catch (e) {\n      error(e.message);\n    }\n  }\n}\n/**\r\n * Normalizes the definition of lines to activate.\r\n *\r\n * @param lines - An array with line numbers.\r\n *\r\n * @return An array with normalized line numbers.\r\n */\n\n\nfunction normalize(lines) {\n  var numbers = [];\n  lines.forEach(function (range) {\n    if (!isArray(range)) {\n      range = [range, range];\n    }\n\n    var start = (+range[0] || 1) - 1;\n    var end = (+range[1] || 1) - 1;\n\n    for (var i = start; i <= end; i++) {\n      numbers[i] = ACTIVE;\n    }\n  });\n  return numbers;\n}\n/**\r\n * The data attribute name for a caption.\r\n *\r\n * @since 0.0.22\r\n */\n\n\nvar ATTRIBUTE_CAPTION = \"data-\" + PROJECT_CODE_SHORT + \"-caption\";\n/**\r\n * The component for wrapping a code snipped by a figure tag and appending a figcaption.\r\n *\r\n * @since 0.0.22\r\n */\n\nfunction Caption(_ref2) {\n  var event = _ref2.event,\n      root = _ref2.root,\n      options = _ref2.options;\n  var attrCaption = root && attr(root, ATTRIBUTE_CAPTION);\n\n  if (!attrCaption && !options.caption) {\n    return;\n  }\n\n  var captionOptions = options.caption;\n\n  var _assign = assign({}, isObject(captionOptions) ? captionOptions : null),\n      position = _assign.position,\n      html = _assign.html;\n\n  var caption = attrCaption || html || (isString(captionOptions) ? captionOptions : '');\n\n  if (caption) {\n    var bottom = position === 'bottom';\n    event.on('open', function (append) {\n      append(\"<figure class=\\\"\" + PROJECT_CODE_SHORT + \"__figure\\\">\");\n\n      if (!bottom) {\n        appendCaption(append, caption);\n      }\n    });\n    event.on('closed', function (append) {\n      if (bottom) {\n        appendCaption(append, caption, true);\n      }\n\n      append('</figure>');\n    });\n  }\n}\n/**\r\n * Appends a figcaption element with a provided caption.\r\n *\r\n * @param append  - The append function.\r\n * @param caption - A caption.\r\n * @param bottom  - Optional. Set `true` for a bottom caption.\r\n */\n\n\nfunction appendCaption(append, caption, bottom) {\n  var className = PROJECT_CODE_SHORT + \"__figcaption\";\n  append(\"<figcaption class=\\\"\" + className + \" \" + (className + (bottom ? '--bottom' : '--top')) + \"\\\">\");\n  append(\"<span>\" + caption + \"</span>\");\n  append(\"</figcaption>\");\n}\n/**\r\n * Default options for the Copy component.\r\n *\r\n * @private\r\n *\r\n * @since 0.0.1\r\n */\n\n\nvar DEFAULT_OPTIONS$1 = {\n  html: 'Copy',\n  activeHtml: 'Done',\n  duration: 1000,\n  ariaLabel: 'Copy code to clipboard',\n  position: 'topRight'\n};\n/**\r\n * The component for creating a copy button and handling click.\r\n *\r\n * @since 0.0.1\r\n */\n\nfunction Copy(_ref3) {\n  var lines = _ref3.lines,\n      event = _ref3.event,\n      options = _ref3.options;\n\n  if (options.copy) {\n    var copyOptions = assign({}, DEFAULT_OPTIONS$1, isObject(options.copy) ? options.copy : {});\n    var buttonClass = PROJECT_CODE_SHORT + \"__copy\";\n    var labelClass = PROJECT_CODE_SHORT + \"__button__label\";\n    options.tools = copyOptions.position;\n    event.on(\"tools:\" + copyOptions.position, function (append) {\n      append(\"<button type=\\\"button\\\" class=\\\"rl__button \" + buttonClass + \"\\\" aria-label=\\\"\" + copyOptions.ariaLabel + \"\\\">\");\n      append(\"<span class=\\\"\" + labelClass + \" \" + labelClass + \"--inactive\\\">\" + copyOptions.html + \"</span>\");\n      append(\"<span class=\\\"\" + labelClass + \" \" + labelClass + \"--active\\\">\" + copyOptions.activeHtml + \"</span>\");\n      append(\"</button>\");\n    });\n    event.on('applied', function (root) {\n      var button = query(\".\" + buttonClass, root);\n      var code = lines.map(function (line) {\n        return line.map(function (token) {\n          return token[1];\n        }).join('');\n      }).join(LINE_BREAK);\n\n      if (button) {\n        var onClick = function onClick() {\n          copy(code, button, copyOptions.duration);\n        };\n\n        button.addEventListener('click', onClick);\n        event.on('destroy', function () {\n          button.removeEventListener('click', onClick);\n        });\n      }\n    });\n  }\n}\n/**\r\n * Attempts to copy the provided code by the Clipboard API.\r\n *\r\n * @param code     - A code to copy.\r\n * @param button   - A button element.\r\n * @param duration - Duration for the button activation.\r\n */\n\n\nfunction copy(code, button, duration) {\n  var onSuccess = function onSuccess() {\n    if (duration) {\n      toggleClass(button, duration);\n    }\n  };\n\n  if (navigator.clipboard) {\n    navigator.clipboard.writeText(code).then(onSuccess)[\"catch\"](function () {\n      return execCopy(code, onSuccess);\n    });\n  } else {\n    execCopy(code, onSuccess);\n  }\n}\n/**\r\n * Attempts to copy the provided code by the `document.execCommand()` for old browsers.\r\n * Note that this method is deprecated.\r\n *\r\n * @param code      - Code to copy.\r\n * @param onSuccess - Called after the copy is done.\r\n */\n\n\nfunction execCopy(code, onSuccess) {\n  var textarea = create('textarea');\n  textarea.textContent = code;\n  styles(textarea, {\n    position: 'absolute',\n    left: '-99999px'\n  });\n  append(document.body, textarea);\n  textarea.focus();\n  textarea.select();\n  var failed;\n\n  try {\n    document.execCommand('copy');\n  } catch (e) {\n    alert('Failed to copy.');\n    failed = true;\n  }\n\n  document.body.removeChild(textarea);\n\n  if (!failed) {\n    onSuccess();\n  }\n}\n/**\r\n * Toggles the active class of the button.\r\n *\r\n * @param button   - A button element.\r\n * @param duration - Duration for the button activation.\r\n */\n\n\nfunction toggleClass(button, duration) {\n  addClass$1(button, ACTIVE);\n  var prop = '_rlTimer';\n\n  if (button[prop]) {\n    clearTimeout(button[prop]);\n  }\n\n  button[prop] = setTimeout(function () {\n    button.classList.remove(ACTIVE);\n  }, duration);\n}\n/**\r\n * The class name for added lines.\r\n *\r\n * @private\r\n * @since 0.0.17\r\n */\n\n\nvar CLASS_ADDED = 'is-added';\n/**\r\n * The class name for deleted lines.\r\n *\r\n * @private\r\n * @since 0.0.17\r\n */\n\nvar CLASS_DELETED = 'is-deleted';\n/**\r\n * The class name for deleted lines.\r\n *\r\n * @private\r\n * @since 0.0.17\r\n */\n\nvar CLASS_DIFF = PROJECT_CODE_SHORT + \"__diff\";\n/**\r\n * Default options for the Diff component.\r\n *\r\n * @since 0.0.17\r\n */\n\nvar DEFAULT_OPTIONS = {\n  addedSymbol: '+',\n  deletedSymbol: '-'\n};\n/**\r\n * The component for highlighting added/deleted lines.\r\n *\r\n * @since 0.0.17\r\n */\n\nfunction Diff(_ref4) {\n  var event = _ref4.event,\n      lines = _ref4.lines,\n      options = _ref4.options;\n\n  if (!options.diff) {\n    return;\n  }\n\n  options.gutter = true;\n  var diffOptions = assign({}, DEFAULT_OPTIONS, isObject(options.diff) ? options.diff : null);\n  var added = [];\n  var deleted = [];\n  lines.forEach(function (tokens, index) {\n    if (tokens.length) {\n      var _text = tokens[0][1];\n      var processed;\n\n      if (startsWith(_text, diffOptions.addedSymbol)) {\n        added.push(index);\n        processed = true;\n      } else if (startsWith(_text, diffOptions.deletedSymbol)) {\n        deleted.push(index);\n        processed = true;\n      }\n\n      if (processed) {\n        convertSymbols(diffOptions.removeSymbols, tokens);\n      }\n    }\n  });\n\n  if (!added.length && !deleted.length) {\n    return;\n  }\n\n  event.on('line:open', function (append, classes, i) {\n    addClass(added, deleted, i, classes);\n  });\n  event.on('gutter:row:open', function (append, classes, i) {\n    addClass(added, deleted, i, classes);\n  });\n  event.on('gutter:row:opened', function (append, i) {\n    var content = LINE_BREAK;\n\n    if (added.indexOf(i) > -1) {\n      content = diffOptions.addedSymbol;\n    } else if (deleted.indexOf(i) > -1) {\n      content = diffOptions.deletedSymbol;\n    }\n\n    append(\"<span class=\\\"\" + CLASS_DIFF + \"\\\">\" + content + \"</span>\");\n  }, 20);\n  event.on('lineNumber:open', function (append, classes, i, data) {\n    data.skip = deleted.indexOf(i) > -1;\n  });\n}\n/**\r\n * Adds a status class according to the added or deleted lines.\r\n *\r\n * @param added   - An array with added line indices.\r\n * @param deleted - An array with deleted line indices.\r\n * @param index   - A line index.\r\n * @param classes - An array with line classes.\r\n */\n\n\nfunction addClass(added, deleted, index, classes) {\n  if (added.indexOf(index) > -1) {\n    classes.push(CLASS_ADDED);\n  } else if (deleted.indexOf(index) > -1) {\n    classes.push(CLASS_DELETED);\n  }\n}\n/**\r\n * Converts +/- symbols to spaces or removes them.\r\n *\r\n * @param remove - Whether to remove symbols or not.\r\n * @param tokens - Target tokens.\r\n */\n\n\nfunction convertSymbols(remove, tokens) {\n  var _tokens$ = tokens[0],\n      category = _tokens$[0],\n      text = _tokens$[1];\n\n  if (remove) {\n    if (text.length === 1) {\n      tokens.shift();\n    } else {\n      tokens[0] = [category, text.slice(1)];\n    }\n  } else {\n    var spaceToken = [CATEGORY_SPACE, ' '];\n\n    if (text.length === 1) {\n      tokens[0] = spaceToken;\n    } else {\n      tokens[0] = [category, text.slice(1)];\n      tokens.unshift(spaceToken);\n    }\n  }\n}\n/**\r\n * The throttle duration in milliseconds for resizing gutter rows.\r\n *\r\n * @since 0.0.1\r\n */\n\n\nvar THROTTLE_DURATION = 100;\n/**\r\n * The class name for a gutter element.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar GUTTER_CLASS_NAME = PROJECT_CODE_SHORT + \"__gutter\";\n/**\r\n * The class name for row element in a gutter.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar GUTTER_ROW_CLASS_NAME = GUTTER_CLASS_NAME + \"__row\";\n/**\r\n * The component for creating a gutter and its rows.\r\n * This is usually activated by other components through the `gutter` option.\r\n *\r\n * @since 0.0.1\r\n */\n\nfunction Gutter(_ref5) {\n  var lines = _ref5.lines,\n      event = _ref5.event,\n      root = _ref5.root,\n      options = _ref5.options;\n  // Wait for initialization of other components.\n  event.on('mounted', function () {\n    if (!options.gutter) {\n      return;\n    }\n\n    event.on('open', function (append, classes) {\n      classes.push('has-gutter');\n    });\n    event.on('code:open', function (append) {\n      append(\"<div class=\\\"\" + GUTTER_CLASS_NAME + \"\\\" aria-hidden=\\\"true\\\">\");\n\n      for (var i = 0; i < lines.length; i++) {\n        var classes = [GUTTER_ROW_CLASS_NAME];\n        event.emit('gutter:row:open', append, classes, i);\n        append(\"<div class=\\\"\" + classes.join(' ') + \"\\\">\");\n        event.emit('gutter:row:opened', append, i);\n        append(\"</div>\");\n      }\n\n      append(\"</div>\");\n    });\n\n    if (!root || typeof window === 'undefined') {\n      return;\n    }\n\n    window.addEventListener('resize', throttle(resize, THROTTLE_DURATION));\n    resize();\n    event.on('destroy', function () {\n      window.removeEventListener('resize', resize);\n    });\n    /**\r\n     * Resizes rows according to line height.\r\n     */\n\n    function resize() {\n      var rows = root.getElementsByClassName(GUTTER_ROW_CLASS_NAME);\n      var code = query(\".\" + CODE, root);\n\n      if (rows.length && code) {\n        for (var i = 0; i < code.children.length; i++) {\n          var row = rows[i];\n          var line = code.children[i];\n\n          if (isHTMLElement(row) && row.clientHeight !== line.clientHeight) {\n            styles(row, {\n              height: line.clientHeight + \"px\"\n            });\n          }\n        }\n      }\n    }\n  });\n}\n/**\r\n * The component for rendering a language name.\r\n *\r\n * @since 0.0.1\r\n */\n\n\nfunction LanguageName(_ref6) {\n  var event = _ref6.event,\n      info = _ref6.info,\n      options = _ref6.options;\n  var name = info.name;\n\n  if (options.languageName && name) {\n    var position = options.languageName === 'topLeft' ? 'topLeft' : 'topRight';\n    options.overlay = options.overlay || {};\n    options.overlay[position] = true;\n    event.on(\"overlay:\" + position, function (append) {\n      append(\"<span class=\\\"\" + PROJECT_CODE_SHORT + \"__name\\\">\" + info.name + \"</span>\");\n    });\n  }\n}\n/**\r\n * The data attribute name for line numbers.\r\n * This accepts boolean or number as a value.\r\n *\r\n * @private\r\n * @since 0.0.1\r\n */\n\n\nvar ATTRIBUTE_LINE_NUMBERS = \"data-\" + PROJECT_CODE_SHORT + \"-line-numbers\";\n/**\r\n * The class name for each line number element.\r\n *\r\n * @private\r\n * @since 0.0.23\r\n */\n\nvar LINE_NUMBER_CLASS_NAME = PROJECT_CODE_SHORT + \"__line-number\";\n/**\r\n * The component for displaying line numbers in a gutter.\r\n *\r\n * @since 0.0.1\r\n */\n\nfunction LineNumbers(_ref7) {\n  var root = _ref7.root,\n      event = _ref7.event,\n      options = _ref7.options;\n  var data = root ? attr(root, ATTRIBUTE_LINE_NUMBERS) : '';\n  var number = data === '' ? +options.lineNumbers : +data;\n\n  if (number || number === 0) {\n    options.gutter = true;\n    var offset = Math.floor(number) - 1;\n    event.on('gutter:row:opened', function (append, i) {\n      var classes = [LINE_NUMBER_CLASS_NAME];\n      var data = {\n        skip: false,\n        content: i + 1 + offset\n      };\n      event.emit('lineNumber:open', append, classes, i, data);\n\n      if (data.skip) {\n        data.content = LINE_BREAK;\n        offset--;\n      }\n\n      append(\"<span class=\\\"\" + classes.join(' ') + \"\\\">\" + data.content + \"</span>\");\n    });\n  }\n}\n/**\r\n * The component for rendering overlay and tools elements.\r\n *\r\n * @since 0.0.1\r\n */\n\n\nfunction Overlay(_ref8) {\n  var event = _ref8.event,\n      options = _ref8.options;\n  event.on('mounted', function () {\n    var _options$overlay = options.overlay,\n        overlay = _options$overlay === void 0 ? {} : _options$overlay;\n    var tools = options.tools;\n    var topRight = overlay.topRight,\n        topLeft = overlay.topLeft;\n    topRight = topRight || tools === 'topRight';\n    topLeft = topLeft || tools === 'topLeft';\n    [topRight, topLeft].forEach(function (active, index) {\n      if (active) {\n        if (tools) {\n          appendTools(event, index === 1);\n        }\n\n        appendOverlay(event, index === 1);\n      }\n    });\n\n    if (topRight || topLeft) {\n      event.on('open', function (append, classes) {\n        classes.push('has-top-overlay');\n      });\n    }\n  });\n}\n/**\r\n * Appends HTML for the overlay.\r\n *\r\n * @private\r\n *\r\n * @param event - The EventBus object.\r\n * @param left  - Optional. Set `true` for the left overlay.\r\n */\n\n\nfunction appendOverlay(event, left) {\n  var className = PROJECT_CODE_SHORT + \"__overlay\";\n  event.on('close', function (append) {\n    append(\"<div class=\\\"\" + className + \" \" + className + \"--top-\" + (left ? 'left' : 'right') + \"\\\">\");\n    event.emit(\"overlay:top\" + (left ? 'Left' : 'Right'), append);\n    append(\"</div>\");\n  });\n}\n/**\r\n * Appends HTML for tools.\r\n *\r\n * @private\r\n *\r\n * @param event - The EventBus object.\r\n * @param left  - Optional. Set `true` for the left tools.\r\n */\n\n\nfunction appendTools(event, left) {\n  var position = left ? 'Left' : 'Right';\n  event.on(\"overlay:top\" + position, function (append) {\n    append(\"<span class=\\\"\" + PROJECT_CODE_SHORT + \"__tools\\\">\");\n    event.emit(\"tools:top\" + position, append);\n    append(\"</span>\");\n  });\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ActiveLines: ActiveLines,\n  Caption: Caption,\n  Copy: Copy,\n  Diff: Diff,\n  Gutter: Gutter,\n  LanguageName: LanguageName,\n  LineNumbers: LineNumbers,\n  Overlay: Overlay\n});\nexport default RyuseiLight;\nexport { ActiveLines, CATEGORY_ATRULE, CATEGORY_ATTRIBUTE, CATEGORY_BOOLEAN, CATEGORY_BRACKET, CATEGORY_CDATA, CATEGORY_CLASS, CATEGORY_COMMENT, CATEGORY_CONSTANT, CATEGORY_DECORATOR, CATEGORY_DELIMITER, CATEGORY_ENTITY, CATEGORY_FUNCTION, CATEGORY_IDENTIFIER, CATEGORY_KEYWORD, CATEGORY_LINEBREAK, CATEGORY_NUMBER, CATEGORY_OPERATOR, CATEGORY_PROLOG, CATEGORY_PROPERTY, CATEGORY_REGEXP, CATEGORY_SELECTOR, CATEGORY_SPACE, CATEGORY_STRING, CATEGORY_SYMBOL, CATEGORY_TAG, CATEGORY_TAG_CLOSE, CATEGORY_TEXT, CATEGORY_VALUE, CATEGORY_VARIABLE, Caption, Copy, Diff, Gutter, LanguageName, Lexer, LineNumbers, Overlay, RyuseiLight, index as components, css, html, javascript, json, jsx, index$1 as languages, none, scss, svg, tsx, typescript, vue, xml };\n","import { Options, Token, TokenInfo } from '@ryusei/code';\nimport { CATEGORY_COMMENT, CATEGORY_LINEBREAK, CATEGORY_SPACE } from '@ryusei/light';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { count, includes, isUndefined } from '../../utils';\n\n\n/**\n * Determines what HTML should be inserted to empty lines.\n * Be aware that changing this character may break the selection.\n *\n * @since 0.1.0\n */\nconst EMPTY_LINE_HTML = '<br>';\n\n/**\n * The class for managing data of each line.\n *\n * @since 0.1.0\n */\nexport class Line {\n  /**\n   * Holds options.\n   */\n  private readonly options: Options;\n\n  /**\n   * Holds the last update time.\n   */\n  private time = 0;\n\n  /**\n   * Keeps the built HTML string.\n   */\n  private htmlCache: string;\n\n  /**\n   * Keeps the built text.\n   */\n  private textCache: string;\n\n  /**\n   * Holds the depth of the first token.\n   */\n  depth = 0;\n\n  /**\n   * Holds tokens.\n   */\n  tokens: readonly Token[] = [];\n\n  /**\n   * A language of the first token.\n   */\n  language: string;\n\n  /**\n   * Indicates whether the first token is split into multilines or not.\n   */\n  split: boolean;\n\n  /**\n   * Depth of tabs.\n   */\n  indentDepth = 0;\n\n  /**\n   * The Line constructor.\n   *\n   * @param options - Options.\n   */\n  constructor( options: Options ) {\n    this.options = options;\n  }\n\n  /**\n   * Initializes some properties.\n   */\n  protected init(): void {\n    const { first } = this;\n    const info = ( first && first[ 2 ] ) || {} as TokenInfo;\n\n    this.depth       = info.depth || 0;\n    this.language    = info.language || '';\n    this.split       = info.split;\n    this.indentDepth = count( this.getIndent(), this.options.indent );\n    this.htmlCache   = undefined;\n    this.textCache   = undefined;\n  }\n\n  /**\n   * Sets new tokens and initializes properties.\n   * To avoid updating tokens by the old value made by async processes,\n   * pass the update time with `Date.now()`.\n   *\n   * @param tokens - An array with tokens.\n   * @param time   - Optional. If this time is older than the current time, tokens will not be updated.\n   */\n  set( tokens: readonly Token[], time?: number ): void {\n    if ( ! time || time > this.time ) {\n      this.tokens = tokens;\n      this.time   = time || Date.now();\n\n      this.init();\n    }\n  }\n\n  /**\n   * Returns the indent of the line if available.\n   *\n   * @return An indent string if available, or an empty string if not.\n   */\n  getIndent(): string {\n    const { first } = this;\n\n    if ( first ) {\n      if ( first[ 0 ] === CATEGORY_SPACE ) {\n        return first[ 1 ];\n      }\n\n      if ( first[ 0 ] === CATEGORY_COMMENT ) {\n        const match = this.text.match( new RegExp( `^${ this.options.indent }+` ) );\n        return match ? match[ 0 ] : '';\n      }\n    }\n\n    return '';\n  }\n\n  /**\n   * Returns the TokenInfo object at the index.\n   *\n   * @param index - A token index.\n   *\n   * @return A TokenInfo object if available, or `undefined` if not.\n   */\n  getInfo( index: number ): TokenInfo | undefined {\n    const token = this.tokens[ index ];\n    return token && token[ 2 ];\n  }\n\n  /**\n   * Returns the TokenInfo object at the col index.\n   *\n   * @param col - A col index.\n   *\n   * @return A TokenInfo object if available, or `undefined` if not.\n   */\n  getInfoAt( col: number ): TokenInfo | undefined {\n    const { tokens, tokens: { length } } = this;\n\n    if ( tokens.length ) {\n      if ( col === this.text.length ) {\n        return tokens[ length - 1 ][ 2 ];\n      }\n\n      for ( let i = 0; i < length; i++ ) {\n        const info = tokens[ i ][ 2 ];\n\n        if ( info.from <= col && col < info.to ) {\n          return info;\n        }\n      }\n    }\n  }\n\n  /**\n   * Checks if the line contains only a line break/spaces or not.\n   *\n   * @return `true` if the line contains only a line break or spaces. Otherwise, `false`.\n   */\n  isEmpty(): boolean {\n    const { tokens } = this;\n    return tokens.length === 1 && includes( [ CATEGORY_LINEBREAK, CATEGORY_SPACE ], tokens[ 0 ][ 0 ] );\n  }\n\n  /**\n   * Builds the HTML by tokens.\n   * This should not be pre-built in the init function for better performance.\n   *\n   * @return The HTML string of the line.\n   */\n  get html(): string {\n    if ( ! this.htmlCache ) {\n      let html = '';\n\n      for ( let i = 0; i < this.tokens.length; i++ ) {\n        const token = this.tokens[ i ];\n\n        if ( i === 0 && token[ 1 ] === LINE_BREAK ) {\n          html += EMPTY_LINE_HTML;\n          break;\n        } else {\n          html += token[ 2 ].html;\n        }\n      }\n\n      this.htmlCache = html || EMPTY_LINE_HTML;\n    }\n\n    return this.htmlCache;\n  }\n\n  /**\n   * Builds the text by tokens.\n   *\n   * @return The text of the line.\n   */\n  get text(): string {\n    if ( isUndefined( this.textCache ) ) {\n      this.textCache = this.tokens.reduce( ( text, token ) => {\n        if ( token[ 0 ] !== CATEGORY_LINEBREAK ) {\n          text += token[ 1 ];\n        }\n\n        return text;\n      }, '' );\n    }\n\n    return this.textCache;\n  }\n\n  /**\n   * Returns the first token.\n   *\n   * @return The first token.\n   */\n  get first(): Token {\n    return this.tokens[ 0 ];\n  }\n}\n","import { Language, Options, Position, ScanResult, Token, TokenInfo, TokenMatcher } from '@ryusei/code';\nimport { AbstractArrayLike } from '../../classes/AbstractArrayLike/AbstractArrayLike';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { EventBus } from '../../event/EventBus';\nimport { forOwn, isUndefined, max, min } from '../../utils';\nimport { matchesToken } from '../../utils/token';\nimport { Line } from './Line';\n\n\n/**\n * The max number of lines to be inserted at once.\n * Inserting many lines harms the performance.\n *\n * @since 0.1.0\n */\nconst MAX_INSERTION_LENGTH = 100;\n\n/**\n * Delay for the asynchronous tokenization.\n *\n * @since 0.1.0\n */\nconst ASYNC_SYNC_DELAY = 10;\n\n/**\n * The class for managing data of all lines.\n *\n * @since 0.1.0\n */\nexport class Lines extends AbstractArrayLike<Line> {\n  /**\n   * Holds the setTimeout ids.\n   */\n  private readonly timers: Record<string, ReturnType<typeof setTimeout>> = {};\n\n  /**\n   * Holds the language object.\n   */\n  private readonly language: Language;\n\n  /**\n   * Holds options.\n   */\n  private readonly options: Options;\n\n  /**\n   * Holds the EventBus object.\n   */\n  private readonly event: EventBus;\n\n  /**\n   * The Lines constructor.\n   *\n   * @param event    - An EventBus instance.\n   * @param language - A Language object.\n   * @param options  - Options.\n   */\n  constructor( event: EventBus, language: Language, options: Options ) {\n    super();\n\n    this.language = language;\n    this.event    = event;\n    this.options  = options;\n  }\n\n  /**\n   * Inserts a new line at the specified row index.\n   * Be aware that inserting a lot of lines causes the fatal performance issue.\n   *\n   * @param row   - A row index.\n   * @param count - A number of lines to insert.\n   */\n  insert( row: number, count?: number ): void {\n    count = count || 1;\n\n    while ( count-- > 0 ) {\n      this.splice( row, 0, new Line( this.options ) );\n    }\n  }\n\n  /**\n   * Deletes a line or lines from the specified row.\n   *\n   * @param row   - A row index.\n   * @param count - A number of lines to delete.\n   */\n  delete( row: number, count: number ): void {\n    this.splice( row, count );\n  }\n\n  /**\n   * Syncs lines with the provided code.\n   *\n   * @param row    - A row index where sync starts.\n   * @param code   - Code to sync.\n   * @param limit  - Optional. Limits the number of lines to sync.\n   * @param before - Optional. A pseudo line prepended to the code.\n   * @param time   - Optional. A timestamp when the sync starts.\n   *\n   * @return `true` if the last line is changed, or otherwise `false`.\n   */\n  sync( row: number, code: string, limit?: number, before = '', time?: number ): boolean {\n    if ( before ) {\n      code = before + LINE_BREAK + code;\n\n      if ( limit ) {\n        limit++;\n      }\n    }\n\n    const lines = this.language.lexer.run( code, limit );\n\n    if ( before ) {\n      lines.shift();\n    }\n\n    let changed;\n\n    for ( let i = 0; i < lines.length; i++ ) {\n      const rowIndex = row + i;\n      const tokens   = lines[ i ];\n\n      if ( ! this[ rowIndex ] ) {\n        this.insert( rowIndex );\n      }\n\n      if ( this[ rowIndex ] ) {\n        if ( i === lines.length - 1 ) {\n          changed = ! this.isSame( this[ rowIndex ].tokens, tokens );\n        }\n\n        this[ rowIndex ].set( tokens, time );\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n   * Starts an asynchronous sync process.\n   *\n   * @param id       - A worker ID.\n   * @param row      - A row index where sync starts.\n   * @param code     - Code to sync.\n   * @param limit    - Optional. Limits the number of lines to sync.\n   * @param before   - Optional. A pseudo line prepended to the code.\n   * @param callback - Optional. A function called after syncing.\n   */\n  asyncSync(\n    id: string,\n    row: number,\n    code: string,\n    limit?: number,\n    before = '',\n    callback?: () => void\n  ): void {\n    const { timers } = this;\n\n    if ( timers[ id ] ) {\n      clearTimeout( timers[ id ] );\n    }\n\n    const time = Date.now();\n\n    timers[ id ] = setTimeout( () => {\n      this.sync( row, code, limit, before, time );\n\n      if ( callback ) {\n        callback();\n      }\n    }, ASYNC_SYNC_DELAY );\n  }\n\n  /**\n   * Finds the minimum indent string between the `startRow` and the `endRow`.\n   *\n   * @param startRow - A start row index to search from.\n   * @param endRow   - An end row index to search to.\n   *\n   * @return A minimum indent string.\n   */\n  findMinIndent( startRow: number, endRow: number ): string {\n    let minIndent = undefined;\n\n    for ( let i = startRow; i <= endRow; i++ ) {\n      const indent = this[ i ].getIndent();\n      minIndent = isUndefined( minIndent ) || minIndent.length > indent.length ? indent : minIndent;\n    }\n\n    return minIndent || '';\n  }\n\n  /**\n   * Returns a token info at the specified position.\n   *\n   * @param position - A position to search at.\n   *\n   * @return A TokenInfo if available, or otherwise `undefined`.\n   */\n  getInfoAt( position: Position ): TokenInfo | undefined {\n    const line = this[ position[ 0 ] ];\n    return line ? line.getInfoAt( position[ 1 ] ) : undefined;\n  }\n\n  /**\n   * Searches backwards for a token that matches the matcher.\n   * If the `counterpart` matcher is provided,\n   * this method attempts to match the target and counterpart, such as `{` and `}`.\n   *\n   * @param position    - A position to start searching.\n   * @param matcher     - A matcher.\n   * @param counterpart - Optional. A matcher of the counter part.\n   * @param depth       - Optional. Determines the initial depth.\n   * @param limit       - Optional. Limits the number of lines to scan.\n   *\n   * @return A TokenInfo object if found, or `undefined` if not.\n   */\n  scanUp(\n    position: Position,\n    matcher: TokenMatcher,\n    counterpart?: TokenMatcher,\n    depth = 0,\n    limit?: number\n  ): ScanResult | undefined {\n    const info = this.getInfoAt( position );\n\n    if ( info ) {\n      const [ row ] = position;\n      const min = limit ? max( 0, row - limit ) : 0;\n\n      for ( let i = row; i >= min; i-- ) {\n        const tokens = this[ i ].tokens;\n\n        for ( let j = i === row ? info.index : tokens.length - 1; j >= 0; j-- ) {\n          if ( matchesToken( tokens[ j ], matcher ) ) {\n            if ( ! depth ) {\n              return { row: i, info: this[ i ].getInfo( j ) };\n            }\n\n            depth++;\n          }\n\n          if ( counterpart && matchesToken( tokens[ j ], counterpart ) ) {\n            depth--;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Searches forwards for a token that matches the matcher.\n   * If the `counterpart` matcher is provided,\n   * this method attempts to match the target and counterpart, such as `{` and `}`.\n   *\n   * @param position    - A position to start searching.\n   * @param matcher     - A matcher.\n   * @param counterpart - Optional. A matcher of the counter part.\n   * @param depth       - Optional. Determines the initial depth.\n   * @param limit       - Optional. Limits the number of lines to scan.\n   *\n   * @return A TokenInfo object if found, or `undefined` if not.\n   */\n  scanDown(\n    position: Position,\n    matcher: TokenMatcher,\n    counterpart?: TokenMatcher,\n    depth = 0,\n    limit?: number\n  ): ScanResult | undefined {\n    const info = this.getInfoAt( position );\n\n    if ( info ) {\n      const [ row ] = position;\n      const { length } = this;\n      const max = limit ? min( length, row + limit ) : length;\n\n      for ( let i = row; i < max; i++ ) {\n        const tokens = this[ i ].tokens;\n\n        for ( let j = i === row ? info.index : 0; j < tokens.length; j++ ) {\n          if ( matchesToken( tokens[ j ], matcher ) ) {\n            if ( ! depth ) {\n              return { row: i, info: this[ i ].getInfo( j ) };\n            }\n\n            depth++;\n          }\n\n          if ( counterpart && matchesToken( tokens[ j ], counterpart ) ) {\n            depth--;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Searches for a start position where the split token actually starts.\n   * If the token at the position is not split, this returns `undefined`.\n   *\n   * @param position - A position.\n   *\n   * @return A position where the split token starts if available.\n   */\n  findBlockStart( position: Position ): Position | undefined {\n    const info = this.getInfoAt( position );\n\n    if ( info ) {\n      if ( info.split ) {\n        const startRow = position[ 0 ] - info.distance;\n        const line     = this[ startRow ];\n        const lastInfo = line.getInfo( line.tokens.length - 1 );\n        return [ startRow, lastInfo.from ];\n      }\n\n      return [ position[ 0 ], info.from ];\n    }\n  }\n\n  /**\n   * Searches for an end position where the split token actually ends.\n   * If the token at the position is not split, this returns `undefined`.\n   *\n   * @param position - A position.\n   *\n   * @return A position where the split token ends if available.\n   */\n  findBlockEnd( position: Position ): Position | undefined {\n    const info = this.getInfoAt( position );\n\n    if ( info ) {\n      if ( info.split && ! info.tail ) {\n        for ( let i = position[ 0 ] + 1; i < this.length; i++ ) {\n          const info = this[ i ].getInfo( 0 );\n\n          if ( info && info.tail ) {\n            return [ i, info.to ];\n          }\n        }\n      }\n\n      return [ position[ 0 ], info.to ];\n    }\n  }\n\n  /**\n   * Syncs the number of lines.\n   *\n   * @param row   - A row index.\n   * @param value - A new size.\n   *\n   * @return Increased or decreased number of lines.\n   */\n  syncSize( row: number, value: number ): number {\n    const diff = value - this.length;\n\n    if ( diff > 0 ) {\n      if ( diff < MAX_INSERTION_LENGTH ) {\n        this.insert( row, diff );\n      } else {\n        this.setLength( value );\n      }\n    } else if ( diff < 0 ) {\n      this.delete( row, -diff );\n    }\n\n    return diff;\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    forOwn( this.timers, clearTimeout );\n  }\n\n  /**\n   * Sets the length of this Lines.\n   * All overflown items will be removed from the end, or all missing items are added to the end as empty lines.\n   *\n   * @param value - A new length.\n   */\n  private setLength( value: number ): void {\n    const { length } = this;\n\n    if ( length > value ) {\n      this.splice( value, length - value );\n    } else if ( length < value ) {\n      while ( value-- > length ) {\n        this.push( new Line( this.options ) );\n      }\n    }\n  }\n\n  /**\n   * Checks if the passed 2 arrays with tokens are same or not.\n   *\n   * @param tokens1 - An array with tokens.\n   * @param tokens2 - Another array with tokens.\n   *\n   * @return `true` if they are considered as same, or otherwise `false`.\n   */\n  private isSame( tokens1: readonly Token[], tokens2: readonly Token[] ): boolean {\n    return tokens1.length === tokens2.length && tokens1.every( ( token1, index ) => {\n      const token2 = tokens2[ index ];\n      return token1[ 0 ] === token2[ 0 ] && token1[ 1 ] === token2[ 1 ] && token1[ 2 ].depth === token2[ 2 ].depth;\n    } );\n  }\n}\n","import { Position, Range } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { assert, count, escapeRegExp, isString, nthIndexOf } from '../../utils';\nimport { Lines } from './Lines';\n\n\n/**\n * The class for handling the raw text and syncing it to lines.\n *\n * @since 0.1.0\n */\nexport class Code extends Component {\n  /**\n   * Holds the text data.\n   */\n  protected text: string;\n\n  /**\n   * Holds the minimum row for asynchronous syncing.\n   */\n  protected minStart = Infinity;\n\n  /**\n   * Holds the maximum row for asynchronous syncing.\n   */\n  protected maxEnd = 0;\n\n  /**\n   * Caches the number of lines.\n   */\n  protected sizeCache: number;\n\n  /**\n   * Holds the Lines instance.\n   */\n  Lines: Lines;\n\n  /**\n   * Sets a new value.\n   *\n   * @param value - A new value.\n   */\n  init( value: string ): void {\n    if ( ! this.Lines ) {\n      this.Lines = new Lines( this.event, this.Editor.language, this.options );\n    } else {\n      this.Lines.clear();\n    }\n\n    this.value = value;\n    this.Lines.sync( 0, value );\n  }\n\n  /**\n   * Returns a text before the specified row index, including the row itself.\n   *\n   * @param row - A row index.\n   *\n   * @return A sliced text.\n   */\n  before( row: number ): string {\n    const { text } = this;\n\n    if ( row < 0 ) {\n      return '';\n    }\n\n    return text.slice( 0, row < this.size - 1 ? nthIndexOf( text, LINE_BREAK, row + 1 ) + 1 : text.length );\n  }\n\n  /**\n   * Returns a text after the specified row index, including the row itself.\n   *\n   * @param row - A row index.\n   *\n   * @return A sliced text.\n   */\n  after( row: number ): string {\n    const { text } = this;\n\n    if ( row <= 0 ) {\n      return text;\n    }\n\n    return text.slice( row < this.size ? nthIndexOf( text, LINE_BREAK, row ) + 1 : text.length );\n  }\n\n  /**\n   * Returns a text at the row index.\n   *\n   * @param row - A row to search for.\n   *\n   * @return A line text.\n   */\n  getLine( row: number ): string {\n    return row < this.size ? this.sliceLines( row, row ) : '';\n  }\n\n  /**\n   * Slices a text by the specified row range.\n   *\n   * @param startRow - A start row index to start slicing a text.\n   * @param endRow   - An end row index to start slicing a text.\n   *\n   * @return A sliced text.\n   */\n  sliceLines( startRow: number, endRow: number ): string {\n    const { text } = this;\n    const endIndex = endRow < this.size - 1 ? nthIndexOf( text, LINE_BREAK, endRow + 1 ) + 1 : this.text.length;\n    return text.slice( nthIndexOf( text, LINE_BREAK, startRow ) + 1, endIndex );\n  }\n\n  /**\n   * Slices a text by the specified position range.\n   *\n   * @param start - A start position to start slicing a text.\n   * @param end   - Optional. An end position to start slicing a text.\n   *\n   * @return A sliced text.\n   */\n  sliceRange( start: Position, end?: Position ): string {\n    const startIndex = this.positionToIndex( start );\n    const endIndex   = end ? this.positionToIndex( end ) : this.text.length;\n    return startIndex < endIndex ? this.text.slice( startIndex, endIndex ) : '';\n  }\n\n  /**\n   * Replaces lines by the replacement text.\n   *\n   * @param startRow    - A start row index.\n   * @param endRow      - An end row index.\n   * @param replacement - A replacement text.\n   */\n  replaceLines( startRow: number, endRow: number, replacement: string ): void {\n    assert( startRow <= endRow );\n    this.text      = this.before( startRow - 1 ) + this.normalize( replacement ) + this.after( endRow + 1 );\n    this.sizeCache = 0;\n  }\n\n  /**\n   * Replaces a text in a specified range by the replacement text.\n   *\n   * @param start       - A start position.\n   * @param end         - An end position.\n   * @param replacement - A replacement text.\n   */\n  replaceRange( start: Position, end: Position, replacement: string ): void {\n    const startIndex = this.positionToIndex( start );\n    const endIndex   = this.positionToIndex( end );\n    const { value } = this;\n\n    if ( startIndex <= endIndex ) {\n      this.text      = value.slice( 0, startIndex ) + this.normalize( replacement ) + value.slice( endIndex );\n      this.sizeCache = 0;\n    }\n  }\n\n  /**\n   * Replaces lines by the iteratee function invoked for each line.\n   * The returning string of the function will be used as a new line.\n   *\n   * @param startRow - A start row index.\n   * @param endRow   - An end row index.\n   * @param iteratee - An iteratee function invoked for each line.\n   */\n  replaceLinesBy(\n    startRow: number,\n    endRow: number,\n    iteratee: ( line: string, index: number, array: string[] ) => string\n  ): void {\n    const { size } = this;\n    assert( endRow < size );\n\n    const isLast = endRow === size - 1;\n    const lines  = this.sliceLines( startRow, endRow ).split( LINE_BREAK, endRow - startRow + 1 );\n\n    this.replaceLines( startRow, endRow, lines.reduce( ( acc, line, index, array ) => {\n      const lineBreak = isLast && index === array.length - 1 ? '' : LINE_BREAK;\n      return acc + iteratee( line, index, array ) + lineBreak;\n    }, '' ) );\n  }\n\n  /**\n   * Searches the provided word or regexp.\n   *\n   * @param search     - A string or a regexp object.\n   * @param ignoreCase - Optional. Whether to perform case-insensitive search or not.\n   * @param wholeWord  - Optional. Whether to only match a whole word or not.\n   * @param limit      - Optional. Limits the number of matched results.\n   *\n   * @return An array with tuples that contains `[ index, length ]`.\n   */\n  search( search: string | RegExp, ignoreCase?: boolean, wholeWord?: boolean, limit?: number ): Range[] {\n    const source = isString( search ) ? escapeRegExp( search ) : search.source;\n    const ranges: Range[] = [];\n\n    if ( source ) {\n      const regexp = new RegExp( wholeWord ? `\\\\b${ source }\\\\b` : source, ignoreCase ? 'gi' : 'g' );\n\n      lines:\n      for ( let i = 0; i < this.Lines.length; i++ ) {\n        const line = this.Lines[ i ];\n\n        let match: RegExpExecArray;\n\n        while ( ( match = regexp.exec( line.text ) ) ) {\n          if ( ! match[ 0 ] ) {\n            regexp.lastIndex++;\n          }\n\n          ranges.push( {\n            start: [ i, match.index ],\n            end  : [ i, match.index + match[ 0 ].length ],\n          } );\n\n          if ( limit && ranges.length >= limit ) {\n            break lines;\n          }\n        }\n      }\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Destroys the component.\n   */\n  destroy(): void {\n    if ( this.Lines ) {\n      this.Lines.destroy();\n    }\n\n    super.destroy();\n  }\n\n  /**\n   * Converts the provided position to the text index.\n   *\n   * @param position - A position to convert.\n   *\n   * @return A converted index.\n   */\n  private positionToIndex( position: Position ): number {\n    const [ row ] = position;\n    assert( row < this.size );\n    return nthIndexOf( this.text, LINE_BREAK, row ) + 1 + position[ 1 ];\n  }\n\n  /**\n   * Normalizes characters of line breaks.\n   *\n   * @param value - A value to normalize.\n   *\n   * @return A normalized text.\n   */\n  protected normalize( value: string ): string {\n    return value.replace( /\\r\\n?/g, '\\n' );\n  }\n\n  /**\n   * Sets a new value.\n   *\n   * @param value - A value to set.\n   */\n  set value( value: string ) {\n    this.text      = this.normalize( value );\n    this.sizeCache = 0;\n  }\n\n  /**\n   * Returns the current code.\n   *\n   * @return The current code.\n   */\n  get value(): string {\n    return this.text;\n  }\n\n  /**\n   * Returns the number of lines by counting line breaks.\n   *\n   * @return The number of lines.\n   */\n  get size(): number {\n    this.sizeCache = this.sizeCache || count( this.text, LINE_BREAK ) + 1;\n    return this.sizeCache;\n  }\n}\n","import { CLASS_ICON } from '../../../constants/classes';\nimport { attr } from '../../dom';\n\n\n/**\n * The SVG view box settings.\n *\n * @since 0.1.0\n */\nexport const VIEW_BOX = '0 0 24 24';\n\n/**\n * Returns an icon SVG element specified by the name.\n *\n * @param d       - The path of the icon element.\n * @param stroke  - Stroke width.\n * @param linecap - Linecap.\n *\n * @return The SVG element of the icon.\n */\nexport function icon( d: string, stroke: number, linecap: string ): SVGElement {\n  const svg  = createSvg( 'svg', { viewBox: VIEW_BOX, class: CLASS_ICON } );\n  const path = createSvg( 'path', { d, fill: 'currentColor' } );\n\n  if ( stroke ) {\n    attr( path, { 'stroke-width': stroke, 'stroke-linecap': linecap, stroke: 'currentColor' } );\n  }\n\n  attr( svg, { viewBox: VIEW_BOX } );\n  svg.appendChild( path );\n\n  return svg;\n}\n\n/**\n * The helper function to create a SVG element.\n *\n * @param tag   - A tag name in the SVG namespace.\n * @param attrs - An object literal with attributes.\n *\n * @return An created element.\n */\nfunction createSvg( tag: string, attrs: Record<string, string | number | boolean> ): SVGElement {\n  const elm = document.createElementNS( 'http://www.w3.org/2000/svg', tag );\n  attr( elm, attrs );\n  return elm;\n}\n","import { Attributes, Elements, UIButtonSettings, UIFieldSettings, UIGroupData } from '@ryusei/code';\nimport { CLASS_ACTIVE, CLASS_BUTTON, CLASS_INPUT } from '../../constants/classes';\nimport {\n  activeElement,\n  addClass,\n  append,\n  assert,\n  attr,\n  create,\n  hasClass,\n  html,\n  isString,\n  isUndefined,\n  normalizeKey,\n  prevent,\n  query,\n  remove,\n  removeClass,\n  toArray,\n} from '../../utils';\nimport { icon } from '../../utils/icon';\nimport { Component } from '../Component/Component';\n\n\n/**\n * The stroke linecap value for the path element.\n */\nexport const STROKE_LINECAP = 'round';\n\n/**\n * The base class for creating UI, such as a toolbar or a dialog.\n *\n * @since 0.1.0\n */\nexport class UIComponent<T extends UIGroupData = UIGroupData> extends Component {\n  /**\n   * Holds the wrapper element.\n   */\n  protected wrapper: HTMLDivElement;\n\n  /**\n   * Holds the active group ID.\n   */\n  protected group: string;\n\n  /**\n   * Stores group elements.\n   */\n  protected groups: Record<string, T> = {};\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.create();\n    this.listen();\n  }\n\n  /**\n   * Creates elements.\n   * Override this method in a child class and provide a wrapper element.\n   */\n  protected create(): void {\n    assert( false );\n  }\n\n  /**\n   * Listens to some events.\n   */\n  protected listen(): void {\n    this.bind( window, 'keydown', this.escape, this );\n  }\n\n  /**\n   * Hides the toolbar when the escape key is pressed.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  protected escape( e: KeyboardEvent ): void {\n    if ( this.isActive() && normalizeKey( e.key ) === 'Escape' ) {\n      this.hide();\n      prevent( e );\n    }\n  }\n\n  /**\n   * Appends the group element to the wrapper element just before displaying the UI.\n   * Override this method to change the default element to append the group to.\n   *\n   * @param group - A group ID.\n   */\n  protected append( group: string ): void {\n    append( this.wrapper, this.groups[ group ].elm );\n  }\n\n  /**\n   * Sets focus to the first element that has the greatest tab index.\n   * If it is not found, sets focus to the first input or button element if available.\n   *\n   * @param group - A group ID.\n   */\n  protected autoFocus( group: string ): void {\n    const { elm } = this.groups[ group ];\n    const target = query<HTMLElement>( elm, '[tabindex]' ) || query( elm, 'input, button' );\n\n    if ( target ) {\n      target.focus();\n\n      if ( target instanceof HTMLInputElement ) {\n        target.select();\n      }\n    }\n  }\n\n  /**\n   * Creates a close button.\n   * The wrapper element must exist and have an ID attribute before calling this method.\n   *\n   * @param attrs - Attributes for the button.\n   *\n   * @return A created button element.\n   */\n  createCloseButton( attrs: Attributes ): HTMLButtonElement {\n    const button = this.createButtons( {\n      id   : 'close',\n      icon : 'close',\n      click: 'hide',\n    }, null, this ).close;\n\n    attr( button, attrs );\n\n    return button;\n  }\n\n  /**\n   * Creates buttons according to the settings.\n   *\n   * @param settings  - A settings object.\n   * @param parent    - A parent element to append the button to.\n   * @param component - A component instance.\n   * @param classes   - Additional classes for buttons.\n   *\n   * @return An object with created buttons.\n   */\n  createButtons<T extends Component>(\n    settings: UIButtonSettings<T> | UIButtonSettings<T>[],\n    parent: HTMLElement,\n    component: T,\n    classes?: string | string[]\n  ): Record<string, HTMLButtonElement> {\n    const buttons = {};\n\n    toArray( settings ).forEach( settings => {\n      const button = this.createButton( settings, parent, classes );\n      const { click } = settings;\n\n      if ( click ) {\n        this.bind( button, 'click', e => {\n          if ( isString( click ) ) {\n            component[ click ]();\n          } else {\n            click( e, this.Editor, settings );\n          }\n        } );\n      }\n\n      buttons[ settings.id ] = button;\n    }, [] );\n\n    return buttons;\n  }\n\n  /**\n   * Creates a button with the provided settings.\n   *\n   * @param settings - A settings object.\n   * @param parent   - A parent element to append the button to.\n   * @param classes  - Additional classes for buttons.\n   *\n   * @return A created button element.\n   */\n  protected createButton<T extends Component>(\n    settings: UIButtonSettings<T>,\n    parent: HTMLElement,\n    classes: string | string[]\n  ): HTMLButtonElement {\n    const { i18n } = this.options;\n    const { checkbox, tabindex, icon: iconName } = settings;\n    const label = i18n[ settings.i18n || settings.id ];\n\n    classes = [ CLASS_BUTTON ].concat( iconName ? `${ CLASS_BUTTON }--icon` : null, classes );\n\n    const button = create( 'button', {\n      title         : iconName ? label : null,\n      type          : 'button',\n      tabindex      : ! isUndefined( tabindex ) ? tabindex : null,\n      role          : checkbox ? 'checkbox' : null,\n      'aria-checked': checkbox ? 'false' : null,\n      'aria-label'  : label,\n    }, parent || settings.parent );\n\n    addClass( button, classes );\n\n    if ( iconName ) {\n      const iconSettings = this.options.icons[ iconName ];\n\n      if ( iconSettings ) {\n        append( button, icon( iconSettings[ 0 ], iconSettings[ 1 ], iconSettings[ 2 ] || STROKE_LINECAP ) );\n      }\n    } else {\n      html( button, settings.html || label );\n    }\n\n    return button;\n  }\n\n  /**\n   * A utility function to create an input field.\n   *\n   * @param settings - A settings object.\n   * @param parent   - A parent element where the created input element will be appended.\n   *\n   * @return A created input element.\n   */\n  createField(\n    settings: UIFieldSettings,\n    parent: HTMLElement\n  ): HTMLInputElement {\n    const label = this.i18n[ settings.i18n || settings.id ];\n    const { tabindex } = settings;\n\n    return create( 'input', {\n      class       : `${ CLASS_INPUT }`,\n      placeholder : label,\n      spellcheck  : false,\n      tabindex    : ! isUndefined( tabindex ) ? tabindex : null,\n      'aria-label': label,\n    }, parent );\n  }\n\n  /**\n   * Displays the UI.\n   *\n   * @param group - A group ID.\n   */\n  show( group: string ): void {\n    if ( this.isActive() ) {\n      remove( this.groups[ this.group ].elm );\n    }\n\n    addClass( this.wrapper, CLASS_ACTIVE );\n\n    this.append( group );\n    this.group = group;\n  }\n\n  /**\n   * Hides the UI.\n   */\n  hide(): void {\n    if ( this.isActive() ) {\n      removeClass( this.wrapper, CLASS_ACTIVE );\n      remove( this.groups[ this.group ].elm );\n    }\n  }\n\n  /**\n   * Checks if the specified group is active or not.\n   * If omitted, this checks any group is active or not.\n   *\n   * @param group - Optional. A group ID to check.\n   */\n  isActive( group?: string ): boolean {\n    return hasClass( this.wrapper, CLASS_ACTIVE ) && ( ! group || this.group === group );\n  }\n\n  /**\n   * Checks if one of the elements in the UI has focus or not.\n   *\n   * @return `true` if an element in the UI has focus, or otherwise `false`.\n   */\n  isFocused(): boolean {\n    return this.wrapper.contains( activeElement() );\n  }\n}\n","import { ContextMenuButtonSettings } from '@ryusei/code';\n\n\n/**\n * The ID for the main context menu.\n */\nexport const MAIN_CONTEXT_MENU_ID = 'main';\n\n/**\n * The collection of \"edit\" items for the context menu.\n *\n * @since 0.1.0\n */\nexport const CONTEXT_MENU_EDIT: ContextMenuButtonSettings[] = [\n  {\n    id      : 'copy',\n    shortcut: [ 'C', true ],\n  },\n  {\n    id               : 'cut',\n    shortcut         : [ 'X', true ],\n    disableOnReadOnly: true,\n  },\n  {\n    id               : 'paste',\n    shortcut         : [ 'V', true ],\n    disableOnReadOnly: true,\n  },\n];\n\n/**\n * The collection of \"selection\" items for the context menu.\n *\n * @since 0.1.0\n */\nexport const CONTEXT_MENU_SELECTION: ContextMenuButtonSettings[] = [\n  {\n    id      : 'selectAll',\n    shortcut: [ 'A', true ],\n  },\n];\n","import { ContextMenuButtonSettings, ContextMenuGroupData } from '@ryusei/code';\nimport { UIComponent } from '../../classes/UIComponent/UIComponent';\nimport {\n  CLASS_CONTEXT_MENU,\n  CLASS_CONTEXT_MENU_BUTTON,\n  CLASS_CONTEXT_MENU_GROUP,\n  CLASS_CONTEXT_MENU_ITEM,\n  CLASS_CONTEXT_MENU_LABEL,\n  CLASS_CONTEXT_MENU_LIST,\n  CLASS_CONTEXT_MENU_SHORTCUT,\n} from '../../constants/classes';\nimport { MAIN_CONTEXT_MENU_ID } from '../../constants/context-menu';\nimport {\n  EVENT_BLUR,\n  EVENT_CONTEXT_MENU_CLICKED,\n  EVENT_CONTEXT_MENU_CLOSED,\n  EVENT_CONTEXT_MENU_OPENED,\n  EVENT_READONLY,\n  EVENT_SCROLLER_SCROLL,\n  EVENT_WINDOW_SCROLL,\n} from '../../constants/events';\nimport { IDLE } from '../../constants/selection-states';\nimport {\n  activeElement,\n  assert,\n  assign,\n  attr,\n  create,\n  div,\n  forOwn,\n  height,\n  isHTMLElement,\n  min,\n  normalizeKey,\n  prevent,\n  queryAll,\n  styles,\n  text,\n  unit,\n} from '../../utils';\n\n\n/**\n * The margin from the menu to the right of the window.\n *\n * @since 0.1.0\n */\nconst MARGIN_RIGHT = 5;\n\n/**\n * The margin from the menu to the bottom of the window.\n *\n * @since 0.1.0\n */\nconst MARGIN_BOTTOM = 5;\n\n/**\n * The class for creating a context menu replacing the native one.\n *\n * @since 0.1.0\n */\nexport class ContextMenu extends UIComponent<ContextMenuGroupData> {\n  /**\n   * The index of the current menu item.\n   */\n  private index = -1;\n\n  /**\n   * Holds buttons that are currently displayed.\n   * This may be null when the menu is hidden.\n   */\n  buttons: Record<string, HTMLButtonElement> | null;\n\n  /**\n   * Listens some events.\n   */\n  protected listen(): void {\n    super.listen();\n\n    const { elements } = this;\n\n    this.bind( elements.editor, 'mousedown', this.onMouseDown, this );\n    this.bind( document, 'contextmenu', this.onContextMenu, this );\n    this.bind( window, 'keydown', this.onKeydown, this );\n\n    this.on( [ EVENT_BLUR, EVENT_SCROLLER_SCROLL, EVENT_WINDOW_SCROLL ], this.hide, this );\n\n    this.bind( elements.root, 'focusin', () => {\n      if ( ! this.contains( activeElement() ) && ! this.wrapper.contains( activeElement() ) ) {\n        this.hide();\n      }\n    } );\n  }\n\n  /**\n   * Creates the context menu elements.\n   *\n   * @link https://www.w3.org/TR/wai-aria-1.2/#menu\n   */\n  protected create(): void {\n    this.wrapper = div( { class: CLASS_CONTEXT_MENU, role: 'menu' }, this.elements.overlay );\n  }\n\n  /**\n   * Called when the mouse button is clicked.\n   * If the button number is 2, which means a right click,\n   * displays the menu and moves it at the cursor location, otherwise hides the menu.\n   *\n   * @param e - A MouseEvent object.\n   */\n  private onMouseDown( e: MouseEvent ): void {\n    if ( e.button === 2 ) {\n      this.show( MAIN_CONTEXT_MENU_ID );\n      this.move( e.clientX, e.clientY );\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Called when the contextmenu event of the document is fired.\n   * Since the context menu may scroll the scroller or the window,\n   * displaying the menu at this moment is too early.\n   *\n   * @param e - An Event object.\n   */\n  private onContextMenu( e: Event ): void {\n    if ( this.isActive() ) {\n      return prevent( e );\n    }\n\n    if ( this.contains( e.target ) ) {\n      const { Selection } = this;\n\n      if ( ! Selection.is( IDLE ) ) {\n        this.View.jump( Selection.focus[ 0 ] );\n\n        requestAnimationFrame( () => {\n          const { rect } = this.Caret;\n          this.show( MAIN_CONTEXT_MENU_ID );\n          this.move( rect.left, rect.bottom );\n        } );\n      }\n\n      prevent( e, true );\n    }\n  }\n\n  /**\n   * Called when the window receives the keydown.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onKeydown( e: KeyboardEvent ): void {\n    if ( this.isActive() ) {\n      const key     = normalizeKey( e.key );\n      const arrowUp = key === 'ArrowUp';\n\n      if ( key === 'ArrowDown' || arrowUp ) {\n        this.focus( arrowUp );\n        prevent( e );\n      }\n    }\n  }\n\n  /**\n   * Sets focus on the menu item in order.\n   *\n   * @param backwards - Whether to decrement or increment the menu index.\n   */\n  private focus( backwards: boolean ): void {\n    const buttons = queryAll<HTMLButtonElement>( this.wrapper, `.${ CLASS_CONTEXT_MENU_BUTTON }` );\n    const { length } = buttons;\n\n    if ( length ) {\n      this.index += backwards ? -1 : 1;\n\n      if ( this.index < 0 ) {\n        this.index = length - 1;\n      } else if ( this.index >= length ) {\n        this.index = 0;\n      }\n\n      buttons[ this.index ].focus();\n    }\n  }\n\n  /**\n   * Moves the menu to the provided client coordinates.\n   *\n   * @param clientX - A client x coordinate.\n   * @param clientY - A client y coordinate.\n   */\n  private move( clientX: number, clientY: number ): void {\n    const { wrapper, wrapper: { clientWidth }, Measure: { scrollerRect } } = this;\n    const { documentElement } = document;\n\n    if ( clientX + clientWidth > documentElement.clientWidth - MARGIN_RIGHT ) {\n      clientX -= clientWidth;\n    }\n\n    clientY = min( clientY, height( documentElement ) - height( wrapper ) - MARGIN_BOTTOM );\n\n    styles( wrapper, {\n      top : unit( clientY - scrollerRect.top ),\n      left: unit( clientX - scrollerRect.left ),\n    } );\n  }\n\n  /**\n   * Checks whether the editor contains the passed element/event target or not.\n   *\n   * @param target - An EventTarget object that is an Element instance in most cases.\n   *\n   * @return `true` if the editor contains the target, or otherwise `false`.\n   */\n  private contains( target: EventTarget | Element ): boolean {\n    return isHTMLElement( target ) && this.elements.editor.contains( target );\n  }\n\n  /**\n   * Creates elements for menu items.\n   *\n   * @param group - A group ID.\n   */\n  private build( group: string ): void {\n    const { lists, elm } = this.groups[ group ];\n    text( elm, '' );\n\n    forOwn( lists, ( settings, key ) => {\n      const list = create( 'ul', [ CLASS_CONTEXT_MENU_LIST, `${ CLASS_CONTEXT_MENU_LIST }--${ key }` ], elm );\n\n      settings = settings.map( settings => {\n        settings.parent = create( 'li', CLASS_CONTEXT_MENU_ITEM, list );\n        return settings;\n      } );\n\n      const buttons = this.createButtons<ContextMenu>( settings, null, this, CLASS_CONTEXT_MENU_BUTTON );\n\n      forOwn( buttons, ( button, id ) => {\n        const buttonSettings = this.findSettings( settings, id );\n        assert( buttonSettings );\n\n        attr( button, { role: 'menuitem' } );\n\n        this.bind( button, 'click', () => {\n          this.emit( EVENT_CONTEXT_MENU_CLICKED, this, id, button );\n          this.hide();\n        } );\n\n        if ( buttonSettings.disableOnReadOnly ) {\n          button.disabled = this.Editor.readOnly;\n          this.on( EVENT_READONLY, ( e, readOnly ) => { button.disabled = readOnly } );\n        }\n\n        this.bind( button, 'mouseover', () => {\n          button.focus();\n        } );\n      } );\n\n      this.buttons = assign( {}, this.buttons, buttons );\n    } );\n  }\n\n  /**\n   * Finds the each button settings from the array of settings.\n   *\n   * @param settings - An array with settings.\n   * @param id       - A button ID to find.\n   *\n   * @return The found button settings.\n   */\n  private findSettings( settings: ContextMenuButtonSettings[], id: string ): ContextMenuButtonSettings {\n    for ( let i = 0; i < settings.length; i++ ) {\n      if ( settings[ i ].id === id ) {\n        return settings[ i ];\n      }\n    }\n  }\n\n  /**\n   * Registers a menu item or items.\n   *\n   * @param group - A group ID. If it does not exist, a new group will be generated.\n   * @param list  - A list ID.\n   * @param settings - An menu item or items.\n   */\n  register( group: string, list: string, settings: ContextMenuButtonSettings[] ): void {\n    const { groups } = this;\n\n    if ( ! groups[ group ] ) {\n      groups[ group ] = {\n        elm  : div( [ CLASS_CONTEXT_MENU_GROUP, `${ CLASS_CONTEXT_MENU_GROUP }--${ group }` ] ),\n        lists: {},\n      };\n    }\n\n    settings.forEach( settings => {\n      const label    = this.i18n[ settings.i18n || settings.id ];\n      const shortcut = settings.shortcut ? this.Keymap.getShortcut( settings.shortcut ) : '';\n\n      settings.html = settings.html || `<span class=\"${ CLASS_CONTEXT_MENU_LABEL }\">${ label }</span>`\n        + ( shortcut ? `<span class=\"${ CLASS_CONTEXT_MENU_SHORTCUT }\">${ shortcut }</span>` : '' );\n    } );\n\n    const { lists } = groups[ group ];\n    lists[ list ] = ( lists[ list ] || [] ).concat( settings );\n  }\n\n  /**\n   * Displays the context menu.\n   *\n   * @param group - A group ID.\n   */\n  show( group: string ): void {\n    if ( this.groups[ group ] ) {\n      this.build( group );\n      super.show( group );\n      this.index = -1;\n      this.emit( EVENT_CONTEXT_MENU_OPENED );\n    }\n  }\n\n  /**\n   * Hides the context menu.\n   */\n  hide(): void {\n    if ( this.isActive() ) {\n      super.hide();\n      this.buttons = null;\n      this.emit( EVENT_CONTEXT_MENU_CLOSED );\n    }\n  }\n}\n","import { create, focus, remove, styles } from '../../utils';\n\n\n/**\n * Holds the clipboard object. IE does not support this object.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/Navigator/clipboard\n *\n * @since 0.1.0\n */\nconst { clipboard } = navigator;\n\n/**\n * The class for normalizing different copy/paste behaviours in browsers.\n *\n * @since 0.1.0\n */\nexport class Clipboard {\n  /**\n   * Creates a temporary textarea element.\n   *\n   * @param text - A value for the textarea.\n   *\n   * @return A created element.\n   */\n  protected create( text: string ): HTMLTextAreaElement {\n    const textarea = create( 'textarea', {}, document.body );\n    const offset   = '-999999px';\n    styles( textarea, { position: 'absolute', top: offset, left: offset } );\n\n    textarea.value = text;\n    focus( textarea );\n    textarea.setSelectionRange( 0, text.length );\n\n    return textarea;\n  }\n\n  /**\n   * Pastes the text via execCommand for old browsers.\n   *\n   * @return A pasted text.\n   */\n  protected execPaste(): string {\n    const textarea = this.create( '' );\n    document.execCommand( 'paste' );\n\n    const { value } = textarea;\n    remove( textarea );\n\n    return value;\n  }\n\n  /**\n   * Copies the provided text via execCommand for old browsers.\n   *\n   * @param text     - A text to copy.\n   * @param onFailed - Optional. A callback fired when copy failed.\n   */\n  protected execCopy( text: string, onFailed?: () => void ): void {\n    const textarea = this.create( text );\n\n    try {\n      document.execCommand( 'copy' );\n    } catch ( e ) {\n      if ( onFailed ) {\n        onFailed();\n      }\n    }\n\n    remove( textarea );\n  }\n\n  /**\n   * Pastes the clipboard text.\n   *\n   * @param onPaste - A callback fired after pasting a text, taking a pasted value as the first argument.\n   */\n  paste( onPaste: ( text: string ) => void ): void {\n    if ( clipboard ) {\n      clipboard.readText().then( onPaste );\n    } else {\n      onPaste( this.execPaste() );\n    }\n  }\n\n  /**\n   * Copies the passed text.\n   *\n   * @param text     - A text to copy.\n   * @param onFailed - Optional. A callback fired when copy failed.\n   */\n  copy( text: string, onFailed?: () => void ): void {\n    if ( clipboard ) {\n      clipboard.writeText( text ).catch( () => {\n        this.execCopy( text, onFailed );\n      } );\n    } else {\n      this.execCopy( text, onFailed );\n    }\n  }\n}\n","import { Elements, EventBusEvent, Position } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { CONTEXT_MENU_EDIT, CONTEXT_MENU_SELECTION, MAIN_CONTEXT_MENU_ID } from '../../constants/context-menu';\nimport {\n  EVENT_CHANGE,\n  EVENT_CHANGED,\n  EVENT_CONTEXT_MENU_CLICKED,\n  EVENT_COPY,\n  EVENT_CUT,\n  EVENT_KEYDOWN,\n  EVENT_PASTE,\n} from '../../constants/events';\nimport { count, includes, isIE, isUndefined, normalizeKey, prevent, toArray } from '../../utils';\nimport { ContextMenu } from '../ContextMenu/ContextMenu';\nimport { Clipboard } from './Clipboard';\n\n\n/**\n * The class for editing the code.\n *\n * @since 0.1.0\n */\nexport class Edit extends Component {\n  /**\n   * Indicates whether lines has been deleted by an input or not.\n   */\n  private deletedByInput: boolean;\n\n  /**\n   * Holds the Clipboard instance.\n   */\n  private clipboard = new Clipboard();\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.register();\n    this.listen();\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    const { editable } = this.elements;\n\n    this.on( EVENT_KEYDOWN, this.onKeydown, this );\n\n    this.bind( editable, 'paste', this.onPaste, this );\n\n    this.bind( editable, 'copy cut', e => {\n      this[ e.type ]();\n    } );\n\n    this.bind( editable, 'dragover drop paste cut', e => {\n      prevent( e, true );\n    } );\n\n    this.on( EVENT_CONTEXT_MENU_CLICKED, this.onMenuClick, this );\n\n    if ( isIE() ) {\n      this.bind( editable, 'compositionstart', e => {\n        if ( this.deletedByInput ) {\n          prevent( e, true );\n        }\n      } );\n    }\n  }\n\n  /**\n   * Called when any key is pressed.\n   *\n   * @param e  - An EventBusEvent object.\n   * @param ke - A KeyboardEvent object.\n   */\n  private onKeydown( e: EventBusEvent, ke: KeyboardEvent ): void {\n    const { Selection } = this;\n    const key   = normalizeKey( ke.key );\n    const isKey = ( keys: string | string[] ) => includes( toArray( keys ), key );\n\n    this.deletedByInput = false;\n\n    if ( this.Keymap.matches( ke, 'selectAll' ) ) {\n      Selection.selectAll();\n      return prevent( ke, true );\n    }\n\n    if ( ke.altKey || ke.metaKey || ke.ctrlKey ) {\n      return;\n    }\n\n    if ( Selection.isMultiline() ) {\n      if ( key.length === 1 || isKey( [ 'Process', 'Enter' ] ) ) {\n        this.delete();\n        this.deletedByInput = true;\n      } else if ( isKey( [ 'Delete', 'Backspace' ] ) ) {\n        this.delete();\n        prevent( ke );\n      }\n    }\n  }\n\n  /**\n   * Called when the context menu item is clicked.\n   *\n   * @param e    - An EventBusEvent object.\n   * @param menu - A ContextMenu instance.\n   * @param id   - The ID of the clicked item.\n   */\n  private onMenuClick( e: EventBusEvent, menu: ContextMenu, id: string ): void {\n    const { Selection } = this;\n\n    if ( id === 'copy' || id === 'cut' ) {\n      if ( ! this.isSelected() ) {\n        Selection.selectLine( undefined, id === 'copy', true );\n      }\n\n      this[ id ]();\n    } else if ( id === 'paste' ) {\n      this.clipboard.paste( this.paste.bind( this ) );\n    } else if ( id === 'selectAll' ) {\n      Selection.selectAll();\n    }\n  }\n\n  /**\n   * Called when the text is being pasted to the editor.\n   *\n   * @param e - A ClipboardEvent object.\n   */\n  private onPaste( e: ClipboardEvent ): void {\n    const string = ( e.clipboardData || window[ 'clipboardData' ] ).getData( 'text' );\n\n    if ( string ) {\n      this.paste( string );\n    }\n\n    prevent( e );\n  }\n\n  /**\n   * Registers items to the context menu.\n   */\n  private register(): void {\n    const { ContextMenu } = this;\n    ContextMenu.register( MAIN_CONTEXT_MENU_ID, 'edit', CONTEXT_MENU_EDIT );\n    ContextMenu.register( MAIN_CONTEXT_MENU_ID, 'selection', CONTEXT_MENU_SELECTION );\n  }\n\n  /**\n   * Checks if some texts are selected or not.\n   * Be aware that this is not same with negating getSelection().isCollapsed.\n   *\n   * @return `true` if some texts are selected, or otherwise `false`.\n   */\n  private isSelected(): boolean {\n    return ! this.Selection.isCollapsed();\n  }\n\n  /**\n   * Checks if the Editor is editable or not.\n   *\n   * @return `true` if the Editor is editable.\n   */\n  private isEditable(): boolean {\n    return ! this.Editor.readOnly;\n  }\n\n  /**\n   * Deletes the selected text.\n   * Do not set the focus back to the editable area to receive the input.\n   */\n  delete(): void {\n    if ( this.isSelected() ) {\n      this.paste( '', 'delete' );\n    }\n  }\n\n  /**\n   * Pastes the provided text at the current position.\n   *\n   * @param string - A string to paste.\n   * @param type   - Optional. Specifies the input type.\n   */\n  paste( string: string, type = 'paste' ): void {\n    if ( ! this.isEditable() ) {\n      return;\n    }\n\n    if ( type === 'paste' ) {\n      this.emit( EVENT_PASTE, string );\n    }\n\n    const { Selection, Code } = this;\n    const { start, end } = Selection.get();\n    const size     = count( string, LINE_BREAK ) + 1;\n    const startRow = start[ 0 ];\n    const endRow   = startRow + size - 1;\n    const endLine  = string.slice( string.lastIndexOf( LINE_BREAK ) + 1 );\n    const col      = endLine.length + ( size > 1 ? 0 : start[ 1 ] );\n    const position = [ endRow, col ] as Position;\n\n    this.emit( EVENT_CHANGE, type );\n\n    Code.replaceRange( start, end, string );\n\n    this.Sync.sync( startRow, endRow, endRow );\n    Selection.set( position );\n\n    this.emit( EVENT_CHANGED, type );\n  }\n\n  /**\n   * Copies the provided text to the clipboard.\n   * If the string is not provided, this tries to copy the current selection.\n   *\n   * @param string        - Optional. A string to copy.\n   * @param skipSelection - Optional. Whether to restore the current range after copy or not.\n   */\n  copy( string?: string, skipSelection?: boolean ): void {\n    const { failedToCopy } = this.i18n;\n    const onFailed  = () => {\n      if ( this.require( 'Dialog' ) ) {\n        this.invoke( 'Dialog', 'message', failedToCopy );\n      } else {\n        alert( this.i18n.failedToCopy );\n      }\n    };\n\n    const copySelection = isUndefined( string );\n    string = copySelection ? this.Selection.toString() : string;\n\n    this.emit( EVENT_COPY, string );\n\n    const { Selection } = this;\n    const range = Selection.get( false );\n\n    this.clipboard.copy( string, onFailed );\n\n    if ( ! skipSelection ) {\n      Selection.set( range.start, range.end );\n    }\n  }\n\n  /**\n   * Cuts the selected code.\n   */\n  cut(): void {\n    if ( this.isSelected() && this.isEditable() ) {\n      this.emit( EVENT_CUT );\n      this.copy( undefined, true );\n      this.delete();\n    }\n  }\n\n  /**\n   * Cuts the current line.\n   * To collapse the selection to the start after copy,\n   * this method does not utilize the paste function.\n   */\n  cutLine(): void {\n    if ( ! this.isEditable() ) {\n      return;\n    }\n\n    this.emit( EVENT_CUT );\n\n    const { Selection } = this;\n    const { start: [ startRow ] } = Selection.get();\n    const position = [ startRow, 0 ] as Position;\n\n    this.View.jump( startRow );\n    Selection.selectLine( startRow, false );\n\n    this.copy( undefined, true );\n\n    Selection.update( position );\n\n    this.emit( EVENT_CHANGE );\n\n    this.Code.replaceLines( startRow, startRow, '' );\n    this.Sync.sync( startRow, startRow );\n\n    Selection.set( position );\n\n    this.emit( EVENT_CHANGED );\n  }\n}\n","import { Elements, InputState, Position, TokenInfo } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { LINE_BREAK } from '../../constants/characters';\nimport {\n  EVENT_CHANGE,\n  EVENT_CHANGED,\n  EVENT_COMPOSITION_END,\n  EVENT_COMPOSITION_START,\n  EVENT_COMPOSITION_UPDATE,\n  EVENT_FOCUS_LINE_CHANGED,\n  EVENT_INPUT,\n  EVENT_KEYDOWN,\n  EVENT_NEWLINE,\n} from '../../constants/events';\nimport { ARROW_KEYS } from '../../constants/keys';\nimport {\n  assign,\n  getSelection,\n  isIE,\n  isPrevented,\n  isUndefined,\n  nextTick,\n  normalizeKey,\n  prevent,\n  text,\n} from '../../utils';\n\n\n/**\n * The input type for composition.\n *\n * @since 0.1.0\n */\nconst COMPOSITION_INPUT_TYPE = 'composition';\n\n/**\n * The class for handling the user input.\n *\n * @since 0.1.0\n */\nexport class Input extends Component {\n  /**\n   * Holds the TokenInfo object when any key is pressed.\n   */\n  info: TokenInfo | null;\n\n  /**\n   * Indicates whether the input is in composition session or not.\n   */\n  composing: boolean;\n\n  /**\n   * Keeps the latest focus line.\n   */\n  line: Element;\n\n  /**\n   * Keeps the latest focus row index.\n   */\n  row: number;\n\n  /**\n   * Holds the current state.\n   */\n  private state: InputState;\n\n  /**\n   * Indicates whether the input is currently disabled or not.\n   */\n  private _disabled: boolean;\n\n  /**\n   * Initialized the component.\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.listen();\n  }\n\n  /**\n   * Listen to some events.\n   */\n  private listen(): void {\n    const { editable } = this.elements;\n\n    this.bind( editable, 'keydown', this.onKeydown, this );\n    this.bind( editable, isIE() ? 'textinput' : 'input', this.onInput, this );\n    this.bind( editable, 'compositionstart', this.onCompositionStart, this );\n    this.bind( editable, 'compositionupdate', this.onCompositionUpdate, this );\n    this.bind( editable, 'compositionend', this.onCompositionEnd, this );\n\n    this.on( EVENT_FOCUS_LINE_CHANGED, ( e, line, row ) => {\n      this.line = line;\n      this.row  = row;\n    } );\n  }\n\n  /**\n   * Called when the composition starts.\n   * Needs to emit the `change` event at this timing to save the start position.\n   * Note that some browsers do not support a CompositionEvent object.\n   *\n   * @param e - A CompositionEvent object or a regular Event object.\n   */\n  private onCompositionStart( e: CompositionEvent ): void {\n    if ( this.disabled ) {\n      const { Editor, Selection } = this;\n      const range = Selection.get( false );\n      getSelection().removeAllRanges();\n      Editor.blur();\n\n      nextTick( () => {\n        Editor.focus();\n        Selection.set( range.start, range.end );\n      } );\n\n      return;\n    }\n\n    this.composing = true;\n    this.set( COMPOSITION_INPUT_TYPE );\n    this.emit( EVENT_COMPOSITION_START, e );\n    this.emit( EVENT_CHANGE, COMPOSITION_INPUT_TYPE );\n  }\n\n  /**\n   * Called whenever the composing content is updated.\n   *\n   * @param e - A CompositionEvent object or a regular Event object.\n   */\n  private onCompositionUpdate( e: CompositionEvent ): void {\n    nextTick( () => {\n      this.Selection.update( this.getCaretPosition() );\n      this.emit( EVENT_COMPOSITION_UPDATE, e );\n    } );\n  }\n\n  /**\n   * Called when the composition ends.\n   *\n   * @param e - A CompositionEvent object or a regular Event object.\n   */\n  private onCompositionEnd( e: CompositionEvent ): void {\n    this.composing = false;\n    this.apply();\n    this.emit( EVENT_COMPOSITION_END, e );\n  }\n\n  /**\n   * Called whenever any key is pressed.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onKeydown( e: KeyboardEvent ): void {\n    const key = normalizeKey( e.key );\n    const { altKey, shiftKey } = e;\n\n    if ( this.disabled && ! ARROW_KEYS.includes( key ) ) {\n      return prevent( e, true );\n    }\n\n    this.emit( EVENT_KEYDOWN, e );\n\n    if ( isPrevented( e ) ) {\n      return;\n    }\n\n    this.info = this.lines.getInfoAt( this.getCaretPosition() );\n    this.set( 'input', { key } );\n\n    if ( key === 'Enter' ) {\n      this.handleEnter( e );\n      return;\n    }\n\n    if ( this.Selection.isCollapsed() ) {\n      if ( key === 'Delete' && ! shiftKey && ! altKey ) {\n        this.handleDelete( e );\n      } else if ( key === 'Backspace' && ! altKey ) {\n        this.handleBackspace( e );\n      }\n    }\n  }\n\n  /**\n   * Called whenever any input is received.\n   * Need to wait for the `compositionend` before calling `apply()`.\n   */\n  private onInput( e: InputEvent ): void {\n    this.emit( EVENT_INPUT, this, e );\n\n    if ( ! this.composing ) {\n      this.apply();\n    }\n  }\n\n  /**\n   * Handles the Enter key.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private handleEnter( e: KeyboardEvent ): void {\n    if ( ! this.composing ) {\n      this.set( 'newline', {\n        key     : 'Enter',\n        value   : this.before + LINE_BREAK + this.after,\n        position: [ this.row + 1, 0 ],\n      } );\n\n      this.emit( EVENT_NEWLINE, this );\n      this.apply();\n      prevent( e );\n    }\n  }\n\n  /**\n   * Handles the delete key.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private handleDelete( e: KeyboardEvent ): void {\n    const { row, lines } = this;\n\n    if ( this.col === this.value.length && row < lines.length - 1 ) {\n      this.apply( {\n        type  : 'deleteNext',\n        key   : 'Delete',\n        value : this.value + lines[ row + 1 ].text,\n        endRow: row + 1,\n      } );\n\n      prevent( e );\n    }\n  }\n\n  /**\n   * Handles the backspace key.\n   */\n  private handleBackspace( e: KeyboardEvent ): void {\n    const { row } = this;\n\n    if ( this.col === 0 && row > 0 ) {\n      const prev = this.lines[ row - 1 ].text;\n\n      this.apply( {\n        type    : 'removePrev',\n        key     : 'Backspace',\n        value   : prev + this.value,\n        startRow: row - 1,\n        position: [ row - 1, prev.length ],\n      } );\n\n      prevent( e );\n    }\n  }\n\n  /**\n   * Appends a line break if the provided row is not the end of the document.\n   *\n   * @param value - A value where the line break will be appended.\n   * @param row   - Optional. A row index.\n   *\n   * @return The value with the line break, or the provided value itself.\n   */\n  private appendLineBreak( value: string, row = this.row ): string {\n    return value + ( row < this.lines.length - 1 ? LINE_BREAK : '' );\n  }\n\n  /**\n   * Settles the final value to apply.\n   *\n   * @param value - A value to settle.\n   */\n  private settleValue( value: string ): string {\n    const { state } = this;\n\n    if ( state ) {\n      if ( state.insertion ) {\n        value = this.before + state.insertion + this.after;\n      } else if ( ! isUndefined( state.value ) ) {\n        value = state.value;\n      }\n    }\n\n    return this.appendLineBreak( value );\n  }\n\n  /**\n   * Settles the final position to apply.\n   *\n   * @param position - A position to settle.\n   */\n  private settlePosition( position: Position ): Position {\n    const { state } = this;\n\n    if ( state ) {\n      if ( state.position ) {\n        return state.position;\n      }\n\n      position[ 1 ] += state.offset || 0;\n    }\n\n    return position;\n  }\n\n  /**\n   * Returns the current caret position.\n   *\n   * @return A position of the caret.\n   */\n  private getCaretPosition(): Position {\n    return [ this.row, this.col ];\n  }\n\n  /**\n   * Sets the input state.\n   * If the state with the provided type exists, new props will be assigne to it.\n   *\n   * @param type  - The type of the state.\n   * @param props - Optional. An object with state values.\n   */\n  set( type: string, props: Omit<InputState, 'type'> = {} ): void {\n    const { state } = this;\n\n    if ( state && state.type === type ) {\n      this.state = assign( state, props );\n    } else {\n      this.state = assign( { type }, props );\n    }\n  }\n\n  /**\n   * Returns the current state object.\n   */\n  get(): InputState | null {\n    return this.state;\n  }\n\n  /**\n   * Applies the current input state to the editor.\n   *\n   * @param state - Optional. A new state to apply.\n   */\n  apply( state?: InputState ): void {\n    this.state = state || this.state;\n\n    if ( ! this.state || ! this.line ) {\n      return;\n    }\n\n    const { Selection, row } = this;\n    const { type, startRow = row, endRow = row } = this.state;\n    const position = this.getCaretPosition();\n\n    if ( type !== COMPOSITION_INPUT_TYPE ) {\n      this.emit( EVENT_CHANGE, type );\n    }\n\n    this.View.jump( endRow );\n    this.Code.replaceLines( startRow, endRow, this.settleValue( this.value ) );\n    this.Sync.sync( startRow, endRow );\n\n    Selection.set( this.settlePosition( position ) );\n\n    this.emit( EVENT_CHANGED, type );\n\n    this.state = null;\n    this.info  = null;\n  }\n\n  /**\n   * Inserts a text at the current or specified index.\n   *\n   * @param text  - A text to insert.\n   * @param index - Optional. An index where the text is inserted.\n   */\n  insert( text: string, index = this.col ): void {\n    const { value } = this;\n    this.value = value.slice( 0, index ) + text + value.slice( index );\n  }\n\n  /**\n   * Returns a character at the current caret position or specified col index.\n   *\n   * @param col - Optional. A col index of the desired character.\n   *\n   * @return A character at the specified position.\n   */\n  char( col = this.col ): string {\n    return this.value.charAt( col );\n  }\n\n  /**\n   * Returns the value of the current line.\n   *\n   * @return A text of the current line.\n   */\n  get value(): string {\n    return text( this.line ) || '';\n  }\n\n  /**\n   * Sets a new value to the current line.\n   *\n   * @param value - A new value to set.\n   */\n  set value( value: string ) {\n    text( this.line, value );\n  }\n\n  /**\n   * Returns the string of the current line before the caret position.\n   *\n   * @return The string before the caret.\n   */\n  get before(): string {\n    return this.value.slice( 0, this.col );\n  }\n\n  /**\n   * Returns the string of the current line after the caret position.\n   *\n   * @return The string after the caret.\n   */\n  get after(): string {\n    return this.value.slice( this.col );\n  }\n\n  /**\n   * Returns the length of the current line.\n   *\n   * @return The length of the current line.\n   */\n  get length(): number {\n    return this.value.length;\n  }\n\n  /**\n   * Returns the current col index.\n   *\n   * @return The col index of the caret.\n   */\n  get col(): number {\n    const { line } = this;\n    const selection = getSelection();\n\n    if ( line && selection.rangeCount > 0 ) {\n      const range = selection.getRangeAt( 0 ).cloneRange();\n      range.setStart( line, 0 );\n      return range.toString().length;\n    }\n\n    return 0;\n  }\n\n  /**\n   * Returns `true` if the input is disabled.\n   *\n   * @return `true` if the input is disabled.\n   */\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  /**\n   * Makes the input disabled.\n   * All keys are ignored while it is disabled.\n   */\n  set disabled( disabled: boolean ) {\n    this._disabled = disabled;\n  }\n}\n","import { Elements, EventBusEvent, KeyMatcher } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_KEYDOWN, EVENT_KEYMAP } from '../../constants/events';\nimport { KEYMAP, MODIFIER_KEYS } from '../../constants/keymap';\nimport { assign, forOwn, includes, isArray, isMac, isString, matchesKey, normalizeKey, toArray } from '../../utils';\n\n\n/**\n * The component for detecting keyboard shortcuts and distributing them as internal events.\n *\n * @since 0.1.0\n */\nexport class Keymap extends Component {\n  /**\n   * Stores the target keys.\n   */\n  private keys: string[] = [];\n\n  /**\n   * The collection of shortcuts.\n   */\n  private keymap: Record<string, KeyMatcher| KeyMatcher[] | null | false>;\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    this.keymap = assign( {}, KEYMAP, this.options.keymap );\n\n    forOwn( this.keymap, matchers => {\n      if ( matchers ) {\n        this.keys.push( ...toArray( matchers, true ).map( matcher => {\n          return matcher[ 0 ].toUpperCase();\n        } ) );\n      }\n    } );\n\n    this.on( EVENT_KEYDOWN, this.onKeydown, this, 0 );\n  }\n\n  /**\n   * Called when any key is pressed.\n   *\n   * @param e  - An EventBusEvent object.\n   * @param ke - A KeyboardEvent object.\n   */\n  private onKeydown( e: EventBusEvent, ke: KeyboardEvent ): void {\n    if ( ! this.Editor.readOnly ) {\n      if ( includes( this.keys, normalizeKey( ke.key ).toUpperCase() ) ) {\n        const action = this.find( ke );\n\n        if ( action ) {\n          this.emit( `${ EVENT_KEYMAP }:${ action }`, ke, action );\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds the shortcut action from keymap definition.\n   *\n   * @param e - A KeyboardEvent object.\n   *\n   * @return A found action.\n   */\n  private find( e: KeyboardEvent ): string {\n    let action  = '';\n\n    forOwn( this.keymap, ( matchers, id ) => {\n      if ( this.matches( e, id ) ) {\n        action = id;\n        return false;\n      }\n    } );\n\n    return action;\n  }\n\n  /**\n   * Checks if the keyboard event matches keys of the provided ID or not.\n   *\n   * @param e  - A KeyboardEvent object.\n   * @param id - An ID.\n   *\n   * @return `true` if the keyboard event matches keys of the ID, or otherwise `false`.\n   */\n  matches( e: KeyboardEvent, id: string ): boolean {\n    const matchers = this.keymap[ id ];\n    return matchers && matchesKey( e, matchers );\n  }\n\n  /**\n   * Builds a shortcut that describes keys of the provided keymap ID or a KeyMatcher object.\n   * For example, `undo` or `[ 'Z', true ]` will be `Ctrl + Z`.\n   *\n   * @param id - An ID in a keymap or a KeyMatcher object.\n   *\n   * @return A built shortcut as a string.\n   */\n  getShortcut( id: string | KeyMatcher ): string {\n    const matchers = isString( id ) ? this.keymap[ id ] : id;\n\n    if ( matchers ) {\n      const matcher = isArray( matchers[ 0 ] ) ? matchers[ 0 ] : matchers as KeyMatcher;\n\n      if ( matcher ) {\n        const modifiers = MODIFIER_KEYS[ isMac() ? 'mac' : 'default' ];\n        const keys      = matcher.slice( 1 ).map( ( use, index ) => use && modifiers[ index ] ).filter( Boolean );\n        return keys.concat( matcher[ 0 ] ).join( '+' );\n      }\n    }\n\n    return '';\n  }\n}\n","/**\n * Checks is the platform is Mac or not.\n *\n * @return `true` if the platform is Mac, or otherwise `false`.\n */\nexport function isMac(): boolean {\n  return /Mac/i.test( navigator.platform );\n}\n","import { create, isIE, repeat } from '../../utils';\n\n\n/**\n * The utility class for measuring texts.\n *\n * @since 0.1.0\n */\nexport class MeasureText {\n  /**\n   * Holds the context object.\n   */\n  private context: CanvasRenderingContext2D;\n\n  /**\n   * Stores width of characters.\n   */\n  private chars: Record<string, number> = {};\n\n  /**\n   * The MeasureText constructor.\n   *\n   * @param font - A font string for the context.\n   */\n  constructor( font: string ) {\n    this.context = create( 'canvas' ).getContext( '2d' );\n    this.context.font = font;\n  }\n\n  /**\n   * Returns the width of the provided character.\n   * Note that IE rounds the width of the text.\n   *\n   * @param char - A character to measure.\n   *\n   * @return The width of the character in pixel.\n   */\n  private getCharWidth( char: string ): number {\n    const { chars, context } = this;\n\n    return chars[ char ] || ( chars[ char ] = isIE()\n      ? context.measureText( repeat( char, 10 ) ).width / 10\n      : context.measureText( char ).width );\n  }\n\n  /**\n   * Returns the width of the provided text.\n   *\n   * @param text - A text to measure.\n   */\n  measure( text: string ): number {\n    let width = 0;\n\n    for ( let i = 0; i < text.length; i++ ) {\n      width += this.getCharWidth( text.charAt( i ) );\n    }\n\n    return width;\n  }\n}\n","import { Elements, EventBusEvent, OffsetPosition, Position } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { CLASS_LINE } from '../../constants/classes';\nimport {\n  EVENT_MOUNT,\n  EVENT_RESIZE,\n  EVENT_SCROLL_HEIGHT_CHANGED,\n  EVENT_SCROLLED,\n  EVENT_WINDOW_SCROLL,\n} from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { clamp, div, rect, remove, round, styles } from '../../utils';\nimport { MeasureText } from './MeasureText';\n\n\n/**\n * The class for measuring offset positions and caches some values.\n *\n * @since 0.1.0\n */\nexport class Measure extends Component {\n  /**\n   * Caches the lineHeight.\n   */\n  private lineHeightCache: number;\n\n  /**\n   * Caches the DOMRect objects of some elements.\n   */\n  private rectCaches: { editor?: DOMRect, scroller?: DOMRect, container?: DOMRect } = {};\n\n  /**\n   * Keeps the current CSS font settings.\n   */\n  private font: string;\n\n  /**\n   * Holds the MeasureText instance.\n   */\n  private measureText: MeasureText;\n\n  /**\n   * Caches the padding numbers.\n   */\n  padding: { top: number, right: number, bottom: number, left: number };\n\n  /**\n   * The Measure constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.on( EVENT_MOUNT, this.onMount, this, 0 );\n  }\n\n  /**\n   * Called just before components are mounted.\n   * This component must be initialized earlier than other components.\n   *\n   * @param e        - An EventBusEvent object.\n   * @param elements - A collection of essential editor elements.\n   */\n  private onMount( e: EventBusEvent, elements: Elements ): void {\n    this.elements = elements;\n    this.createMeasureText();\n    this.updatePadding();\n    this.listen();\n  }\n\n  /**\n   * Listens to some events.\n   * The resize handler must be executed after the Style update listener and before others.\n   */\n  private listen(): void {\n    this.on( EVENT_RESIZE, () => {\n      this.lineHeightCache = 0;\n      this.updatePadding();\n      this.createMeasureText();\n      this.clearRectCaches();\n    }, 1 );\n\n    this.on( [ EVENT_SCROLL_HEIGHT_CHANGED, EVENT_SCROLLED, EVENT_WINDOW_SCROLL ], this.clearRectCaches, this, 1 );\n  }\n\n  /**\n   * Updates the cache of the padding.\n   */\n  private updatePadding(): void {\n    const { editor } = this.elements;\n    const line = div( CLASS_LINE, editor );\n\n    this.padding = {\n      top   : parseFloat( styles( editor, 'paddingTop' ) ) || 0,\n      bottom: parseFloat( styles( editor, 'paddingBottom' ) ) || 0,\n      left  : parseFloat( styles( line, 'paddingLeft' ) ) || 0,\n      right : parseFloat( styles( line, 'paddingRight' ) ) || 0,\n    };\n\n    remove( line );\n  }\n\n  /**\n   * Creates a `MeasureText` instance only when the font settings are changed.\n   */\n  private createMeasureText() {\n    const font = this.buildCSSFont();\n\n    if ( this.font !== font ) {\n      this.measureText = new MeasureText( font );\n      this.font = font;\n    }\n  }\n\n  /**\n   * Returns the CSS font string of the current environment.\n   *\n   * @return A built string.\n   */\n  private buildCSSFont(): string {\n    const { lines } = this.elements;\n    return `${ styles( lines, 'fontSize' ) } ${ styles( lines, 'fontFamily' ) }`;\n  }\n\n  /**\n   * Clears the all rect caches.\n   */\n  private clearRectCaches(): void {\n    this.rectCaches = {};\n  }\n\n  /**\n   * Returns a top position of the line at the provided row.\n   *\n   * @param row - A row index.\n   *\n   * @return A top position in px.\n   */\n  getTop( row: number ): number {\n    return clamp( row, 0, this.lines.length - 1 ) * this.lineHeight;\n  }\n\n  /**\n   * Returns a bottom position of the line at the provided row.\n   *\n   * @param row - A row index.\n   *\n   * @return A bottom position in px.\n   */\n  getBottom( row: number ): number {\n    const { Code } = this;\n    const isLast = row >= Code.size - 1;\n    return this.getTop( row + 1 ) + ( isLast ? this.lineHeight : 0 );\n  }\n\n  /**\n   * Finds the closest row index with the provided position.\n   *\n   * @param top - A top position to search for.\n   *\n   * @return The closest row index.\n   */\n  closest( top: number ): number {\n    const row = round( ( top - this.padding.top ) / this.lineHeight );\n    return clamp( row, 0, this.lines.length - 1 );\n  }\n\n  /**\n   * Measures the provided string and returns the width.\n   *\n   * @param string - A string to measure.\n   *\n   * @return The width of the string.\n   */\n  measureWidth( string: string ): number {\n    return this.measureText.measure( string );\n  }\n\n  /**\n   * Converts the passed position to the BoundaryRect object.\n   *\n   * @param position - A position to convert.\n   *\n   * @return An object literal with top and left positions.\n   */\n  getOffset( position: Position ): OffsetPosition {\n    const { padding } = this;\n    const line = position[ 0 ] === this.Selection.focus[ 0 ] ? this.Input.value : this.Code.getLine( position[ 0 ] );\n\n    return {\n      top : this.getTop( position[ 0 ] ) + padding.top,\n      left: this.measureWidth( line.slice( 0, position[ 1 ] ) ) + padding.left,\n    };\n  }\n\n  /**\n   * Returns a DOMRect object of the editor element.\n   *\n   * @return A DOMRect object.\n   */\n  get editorRect(): DOMRect {\n    return ( this.rectCaches.editor = this.rectCaches.editor || rect( this.elements.editor ) );\n  }\n\n  /**\n   * Returns a DOMRect object of the scroller element.\n   *\n   * @return A DOMRect object.\n   */\n  get scrollerRect(): DOMRect {\n    return ( this.rectCaches.scroller = this.rectCaches.scroller || rect( this.elements.scroller ) );\n  }\n\n  /**\n   * Returns a DOMRect object of the container element.\n   *\n   * @return A DOMRect object.\n   */\n  get containerRect(): DOMRect {\n    return ( this.rectCaches.container = this.rectCaches.container || rect( this.elements.container ) );\n  }\n\n  /**\n   * Returns the line height in px.\n   *\n   * @return Line height in px.\n   */\n  get lineHeight(): number {\n    return ( this.lineHeightCache = this.lineHeightCache\n      || parseFloat( styles( this.elements.editor, 'lineHeight' ) ) );\n  }\n}\n","import { OffsetPosition, Elements, Position } from '@ryusei/code';\nimport { CLASS_MARKER } from '../../constants/classes';\nimport { Editor } from '../../core/Editor/Editor';\nimport { compare, max, unit } from '../../utils';\n\n\n/**\n * The class for highlighting arbitrary texts.\n *\n * @since 0.1.0\n */\nexport class Marker {\n  /**\n   * Holds the Editor instance.\n   */\n  protected Editor: Editor;\n\n  /**\n   * Holds the editor elements.\n   */\n  protected elements: Elements;\n\n  /**\n   * Holds the scroller element.\n   */\n  protected scroller: HTMLElement;\n\n  /**\n   * Caches the generated HTML string.\n   */\n  protected cache: string;\n\n  /**\n   * Holds the marker content.\n   */\n  protected content: string;\n\n  /**\n   * The Marker constructor.\n   *\n   * @param Editor   - An Editor instance.\n   * @param elements - A collection of editor elements.\n   */\n  constructor( Editor: Editor, elements: Elements ) {\n    this.Editor   = Editor;\n    this.elements = elements;\n    this.scroller = elements.scroller;\n  }\n\n  /**\n   * Calculates boundaries for drawing the marker.\n   *\n   * @param anchor - An anchor position.\n   * @param focus  - A focus position.\n   *\n   * @return An object with start and end boundaries.\n   */\n  protected calcBoundaries( anchor: Position, focus: Position ): { start: OffsetPosition, end: OffsetPosition } {\n    const { Measure } = this.Editor.Components;\n    const isBackward = compare( anchor, focus ) > 0;\n\n    return {\n      start: Measure.getOffset( isBackward ? focus : anchor ),\n      end  : Measure.getOffset( isBackward ? anchor : focus ),\n    };\n  }\n\n  /**\n   * Generates HTML of the marker.\n   *\n   * @param anchor   - An anchor position.\n   * @param focus    - A focus position.\n   * @param useCache - A focus position.\n   *\n   * @return The generated HTML string of the marker.\n   */\n  html( anchor: Position, focus: Position, useCache = true ): string {\n    if ( useCache && this.cache ) {\n      return this.cache;\n    }\n\n    const { Measure: { lineHeight, padding } } = this.Editor.Components;\n    const { start, end } = this.calcBoundaries( anchor, focus );\n    const diff       = end.top - start.top;\n    const fillHeight = diff - lineHeight;\n    const startLeft  = max( start.left, padding.left );\n\n    let html = '';\n\n    if ( diff ) {\n      html += this.buildLine( start.top, startLeft, '100%' );\n      html += this.buildLine( end.top, padding.left, max( end.left - padding.left, 0 ) );\n\n      if ( fillHeight > 0 ) {\n        html += this.buildLine( start.top + lineHeight, padding.left, '100%', fillHeight );\n      }\n    } else {\n      html += this.buildLine( start.top, startLeft, max( end.left - startLeft, 0 ) );\n    }\n\n    this.cache = html;\n\n    return html;\n  }\n\n  /**\n   * Builds HTML of each line.\n   *\n   * @param top    - A top position.\n   * @param left   - A left position.\n   * @param width  - Width.\n   * @param height - Optional. Height.\n   *\n   * @return A generated HTML string.\n   */\n  protected buildLine( top: number, left: number, width: number | string, height?: number | string ): string {\n    let styles = `top: ${ unit( top ) }; left: ${ unit( left ) }; width: ${ unit( width ) };`;\n\n    if ( height ) {\n      styles += ` height: ${ unit( height ) };`;\n    }\n\n    return `<div class=\"${ CLASS_MARKER }\" style=\"${ styles }\"></div>`;\n  }\n}\n","import { Elements, Position } from '@ryusei/code';\nimport { CLASS_MARKERS } from '../../constants/classes';\nimport { Editor } from '../../core/Editor/Editor';\nimport { between, div, html, rect, remove } from '../../utils';\nimport { Marker } from './Marker';\n\n\n/**\n * The class for highlighting arbitrary texts.\n *\n * @since 0.1.0\n */\nexport class StandaloneMarker extends Marker {\n  /**\n   * The element for wrapping marker fragments.\n   */\n  private readonly wrapper: HTMLDivElement;\n\n  /**\n   * The Marker constructor.\n   *\n   * @param Editor   - An Editor instance.\n   * @param elements - A collection of editor elements.\n   * @param classes  - Optional. Class names for the wrapper element.\n   */\n  constructor( Editor: Editor, elements: Elements, classes?: string | string[] ) {\n    super( Editor, elements );\n    this.wrapper = div( [ CLASS_MARKERS ].concat( classes ), elements.background );\n  }\n\n  /**\n   * Draws the range for the anchor to the focus.\n   *\n   * @param anchor - An anchor position.\n   * @param focus  - A focus position.\n   */\n  protected draw( anchor: Position, focus: Position ): void {\n    html( this.wrapper, this.html( anchor, focus, false ) );\n  }\n\n  /**\n   * Clears the marker.\n   */\n  protected clear(): void {\n    html( this.wrapper, '' );\n  }\n\n  /**\n   * Checks if the provided client position is inside the current range or not.\n   *\n   * @param clientX - X position that is relative to the client.\n   * @param clientY - Y position that is relative to the client.\n   *\n   * @return `true` if the position is inside the range, or otherwise `false`.\n   */\n  isInside( clientX: number, clientY: number ): boolean {\n    const { children } = this.wrapper;\n\n    for ( let i = 0; i < children.length; i++ ) {\n      const domRect = rect( children[ i ] );\n\n      if( domRect.width\n        && between( clientX, domRect.left, domRect.right )\n        && between( clientY, domRect.top, domRect.bottom )\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    remove( this.wrapper );\n  }\n}\n","import { Elements, EventBusEvent } from '@ryusei/code';\nimport { CLASS_MARKERS } from '../../constants/classes';\nimport { EVENT_RESIZE, EVENT_SELECTED, EVENT_SELECTING } from '../../constants/events';\nimport { CHANGED, CLICKED_RIGHT, COLLAPSED, SELECTED } from '../../constants/selection-states';\nimport { Editor } from '../../core/Editor/Editor';\nimport { rafThrottle } from '../../utils';\nimport { Selection } from '../Selection/Selection';\nimport { StandaloneMarker } from './StandaloneMarker';\n\n\n/**\n * The modifier class for the selection marker.\n *\n * @since 0.1.0\n */\nexport const CLASS_MARKER_SELECTION = `${ CLASS_MARKERS }--selection`;\n\n/**\n * The class for highlighting a selection range.\n *\n * @since 0.1.0\n */\nexport class SelectionMarker extends StandaloneMarker {\n  /**\n   * The SelectionMarker constructor.\n   *\n   * @param editor   - An Editor instance.\n   * @param elements - A collection of editor elements.\n   */\n  constructor( editor: Editor, elements: Elements ) {\n    super( editor, elements, CLASS_MARKER_SELECTION );\n    this.listen();\n  }\n\n  /**\n   * Listens to some events.\n   */\n  protected listen(): void {\n    const { event } = this.Editor;\n\n    event.on( EVENT_SELECTED, this.onStateChanged.bind( this ), this, 0 );\n    event.on( EVENT_SELECTING, rafThrottle( this.drawSelection.bind( this ) ) );\n    event.on( EVENT_RESIZE, () => {\n      this.clear();\n      this.drawSelection();\n    } );\n  }\n\n  /**\n   * Called when the selection state is changed.\n   *\n   * @param e         - An EventBusEvent object.\n   * @param Selection - A Selection instance.\n   * @param state     - A new state.\n   * @param prev      - A previous state.\n   */\n  private onStateChanged( e: EventBusEvent, Selection: Selection, state: number, prev: number ): void {\n    if ( Selection.is( COLLAPSED, CHANGED ) ) {\n      this.clear();\n    }\n\n    if ( Selection.is( CHANGED, SELECTED ) && prev !== CLICKED_RIGHT ) {\n      this.drawSelection();\n    }\n  }\n\n  /**\n   * Draws the current selection.\n   */\n  private drawSelection(): void {\n    const { Selection } = this.Editor.Components;\n\n    if ( ! Selection.isCollapsed() ) {\n      const range = Selection.get( false );\n      this.draw( range.start, range.end );\n    } else {\n      this.clear();\n    }\n  }\n}\n","import { Elements, Range as PositionRange, RangeData } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { CLASS_MARKERS } from '../../constants/classes';\nimport { EVENT_CHUNK_MOVED, EVENT_RESIZE, EVENT_SCROLLED } from '../../constants/events';\nimport { between, compare, div, forOwn, text, throttle } from '../../utils';\nimport { Marker } from './Marker';\nimport { SelectionMarker } from './SelectionMarker';\n\n\n/**\n * The throttle duration for calling the `observe` method while scrolling.\n *\n * @since 0.1.0\n */\nexport const OBSERVE_THROTTLE_DURATION = 200;\n\n/**\n * Limits the number of ranges to register.\n *\n * @since 0.1.0\n */\nexport const MAX_RANGES = 10000;\n\n/**\n * The class for highlighting the selection and arbitrary ranges.\n *\n * @since 0.1.0\n */\nexport class Range extends Component {\n  /**\n   * Holds the SelectionMarker instance.\n   */\n  selection: SelectionMarker;\n\n  /**\n   * Stores ranges with categorizing them into arbitrary groups.\n   */\n  readonly ranges: Record<string, RangeData[]>= {};\n\n  /**\n   * Stores wrapper elements of markers.\n   */\n  readonly groups: Record<string, HTMLDivElement> = {};\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.selection = new SelectionMarker( this.Editor, elements );\n\n    const observe = this.observe.bind( this, false );\n    this.on( EVENT_CHUNK_MOVED, throttle( observe, OBSERVE_THROTTLE_DURATION ) );\n    this.on( EVENT_SCROLLED, observe );\n    this.on( EVENT_RESIZE, this.observe.bind( this, true ) );\n  }\n\n  /**\n   * Observes ranges and draw/hide them.\n   *\n   * @param refresh - Optional. If `true`, redraws markers without their caches.\n   */\n  private observe( refresh?: boolean ): void {\n    if ( this.Editor ) {\n      forOwn( this.ranges, ( ranges, group ) => {\n        if ( this.groups[ group ] ) {\n          this.draw( group, refresh );\n        }\n      } );\n    }\n  }\n\n  /**\n   * Draws visible markers.\n   *\n   * @param group   - A group to draw.\n   * @param refresh - Optional. If `true`, redraws markers without their caches.\n   */\n  private draw( group: string, refresh?: boolean ): void {\n    const ranges = this.ranges[ group ];\n\n    let html = '';\n\n    ranges.forEach( data => {\n      const { range } = data;\n\n      if ( this.isVisible( range ) ) {\n        html += data.marker.html( range.start, range.end, ! refresh );\n      }\n    } );\n\n    this.groups[ group ].innerHTML = html;\n  }\n\n  /**\n   * Checks if the range should be drawn or not.\n   * This returns `true` when the range boundary is inside the viewport, or the range contains it.\n   *\n   * @param range - A range to check.\n   *\n   * @return `true` if the range should be drawn or otherwise `false`.\n   */\n  private isVisible( range: PositionRange ): boolean {\n    const { Chunk } = this;\n    const [ startRow ] = range.start;\n    const [ endRow ] = range.end;\n    return Chunk.includes( startRow ) || Chunk.includes( endRow ) || between( Chunk.start, startRow, endRow );\n  }\n\n  /**\n   * Registers ranges to the group and draw them as markers if they are inside viewport.\n   * If `concat` is `true`, sequential ranges will be concatenated as a single range.\n   *\n   * @param group       - A group name.\n   * @param ranges      - A range or ranges to draw.\n   * @param concat      - Optional. Determines whether to concat sequential ranges into the single one or not.\n   * @param constructor - Optional. Specifies the Marker constructor.\n   */\n  register( group: string, ranges: PositionRange[], concat = true, constructor: typeof Marker = Marker ): void {\n    const { ranges: info } = this;\n    let lastRange: PositionRange;\n\n    info[ group ] = info[ group ] || [];\n    ranges = ranges.slice( 0, MAX_RANGES );\n\n    for ( let i = 0; i < ranges.length; i++ ) {\n      const range = ranges[ i ];\n\n      if ( concat && lastRange && compare( lastRange.end, range.start ) === 0 ) {\n        lastRange.end = range.end;\n      } else {\n        lastRange = { start: range.start, end: range.end };\n        info[ group ].push( { range: lastRange, marker: new constructor( this.Editor, this.elements ) } );\n      }\n    }\n\n    if ( ! this.groups[ group ] ) {\n      const classes = [ CLASS_MARKERS, `${ CLASS_MARKERS }--${ group }` ];\n      this.groups[ group ] = div( classes, this.elements.background );\n    }\n\n    this.observe();\n  }\n\n  /**\n   * Clears ranges and rendered markers in the specified group.\n   * If the group name is omitted, all ranges will be cleared.\n   *\n   * @param group - Optional. A group name to clear.\n   */\n  clear( group?: string ): void {\n    if ( group ) {\n      const ranges = this.ranges[ group ];\n\n      if ( ranges ) {\n        text( this.groups[ group ], '' );\n        this.clearRanges( group );\n      }\n    } else {\n      forOwn( this.ranges, ( markers, key ) => { this.clear( key ) } );\n    }\n  }\n\n  /**\n   * Clears ranges in the specified group.\n   * Rendered markers are not cleared.\n   *\n   * @param group - A group name to clear.\n   */\n  clearRanges( group: string ): void {\n    this.ranges[ group ] = [];\n  }\n}\n","import { Position } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { startsWith, toArray } from '../../utils';\n\n\n/**\n * The class for checking a current state or category.\n * States and categories are defined by language tokenizers.\n *\n * @since 0.1.0\n */\nexport class Scope extends Component {\n  /**\n   * Checks if the current start position is in the specified state or category.\n   * With a `!` prefix, this returns `true` if the position is NOT inside the scope.\n   *\n   * @param names    - A name or names of scope.\n   * @param position - Optional. Specifies the position to check.\n   *\n   * @return `true` if the start position is inside the scope.\n   */\n  isIn( names: string | string[], position?: Position ): boolean {\n    names = toArray( names );\n\n    const states     = names.filter( name => name.indexOf( '#' ) > -1 );\n    const categories = names.filter( name => name.indexOf( '#' ) === -1 );\n\n    return this.inState( states, position ) && this.inCategory( categories, position );\n  }\n\n  /**\n   * Checks if the current start position is in the specified state or not.\n   * `!` is acceptable.\n   *\n   * @param states   - A state or state names.\n   * @param position - Optional. Specifies the position to check.\n   */\n  inState( states: string | string[], position?: Position ): boolean {\n    return this.inScope( states, false, position );\n  }\n\n  /**\n   * Checks if the current start position is in the specified category or not.\n   * `!` is acceptable.\n   *\n   * @param categories - A state or state names.\n   * @param position   - Optional. Specifies the position to check.\n   */\n  inCategory( categories: string | string[], position?: Position ): boolean {\n    return this.inScope( categories, true, position );\n  }\n\n  /**\n   * Checks if the current start position is in the specified state or not.\n   * If `category` is `true`, this method checks if the position is in the category or not.\n   *\n   * @param names    - A state or state names.\n   * @param category - Optional. Determines whether to check for a category or not.\n   * @param position - Optional. Specifies the position to check.\n   */\n  private inScope( names: string | string[], category: boolean, position?: Position ): boolean {\n    names = toArray( names );\n\n    const negated = names.filter( name => startsWith( name, '!' ) ).map( name => name.slice( 1 ) );\n\n    if ( negated.length && this.inScope( negated, category ) ) {\n      return false;\n    }\n\n    names = names.filter( name => ! startsWith( name, '!' ) );\n\n    return ! names.length || names.some( name => {\n      const info = this.lines.getInfoAt( position || this.Selection.get().start );\n      return info && info[ category ? 'category' : 'state' ] === name;\n    } );\n  }\n}\n","/**\n * Sets the `contentEditable` attribute of the provided element.\n *\n * @param elm      - An element.\n * @param editable - Whether to set the value to `true` or `false`.\n */\nexport function toggleEditable( elm: HTMLElement, editable: boolean ): void {\n  elm.contentEditable = editable ? 'true' : 'false';\n}\n","import { Position } from '@ryusei/code';\n\n\n/**\n * The origin position.\n *\n * @since 0.1.0\n */\nexport const ORIGIN: Position = [ 0, 0 ];\n\n/**\n * The delay time for reselection after scroll ends.\n *\n * @since 0.1.0\n */\nexport const DELAY_FOR_RESELECTION = 5;\n","import { EventBusCallback, EventBusEvent, EventHandler } from '@ryusei/code';\nimport { toArray } from '../utils';\n\n\n/**\n * The class for provides the simple event system.\n *\n * @since 0.1.0\n */\nexport class EventBus {\n  /**\n   * Holds all handlers.\n   */\n  protected handlers: Record<string, EventHandler[]> = {};\n\n  /**\n   * Registers an event handler.\n   *\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param callback - A callback function to register.\n   * @param key      - Optional. An object for an identifier of the handler.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   *                   Lower numbers correspond with earlier execution. The default value is 10.\n   */\n  on( events: string | string[], callback: EventBusCallback, key?: object, priority = 10 ): void {\n    toArray( events ).filter( Boolean ).join( ' ' ).split( ' ' ).forEach( eventNS => {\n      const [ event, namespace ] = eventNS.split( '.' );\n      const eventHandlers = this.handlers[ event ] || [];\n\n      eventHandlers.push( { event, callback, namespace, priority, key } );\n      eventHandlers.sort( ( handler1, handler2 ) => handler1.priority - handler2.priority );\n\n      this.handlers[ event ] = eventHandlers;\n    } );\n  }\n\n  /**\n   * Removes event handlers registered by `on()`.\n   * If only the event name is provided, all handlers that associate with the event are removed.\n   * If the event name and namespace are specified, handlers that associate with the event and namespace are removed.\n   *\n   * @param events - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param key    - Optional. An object for an identifier of the handler.\n   */\n  off( events: string | string[], key?: object ): void {\n    toArray( events ).filter( Boolean ).join( ' ' ).split( ' ' ).forEach( eventNS => {\n      const [ event, namespace ] = eventNS.split( '.' );\n      const eventHandlers = this.handlers[ event ];\n\n      if ( eventHandlers ) {\n        if ( key || namespace ) {\n          this.handlers[ event ] = eventHandlers.filter( handler => {\n            return ! ( handler.key === key && handler.namespace === namespace );\n          } );\n        } else {\n          this.handlers[ event ] = [];\n        }\n      }\n    } );\n  }\n\n  /**\n   * Triggers callback functions.\n   *\n   * @param event - An event name.\n   * @param args  - Optional. Any number of arguments to pass to callback functions.\n   */\n  emit( event: string, ...args: any[] ): void {\n    const eventHandlers = this.handlers[ event ];\n    const eventObject: EventBusEvent = { type: event };\n\n    if ( eventHandlers ) {\n      eventHandlers.forEach( handler => { handler.callback( eventObject, ...args ) } );\n    }\n  }\n\n  /**\n   * Removes all handlers.\n   */\n  destroy(): void {\n    this.handlers = {};\n  }\n}\n","import { Elements } from '@ryusei/code';\nimport { EVENT_BLUR, EVENT_FOCUS } from '../../constants/events';\nimport { ARROW_KEYS } from '../../constants/keys';\nimport {\n  CHANGED,\n  CLICKED_RIGHT,\n  COLLAPSED,\n  END,\n  EXTEND,\n  IDLE,\n  SELECTED,\n  SELECTING,\n  START,\n  UPDATE,\n} from '../../constants/selection-states';\nimport { Editor } from '../../core/Editor/Editor';\nimport { State as Base } from '../../event/State';\nimport { activeElement, getSelection, includes, isPrevented, normalizeKey, off, on } from '../../utils';\nimport { Selection } from './Selection';\n\n\n/**\n * The class for observing the selection states.\n *\n * @since 0.1.0\n */\nexport class State extends Base<number> {\n  /**\n   * Holds collection of elements.\n   */\n  private readonly elements: Elements;\n\n  /**\n   * Holds the Editor instance.\n   */\n  private readonly Editor: Editor;\n\n  /**\n   * Holds the Selection instance.\n   */\n  private readonly Selection: Selection;\n\n  /**\n   * The WeakMap key for identifying event handlers(just uses a new empty object).\n   */\n  private readonly key = {};\n\n  /**\n   * Describes what device makes the selection change.\n   */\n  device: 'pointer' | 'keyboard';\n\n  /**\n   * The State constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( IDLE );\n    this.Editor    = Editor;\n    this.elements  = Editor.elements;\n    this.Selection = Editor.Components.Selection;\n    this.listen();\n  }\n\n  /**\n   * Listens to some events.\n   * Note that the `mouseup` event of `window` needs to be listened to instead of the editable element,\n   * because users may release the mouse outside of it.\n   */\n  private listen(): void {\n    const { editable } = this.elements;\n    const { event } = this.Editor;\n    const { key } = this;\n\n    const onKeydown = this.onKeydown.bind( this );\n\n    on( document, 'selectionchange', this.onSelectionChange.bind( this ), key );\n    on( window, 'pointerup', this.onSelectionEnd.bind( this ), key );\n\n    on( editable, 'pointerdown', this.onSelectionStart.bind( this ), key );\n    on( editable, 'keydown', onKeydown, key );\n    on( editable, 'keyup', this.onKeyup.bind( this ), key );\n\n    event.on( EVENT_FOCUS, this.onFocus.bind( this ) );\n    event.on( EVENT_BLUR, this.onBlur.bind( this ) );\n  }\n\n  /**\n   * Called when the editor is focused.\n   */\n  private onFocus(): void {\n    if ( this.is( IDLE ) ) {\n      this.set( COLLAPSED );\n    }\n  }\n\n  /**\n   * Called when the editor is blurred.\n   * Needs to check the Components existence because this may be called after destruction.\n   */\n  private onBlur(): void {\n    if ( this.Editor.Components ) {\n      if ( ! this.isFocused() ) {\n        this.set( IDLE );\n      }\n    }\n  }\n\n  /**\n   * Called whenever the selection of the document is changed.\n   * - Only handles the change made by the editable element.\n   * - Detects the selection change that made by the start action, such as `pointerdown` and\n   *   makes the state go into the `CHANGED` state.\n   * - If the selection changes after `CHANGED`, which means user selects texts and the range is not collapsed,\n   *   makes the state go into the `SELECTING` state.\n   * - In FF, the event is sometimes fired after `pointerdown`.\n   * - In iOS, the event is fired after `pointerup`.\n   */\n  private onSelectionChange(): void {\n    if ( activeElement() !== this.Editor.elements.editable ) {\n      return;\n    }\n\n    if ( this.is( START, EXTEND ) ) {\n      this.set( CHANGED );\n    } else if ( this.is( CHANGED ) ) {\n      this.set( SELECTING );\n    } else if ( this.is( COLLAPSED, SELECTED ) ) {\n      if ( getSelection().isCollapsed ) {\n        this.set( CHANGED );\n        this.set( COLLAPSED );\n      } else {\n        this.set( SELECTING );\n        this.set( SELECTED );\n      }\n    }\n  }\n\n  /**\n   * Called when the pointer becomes active or when arrow keys are pressed.\n   * If a shift key is pressed,\n   * that means the existing selection is being updated instead that a new one is created.\n   *\n   * @param e - An event object.\n   */\n  private onSelectionStart( e: PointerEvent | KeyboardEvent ): void {\n    if ( isPrevented( e ) ) {\n      return;\n    }\n\n    this.device = e instanceof PointerEvent ? 'pointer' : 'keyboard';\n\n    const { Selection } = this;\n\n    if ( e instanceof PointerEvent ) {\n      if ( e.button === 2 && Selection.isInside( e.clientX, e.clientY ) ) {\n        this.set( CLICKED_RIGHT );\n        return;\n      }\n    }\n\n    this.set( e.shiftKey ? EXTEND : START );\n  }\n\n  /**\n   * Called when the `pointerup` or `keyup` event is triggered on the window object.\n   * Note that the state goes into `SELECTED` when the previous state is `EXTEND`\n   * even if the native selection is collapsed,\n   * because an anchor node may disappear after scrolling.\n   * The selection is correctly handled by the Selection class.\n   */\n  private onSelectionEnd(): void {\n    if ( this.device && ! this.is( IDLE ) ) {\n      this.device = null;\n\n      if ( ! this.is( CLICKED_RIGHT ) ) {\n        if ( this.is( EXTEND ) ) {\n          this.set( SELECTED );\n        } else {\n          this.set( END );\n          this.set( getSelection().isCollapsed ? COLLAPSED : SELECTED );\n        }\n      }\n    }\n  }\n\n  /**\n   * Called when any key is pressed.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onKeydown( e: KeyboardEvent ): void {\n    if ( includes( ARROW_KEYS, normalizeKey( e.key ) ) ) {\n      this.onSelectionStart( e );\n    }\n  }\n\n  /**\n   * Called when any key is released.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onKeyup( e: KeyboardEvent ): void {\n    if ( includes( ARROW_KEYS, normalizeKey( e.key ) ) ) {\n      this.onSelectionEnd();\n    }\n  }\n\n  /**\n   * Checks if the editor or the context menu has focus or not.\n   *\n   * @return `true` if they have focus or otherwise `false`.\n   */\n  private isFocused(): boolean {\n    return this.elements.editor.contains( activeElement() ) || this.Editor.Components.ContextMenu.isFocused();\n  }\n\n  /**\n   * Should be called when the custom selection is manually updated.\n   *\n   * @param collapsed - Indicates whether the new selection is collapsed or not.\n   */\n  update( collapsed: boolean ): void {\n    if ( ! this.is( START, EXTEND ) ) {\n      this.set( UPDATE );\n      this.set( collapsed ? COLLAPSED : SELECTED );\n    }\n  }\n\n  /**\n   * Attempts to refresh the selection state.\n   *\n   * @param collapsed - Indicates whether the new selection is collapsed or not.\n   */\n  refresh( collapsed: boolean ): void {\n    if ( ! this.is( START, EXTEND ) ) {\n      this.set( START );\n      this.set( CHANGED );\n      this.set( collapsed ? COLLAPSED : SELECTED );\n    }\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    this.event.destroy();\n    off( null, '', this.key );\n  }\n}\n","import { EventBusCallback } from '@ryusei/code';\nimport { includes, slice } from '../utils';\nimport { EventBus } from './EventBus';\n\n\n/**\n * The class for providing a simple state system.\n *\n * @since 0.1.0\n */\nexport class State<T = number> {\n  /**\n   * Indicates the current state.\n   */\n  private state: T;\n\n  /**\n   * Keeps the prev state.\n   */\n  private prev: T | undefined;\n\n  /**\n   * Indicates whether the state change is on hold or not.\n   */\n  private held: boolean;\n\n  /**\n   * The EventBus instance.\n   */\n  protected event = new EventBus();\n\n  /**\n   * The State constructor.\n   *\n   * @param initial - An initial state.\n   */\n  constructor( initial: T ) {\n    this.state = initial;\n  }\n\n  /**\n   * Sets a new state.\n   *\n   * @param state - A state to change to.\n   */\n  set( state: T ): void {\n    if ( this.state !== state && ! this.held ) {\n      this.prev  = this.state;\n      this.state = state;\n      this.event.emit( 'changed', state, this.prev );\n    }\n  }\n\n  /**\n   * Checks if the current state is a provided one or one of them.\n   * If multiple states are passed, this method checks them by the `or` condition.\n   *\n   * @param states - A state or states to check.\n   */\n  is( ...states: T[] ): boolean {\n    return includes( slice( states ), this.state );\n  }\n\n  /**\n   * Checks if the previous state is a provided one or one of them.\n   * If multiple states are passed, this method checks them by the `or` condition.\n   *\n   * @param states - A state or states to check.\n   */\n  isPrev( ...states: T[] ): boolean {\n    return includes( slice( states ), this.prev );\n  }\n\n  /**\n   * Holds the current state so that it won't change.\n   */\n  hold(): void {\n    this.held = true;\n  }\n\n  /**\n   * Disables to hold the state.\n   */\n  release(): void {\n    this.held = false;\n  }\n\n  /**\n   * Registers the event handler.\n   *\n   * @param events   - An event name or names separated by spaces.\n   * @param callback - A callback function to register.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   */\n  on( events: string, callback: EventBusCallback, priority?: number ): void {\n    this.event.on( events, callback, this, priority );\n  }\n}\n","import { Elements, EventBusEvent, Position, Range, SelectionBoundary } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { CLASS_EMPTY, CLASS_LINE } from '../../constants/classes';\nimport {\n  EVENT_SCROLLED,\n  EVENT_SCROLLER_SCROLL,\n  EVENT_SELECTED,\n  EVENT_SELECTING,\n  EVENT_SELECTION_CHANGE,\n  EVENT_WINDOW_SCROLL,\n} from '../../constants/events';\nimport {\n  CHANGED,\n  CLICKED_RIGHT,\n  COLLAPSED,\n  EXTEND,\n  SELECTED,\n  SELECTING,\n  START,\n  UPDATE,\n} from '../../constants/selection-states';\nimport {\n  activeElement,\n  attr,\n  closest,\n  compare,\n  createRange,\n  findSelectionBoundary,\n  format,\n  getSelection,\n  hasClass,\n  isBr,\n  isGecko,\n  isHTMLElement,\n  isIE,\n  isMobile,\n  isText,\n  nextTick,\n  prevent, rect,\n  setSelection,\n  slice,\n} from '../../utils';\nimport { toggleEditable } from '../../utils/dom/toggleEditable/toggleEditable';\nimport { DELAY_FOR_RESELECTION, ORIGIN } from './constants';\nimport { State } from './State';\n\n\n/**\n * The class for handing both a native and custom selection.\n *\n * @since 0.1.0\n */\nexport class Selection extends Component {\n  /**\n   * Holds the State instance.\n   */\n  state: State;\n\n  /**\n   * Keeps the position where the selection starts.\n   */\n  anchor: Position = ORIGIN;\n\n  /**\n   * Keeps the position where the selection ends.\n   */\n  focus: Position = ORIGIN;\n\n  /**\n   * Keeps the latest scrollTop amount.\n   */\n  private scrollTop: number;\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.state = new State( this.Editor );\n    this.listen();\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    const { editable } = this.elements;\n\n    this.bind( document, 'selectionchange', this.onSelectionChange, this );\n\n    if ( isIE() ) {\n      this.bind( editable, 'dblclick', this.onDblClick, this );\n    } else {\n      this.bind( editable, 'mousedown', this.onMouseDown, this );\n    }\n\n    this.state.on( 'changed', this.onStateChanged.bind( this ) );\n\n    this.on( [ EVENT_SCROLLER_SCROLL, EVENT_WINDOW_SCROLL ], this.onScroll, this );\n    this.on( EVENT_SCROLLED, this.ensureSelection, this );\n  }\n\n  /**\n   * Called whenever the selection is changed.\n   * Be aware that this is fired even when the editor is not focused.\n   */\n  private onSelectionChange(): void {\n    if ( this.isFocused() ) {\n      if ( this.is( SELECTING, EXTEND ) ) {\n        const focus = this.getNativeSelection( true );\n\n        if ( focus ) {\n          this.focus = focus;\n          this.emit( EVENT_SELECTING );\n        }\n      }\n\n      this.emit( EVENT_SELECTION_CHANGE );\n    }\n  }\n\n  /**\n   * Called when the mouse button is pressed.\n   * Detects the double-click earlier than the `dblclick` to prevent the native smart selection.\n   *\n   * @param e - A MouseEvent object.\n   */\n  private onMouseDown( e: MouseEvent ): void {\n    if ( e.detail > 1 ) {\n      this.onDblClick();\n      prevent( e );\n    }\n  }\n\n  /**\n   * Called when the code element is double-clicked.\n   * If a word is clicked, selects it. Otherwise, selects a clicked node.\n   */\n  private onDblClick(): void {\n    const range = this.getWordRangeAt( this.anchor );\n\n    if ( range ) {\n      this.set( range.start, range.end );\n    } else {\n      const boundary = this.getNativeSelectionBoundary( false );\n\n      if ( boundary ) {\n        const { node } = boundary;\n        const selection = getSelection();\n        const range     = createRange();\n\n        range.selectNode( node );\n        selection.removeAllRanges();\n        selection.addRange( range );\n\n        const anchor = this.getNativeSelection();\n        const focus  = this.getNativeSelection( true );\n\n        if ( anchor && focus ) {\n          this.set( anchor, focus );\n        }\n      }\n    }\n  }\n\n  /**\n   * Called whenever the selection state is changed.\n   *\n   * - Updating positions at the `START` state is too early\n   *   because the native selection has not been updated yet.\n   * - Jumps to the focus position just before extending the existing selection by a keyboard\n   *   so that the native selection is able to be updated.\n   * - The `EVENT_SELECTING` event must be emitted after `EVENT_SELECTED` event\n   *   for listeners to prepare something at the `SELECTING` state.\n   * - When the state goes into `SELECTED` state, the custom selection may be collapsed,\n   *   e.g. single backward selection -> shift + arrow. To make sure the state becomes `COLLAPSED`,\n   *   sets the native selection.\n   *\n   * @param e     - An EventBusEvent object.\n   * @param state - A state number.\n   * @param prev  - A previous state number.\n   */\n  private onStateChanged( e: EventBusEvent, state: number, prev: number ): void {\n    if ( prev !== UPDATE && prev !== CLICKED_RIGHT ) {\n      if ( state === COLLAPSED || state === CHANGED || state === SELECTED ) {\n        this.anchor = this.getNativeSelection() || this.anchor;\n        this.focus  = this.getNativeSelection( true ) || this.focus;\n      }\n\n      if ( prev !== START && state === SELECTED ) {\n        if ( this.detectSelectAll() ) {\n          const { lines, lines: { length } } = this;\n          const lastLineLength = lines[ length - 1 ].text.length;\n\n          if ( compare( this.anchor, [ 0, 0 ] ) !== 0\n            || compare( this.focus, [ length - 1, lastLineLength ] ) !== 0 )\n          {\n            this.selectAll();\n            return;\n          }\n        }\n      }\n    }\n\n    this.emit( EVENT_SELECTED, this, state, prev );\n\n    if ( state === SELECTING ) {\n      this.emit( EVENT_SELECTING );\n    }\n  }\n\n  /**\n   * Called when the window or scroller scrolls.\n   */\n  private onScroll(): void {\n    const { Input } = this;\n    const top = window.pageYOffset + this.elements.scroller.scrollTop;\n\n    if ( this.isMultiline() && ! Input.disabled && top !== this.scrollTop ) {\n      this.Input.disabled = true;\n      this.scrollTop = top;\n    }\n  }\n\n  /**\n   * Sets the custom selection by changing the native selection.\n   *\n   * @param anchor - An anchor position.\n   * @param focus  - Optional. A focus position.\n   */\n  set( anchor: Position, focus?: Position ): void {\n    this.setNativeSelection( anchor, focus ) || this.update( anchor, focus );\n  }\n\n  /**\n   * Returns positions of the current selection.\n   * If the `normalize` is `true`, the `start` will be always preceding position.\n   *\n   * @param normalize - Optional. Whether to normalize the position or not.\n   *\n   * @return An object literal with anchor and focus positions.\n   */\n  get( normalize = true ): Range {\n    const { anchor, focus } = this;\n    const isBackward = this.isBackward();\n\n    return {\n      start: isBackward && normalize ? focus : anchor,\n      end  : isBackward && normalize ? anchor : focus,\n    };\n  }\n\n  /**\n   * Updates the custom selection range without using the native selection.\n   *\n   * @param anchor   - An anchor position.\n   * @param focus    - Optional. A focus position.\n   * @param silently - Optional. Whether to change the state or not.\n   */\n  update( anchor: Position, focus?: Position, silently?: boolean ): void {\n    this.anchor = anchor;\n    this.focus  = focus || anchor;\n\n    if ( ! silently ) {\n      this.state.update( this.isCollapsed() );\n    }\n  }\n\n  /**\n   * Selects the current or specified line.\n   * This method sets the range twice for the backward selection.\n   *\n   * @param row       - Optional. A row index where to select.\n   * @param refresh   - Optional. Whether to refresh the current selection or not.\n   * @param backwards - Optional. Selects a line backwards.\n   */\n  selectLine( row = this.focus[ 0 ], refresh = true, backwards?: boolean ): void {\n    const { lines } = this;\n    const line = lines[ row ];\n\n    if ( line ) {\n      const start: Position = [ row, 0 ];\n      const end: Position   = row < lines.length - 1 ? [ row + 1, 0 ] : [ row, line.text.length ];\n\n      const anchor = backwards ? end : start;\n      const focus  = backwards ? start : end;\n\n      if ( refresh ) {\n        this.set( anchor, focus );\n      } else {\n        this.update( anchor, focus, true );\n      }\n    }\n  }\n\n  /**\n   * Selects again the current selection.\n   */\n  reselect(): void {\n    this.set( this.anchor, this.focus );\n  }\n\n  /**\n   * Selects the whole code.\n   */\n  selectAll(): void {\n    const { lines } = this;\n    const endRow = lines.length - 1;\n    this.set( [ 0, 0 ], [ endRow, lines[ endRow ].text.length ] );\n  }\n\n  /**\n   * Holds the current state so that it won't change.\n   */\n  hold(): void {\n    this.state.hold();\n  }\n\n  /**\n   * Disables to hold the state.\n   */\n  release(): void {\n    this.state.release();\n  }\n\n  /**\n   * Converts the selection to a string.\n   * An empty string will be returned when the selection is collapsed.\n   *\n   * @return A string representing the current selection.\n   */\n  toString(): string {\n    const range = this.get();\n    return this.Code.sliceRange( range.start, range.end );\n  }\n\n  /**\n   * Returns the DOMRect node of the native selection boundary.\n   * Note that the boundary node is usually a Text node,\n   * but sometimes the line or the editable element.\n   *\n   * @param focus - Determines whether to get the DOMRect of the focus or anchor node.\n   *\n   * @return A DOMRect object if available, or otherwise `null`.\n   */\n  getRect( focus: boolean ): DOMRect | null {\n    const boundary = this.getNativeSelectionBoundary( focus );\n\n    if ( boundary ) {\n      let { node, offset } = boundary;\n\n      while ( isHTMLElement( node ) ) {\n        node   = node.firstChild;\n        offset = 0;\n\n        if ( isBr( node ) ) {\n          return rect( node );\n        }\n      }\n\n      if ( node ) {\n        const range = createRange();\n        range.setStart( node, offset );\n        range.collapse( true );\n\n        return rect( range );\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns the current location as a string formatted by the i18n definition.\n   *\n   * @return A string that describes the current location.\n   */\n  getLocation(): string {\n    const { focus } = this;\n    return format( this.i18n.location, focus[ 0 ] + 1, focus[ 1 ] + 1 );\n  }\n\n  /**\n   * Checks if the selection state is one of the provided states or not.\n   * This is just an alias of the `state.is()` method.\n   *\n   * @param states - A state or states to check.\n   *\n   * @return `true` if the current state is one of the provided states, or otherwise `false`.\n   */\n  is( ...states: number[] ): boolean {\n    return this.state.is( ...states );\n  }\n\n  /**\n   * Collapses the selection to anchor or focus position.\n   *\n   * @param toFocus - Optional. Collapses the selection to the focus position.\n   */\n  collapse( toFocus?: boolean ): void {\n    this.set( toFocus ? this.focus : this.anchor );\n  }\n\n  /**\n   * Checks is the selection is backward or not.\n   *\n   * @return `true` if the selection is backward, or otherwise `false`.\n   */\n  isBackward(): boolean {\n    return compare( this.anchor, this.focus ) > 0;\n  }\n\n  /**\n   * Checks if the selection is collapsed or not.\n   *\n   * @return `true` if the selection is collapsed, or otherwise `false`.\n   */\n  isCollapsed(): boolean {\n    return compare( this.anchor, this.focus ) === 0;\n  }\n\n  /**\n   * Checks if more than one line is selected or not.\n   *\n   * @return `true` if more than one line is selected or otherwise `false`.\n   */\n  isMultiline(): boolean {\n    return this.anchor[ 0 ] !== this.focus[ 0 ];\n  }\n\n  /**\n   * Checks if the editor is focused or not.\n   *\n   * @return `true` if the editor is focused, or otherwise `false`.\n   */\n  isFocused(): boolean {\n    return this.Editor && this.Editor.isFocused();\n  }\n\n  /**\n   * Checks if the provided client position is inside the current selection range or not.\n   *\n   * @param clientX - X position that is relative to the client.\n   * @param clientY - Y position that is relative to the client.\n   *\n   * @return `true` if the position is inside the range, or otherwise `false`.\n   */\n  isInside( clientX: number, clientY: number ): boolean {\n    return this.Range.selection.isInside( clientX, clientY );\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    this.state.destroy();\n    super.destroy();\n  }\n\n  /**\n   * Sets a native selection range.\n   * Be aware that calling `setSelection` emits `selectionchange` only in IE, but does not in others.\n   *\n   * @param start - A start position.\n   * @param end   - Optional. An end position. If omitted, the start position is used alternatively.\n   *\n   * @return `true` if the selection is successfully changed, or otherwise `undefined`.\n   */\n  private setNativeSelection( start: Position, end = start ): boolean {\n    const { Chunk } = this;\n    const isSingle  = start[ 0 ] === end[ 0 ];\n    const startLine = Chunk.getLine( start[ 0 ] ) || Chunk.addPreservedLine( false, start[ 0 ] );\n    const endLine   = isSingle ? startLine : Chunk.getLine( end[ 0 ] ) || Chunk.addPreservedLine( true, end[ 0 ] );\n    const collapsed = compare( start, end ) === 0;\n    const anchor    = findSelectionBoundary( startLine, start[ 1 ] );\n    const focus     = collapsed ? anchor : findSelectionBoundary( endLine, end[ 1 ] );\n\n    if ( anchor && focus ) {\n      const anchorNode = anchor.node;\n      const focusNode  = focus.node;\n\n      anchor.node = isBr( anchorNode ) ? anchorNode.parentNode : anchorNode;\n      focus.node  = isBr( focusNode ) ? focusNode.parentNode : focusNode;\n\n      this.hold();\n      setSelection( anchor, focus );\n      this.release();\n\n      this.state.refresh( collapsed );\n    }\n\n    return true;\n  }\n\n  /**\n   * Converts the native selection boundary to a position represented as [ row, col ].\n   * In FF, the selection\n   *\n   * @param focus - Optional. Whether to returns a position on the focus boundary or not.\n   *\n   * @return A converted position. If the position is not found, always returns [ 0, 0 ].\n   */\n  private getNativeSelection( focus?: boolean ): Position | null {\n    const line     = this.findActiveLine( focus );\n    const boundary = this.getNativeSelectionBoundary( focus );\n\n    if ( line && boundary ) {\n      const { Chunk } = this;\n      const range = createRange();\n\n      range.setStart( line, 0 );\n      range.setEnd( boundary.node, boundary.offset );\n\n      let row = Chunk.getRow( line );\n\n      if ( row < 0 ) {\n        const anchor = Chunk.getBoundary( false );\n        const focus  = Chunk.getBoundary( true );\n\n        if ( anchor.line === line ) {\n          row = anchor.row;\n        } else if ( focus.line === line ) {\n          row = focus.row;\n        }\n      }\n\n      if ( row > -1 ) {\n        return [ row, range.toString().length ];\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Finds a line where the native anchor node belongs.\n   * If the `focus` is set to `true`, finds a line where the native focus node belongs.\n   *\n   * @param focus - Determines whether to find a line that has focus node or not.\n   *\n   * @return A line where an anchor or a focus node belongs.\n   */\n  private findActiveLine( focus?: boolean ): HTMLElement | null {\n    const boundary = this.getNativeSelectionBoundary( focus );\n\n    if ( boundary ) {\n      const { node } = boundary;\n      const elm = isText( node ) ? node.parentNode : node;\n\n      if ( isHTMLElement( elm ) ) {\n        return closest( elm, `.${ CLASS_LINE }` );\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Converts the provided position to the range for wrapping the word at the position.\n   * If the text at the position is not a word, such as `/` or `-`, this returns `null`.\n   *\n   * @param row - A row index.\n   * @param col - A col index.\n   *\n   * @return An object that describes the range of the word at the position.\n   *         If the text is not a word, returns `null`.\n   */\n  private getWordRangeAt( [ row, col ]: Position ): Range {\n    const line = this.lines[ row ];\n\n    if ( line ) {\n      const string = line.text;\n      const words  = string.split( /[^\\w]/ );\n\n      let index = 0;\n\n      for ( let i = 0; i < words.length; i++ ) {\n        const from = i > 0 ? index + 1 : 0;\n        const to   = from + words[ i ].length;\n\n        if ( from <= col && col < to ) {\n          return { start: [ row, from ], end: [ row, to ] };\n        }\n\n        index = to;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns a boundary node and offset of the native selection.\n   * Be aware that the target node must be in the chunk,\n   * or otherwise this method returns `null`.\n   * Besides, IE returns a parent node as a boundary node, and child index as a offset\n   * if the boundary is `<br>`(an empty line).\n   *\n   * @param focus - Whether to get the focus boundary or not.\n   *\n   * @return An object literal with a node and offset.\n   */\n  private getNativeSelectionBoundary( focus: boolean ): SelectionBoundary {\n    const { editable } = this.elements;\n    const selection = getSelection();\n    const prefix    = focus ? 'focus' : 'anchor';\n\n    let node   = selection[ `${ prefix }Node` ];\n    let offset = selection[ `${ prefix }Offset` ];\n\n    if ( node === editable ) {\n      node   = editable.children[ offset ];\n      offset = 0;\n    }\n\n    return node ? { node, offset } : null;\n  }\n\n  /**\n   * Detects selection of all contents in a immediate way, such as the `Select All` iOS context menu.\n   *\n   * @return `true` if all contents are selected, or otherwise `false`.\n   */\n  private detectSelectAll(): boolean {\n    const { lines } = this.elements;\n    const anchorLine = this.findActiveLine( false );\n    const focusLine  = this.findActiveLine( true );\n    const elms       = slice( lines.children ).filter( elm => ! hasClass( elm, CLASS_EMPTY ) );\n\n    return anchorLine === elms[ 0 ]\n      && focusLine === elms[ elms.length - 1 ]\n      && compare( this.anchor, this.focus )\n      && this.anchor[ 1 ] === 0\n      && this.focus[ 1 ] === focusLine.textContent.length;\n  }\n\n  /**\n   * The dirty code to ensure the selection contains the latest nodes.\n   */\n  private ensureSelection(): void {\n    const { Input } = this;\n    const { editable } = this.elements;\n    const selection = getSelection();\n\n    if ( ! isMobile() && this.isMultiline() && activeElement() === editable && selection.setBaseAndExtent ) {\n      const { editable } = this.elements;\n      const { anchorOffset, focusOffset } = selection;\n      let { anchorNode, focusNode } = selection;\n      attr( editable, { 'aria-hidden': true } );\n\n      this.hold();\n      selection.removeAllRanges();\n\n      if ( isGecko() ) {\n        const anchorClone = anchorNode.cloneNode( true );\n        const focusClone  = focusNode.cloneNode( true );\n\n        anchorNode.parentNode.replaceChild( anchorClone, anchorNode );\n        focusNode.parentNode.replaceChild( focusClone, focusNode );\n\n        anchorNode = anchorClone;\n        focusNode  = focusClone;\n      } else {\n        toggleEditable( editable, false );\n      }\n\n      setTimeout( () => {\n        selection.setBaseAndExtent( anchorNode, anchorOffset, focusNode, focusOffset );\n\n        nextTick( () => {\n          this.Editor.focus();\n          Input.disabled = false;\n          toggleEditable( editable, true );\n          attr( editable, { 'aria-hidden': null } );\n          this.release();\n        } );\n      }, DELAY_FOR_RESELECTION );\n    } else {\n      Input.disabled = false;\n    }\n  }\n}\n","import { SelectionBoundary } from '@ryusei/code';\r\nimport { getSelection } from '../getSelection/getSelection';\r\n\r\n\r\n/**\r\n * Sets a selection by an anchor and a focus object.\r\n * Note that the Range constructor does not supported by IE.\r\n *\r\n * @param anchor - An anchor boundary object.\r\n * @param focus  - A focus boundary object.\r\n */\r\nexport function setSelection( anchor: SelectionBoundary, focus: SelectionBoundary ): void {\r\n  if ( anchor && focus ) {\r\n    const selection = getSelection();\r\n\r\n    if ( selection.setBaseAndExtent ) {\r\n      selection.setBaseAndExtent( anchor.node, anchor.offset, focus.node, focus.offset );\r\n    } else {\r\n      const range = selection.rangeCount > 0 ? selection.getRangeAt( 0 ) : document.createRange();\r\n\r\n      range.setStart( anchor.node, anchor.offset );\r\n      range.setEnd( focus.node, focus.offset );\r\n      selection.removeAllRanges();\r\n      selection.addRange( range );\r\n    }\r\n  }\r\n}\r\n","import { Elements } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport {\n  CLASS_CARET,\n  CLASS_EDITOR,\n  CLASS_EMPTY,\n  CLASS_LINE,\n  CLASS_MARKER,\n  CLASS_PRESERVED,\n} from '../../constants/classes';\nimport { EVENT_INIT_STYLE } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport {\n  append,\n  forOwn,\n  isIE,\n  isString,\n  isUndefined,\n  query,\n  remove,\n  text,\n  unit,\n  camelToKebab,\n  isGecko,\n} from '../../utils';\n\n\n/**\n * The component for customizing some styles of the editor.\n *\n * @since 0.1.0\n */\nexport class Style extends Component {\n  /**\n   * Stores all styles.\n   */\n  private selectors: Record<string, Record<string, number | string>> = {};\n\n  /**\n   * Holds the style element.\n   */\n  private style: HTMLStyleElement;\n\n  /**\n   * The Style constructor.\n   *\n   * @param Editor - An Editor element.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n\n    this.init();\n\n    this.on( 'body:open', ( e, append ) => {\n      this.emit( EVENT_INIT_STYLE, this.add.bind( this ) );\n      append( `<style id=\"${ this.options.id }-style\">${ this.build() }</style>` );\n    } );\n  }\n\n  /**\n   * Adds styles defined in options.\n   */\n  private init(): void {\n    const { options, options: { lineHeight } } = this;\n\n    [ 'width', 'height', 'minWidth', 'minHeight', 'maxWidth', 'maxHeight' ].forEach( prop => {\n      const value = options[ prop ];\n\n      if ( value ) {\n        this.add( 'root', prop, unit( value ) );\n      }\n    } );\n\n    const height = lineHeight ? `${ lineHeight }em` : undefined;\n\n    this.add( 'root', isGecko() ? '-moz-tab-size' : 'tabSize', options.tabSize );\n    this.add( `.${ CLASS_EDITOR }`, 'lineHeight', lineHeight );\n    this.add( `.${ CLASS_MARKER }`, 'minHeight', height );\n    this.add( `.${ CLASS_CARET }`, 'height', height );\n\n    if ( ! isIE() ) {\n      this.add( `.${ CLASS_LINE }:not(.${ CLASS_EMPTY }):not(.${ CLASS_PRESERVED })`, 'height', height );\n    }\n  }\n\n  /**\n   * Converts the selectors object into a single style string.\n   *\n   * @return A built string.\n   */\n  private build(): string {\n    let html = '';\n\n    forOwn( this.selectors, ( styles, selector ) => {\n      let props = '';\n\n      forOwn( styles, ( value, prop ) => {\n        if ( ! isUndefined( value ) ) {\n          props += `${ camelToKebab( prop ) }: ${ value };`;\n        }\n      } );\n\n      if ( props ) {\n        html += `${ selector }{${ props }}`;\n      }\n    } );\n\n    return html;\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    this.style = query( elements.root, 'style' );\n    append( query( document, 'head' ), this.style );\n  }\n\n  /**\n   * Adds a style to the specified selector.\n   *\n   * @param selector - A selector string.\n   * @param prop     - A CSS property or an objet literal with properties and values.\n   * @param value    - A value for the property.\n   */\n  add( selector: string, prop: string | Record<string, number | string>, value?: number | string ): void {\n    if ( isString( prop ) ) {\n      const { selectors } = this;\n      selector = `#${ this.options.id }${ selector === 'root' ? '' : ' ' + selector }`;\n      selectors[ selector ] = selectors[ selector ] || {};\n      selectors[ selector ][ prop ] = value;\n    } else {\n      forOwn( prop, ( value, key ) => {\n        this.add( selector, key, value );\n      } );\n    }\n  }\n\n  /**\n   * Applies current styles to the style element.\n   */\n  apply(): void {\n    text( this.style, this.build() );\n  }\n\n  /**\n   * Destroys the component.\n   */\n  destroy(): void {\n    super.destroy();\n    remove( this.style );\n  }\n}\n","/**\r\n * Converts the provided string in the camel case to the kebab case.\r\n *\r\n * @param string - A string to convert.\r\n */\r\nexport function camelToKebab( string: string ): string {\r\n  return string.replace( /([a-z0-9])([A-Z])/g, '$1-$2' ).toLowerCase();\r\n}\r\n","import { RowRange } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_SYNCED } from '../../constants/events';\nimport { between, isUndefined, max, min } from '../../utils';\nimport { ASYNC_SYNC_LINES, ASYNC_SYNC_LINES_BACKWARDS, SYNC_LINES_BACKWARDS } from './constants';\n\n\n/**\n * The type for an object with the number to start syncing the code and a prefix.\n *\n * @since 0.1.0\n */\ntype SyncStartInfo = { startRow: number, before: string };\n\n/**\n * The class for syncing changes to Lines and View components.\n *\n * @since 0.1.0\n */\nexport class Sync extends Component {\n  /**\n   * Holds the minimum row for asynchronous syncing.\n   */\n  private minStart = Infinity;\n\n  /**\n   * Holds the maximum row for asynchronous syncing.\n   */\n  private maxEnd = 0;\n\n  /**\n   * Indicates whether the asynchronous syncing is on going or not.\n   */\n  private syncing: boolean;\n\n  /**\n   * Syncs the changes between the start and end rows to the Lines and View components.\n   * Since the `startRow` can be very far from the `row` when pasting huge code,\n   * syncs lines inaccurately by setting the `strict` to `false` at first,\n   * and then starts strict synchronization.\n   *\n   * @param startRow  - A start row index.\n   * @param endRow    - An end row index.\n   * @param jumpTo    - Optional. Jumps to the specified row before starting synchronization.\n   */\n  sync( startRow: number, endRow: number, jumpTo?: number ): void {\n    const { Chunk, View } = this;\n    const diff = this.lines.syncSize( startRow, this.Code.size );\n\n    View.autoHeight();\n    View.autoWidth();\n\n    if ( ! isUndefined( jumpTo ) ) {\n      View.jump( jumpTo );\n    }\n\n    if ( Chunk.includes( startRow ) ) {\n      this.run( startRow, Chunk.end - startRow + 1 );\n    } else {\n      const { start, end } = Chunk;\n      this.run( start, end - start + 1, false );\n      this.syncLines( startRow, endRow );\n    }\n\n    Chunk.syncDiff( startRow, diff );\n    Chunk.sync();\n  }\n\n  /**\n   * Starts the sync sequence.\n   *\n   * @param row    - A row index.\n   * @param limit  - Limits the number of synchronously syncing.\n   * @param strict - Optional. Determines whether the synchronization must be strict or not.\n   */\n  private run( row: number, limit: number, strict = true ): void {\n    const result = this.find( row, SYNC_LINES_BACKWARDS );\n\n    let { startRow } = result;\n\n    if ( ! strict && row - startRow > SYNC_LINES_BACKWARDS ) {\n      startRow = row - SYNC_LINES_BACKWARDS;\n    }\n\n    limit = row - startRow + limit;\n\n    const changed = this.lines.sync( startRow, this.Code.after( startRow ), limit, result.before );\n\n    if ( changed || this.syncing ) {\n      const { size } = this.Code;\n\n      startRow = startRow + limit;\n\n      if ( startRow < size ) {\n        this.syncLines( startRow, size - 1 );\n      }\n    }\n  }\n\n  /**\n   * Asynchronously syncs lines between the provided range.\n   * If the range is wider than the current running process, cancels it and starts a new process.\n   *\n   * @param startRow - A start row index.\n   * @param endRow   - An end row index.\n   */\n  private syncLines( startRow: number, endRow: number ): void {\n    this.minStart = min( startRow, this.minStart );\n    this.maxEnd   = max( endRow, this.maxEnd );\n    this.syncing  = true;\n\n    const ranges = this.splitRows( this.minStart, this.maxEnd );\n\n    this.syncRanges( ranges, () => {\n      this.minStart = Infinity;\n      this.maxEnd   = 0;\n      this.syncing  = false;\n      this.Chunk.sync();\n    } );\n  }\n\n  /**\n   * Syncs provided ranges step by step.\n   *\n   * @param ranges   - An array with row ranges.\n   * @param callback - Optional. A callback fired after the sync is completed.\n   */\n  private syncRanges( ranges: RowRange[], callback?: () => void ): void {\n    const range = ranges.shift();\n    const { startRow, before } = this.find( range[ 0 ], ASYNC_SYNC_LINES_BACKWARDS );\n    const limit = range[ 1 ] - startRow + 1;\n\n    this.lines.asyncSync( 'syncRanges', startRow, this.Code.after( startRow ), limit, before, () => {\n      if ( ranges.length ) {\n        this.syncRanges( ranges, callback );\n        this.emit( EVENT_SYNCED, this, false );\n      } else {\n        if ( callback ) {\n          callback();\n        }\n\n        this.emit( EVENT_SYNCED, this, true );\n      }\n    } );\n  }\n\n  /**\n   * Splits the provided row range into small fragments.\n   *\n   * @param startRow - A start row index.\n   * @param endRow   - An end row index.\n   *\n   * @return An array with row ranges.\n   */\n  private splitRows( startRow: number, endRow: number ): RowRange[] {\n    const ranges: RowRange[] = [];\n\n    while ( startRow <= endRow ) {\n      ranges.push( [ startRow, min( startRow + ASYNC_SYNC_LINES - 1, endRow ) ] );\n      startRow += ASYNC_SYNC_LINES;\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Returns an info object to start syncing.\n   *\n   * @param row   - A row index.\n   * @param limit - Limits the number of lines.\n   *\n   * @return An object with a start row index and code to prepend.\n   */\n  private find( row: number, limit: number ): SyncStartInfo {\n    if ( this.isEmbedded( row ) ) {\n      return this.findStartInLanguageBlock( row, limit );\n    }\n\n    const startRow = this.findRoot( row );\n\n    if ( row - startRow > limit ) {\n      if ( this.isEmbedded( row - limit ) ) {\n        return this.findStartInLanguageBlock( row - limit, limit / 2 );\n      }\n\n      return this.compress( startRow, row, '', limit );\n    }\n\n    return { startRow, before: '' };\n  }\n\n  /**\n   * If the distance from the `row` to `startRow` is greater than the `limit`,\n   * attempt to shorten the distance by generating pseudo code.\n   *\n   * @param startRow - A start row index.\n   * @param row      - An original row index.\n   * @param before   - A pseudo line to prepend.\n   * @param limit    - A limit number of lines.\n   *\n   * @return An object with a start row index and code to prepend.\n   */\n  private compress( startRow: number, row: number, before: string, limit: number ): SyncStartInfo {\n    if ( row - startRow > limit ) {\n      const start = this.lines.findBlockStart( [ row - 1, 0 ] );\n\n      if ( start ) {\n        const { multiline } = this.getLanguage( start );\n        const info = this.lines.getInfoAt( start );\n\n        if ( info && multiline ) {\n          for ( let i = 0; i < multiline.length; i++ ) {\n            const item = multiline[ i ];\n\n            if ( info.category === item[ 2 ] && ( ! item[ 3 ] || info.state === item[ 3 ] ) ) {\n              startRow = start[ 0 ] + 1;\n              before   += item[ 0 ];\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return { startRow, before };\n  }\n\n  /**\n   * Finds the likely appropriate index where tokenization should start.\n   *\n   * @param row   - A row index.\n   * @param depth - Optional. Minimum depth of a line that can be a candidate.\n   *\n   * @return A better index for starting tokenization.\n   */\n  private findRoot( row: number, depth = 0 ): number {\n    const { lines } = this;\n\n    if ( between( row, 0, lines.length, true ) ) {\n      for ( let i = row - 1; i >= 0; i-- ) {\n        const line = lines[ i ];\n\n        if ( line.depth <= depth && line.tokens.length && ! line.isEmpty() ) {\n          if ( line.split ) {\n            i -= line.first[ 2 ].distance + 1;\n          } else {\n            return i;\n          }\n        }\n      }\n    }\n\n    return 0;\n  }\n\n  /**\n   * Finds a sync start info in an embedded language block.\n   *\n   * @param row   - A row index.\n   * @param limit - A limit number of lines.\n   *\n   * @return An object with a start row index and code to prepend.\n   */\n  private findStartInLanguageBlock( row: number, limit: number ): SyncStartInfo {\n    const { lines } = this;\n    const lang      = lines[ row ].language;\n    const config    = this.language.use[ lang ];\n    const startRow  = this.findRoot( row, config.depth );\n    const startLang = lines[ startRow ].language;\n\n    if ( startLang === lang ) {\n      return this.compress( startRow, row, config.code, limit );\n    }\n\n    return { startRow, before: '' };\n  }\n\n  /**\n   * Checks if the line at the specified row is inside an embedded block or not.\n   *\n   * @param row - A row index.\n   *\n   * @return `true` if the row is inside an embedded block, or otherwise `false`.\n   */\n  private isEmbedded( row: number ): boolean {\n    const line = this.lines[ row ];\n\n    if ( line ) {\n      const { language } = line;\n      return language && this.language.language.id !== language;\n    }\n  }\n}\n","/**\n * Max lines to asynchronously sync code to the Lines instance at once.\n *\n * @since 0.1.0\n */\nexport const ASYNC_SYNC_LINES = 3000;\n\n/**\n * Max lines to scan up for asynchronously sync.\n *\n * @since 0.1.0\n */\nexport const ASYNC_SYNC_LINES_BACKWARDS = 100;\n\n/**\n * Max lines to scan up for synchronously sync.\n *\n * @since 0.1.0\n */\nexport const SYNC_LINES_BACKWARDS = 100;\n","import { CLASS_DRAGGING } from '../../constants/classes';\nimport { div, forOwn, off, on, prevent, toggleClass } from '../../utils';\n\n\n/**\n * Event names for the beginning of dragging.\n *\n * @since 0.1.0\n */\nexport const DRAG_START_EVENTS = 'pointerdown';\n\n/**\n * Event names for the end of dragging.\n *\n * @since 0.1.0\n */\nexport const DRAG_END_EVENTS = 'pointerup';\n\n/**\n * Event names on dragging.\n *\n * @since 0.1.0\n */\nexport const DRAGGING_EVENTS = 'pointermove';\n\n/**\n * The conversion map for vertical/horizontal props.\n *\n * @since 0.1.0\n */\nconst ORIENTATION_MAP = {\n  vertical    : 'horizontal',\n  scrollHeight: 'scrollWidth',\n  clientHeight: 'clientWidth',\n  scrollTop   : 'scrollLeft',\n  minHeight   : 'minWidth',\n  maxHeight   : 'maxWidth',\n  height      : 'width',\n  top         : 'left',\n  pageY       : 'pageX',\n  translateY  : 'translateX',\n};\n\n/**\n * The abstract class for creating a draggable bar.\n *\n * @since 0.1.0\n */\nexport abstract class AbstractDraggableBar {\n  /**\n   * Indicates whether the bar is a vertical or horizontal sizer or not.\n   */\n  protected readonly vertical: boolean;\n\n  /**\n   * Holds the parent element.\n   */\n  protected readonly parent: HTMLElement;\n\n  /**\n   * The bar element.\n   */\n  protected readonly elm: HTMLDivElement;\n\n  /**\n   * Holds the prop names determined by the bar direction.\n   */\n  protected readonly names: Record<string, string> = {};\n\n  /**\n   * Keeps the coordinate at the drag start.\n   */\n  protected startCoord: number;\n\n  /**\n   * Keeps the last coordinate.\n   */\n  protected lastCoord: number;\n\n  /**\n   * The AbstractDraggableBar constructor.\n   *\n   * @param classes  - A class or classes of the bar.\n   * @param parent   - A parent element of the bar.\n   * @param vertical - Determines whether to create a vertical or horizontal bar.\n   */\n  protected constructor( classes: string | string[], parent: HTMLElement, vertical: boolean ) {\n    this.elm      = div( classes, parent );\n    this.parent   = parent;\n    this.vertical = vertical;\n\n    forOwn( ORIENTATION_MAP, ( prop, key ) => {\n      this.names[ key ] = vertical ? key : prop;\n    } );\n\n    this.bind();\n  }\n\n  /**\n   * Listens to some events.\n   */\n  protected bind(): void {\n    this.onDrag     = this.onDrag.bind( this );\n    this.onDragging = this.onDragging.bind( this );\n    this.onDragged  = this.onDragged.bind( this );\n\n    on( this.elm, DRAG_START_EVENTS, this.onDrag );\n  }\n\n  /**\n   * Called when the element starts being dragged.\n   *\n   * @param e - A PointerEvent object.\n   */\n  protected onDrag( e: PointerEvent ): void {\n    on( window, DRAG_END_EVENTS, this.onDragged );\n    on( window, DRAGGING_EVENTS, this.onDragging );\n\n    this.startCoord = this.getCoord( e );\n    this.lastCoord  = this.startCoord;\n    this.toggleClass( true );\n\n    prevent( e );\n  }\n\n  /**\n   * Called while the element is dragged.\n   *\n   * @param e - A PointerEvent object.\n   */\n  protected onDragging( e: PointerEvent ): void {\n    prevent( e );\n  }\n\n  /**\n   * Called when the element is released.\n   */\n  protected onDragged(): void {\n    off( window, DRAG_END_EVENTS, this.onDragged );\n    off( window, DRAGGING_EVENTS, this.onDragging );\n    this.toggleClass( false );\n  }\n\n  /**\n   * Returns the `pageX` and `pageY` coordinates provided by the event.\n   *\n   * @param e - A PointerEvent object.\n   *\n   * @return A pageX or pageY coordinate.\n   */\n  protected getCoord( e: PointerEvent ): number {\n    return e[ this.names.pageY ];\n  }\n\n  /**\n   * Toggles \"dragging\" classes of the element and parent element.\n   *\n   * @param add - Determines whether to add or remove classes.\n   */\n  protected toggleClass( add: boolean ): void {\n    toggleClass( this.elm, CLASS_DRAGGING, add );\n    toggleClass(\n      this.parent,\n      [ CLASS_DRAGGING, `${ CLASS_DRAGGING }--${ this.names.vertical }` ],\n      add\n    );\n  }\n\n  /**\n   * Destroys the bar.\n   */\n  destroy(): void {\n    off( this.elm, DRAG_START_EVENTS, this.onDrag );\n    off( window, DRAG_END_EVENTS, this.onDragged );\n    off( window, DRAGGING_EVENTS, this.onDragging );\n  }\n}\n","import {\n  EVENT_MOUNTED,\n  EVENT_RESIZE,\n  EVENT_SCROLL_HEIGHT_CHANGED,\n  EVENT_SCROLL_WIDTH_CHANGED,\n  EVENT_SCROLL,\n} from '../../constants/events';\nimport { rafThrottle } from '../../utils';\nimport { Scrollbar } from './Scrollbar';\n\n\n/**\n * The class for creating a scrollbar.\n *\n * @since 0.1.0\n */\nexport class EditorScrollbar extends Scrollbar {\n  /**\n   * Listens to some events.\n   */\n  protected listen(): void {\n    this.Editor.event.on(\n      [ EVENT_MOUNTED, EVENT_RESIZE, EVENT_SCROLL, EVENT_SCROLL_HEIGHT_CHANGED, EVENT_SCROLL_WIDTH_CHANGED ],\n      rafThrottle( this.update )\n    );\n  }\n}\n","import { AbstractDraggableBar } from '../../classes/AbstractDraggableBar/AbstractDraggableBar';\nimport { CLASS_ACTIVE, CLASS_SCROLLBAR } from '../../constants/classes';\nimport { EVENT_MOUNTED, EVENT_RESIZE } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { attr, isArray, off, on, rafThrottle, round, toggleClass, unit } from '../../utils';\n\n\n/**\n * The class for creating a scrollbar.\n *\n * @since 0.1.0\n */\nexport class Scrollbar extends AbstractDraggableBar {\n  /**\n   * Holds the Editor element.\n   */\n  protected readonly Editor: Editor;\n\n  /**\n   * The target element to scroll.\n   */\n  protected readonly scroller: HTMLElement;\n\n  /**\n   * Holds the margin settings.\n   */\n  private readonly margin: () => [ number, number ];\n\n  /**\n   * Keeps the scrollbar height.\n   */\n  private lastHeight: number;\n\n  /**\n   * The conversion ratio from the scroll offset to the bar offset.\n   * - top = scrollTop * ratio\n   * - scrollTop = top / ratio\n   */\n  private ratio = 1;\n\n  /**\n   * The Scrollbar constructor.\n   *\n   * @param Editor   - An EventBus instance.\n   * @param parent   - A parent element.\n   * @param scroller - A target element to scroll.\n   * @param vertical - Determines whether to create a vertical or horizontal scroll bar.\n   * @param margin   - Optional. Margins in pixel as `[ top, bottom ]` ( or `[ left, right ]` ).\n   */\n  constructor(\n    Editor: Editor,\n    parent: HTMLElement,\n    scroller: HTMLElement,\n    vertical: boolean,\n    margin: [ number, number ] | ( () => [ number, number ] ) = [ 0, 0 ]\n  ) {\n    super( [ CLASS_SCROLLBAR, `${ CLASS_SCROLLBAR }--${ vertical ? 'vertical' : 'horizontal' }` ], parent, vertical );\n\n    this.Editor   = Editor;\n    this.scroller = scroller;\n    this.margin   = isArray( margin ) ? () => margin : margin;\n\n    this.init();\n    this.listen();\n  }\n\n  /**\n   * Initializes the instance.\n   * Note that `aria-valuemin` and `aria-valuemax` is not necessary because their default values are `0` and `100`.\n   *\n   * @link https://www.w3.org/TR/wai-aria-1.2/#scrollbar\n   */\n  private init(): void {\n    const { Editor, scroller } = this;\n\n    attr( this.elm, {\n      role              : 'scrollbar',\n      'aria-controls'   : scroller.id,\n      'aria-orientation': this.names.vertical,\n      'aria-valuenow'   : 0,\n      'aria-label'      : Editor.options.i18n.scrollbar,\n    } );\n\n    this.update = this.update.bind( this );\n  }\n\n  /**\n   * Listens to some events.\n   */\n  protected listen(): void {\n    const update = rafThrottle( this.update );\n    on( this.scroller, 'scroll', update, this );\n    this.Editor.event.on( [ EVENT_MOUNTED, EVENT_RESIZE ], update );\n  }\n\n  /**\n   * Called while the bar is dragged.\n   *\n   * @param e - A PointerEvent object.\n   */\n  protected onDragging( e: PointerEvent ): void {\n    super.onDragging( e );\n\n    const coord = this.getCoord( e );\n    const diff  = coord - this.lastCoord;\n\n    this.scroller[ this.names.scrollTop ] += diff / this.ratio;\n    this.lastCoord = coord;\n  }\n\n  /**\n   * Updates the scrollbar height and offset according to the current scroll offset.\n   */\n  protected update(): void {\n    const { scroller, names, elm } = this;\n    const { style } = elm;\n    const sh          = scroller[ names.scrollHeight ];\n    const ch          = scroller[ names.clientHeight ];\n    const st          = scroller[ names.scrollTop ];\n    const active      = sh > ch;\n    const margin      = this.margin();\n    const heightRatio = 1 - ( ( margin[ 0 ] + margin[ 1 ] ) / ch );\n    const height      = ( ch * ch / sh ) * heightRatio;\n\n    if ( this.lastHeight !== height ) {\n      style[ names.height ] = unit( height );\n      this.lastHeight = height;\n    }\n\n    if ( active ) {\n      const offsetRatio = ( ch * heightRatio - elm[ names.clientHeight ] ) / ( sh - ch );\n      style.transform = `${ names.translateY }(${ unit( st * offsetRatio + margin[ 0 ] ) })`;\n      attr( elm, { 'aria-valuenow': round( 100 * 100 * st / ( sh - ch ) ) / 100 } );\n\n      this.ratio = offsetRatio;\n    }\n\n    toggleClass( elm, CLASS_ACTIVE, active );\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    off( null, '', this );\n    super.destroy();\n  }\n}\n","import { Elements, EventBusEvent } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { CLASS_PLACEHOLDER, CLASS_SCROLLBARS } from '../../constants/classes';\nimport {\n  EVENT_MOUNTED,\n  EVENT_RESIZE,\n  EVENT_SCROLL_HEIGHT_CHANGED,\n  EVENT_SCROLL_WIDTH_CHANGED,\n  EVENT_SCROLLED,\n  EVENT_SELECTED,\n  EVENT_SELECTING,\n} from '../../constants/events';\nimport { CHANGED, EXTEND, SELECTED, SELECTING, START } from '../../constants/selection-states';\nimport { div, isIE, isMobile, max, min, rafThrottle, rect, styles, text, unit } from '../../utils';\nimport { Throttle } from '../../utils/function/throttle/throttle';\nimport { Selection } from '../Selection/Selection';\nimport { JUMP_OFFSET } from './constants';\nimport { EditorScrollbar } from './EditorScrollbar';\nimport { Scrollbar } from './Scrollbar';\n\n\n/**\n * The class for managing the viewport.\n *\n * @since 0.1.0\n */\nexport class View extends Component {\n  /**\n   * Emits the resize event with reducing frequency by `throttle`.\n   */\n  emitResize: Throttle<() => void>;\n\n  /**\n   * Keeps the previous width of the viewport.\n   */\n  private lastWidth = 0;\n\n  /**\n   * Keeps the number of lines when the height is adjusted.\n   */\n  private lastLength: number;\n\n  /**\n   * Holds Scrollbar elements.\n   */\n  private scrollbars: Scrollbar[] = [];\n\n  /**\n   * Initializes the instance.\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    this.emitResize = rafThrottle( this.emit.bind( this, 'resize' ) );\n    elements.scroller.scrollTop = 0;\n\n    this.create();\n    this.autoHeight();\n    this.listen();\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    this.bind( window, 'resize', this.emitResize );\n\n    this.on( [ EVENT_MOUNTED, EVENT_RESIZE, EVENT_SCROLLED ], this.autoWidth, this );\n    this.on( EVENT_RESIZE, this.autoHeight.bind( this, true ), null, 2 );\n    this.on( EVENT_SELECTED, this.onSelected, this );\n    this.on( EVENT_SELECTING, this.clipScrollOffset, this );\n  }\n\n  /**\n   * Called when the selection state is changed.\n   *\n   * @param e         - An EventBusEvent object.\n   * @param Selection - A Selection instance.\n   */\n  private onSelected( e: EventBusEvent, Selection: Selection ): void {\n    if ( Selection.is( START, EXTEND ) && Selection.state.device === 'keyboard' ) {\n      this.jump( Selection.focus[ 0 ] );\n    }\n\n    if ( Selection.is( CHANGED, SELECTING, SELECTED ) ) {\n      this.clipScrollOffset();\n    }\n  }\n\n  /**\n   * Creates the scrollbar elements.\n   */\n  private create(): void {\n    const { elements, elements: { scroller }, Editor } = this;\n    const wrapper = div( CLASS_SCROLLBARS, elements.body );\n\n    if ( ! isMobile() ) {\n      this.scrollbars = [\n        new EditorScrollbar( Editor, wrapper, scroller, true ),\n        new EditorScrollbar( Editor, wrapper, scroller, false, () => [ this.getWidthBeforeContainer(), 0 ] ),\n      ];\n    }\n\n    const { placeholder } = this.options;\n\n    if ( placeholder ) {\n      const placeholderElm = div( CLASS_PLACEHOLDER, elements.background );\n      text( placeholderElm, placeholder );\n    }\n  }\n\n  /**\n   * Clips the caret position by all sides of the editor.\n   * Only the left border refers the editor rect so that it includes the width of the fixed gutter.\n   */\n  private clipScrollOffset(): void {\n    const { rect: caretRect } = this.Caret;\n    const { focus } = this.Selection;\n\n    if ( ! caretRect || ! this.Chunk.includes( focus[ 0 ] ) ) {\n      return;\n    }\n\n    const { Measure } = this;\n    const { scroller } = this.elements;\n    const { padding, scrollerRect, lineHeight } = Measure;\n    const { top: caretTop, right: caretRight, bottom: caretBottom, left: caretLeft } = caretRect;\n    const editorRect = rect( this.elements.editor );\n\n    let { scrollTop, scrollLeft } = scroller;\n\n    const top    = scrollerRect.top + lineHeight / 2 + padding.top;\n    const bottom = scrollerRect.bottom - lineHeight / 2 - padding.bottom;\n    const left   = ( isIE() ? scrollerRect.left : ( editorRect.left + scrollLeft ) ) + max( padding.left, lineHeight );\n    const right  = scrollerRect.right - max( padding.right, lineHeight );\n\n    if ( caretTop < top ) {\n      scrollTop -= top - caretTop;\n    }\n\n    if ( caretBottom > bottom ) {\n      scrollTop += caretBottom - bottom;\n    }\n\n    if ( caretLeft < left ) {\n      scrollLeft -= left - caretLeft;\n    }\n\n    if ( caretRight > right ) {\n      scrollLeft += caretRight - right;\n    }\n\n    if ( ! focus[ 1 ] ) {\n      scrollLeft = 0;\n    }\n\n    scroller.scrollTop  = scrollTop;\n    scroller.scrollLeft = scrollLeft;\n  }\n\n  /**\n   * Returns the width before the container element.\n   *\n   * @return The width before the container.\n   */\n  private getWidthBeforeContainer(): number {\n    const { Measure } = this;\n    return Measure.editorRect.left - Measure.containerRect.left;\n  }\n\n  /**\n   * Jumps to the specified row if it's not visible in the viewport.\n   * If the `middle` is true, always jumps to the middle of the viewport.\n   *\n   * @param row        - A row index to jump to.\n   * @param middle     - Optional. Determines whether to jump to the middle of the viewport.\n   * @param lineOffset - Optional. A number of lines to offset top and bottom borders.\n   */\n  jump( row: number, middle?: boolean, lineOffset = JUMP_OFFSET ): void {\n    const { Measure, Chunk, Measure: { scrollerRect } } = this;\n\n    if ( middle ) {\n      Chunk.scroll( Measure.getBottom( row ) - scrollerRect.height / 2 + Measure.lineHeight * lineOffset );\n      return;\n    }\n\n    if ( ! this.isVisible( row ) ) {\n      const center = Chunk.start + ( Chunk.length - 1 ) / 2;\n\n      let scrollTop;\n\n      if ( row > center ) {\n        row = min( row + lineOffset, this.lines.length - 1 );\n        scrollTop = Measure.getBottom( row ) - scrollerRect.height + Measure.padding.top;\n      } else {\n        scrollTop = Measure.getTop( max( row - lineOffset, 0 ) );\n      }\n\n      Chunk.scroll( scrollTop );\n    }\n  }\n\n  /**\n   * Adjusts the width of the viewport.\n   */\n  autoWidth(): void {\n    const { Measure } = this;\n    const { width } = Measure.editorRect;\n\n    if ( width > Measure.scrollerRect.width - this.getWidthBeforeContainer() && width > this.lastWidth ) {\n      styles( this.elements.lines, { minWidth: unit( width ) } );\n      this.lastWidth = width;\n\n      this.emit( EVENT_SCROLL_WIDTH_CHANGED );\n    }\n  }\n\n  /**\n   * Adjusts the height of the viewport.\n   *\n   * @param skipLengthCheck - Optional. Whether to skip checking the number of lines or not.\n   */\n  autoHeight( skipLengthCheck?: boolean ): void {\n    const { length } = this.lines;\n\n    if ( skipLengthCheck || length !== this.lastLength ) {\n      const { Measure, Measure: { padding } } = this;\n      const height = Measure.lineHeight * ( length || 1 );\n\n      styles( this.elements.container, { height: unit( height + padding.top + padding.bottom ) } );\n      this.lastLength = length;\n\n      this.emit( EVENT_SCROLL_HEIGHT_CHANGED );\n    }\n  }\n\n  /**\n   * Checks if the provided row is visible on the scroller or not.\n   *\n   * @param row        - A row index to check.\n   * @param lineOffset - Optional. A number of lines to offset top and bottom borders.\n   *\n   * @return `true` if the row is in the scroller viewport, or otherwise `false`.\n   */\n  isVisible( row: number, lineOffset = 0 ): boolean {\n    const { Chunk, Measure } = this;\n\n    if ( Chunk.includes( row ) ) {\n      const line = Chunk.getLine( row );\n\n      if ( line ) {\n        const { scrollerRect } = Measure;\n        const lineRect = rect( line );\n        const offset   = Measure.lineHeight * lineOffset;\n        return lineRect.top >= scrollerRect.top + offset && lineRect.bottom <= scrollerRect.bottom - offset;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Destroys the component.\n   */\n  destroy(): void {\n    this.scrollbars.forEach( bar => { bar.destroy() } );\n    super.destroy();\n  }\n}\n","\n/**\n * The number of margin lines when jumping to a particular line.\n *\n * @since 0.1.0\n */\nexport const JUMP_OFFSET = 1;\n\n/**\n * Throttle duration for the resize function.\n *\n * @since 0.1.0\n */\nexport const RESIZE_THROTTLE_DURATION = 60;\n\n/**\n * Minimum required amount of the scroll offset to update.\n *\n * @since 0.1.0\n */\nexport const MIN_SCROLL_DIFF = 3;\n","/**\n * Common attributes for editable areas.\n *\n * @link https://www.w3.org/TR/wai-aria-1.2/#aria-roledescription\n * @link https://www.w3.org/TR/wai-aria-1.2/#aria-multiline\n *\n * @since 0.1.0\n */\nexport const ATTRIBUTES_EDITABLE_AREA = {\n  autocorrect           : 'off',\n  autocapitalize        : 'off',\n  spellcheck            : 'false',\n  role                  : 'textbox',\n  'aria-multiline'      : true,\n  'aria-roledescription': 'editor',\n};\n","import { Attributes, Options } from '@ryusei/code';\nimport { Code } from '../../components';\nimport { Lines } from '../../components/Code/Lines';\nimport { ATTRIBUTES_EDITABLE_AREA } from '../../constants/attributes';\nimport {\n  CLASS_BODY,\n  CLASS_CONTAINER,\n  CLASS_EDITOR,\n  CLASS_LINE,\n  CLASS_LINES,\n  CLASS_RENDERED,\n  CLASS_ROOT,\n  CLASS_SCROLLER,\n  CLASS_SOURCE,\n} from '../../constants/classes';\nimport { EventBus } from '../../event/EventBus';\nimport { assign, min, repeat, tag } from '../../utils';\n\n\n/**\n * The class for rendering the editor.\n *\n * @since 0.1.0\n */\nexport class Renderer {\n  /**\n   * Holds the EventBus instance.\n   */\n  protected readonly event: EventBus\n\n  /**\n   * Holds the Code instance.\n   */\n  protected readonly Code: Code;\n\n  /**\n   * Holds the lines instance.\n   */\n  protected readonly lines: Lines;\n\n  /**\n   * Holds options.\n   */\n  protected readonly options: Options;\n\n  /**\n   * The Renderer constructor.\n   *\n   * @param Code    - A Code instance.\n   * @param event   - An EventBus instance.\n   * @param options - Options.\n   */\n  constructor( Code: Code, event: EventBus, options: Options ) {\n    this.Code    = Code;\n    this.lines   = Code.Lines;\n    this.event   = event;\n    this.options = options;\n  }\n\n  /**\n   * Render lines until the number reaches the `maxInitialLines`.\n   * Rest lines are rendered in the temporary `pre` element.\n   *\n   * @param append - The function to append a HTML string.\n   */\n  protected renderLines( append: ( string: string ) => void ): void {\n    const { lines } = this;\n    const max = min( lines.length, this.options.maxInitialLines );\n\n    for ( let i = 0; i < max; i++ ) {\n      append( tag( CLASS_LINE ) + lines[ i ].html + '</div>' );\n    }\n  }\n\n  /**\n   * Builds the HTML for the editor.\n   *\n   * @param source - Optional. Determines whether to embed the source code as a pre element or not.\n   *\n   * @return The built HTML string.\n   */\n  html( source?: boolean ): string {\n    let html = '';\n\n    const { options, options: { id } } = this;\n    const append  = ( string: string ) => { html += string };\n    const classes = [ CLASS_ROOT, CLASS_RENDERED ].concat( options.rootClasses );\n\n    const divs: [ string, string[], Attributes? ][] = [\n      [ 'root', classes, { id, role: 'code' } ],\n      [ 'body', [ CLASS_BODY ] ],\n      [ 'scroller', [ CLASS_SCROLLER ] ],\n      [ 'container', [ CLASS_CONTAINER ] ],\n      [ 'editor', [ CLASS_EDITOR ] ],\n    ];\n\n    divs.forEach( settings => {\n      this.event.emit( `${ settings[ 0 ] }:open`, append, settings[ 1 ], this.lines );\n      const attrs = assign( { id: `${ id }-${ settings[ 0 ] }` }, settings[ 2 ] );\n      html += tag( settings[ 1 ], attrs );\n    } );\n\n    html += tag( [ CLASS_LINES ], ATTRIBUTES_EDITABLE_AREA );\n    this.renderLines( append );\n    html += '</div>';\n\n    if ( source ) {\n      html += `<pre class=\"${ CLASS_SOURCE }\">${ this.Code.value }</pre>`;\n    }\n\n    return html + repeat( '</div>', divs.length );\n  }\n}\n","import { Components, Elements, Extensions, Language, Options } from '@ryusei/code';\nimport { AnyFunction } from '@ryusei/light/dist/types/types';\nimport * as CoreComponents from '../../components';\nimport {\n  CLASS_BACKGROUND,\n  CLASS_BODY,\n  CLASS_CONTAINER,\n  CLASS_EDITOR,\n  CLASS_EMPTY,\n  CLASS_FOCUSED,\n  CLASS_INITIALIZED,\n  CLASS_LINES,\n  CLASS_MOBILE,\n  CLASS_OVERLAY,\n  CLASS_READONLY,\n  CLASS_RENDERED,\n  CLASS_SCROLLER,\n} from '../../constants/classes';\nimport {\n  EVENT_BLUR,\n  EVENT_CHANGED,\n  EVENT_COMPOSITION_START,\n  EVENT_DESTROYED,\n  EVENT_FOCUS,\n  EVENT_MOUNT,\n  EVENT_MOUNTED,\n  EVENT_READONLY,\n  EVENT_RESET,\n} from '../../constants/events';\nimport { PROJECT_CODE } from '../../constants/project';\nimport { EventBus } from '../../event/EventBus';\nimport {\n  activeElement,\n  addClass,\n  assert,\n  assign,\n  attr,\n  debounce,\n  div,\n  escapeHtml,\n  focus,\n  forOwn,\n  hasClass,\n  isFunction,\n  isHTMLElement,\n  isMobile,\n  isString,\n  isUndefined,\n  nextTick,\n  on,\n  query,\n  remove,\n  removeClass,\n  styles,\n  text,\n  toggleClass,\n  uniqueId,\n  unit,\n} from '../../utils';\nimport { toggleEditable } from '../../utils/dom/toggleEditable/toggleEditable';\nimport { Renderer } from '../Renderer/Renderer';\n\n\n/**\n * The debounce duration for evaluating `focusout` of the editor.\n *\n * @since 0.1.0\n */\nconst FOCUSOUT_DEBOUNCE_DURATION = 10;\n\n/**\n * The core class for the editor.\n *\n * @since 0.1.0\n */\nexport class Editor {\n  /**\n   * Holds collection of editor elements.\n   */\n  elements: Elements;\n\n  /**\n   * Holds Component instances.\n   */\n  Components: Partial<Components> = {};\n\n  /**\n   * Holds Extension instances.\n   */\n  private Extensions: Partial<Extensions> = {};\n\n  /**\n   * Holds options.\n   */\n  readonly options: Options;\n\n  /**\n   * Holds the EventBus instance.\n   */\n  readonly event: EventBus;\n\n  /**\n   * Holds the source element.\n   */\n  protected source: HTMLElement;\n\n  /**\n   * Holds the root element.\n   */\n  protected root: HTMLElement;\n\n  /**\n   * Holds the language object.\n   */\n  readonly language: Language;\n\n  /**\n   * Indicates whether the editor is readonly or not.\n   */\n  private _readOnly: boolean;\n\n  /**\n   * The Editor constructor.\n   *\n   * @param language   - A Language object.\n   * @param options    - Options.\n   * @param extensions - An object with additional components.\n   */\n  constructor( language: Language, options: Options, extensions: Partial<Extensions> = {} ) {\n    this.language   = language;\n    this.options    = options;\n    this.event      = new EventBus();\n    this.options.id = this.options.id || uniqueId( PROJECT_CODE );\n\n    forOwn( CoreComponents, ( Component, name ) => {\n      this.Components[ name ] = new Component( this );\n    } );\n\n    forOwn( extensions, ( Extension, name ) => {\n      const value = this.options[ name.charAt( 0 ).toLowerCase() + name.slice( 1 ) ];\n\n      if ( isUndefined( value ) || value ) {\n        this.Extensions[ name ] = new Extension( this );\n      }\n    } );\n  }\n\n  /**\n   * Initializes the editor and components.\n   */\n  private mount(): void {\n    const { options, event, elements } = this;\n\n    this.listen();\n    event.emit( EVENT_MOUNT, elements );\n\n    forOwn( this.Components, Component => {\n      Component.mount( elements );\n    } );\n\n    forOwn( this.Extensions, Extension => {\n      Extension.mount( elements );\n    } );\n\n    event.emit( EVENT_MOUNTED, elements );\n\n    this.readOnly = options.readOnly;\n\n    if ( options.autofocus ) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Collects essential elements that constitute the code editor.\n   */\n  private collect(): void {\n    const { root } = this;\n    const editor = query<HTMLDivElement>( root, `.${ CLASS_EDITOR }` );\n    const lines  = query<HTMLDivElement>( root, `.${ CLASS_LINES }` );\n\n    toggleEditable( lines, true );\n    attr( lines, { tabindex: 0 } );\n\n    this.elements = Object.freeze( {\n      root,\n      editor,\n      lines,\n      editable  : lines,\n      body      : query<HTMLDivElement>( root, `.${ CLASS_BODY }` ),\n      scroller  : query<HTMLDivElement>( root, `.${ CLASS_SCROLLER }` ),\n      container : query<HTMLDivElement>( root, `.${ CLASS_CONTAINER }` ),\n      overlay   : div( CLASS_OVERLAY, root ),\n      background: div( { class: CLASS_BACKGROUND, 'aria-hidden': true }, editor ),\n    } );\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    const { elements, elements: { root }, event } = this;\n    const isFocused = this.isFocused.bind( this );\n\n    let type: string;\n\n    this.bind( root, 'pointerdown', () => {\n      type = 'pointer';\n    } );\n\n    this.bind( elements.editor, 'click', () => {\n      if ( ! isFocused() ) {\n        this.focus( true );\n      }\n    } );\n\n    this.bind( root, 'focusin', () => {\n      if ( isFocused() && ! hasClass( root, CLASS_FOCUSED ) ) {\n        addClass( root, CLASS_FOCUSED );\n        event.emit( EVENT_FOCUS, type );\n      }\n    } );\n\n    this.bind( root, 'focusout', debounce( () => {\n      if ( ! isFocused() && hasClass( root, CLASS_FOCUSED ) ) {\n        removeClass( root, CLASS_FOCUSED );\n        event.emit( EVENT_BLUR );\n        type = '';\n      }\n    }, FOCUSOUT_DEBOUNCE_DURATION ) );\n\n    event.on( [ EVENT_MOUNTED, EVENT_CHANGED, EVENT_COMPOSITION_START, EVENT_RESET ], () => {\n      nextTick( () => {\n        toggleClass( root, CLASS_EMPTY, ! this.value && ! this.Components.Input.composing );\n      } );\n    } );\n  }\n\n  /**\n   * Listens to native events.\n   *\n   * @param elm      - A document, a window or an element.\n   * @param events   - An event name or names.\n   * @param callback - A callback function.\n   */\n  private bind( elm: Document | Window | Element, events: string, callback: ( e: Event ) => void ): void {\n    on( elm, events, callback, this );\n  }\n\n  /**\n   * Applies the editor to the target element.\n   *\n   * @param target - A selector to find the target element, or a target element itself.\n   * @param code   - Optional. The code to overwrite the content of the target element.\n   */\n  apply( target: string | Element, code?: string ): void {\n    assert( ! this.root, 'Already initialized.' );\n\n    const elm = isString( target ) ? query( document, target ) : target;\n\n    if ( isHTMLElement( elm ) ) {\n      this.source = elm;\n\n      if ( hasClass( elm, CLASS_RENDERED ) ) {\n        this.root = elm;\n        const pre = query( elm, 'pre' );\n        this.Components.Code.init( text( pre ) || '' );\n        remove( pre );\n      } else {\n        elm.insertAdjacentHTML( 'afterend', this.html( isUndefined( code ) ? text( elm ) : code, false ) );\n        styles( elm, { display: 'none' } );\n        this.root = elm.nextElementSibling as HTMLElement;\n      }\n\n      addClass( this.root, [ CLASS_INITIALIZED, isMobile() ? CLASS_MOBILE : '' ] );\n\n      this.collect();\n      this.mount();\n    } else {\n      assert( false, `${ target } is invalid.` );\n    }\n  }\n\n  /**\n   * Returns HTML of the editor.\n   * This may not contain all lines because IE can not render tons of HTML tags at the same time.\n   * The number of lines can be specified by options.\n   *\n   * @param code   - A code string.\n   * @param source - Optional. Whether to embed the source code into the editor or not.\n   *\n   * @return The HTML of the editor.\n   */\n  html( code: string, source?: boolean ): string {\n    const { Code } = this.Components;\n    Code.init( code );\n    return new Renderer( Code, this.event, this.options ).html( source );\n  }\n\n  /**\n   * Saves the content to the source element.\n   */\n  save(): void {\n    const { source, value } = this;\n\n    if ( source instanceof HTMLTextAreaElement ) {\n      source.value = value;\n    } else {\n      text( source, escapeHtml( value ) );\n    }\n  }\n\n  /**\n   * Focuses to the editable area.\n   *\n   * @param reselect - Determines whether to reselect the last position or not.\n   */\n  focus( reselect?: boolean ): void {\n    if ( reselect ) {\n      this.Components.Selection.reselect();\n    } else {\n      focus( this.elements.editable );\n    }\n  }\n\n  /**\n   * Removes the focus from the editor.\n   */\n  blur(): void {\n    const elm = activeElement();\n\n    if ( this.isFocused() && isHTMLElement( elm ) ) {\n      elm.blur();\n    }\n  }\n\n  /**\n   * Attempts to invoke the method of the specified extension.\n   *\n   * @param name   - A name of the extension.\n   * @param method - A method name to invoke.\n   * @param args   - Optional. Arguments for the method.\n   *\n   * @return The return value of the method.\n   */\n  invoke<K extends keyof Extensions, P extends keyof Extensions[ K ], V extends Extensions[ K ][ P ]>(\n    name: K,\n    method: P,\n    ...args: V extends AnyFunction ? Parameters<V> : any[]\n  ): V extends AnyFunction ? ReturnType<V> : void {\n    const extension = this.Extensions[ name ];\n\n    if ( extension && isFunction( extension[ method ] ) ) {\n      return extension[ method ]( ...args );\n    }\n  }\n\n  /**\n   * Returns the extension of the specified name.\n   *\n   * @param name - A name of an extension.\n   *\n   * @return An extension if found, or otherwise `undefined`.\n   */\n  require<K extends keyof Extensions>( name: K ): Extensions[ K ] | undefined {\n    return this.Extensions[ name ];\n  }\n\n  /**\n   * Checks if the editor is focused or not.\n   *\n   * @return `true` if the editor is focused, or otherwise `false`.\n   */\n  isFocused(): boolean {\n    return this.root.contains( activeElement() );\n  }\n\n  /**\n   * Destroys the editor.\n   */\n  destroy(): void {\n    const { event } = this;\n\n    this.save();\n\n    forOwn( assign( this.Components, this.Extensions ), Component => {\n      Component.destroy();\n    } );\n\n    delete this.Components;\n    delete this.Extensions;\n\n    styles( this.source, { display: '' } );\n    remove( this.elements.root );\n\n    event.emit( EVENT_DESTROYED );\n    event.destroy();\n  }\n\n  /**\n   * Sets a new value to the editor.\n   *\n   * @param value - A value to set.\n   */\n  set value( value: string ) {\n    const { Components, Components: { Code, Selection } } = this;\n    Code.value = value;\n\n    Components.View.jump( 0 );\n    Components.Sync.sync( 0, Code.size - 1 );\n\n    if ( this.isFocused() ) {\n      Selection.set( [ 0, 0 ] );\n    } else {\n      Selection.update( [ 0, 0 ], [ 0, 0 ], true );\n    }\n\n    this.event.emit( EVENT_RESET );\n  }\n\n  /**\n   * Returns the current value of the editor.\n   *\n   * @return The current value.\n   */\n  get value(): string {\n    return this.Components.Code.value;\n  }\n\n  /**\n   * Sets the width of the root element.\n   *\n   * @param width - Width to set as pixel or CSS styles.\n   */\n  set width( width: number | string ) {\n    styles( this.root, { width: unit( width ) } );\n    this.Components.View.emitResize();\n  }\n\n  /**\n   * Returns the width of the editor in pixel.\n   *\n   * @return The width of the editor.\n   */\n  get width(): number {\n    return this.root.clientWidth;\n  }\n\n  /**\n   * Sets the height of the root element.\n   *\n   * @param height - Height to set as pixel or CSS styles.\n   */\n  set height( height: number | string ) {\n    styles( this.root, { height: unit( height ) } );\n    this.Components.View.emitResize();\n  }\n\n  /**\n   * Returns the height of the editor in pixel.\n   *\n   * @return The height of the editor.\n   */\n  get height(): number {\n    return this.root.clientHeight;\n  }\n\n  /**\n   * Makes the editor mutable or immutable.\n   *\n   * @param readOnly - Whether to make the editor immutable or mutable.\n   */\n  set readOnly( readOnly: boolean ) {\n    const { elements } = this;\n\n    toggleClass( elements.root, CLASS_READONLY, readOnly );\n    toggleEditable( elements.editable, ! readOnly );\n\n    this._readOnly = readOnly;\n    this.event.emit( EVENT_READONLY, readOnly );\n  }\n\n  /**\n   * Indicates whether the editor is disabled or not.\n   *\n   * @return - `true` if the input is read-only or `false` if not.\n   */\n  get readOnly(): boolean {\n    return this._readOnly;\n  }\n}\n","/**\r\n * Converts essential HTML special characters to HTML entities.\r\n *\r\n * @param string - A string to escape.\r\n *\r\n * @return An escaped string.\r\n */\r\nexport function escapeHtml( string: string ): string {\r\n  return string.replace( /&/g, '&amp;' ).replace( /</g, '&lt;' ).replace( />/g, '&gt;' );\r\n}\r\n","import { EventBusCallback, Extensions, Language, Options, Position } from '@ryusei/code';\nimport { DEFAULT_OPTIONS } from '../../constants/defaults';\nimport { assert, assign, forOwn, isObject, isUndefined, toArray } from '../../utils';\nimport { Editor } from '../Editor/Editor';\n\n\n/**\n * The frontend class for the editor.\n *\n * @since 0.1.0\n */\nexport class RyuseiCode {\n  /**\n   * Stores all language objects.\n   */\n  private static languages: Record<string, Language> = {};\n\n  /**\n   * Stores all Component classes.\n   */\n  private static Extensions: Partial<Extensions> = {};\n\n  /**\n   * Registers languages.\n   *\n   * @param languages - A language object or objects.\n   */\n  static register( languages: Language | Language[] ): void {\n    toArray( languages ).forEach( language => {\n      const { language: lang, id } = language;\n\n      if ( ! RyuseiCode.languages[ id ] ) {\n        ( lang.alias || [] ).concat( id ).forEach( ( id: string ) => {\n          RyuseiCode.languages[ id ] = language;\n        } );\n      }\n    } );\n  }\n\n  /**\n   * Registers extensions.\n   *\n   * @param extensions - An object literal with extensions.\n   */\n  static compose( extensions: Partial<Extensions> ): void {\n    forOwn( extensions, ( Extension, name ) => {\n      RyuseiCode.Extensions[ name ] = Extension;\n    } );\n  }\n\n  /**\n   * Returns a Language object.\n   *\n   * @param id - The language ID.\n   *\n   * @return A Language object.\n   */\n  static get( id: string ): Language {\n    const { languages } = RyuseiCode;\n    assert( languages[ id ], `${ id } was not found.` );\n    return languages[ id ];\n  }\n\n  /**\n   * Holds options.\n   */\n  options: Options;\n\n  /**\n   * Holds the Editor instance.\n   */\n  Editor: Editor;\n\n  /**\n   * Holds the language object.\n   */\n  language: Language;\n\n  /**\n   * The constructor.\n   *\n   * @param options - Optional. Options.\n   */\n  constructor( options?: Options ) {\n    this.mergeOptions( options );\n    this.language = RyuseiCode.get( this.options.language );\n    this.Editor   = new Editor( this.language, this.options, RyuseiCode.Extensions );\n  }\n\n  /**\n   * Merges options with default values.\n   *\n   * @param options - Options to merge.\n   */\n  private mergeOptions( options: Options | undefined ): void {\n    this.options = assign( {}, DEFAULT_OPTIONS );\n\n    forOwn( options, ( value, key ) => {\n      if ( ! isUndefined( value ) ) {\n        if ( isObject( DEFAULT_OPTIONS[ key ] ) ) {\n          if ( isObject( value ) ) {\n            this.options[ key ] = assign( {}, DEFAULT_OPTIONS[ key ], value );\n          }\n        } else {\n          this.options[ key ] = value;\n        }\n      }\n    } );\n  }\n\n  /**\n   * Applies the editor to the target element.\n   *\n   * @param target - A selector or an element to apply the editor to.\n   * @param code   - Optional. The code to overwrite the content of the target element.\n   */\n  apply( target: string | Element, code?: string ): void {\n    this.Editor.apply( target, code );\n  }\n\n  /**\n   * Returns a HTML string for the editor.\n   *\n   * @param code - Initial code.\n   *\n   * @return A HTML string for the editor.\n   */\n  html( code: string ): string {\n    return this.Editor.html( code, true );\n  }\n\n  /**\n   * Attaches an event handler to the editor event or events.\n   *\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param callback - A callback function.\n   */\n  on( events: string, callback: EventBusCallback ): void {\n    this.Editor.event.on( events, callback );\n  }\n\n  /**\n   * Detaches an event handler registered by `on()`.\n   *\n   * @param events - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   */\n  off( events: string ): void {\n    this.Editor.event.off( events );\n  }\n\n  /**\n   * Saves the content to the source element.\n   */\n  save(): void {\n    this.Editor.save();\n  }\n\n  /**\n   * Focuses to the editable area.\n   *\n   * @param reselect - Determines whether to reselect the last position or not.\n   */\n  focus( reselect?: boolean ): void {\n    this.Editor.focus( reselect );\n  }\n\n  /**\n   * Sets the caret position or selection range.\n   *\n   * @param start - A start position as [ row, col ];\n   * @param end   - Optional. An end position. If omitted, the selection will be collapsed to the start.\n   */\n  setRange( start: Position, end?: Position ): void {\n    this.Editor.Components.Selection.set( start, end );\n  }\n\n  /**\n   * The alias of the `value` property that returns the current code as a string.\n   *\n   * @return The current code as a string.\n   */\n  toString(): string {\n    return this.value;\n  }\n\n  /**\n   * Destroys the code editor and releases the memory.\n   * The final value is applied to the source element.\n   */\n  destroy(): void {\n    this.Editor.destroy();\n    delete this.Editor;\n  }\n\n  /**\n   * Sets the new value to the editor.\n   *\n   * @return The current code.\n   */\n  set value( code: string ) {\n    this.Editor.value = code;\n  }\n\n  /**\n   * Returns the current code as a string.\n   *\n   * @return The current code.\n   */\n  get value(): string {\n    return this.Editor.value;\n  }\n}\n","import { Elements } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { CLASS_ACTIVE } from '../../constants/classes';\nimport {\n  EVENT_BLUR,\n  EVENT_FOCUS,\n  EVENT_FOCUS_LINE_CHANGED,\n  EVENT_INIT_STYLE,\n  EVENT_READONLY,\n  EVENT_RESIZE,\n} from '../../constants/events';\nimport { PROJECT_CODE } from '../../constants/project';\nimport { Editor } from '../../core/Editor/Editor';\nimport { addClass, div, hasClass, removeClass, styles, unit } from '../../utils';\n\n\n/**\n * The class name for the active line element.\n *\n * @since 0.1.0\n */\nexport const CLASS_ACTIVE_LINE = `${ PROJECT_CODE }__active-line`;\n\n/**\n * The component for activating/deactivating lines according to the current selection.\n *\n * @since 0.1.0\n */\nexport class ActiveLine extends Component {\n  /**\n   * Holds the active line element.\n   */\n  private line: HTMLDivElement;\n\n  /**\n   * Keeps the previous top offset.\n   */\n  private top: number;\n\n  /**\n   * The ActiveLine constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n\n    this.on( EVENT_INIT_STYLE, ( e, add ) => {\n      add( `.${ CLASS_ACTIVE_LINE }`, 'height', this.options.lineHeight );\n    } );\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    this.line = div( { class: CLASS_ACTIVE_LINE }, elements.background );\n\n    this.on( [ EVENT_FOCUS, EVENT_FOCUS_LINE_CHANGED, EVENT_READONLY ], ( e, readOnly ) => {\n      if ( e.type !== EVENT_READONLY || ! readOnly ) {\n        this.activate();\n        this.offset();\n      } else {\n        this.deactivate();\n      }\n    } );\n\n    this.on( EVENT_BLUR, this.deactivate, this );\n    this.on( EVENT_RESIZE, this.offset, this );\n  }\n\n  /**\n   * Activates the element.\n   */\n  private activate(): void {\n    const { Editor } = this;\n\n    if ( Editor.isFocused() && ! Editor.readOnly ) {\n      if ( ! this.isActive() ) {\n        addClass( this.line, CLASS_ACTIVE );\n        this.emit( 'activeLine:activated' );\n      }\n    }\n  }\n\n  /**\n   * Offsets the active line element to the current focus node.\n   */\n  private offset(): void {\n    if ( this.isActive() ) {\n      const { Measure } = this;\n      const top = Measure.getTop( this.Selection.focus[ 0 ] ) + Measure.padding.top;\n\n      if ( this.top !== top ) {\n        styles( this.line, { top: unit( ( this.top = top ) ) } );\n        this.emit( 'activeLine:updated' );\n      }\n    }\n  }\n\n  /**\n   * Deactivates the element.\n   */\n  private deactivate(): void {\n    removeClass( this.line, CLASS_ACTIVE );\n    this.top = -1;\n    this.emit( 'activeLine:deactivated' );\n  }\n\n  /**\n   * Checks if the element is active or not.\n   *\n   * @return `true` if the element is active, or otherwise `false`.\n   */\n  private isActive(): boolean {\n    return hasClass( this.line, CLASS_ACTIVE );\n  }\n}\n","import { AutoCloseConfig, Elements } from '@ryusei/code';\nimport { CATEGORY_STRING } from '@ryusei/light';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_CHANGED, EVENT_KEYDOWN } from '../../constants/events';\nimport { compare, isArray, isFunction, isString, normalizeKey, prevent } from '../../utils';\n\n\n/**\n * The component for auto closing brackets.\n *\n * @since 0.1.0\n */\nexport class AutoClose extends Component {\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    this.on( EVENT_KEYDOWN, ( e, ke ) => {\n      this.skip( ke );\n      this.remove( ke );\n    } );\n\n    this.on( EVENT_CHANGED, ( e, type ) => {\n      if ( type === 'input' ) {\n        this.close();\n      }\n    } );\n  }\n\n  /**\n   * Closes the entered opening character.\n   */\n  private close(): void {\n    const { Input } = this;\n\n    if ( ! Input.composing ) {\n      const index = this.getChars( false ).indexOf( Input.get().key );\n\n      if ( index > -1 && this.validate( index, 'close' ) ) {\n        Input.apply( {\n          type     : 'autoClose',\n          insertion: this.getClosingString( index ),\n          offset   : this.getOffset( index ),\n        } );\n      }\n    }\n  }\n\n  /**\n   * Skips the entered close character if the next character is already the closing character.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private skip( e: KeyboardEvent ): void {\n    const { Input } = this;\n\n    if ( ! Input.composing ) {\n      const closingChars = this.getChars( true );\n      const index        = closingChars.indexOf( normalizeKey( e.key ) );\n\n      if ( index > -1 && this.validate( index, 'skip' ) ) {\n        if ( closingChars[ index ] === Input.char() ) {\n          const { Selection, Selection: { focus } } = this;\n          Selection.set( [ focus[ 0 ], focus[ 1 ] + 1 ] );\n          prevent( e );\n        }\n      }\n    }\n  }\n\n  /**\n   * Automatically removes the paired characters when the backspace key is pressed.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private remove( e: KeyboardEvent ): void {\n    const { Input } = this;\n\n    if ( e.key === 'Backspace' ) {\n      const index = this.getChars( false ).indexOf( Input.char( Input.col - 1 ) );\n\n      if ( index > -1 && this.validate( index, 'remove' ) ) {\n        if ( this.getChars( true )[ index ] === Input.char() ) {\n          const { Selection, Selection: { focus } } = this;\n          Input.value = Input.before + Input.after.slice( 1 );\n          Selection.set( focus );\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns an array with opening/closing characters.\n   *\n   * @param closing - Determines whether to get closing or opening characters.\n   *\n   * @return An array with characters.\n   */\n  private getChars( closing: boolean ): string[] {\n    return this.getConfig().map( chars => {\n      const value = chars[ closing ? 1 : 0 ];\n      return isString( value ) ? value : '';\n    } );\n  }\n\n  /**\n   * Returns a closing string.\n   *\n   * @param index - A config index.\n   *\n   * @return A closing string. This may be empty.\n   */\n  private getClosingString( index: number ): string {\n    const config = this.getConfig()[ index ];\n    const closer = config && config[ 1 ];\n    return isFunction( closer ) ? closer( this.Editor ) : closer || '';\n  }\n\n  /**\n   * Returns a number of characters to offset.\n   *\n   * @param index - A config index.\n   *\n   * @return The number of characters to offset.\n   */\n  private getOffset( index: number ): number {\n    const config = this.getConfig()[ index ];\n    const data   = config && config[ 2 ];\n    return data ? data.offset || 0 : 0;\n  }\n\n  /**\n   * Executes the validator defined by the language data.\n   *\n   * @param index - A config index.\n   * @param key   - A key of the validator.\n   *\n   * @return `true` if the input satisfies the validator, or otherwise `false`.\n   */\n  private validate( index: number, key: 'close' | 'skip' | 'remove' ): boolean {\n    const { Scope } = this;\n    const config    = this.getConfig()[ index ];\n    const data      = config[ 2 ];\n\n    if ( ! data ) {\n      return true;\n    }\n\n    const validator = data[ key ];\n\n    if ( isFunction( validator ) ) {\n      return validator( this.Editor, config );\n    }\n\n    if ( isString( validator ) ) {\n      if ( validator === '@quotes' ) {\n        return this.validateQuote( key );\n      }\n\n      return false;\n    }\n\n    if ( isArray( validator ) ) {\n      return Scope.isIn( validator );\n    }\n\n    return validator;\n  }\n\n  /**\n   * Determines whether to proceed completion of quotes or not.\n   * - RegExp: checks the string after the input quote.\n   *\n   * @param key - The key of the validator.\n   *\n   * @return `true` if the completion process should be proceeded, or otherwise `false`.\n   */\n  private validateQuote( key: 'close' | 'skip' | 'remove' ): boolean {\n    const { start } = this.Selection.get();\n    const { Input } = this;\n    const currInfo = this.lines.getInfoAt( start );\n    const prevInfo = Input.info;\n\n    if ( currInfo ) {\n      if ( currInfo.category === CATEGORY_STRING || prevInfo && prevInfo.category === CATEGORY_STRING ) {\n        if ( key === 'skip' || key === 'remove' ) {\n          return compare( start, [ start[ 0 ], currInfo.to - 1 ] ) === 0;\n        }\n\n        return false;\n      }\n    }\n\n    const { after } = Input;\n    return ! this.Scope.isIn( 'comment' )  && ( !after || /^\\s/.test( after ) );\n  }\n\n  /**\n   * Returns the config array.\n   *\n   * @return A config array.\n   */\n  private getConfig(): AutoCloseConfig[]  {\n    return this.getLanguage().autoClose || [];\n  }\n}\n","import { BracketMatchingOptions } from '@ryusei/code';\n\n\n/**\n * The default options for the BracketMatching component.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: BracketMatchingOptions = {\n  brackets: [\n    [ '(', '[', '{', '<' ],\n    [ ')', ']', '}', '>' ],\n  ],\n  maxScanLines: 1000,\n};\n","import { BracketMatchingOptions, Elements, EventBusEvent, Position, Range, ScanResult, TokenInfo } from '@ryusei/code';\nimport { CATEGORY_BRACKET } from '@ryusei/light';\nimport { Component } from '../../classes/Component/Component';\nimport { Selection } from '../../components';\nimport { EVENT_READONLY, EVENT_SELECTED } from '../../constants/events';\nimport { CHANGED, EXTEND, SELECTING, START } from '../../constants/selection-states';\nimport { debounce, escapeRegExp, rafThrottle } from '../../utils';\nimport { Throttle } from '../../utils/function/throttle/throttle';\nimport { DEFAULT_OPTIONS } from './defaults';\n\n\n/**\n * The group ID for markers.\n *\n * @since 0.1.0\n */\nexport const MARKER_ID = 'brackets';\n\n/**\n * The debounce duration for the clear method.\n *\n * @since 0.1.0\n */\nexport const CLEAR_DEBOUNCE_DURATION = 50;\n\n/**\n * The component for highlighting matched brackets.\n *\n * @since 0.1.0\n */\nexport class BracketMatching extends Component {\n  /**\n   * The debounced clear function.\n   */\n  private clear: Throttle<() => void>;\n\n  /**\n   * The collection of brackets.\n   */\n  private brackets: BracketMatchingOptions[ 'brackets' ];\n\n  /**\n   * Limits the number of lines to match brackets.\n   */\n  private maxScanLines: number;\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    const options = this.getOptions( 'bracketMatching', DEFAULT_OPTIONS );\n\n    this.brackets     = options.brackets;\n    this.maxScanLines = options.maxScanLines;\n\n    super.mount( elements );\n\n    this.clear  = debounce( () => { this.Range.clear( MARKER_ID ) }, CLEAR_DEBOUNCE_DURATION );\n    this.update = rafThrottle( this.update.bind( this ) );\n\n    this.on( EVENT_SELECTED, this.onSelected, this );\n    this.on( EVENT_READONLY, ( e, readOnly ) => {\n      if ( readOnly ) {\n        this.clear();\n      }\n    } );\n  }\n\n  /**\n   * Called when the selection state is changed.\n   *\n   * @param e         - An EventBusEvent object.\n   * @param Selection - A Selection instance.\n   */\n  private onSelected( e: EventBusEvent, Selection: Selection ): void {\n    if ( Selection.is( START, SELECTING, EXTEND ) ) {\n      this.clear();\n    } else if ( Selection.is( CHANGED ) ) {\n      if ( ! this.Editor.readOnly && Selection.isCollapsed() ) {\n        this.update();\n      }\n    }\n  }\n\n  /**\n   * Checks the current location and renders markers.\n   */\n  private update(): void {\n    const { focus } = this.Selection;\n    const before: Position = focus[ 1 ] > 0 ? [ focus[ 0 ], focus[ 1 ] - 1 ] : null;\n\n    this.clear.invoke();\n\n    [ before, focus ].some( position => {\n      if ( position && this.Scope.inCategory( CATEGORY_BRACKET, position ) ) {\n        this.draw( position[ 0 ], this.lines.getInfoAt( position ) );\n        return true;\n      }\n    } );\n  }\n\n  /**\n   * Draws the provided bracket token and its counterpart.\n   *\n   * @param row  - A row index.\n   * @param info - A TokenInfo object.\n   */\n  private draw( row: number, info: TokenInfo ): void {\n    const match = this.find( false, row, info ) || this.find( true, row, info );\n\n    if ( match ) {\n      const { Range } = this;\n      Range.clear( MARKER_ID );\n      Range.register( MARKER_ID, [ this.infoToRange( row, info ), this.infoToRange( match.row, match.info ) ] );\n    }\n  }\n\n  /**\n   * Finds the counterpart of the provided token.\n   *\n   * @param findClosing - Determines whether to find closing part or not.\n   * @param row         - A row index.\n   * @param info        - A TokenInfo object.\n   *\n   * @return A counter token of the passed info if found, or otherwise `undefined`.\n   */\n  private find( findClosing: boolean, row: number, info: TokenInfo ): ScanResult | undefined {\n    const { brackets } = this;\n    const index = brackets[ Number( ! findClosing ) ].indexOf( info.code );\n\n    if ( index > -1 ) {\n      const counterpart = brackets[ Number( findClosing ) ][ index ];\n\n      return this.lines[ `scan${ findClosing ? 'Down' : 'Up' }` ](\n        [ row, info.from ],\n        [ CATEGORY_BRACKET, new RegExp( escapeRegExp( counterpart ) ) ],\n        [ CATEGORY_BRACKET, new RegExp( escapeRegExp( info.code ) ) ],\n        1,\n        this.maxScanLines\n      );\n    }\n  }\n\n  /**\n   * Converts the provided TokeInfo object to the range.\n   *\n   * @param row  - A row index.\n   * @param info - A TokenInfo object to convert.\n   *\n   * @return A Range object.\n   */\n  private infoToRange( row: number, info: TokenInfo ): Range {\n    return { start: [ row, info.from ], end: [ row, info.to ] };\n  }\n}\n","import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The collection of shortcuts for the Comment extension.\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[]> = {\n  lineComment : [ '/', true ],\n  blockComment: [ '?', true, true ],\n};\n","import { Elements, Position, Range } from '@ryusei/code';\nimport { CATEGORY_COMMENT } from '@ryusei/light';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_CHANGE, EVENT_CHANGED, EVENT_KEYMAP } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { clamp, endsWith, escapeRegExp, min, startsWith } from '../../utils';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * The input type for comment or uncomment changes.\n *\n * @since 0.1.0\n */\nconst COMMENT_INPUT_TYPE = 'comment';\n\n/**\n * The class for commenting out or uncommenting code.\n *\n * @since 0.1.0\n */\nexport class Comment extends Component {\n  /**\n   * The Comment constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.addKeyBindings( KEYMAP );\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    const { language } = this;\n\n    if ( language.blockComment ) {\n      this.on( `${ EVENT_KEYMAP }:blockComment`, this.toggleBlock, this );\n    }\n\n    if ( language.lineComment ) {\n      this.on( `${ EVENT_KEYMAP }:lineComment`, this.toggleLine, this );\n    }\n  }\n\n  /**\n   * Toggles block comments.\n   * If the `start` or `end` position of the selection is inside a comment, unwraps the comment.\n   * Otherwise, comments out the selection.\n   */\n  private toggleBlock(): void {\n    let { start, end } = this.Selection.get();\n    const range = this.detectBlockComment( start ) || this.detectBlockComment( end );\n\n    this.emit( EVENT_CHANGE, COMMENT_INPUT_TYPE );\n\n    if ( range ) {\n      start = range.start;\n      end   = range.end;\n      this.uncomment( start, end, false );\n    } else {\n      this.commentOut( start, end, false );\n    }\n\n    this.sync( start, end, !! range, false );\n    this.emit( EVENT_CHANGED, COMMENT_INPUT_TYPE );\n  }\n\n  /**\n   * Toggles line comments.\n   */\n  private toggleLine(): void {\n    const { start, end } = this.Selection.get();\n    const { lines } = this;\n\n    this.emit( EVENT_CHANGE, COMMENT_INPUT_TYPE );\n\n    let endPosition: Position;\n    let uncommented;\n\n    for ( let i = start[ 0 ]; i <= end[ 0 ]; i++ ) {\n      const range = this.detectLineComment( [ i, lines[ i ].text.length ] );\n\n      if ( range ) {\n        this.uncomment( range.start, range.end, true );\n        endPosition = end;\n        uncommented = true;\n      }\n    }\n\n    if ( ! uncommented ) {\n      const minIndent = lines.findMinIndent( start[ 0 ], end[ 0 ] );\n\n      for ( let i = start[ 0 ]; i <= end[ 0 ]; i++ ) {\n        this.commentOut( [ i, minIndent.length ], [ i, lines[ i ].text.length ], true );\n      }\n    }\n\n    this.sync( start, endPosition || end, uncommented, true );\n    this.emit( EVENT_CHANGED, COMMENT_INPUT_TYPE );\n  }\n\n  /**\n   * Comments out code between the start and end positions.\n   *\n   * @param start - A start position.\n   * @param end   - An end position.\n   * @param line  - Whether to use a line comment or not.\n   */\n  private commentOut( start: Position, end: Position, line: boolean ): void {\n    const { Code } = this;\n    const comment = this.getConfig( line ? [ start[ 0 ], 0 ] : start, line );\n\n    if ( comment ) {\n      const commentStart = comment[ 0 ] + ( comment[ 1 ] ? '' : ' ' );\n      Code.replaceRange( start, end, `${ commentStart }${ Code.sliceRange( start, end ) }${ comment[ 1 ] || '' }` );\n    }\n  }\n\n  /**\n   * Converts back the commented out code into the source code.\n   *\n   * @param start - A start position.\n   * @param end   - An end position.\n   * @param line  - Whether to use a line comment or not.\n   */\n  private uncomment( start: Position, end: Position, line: boolean ): void {\n    const { Code } = this;\n    const comment = this.getConfig( start, line );\n\n    if ( comment ) {\n      const replacement = Code.sliceRange( start, end );\n      const source      = `^${ escapeRegExp( comment[ 0 ] ) }[ ]?|[ ]?${ escapeRegExp( comment[ 1 ] ) }$`;\n      Code.replaceRange( start, end, replacement.replace( new RegExp( source, 'g' ), '' ) );\n    }\n  }\n\n  /**\n   * Syncs the code to the viewport.\n   *\n   * @param start       - A start position\n   * @param end         - An end position.\n   * @param uncommented - Determines whether to sync code for uncommented or commented out lines.\n   * @param line        - Determines whether to sync code for line or block comments.\n   */\n  private sync( start: Position, end: Position, uncommented: boolean, line: boolean ): void {\n    const { lines } = this;\n    const range   = this.Selection.get();\n    const comment = this.getConfig( start, line );\n\n    if ( ! comment ) {\n      return;\n    }\n\n    let row = uncommented && ! line ? range.start[ 0 ] : end[ 0 ];\n    let col = range.end[ 1 ];\n\n    if ( line ) {\n      row = min( row + 1, lines.length - 1 );\n    } else {\n      const length = comment[ 0 ].length;\n\n      if ( uncommented ) {\n        if ( row === start[ 0 ] ) {\n          col -= length;\n        }\n      } else {\n        if ( row === start[ 0 ] ) {\n          col += length;\n        }\n      }\n    }\n\n    this.View.jump( row );\n    this.Sync.sync( start[ 0 ], end[ 0 ] );\n\n    col = clamp( col, 0, this.lines[ row ].text.length );\n    this.Selection.set( [ row, col ] );\n  }\n\n  /**\n   * Returns the comment config object at the position.\n   *\n   * @param position - A position.\n   * @param line     - Determines whether to get a line comment configuration or not.\n   *\n   * @return An object with `start` and `end` that represent a comment syntax.\n   */\n  private getConfig( position: Position, line: boolean ): [ string, string ] {\n    return this.getLanguage( position )[ `${ line ? 'line' : 'block' }Comment` ];\n  }\n\n  /**\n   * Detects the range of a block comment around the provided position.\n   *\n   * @param position - A position that may be inside a block comment.\n   *\n   * @return A Range object if the passed position is inside a block comment.\n   *         Otherwise, `null`.\n   */\n  private detectBlockComment( position: Position ): Range | null {\n    const { lines } = this;\n    const info = lines.getInfoAt( position );\n\n    if ( info && info.category === CATEGORY_COMMENT ) {\n      const start = lines.findBlockStart( position );\n      const end   = lines.findBlockEnd( position );\n\n      if ( start && end ) {\n        return { start, end };\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Detects the range of a line comment at the provided position.\n   * This method does not care that the code is actually categorized as a comment,\n   * but only care about the representation of the line comment.\n   *\n   * @param position - A position that may be on the line containing a line comment.\n   *\n   * @return A Range object if the row contains a line comment. Otherwise, `null`.\n   */\n  private detectLineComment( position: Position ): Range | null {\n    const [ head, tail ] = this.getConfig( position, true );\n    const [ row ] = position;\n    const line = this.lines[ row ].text;\n\n    if ( line ) {\n      const trimmed = line.trim();\n\n      if ( startsWith( trimmed, head ) && ( ! tail || endsWith( trimmed, tail ) ) ) {\n        const endCol = tail ? line.lastIndexOf( tail ) : line.length;\n\n        return {\n          start: [ row, line.indexOf( head ) ],\n          end  : [ row, endCol ],\n        };\n      }\n    }\n\n    return null;\n  }\n}\n","import { UIButtonSettings } from '@ryusei/code';\nimport { Dialog } from './Dialog';\n\n\n/**\n * A collection of settings for general UI buttons.\n *\n * @since 0.1.0\n */\nexport const GENERAL_UI_BUTTONS: Record<string, UIButtonSettings<Dialog>> = {\n  confirm: {\n    id   : 'confirm',\n    click: 'confirm',\n  },\n  cancel : {\n    id      : 'cancel',\n    click   : 'hide',\n    tabindex: 0,\n  },\n};\n","import { PROJECT_CODE } from '../../constants/project';\n\n\n/**\n * Classes for dialog components.\n *\n * @since 0.1.0\n */\nexport const CLASS_DIALOG        = `${ PROJECT_CODE }__dialog`;\nexport const CLASS_DIALOG_GROUP  = `${ CLASS_DIALOG }__group`;\nexport const CLASS_DIALOG_HEADER = `${ CLASS_DIALOG }__header`;\nexport const CLASS_DIALOG_TITLE  = `${ CLASS_DIALOG }__title`;\nexport const CLASS_DIALOG_BODY   = `${ CLASS_DIALOG }__body`;\nexport const CLASS_DIALOG_FOOTER = `${ CLASS_DIALOG }__footer`;\n","import { DialogGroupData, Elements, UIButtonSettings } from '@ryusei/code';\nimport { UIComponent } from '../../classes/UIComponent/UIComponent';\nimport { CLASS_ACTIVE } from '../../constants/classes';\nimport { PROJECT_CODE } from '../../constants/project';\nimport { addClass, append, assert, attr, create, div, isString, removeClass, text } from '../../utils';\nimport { GENERAL_UI_BUTTONS } from './buttons';\nimport {\n  CLASS_DIALOG,\n  CLASS_DIALOG_BODY,\n  CLASS_DIALOG_FOOTER,\n  CLASS_DIALOG_GROUP,\n  CLASS_DIALOG_HEADER,\n  CLASS_DIALOG_TITLE,\n} from './classes';\n\n\n/**\n * The group ID of the common dialog.\n *\n * @since 0.1.0\n */\nconst COMMON_DIALOG_GROUP = `${ PROJECT_CODE }-common`;\n\n/**\n * The component for displaying a dialog.\n *\n * @since 0.1.0\n */\nexport class Dialog extends UIComponent<DialogGroupData> {\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.register( COMMON_DIALOG_GROUP, div(), '' );\n  }\n\n  /**\n   * Listens to some events.\n   */\n  protected listen(): void {\n    this.bind( window, 'click', e => {\n      if ( ! this.wrapper.contains( e.target as Node ) ) {\n        this.hide();\n      }\n    } );\n  }\n\n  /**\n   * Creates dialog elements.\n   * Note that the dialog element must/should have:\n   * - an accessible name by `aria-label` or `aria-labelledby`.\n   * - at least one focusable descendant element.\n   *\n   * @link https://www.w3.org/TR/wai-aria-1.2/#dialog\n   */\n  protected create(): void {\n    const { elements } = this;\n    const id = `${ elements.root.id }-dialog`;\n\n    this.wrapper = div( {\n      id,\n      class             : CLASS_DIALOG,\n      role              : 'dialog',\n      'aria-labelledby' : `${ id }-title`,\n      'aria-describedby': `${ id }-body`,\n    }, elements.overlay );\n  }\n\n  /**\n   * Called when the general confirm button is clicked.\n   */\n  confirm(): void {\n    this.emit( `dialog:${ this.group }:confirmed`, this );\n    this.hide();\n  }\n\n  /**\n   * Registers a group to the UI.\n   *\n   * @param group   - A group ID.\n   * @param elm     - An element to register.\n   * @param title   - The title of the dialog.\n   * @param buttons - The title of the dialog.\n   */\n  register(\n    group: string,\n    elm: HTMLElement,\n    title: string,\n    buttons?: Array<keyof typeof GENERAL_UI_BUTTONS | UIButtonSettings<Dialog>>\n  ): void {\n    const settings = ( buttons || [ 'confirm' ] )\n      .map( settings => isString( settings ) ? GENERAL_UI_BUTTONS[ settings ] : settings )\n      .filter( Boolean );\n\n    assert( settings.length );\n\n    const { id } = this.wrapper;\n    const groupElm  = div( CLASS_DIALOG_GROUP );\n    const headerElm = create( 'header', CLASS_DIALOG_HEADER );\n    const titleElm  = create( 'h3', { id: `${ id }-title`, class: CLASS_DIALOG_TITLE }, headerElm );\n    const footerElm = create( 'footer', CLASS_DIALOG_FOOTER );\n    const button    = this.createCloseButton( { 'aria-controls': id } );\n\n    attr( elm, { id: `${ id }-body`, class: CLASS_DIALOG_BODY } );\n    text( titleElm, title );\n    addClass( button, `${ CLASS_DIALOG }__close` );\n    append( groupElm, [ headerElm, elm, footerElm, button ] );\n\n    this.groups[ group ] = {\n      elm    : groupElm,\n      title  : titleElm,\n      body   : elm,\n      buttons: this.createButtons<Dialog>( settings, footerElm, this ),\n    };\n  }\n\n  /**\n   * Opens the dialog.\n   *\n   * @param group - A dialog ID.\n   */\n  show( group: string ): void {\n    this.hide();\n    super.show( group );\n\n    this.Editor.readOnly = true;\n    addClass( this.elements.overlay, CLASS_ACTIVE );\n\n    this.autoFocus( group );\n    this.emit( 'dialog:opened', this, group );\n  }\n\n  /**\n   * Closes the dialog.\n   */\n  hide(): void {\n    if ( this.isActive() ) {\n      this.Editor.readOnly = false;\n\n      super.hide();\n      removeClass( this.elements.overlay, CLASS_ACTIVE );\n\n      this.Selection.reselect();\n      this.emit( 'dialog:closed', this, this.group );\n    }\n  }\n\n  /**\n   * Displays a message with the common dialog.\n   *\n   * @param message - A message.\n   * @param title   - Optional. A title.\n   */\n  message( message: string, title?: string ): void {\n    const data = this.groups[ COMMON_DIALOG_GROUP ];\n\n    text( data.title, title || this.i18n.notice );\n    text( data.body, message );\n\n    this.show( COMMON_DIALOG_GROUP );\n  }\n}\n","import { OffsetPosition, Position } from '@ryusei/code';\nimport { Marker } from '../../components/Range/Marker';\nimport { floor } from '../../utils';\n\n\n/**\n * The class for rendering the indent guide.\n *\n * @since 0.1.0\n */\nexport class IndentMarker extends Marker {\n  /**\n   * Calculates boundaries for drawing the marker.\n   * Because every indent size is same, this method uses the cache of the width for the better performance.\n   *\n   * @param anchor - An anchor position.\n   *\n   * @return An object with start and end boundaries.\n   */\n  protected calcBoundaries( anchor: Position ): { start: OffsetPosition, end: OffsetPosition } {\n    const { indent } = this.Editor.options;\n    const { Measure, Measure: { padding } } = this.Editor.Components;\n    const width = Measure.measureWidth( indent, true );\n    const top   = Measure.getTop( anchor[ 0 ] ) + padding.top;\n    const left  = floor( anchor[ 1 ] / indent.length ) * width + padding.left;\n\n    return {\n      start: { top, left },\n      end  : { top, left: left + width },\n    };\n  }\n}\n","import { Elements, Range } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_CHANGED, EVENT_CHUNK_MOVED, EVENT_MOUNTED } from '../../constants/events';\nimport { rafThrottle } from '../../utils';\nimport { IndentMarker } from './IndentMarker';\n\n\n/**\n * The group ID for markers of indent guides.\n *\n * @since 0.1.0\n */\nexport const MARKER_ID = 'indent';\n\n/**\n * The component for drawing guide lines.\n *\n * @since 0.1.0\n */\nexport class Guide extends Component {\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.listen();\n  }\n\n  /**\n   * Listens some events.\n   */\n  private listen(): void {\n    const draw = this.draw.bind( this );\n    this.on( EVENT_CHANGED, rafThrottle( draw ) );\n    this.on( [ EVENT_MOUNTED, EVENT_CHUNK_MOVED ], draw );\n  }\n\n  /**\n   * Clears current guides and draw new ranges for guides.\n   */\n  private draw(): void {\n    const { Range } = this;\n    const ranges = this.parse();\n    Range.clearRanges( MARKER_ID );\n    Range.register( MARKER_ID, ranges, false, IndentMarker );\n  }\n\n  /**\n   * Parses chunk lines and returns ranges for guides.\n   *\n   * @return An array with ranges.\n   */\n  private parse(): Range[] {\n    const { start, end } = this.Chunk;\n    const ranges: Range[] = [];\n\n    let prev = 0;\n\n    for ( let i = start; i <= end; i++ ) {\n      const line = this.lines[ i ];\n\n      if ( ! line ) {\n        break;\n      }\n\n      let depth = line.indentDepth - 1;\n\n      if ( line.isEmpty() && prev > 0 ) {\n        depth = prev;\n      }\n\n      if ( depth > 0 ) {\n        for ( let j = 0; j < depth; j++ ) {\n          const { length } = this.options.indent;\n          ranges.push( { start: [ i, j * length ], end: [ i, ( j + 1 ) * length ] } );\n        }\n\n        prev = depth;\n      } else {\n        prev = 0;\n      }\n    }\n\n    return ranges;\n  }\n}\n","import { PROJECT_CODE } from '../../constants/project';\n\n\n/**\n * The class name for the gutter.\n *\n * @since 0.1.0\n */\nexport const CLASS_GUTTER = `${ PROJECT_CODE }__gutter`;\n\n/**\n * The class name for the inner element.\n *\n * @since 0.1.0\n */\nexport const CLASS_GUTTER_FLOAT = `${ CLASS_GUTTER }__float`;\n\n/**\n * The class name for each row element.\n *\n * @since 0.1.0\n */\nexport const CLASS_GUTTER_ROW = `${ CLASS_GUTTER }__row`;\n\n/**\n * The class name for each line number element.\n *\n * @since 0.1.0\n */\nexport const CLASS_LINE_NUMBER = `${ CLASS_GUTTER }__number`;\n\n/**\n * The modifier class to apply `sticky`.\n *\n * @since 0.1.0\n */\nexport const CLASS_STICKY = `${ CLASS_GUTTER }--sticky`;\n\n/**\n * The status class for the root element.\n *\n * @since 0.1.0\n */\nexport const CLASS_HAS_GUTTER = 'has-gutter';\n\n","import { GutterOptions } from '@ryusei/code';\n\n\n/**\n * The default options for the Gutter component.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: GutterOptions = {\n  selectLine: true,\n  start     : 1,\n  sticky    : true,\n};\n","import { Elements, GutterOptions } from '@ryusei/code';\r\nimport { Component } from '../../classes/Component/Component';\r\nimport { Lines } from '../../components/Code/Lines';\r\nimport { CLASS_ACTIVE } from '../../constants/classes';\r\nimport {\r\n  EVENT_CHUNK_MOVED,\r\n  EVENT_CHUNK_SUPPLIED,\r\n  EVENT_INIT_STYLE,\r\n  EVENT_RESIZE,\r\n  EVENT_SCROLL_HEIGHT_CHANGED,\r\n} from '../../constants/events';\r\nimport { Editor } from '../../core/Editor/Editor';\r\nimport {\r\n  addClass,\r\n  between,\r\n  create,\r\n  div,\r\n  hasClass,\r\n  isHTMLElement,\r\n  min,\r\n  prevent,\r\n  query,\r\n  remove,\r\n  repeat,\r\n  slice,\r\n  styles,\r\n  tag,\r\n  text,\r\n  toggleClass,\r\n  unit,\r\n} from '../../utils';\r\nimport {\r\n  CLASS_GUTTER,\r\n  CLASS_GUTTER_FLOAT,\r\n  CLASS_GUTTER_ROW,\r\n  CLASS_HAS_GUTTER,\r\n  CLASS_LINE_NUMBER,\r\n  CLASS_STICKY,\r\n} from './classes';\r\nimport { DEFAULT_OPTIONS } from './defaults';\r\n\r\n\r\n/**\r\n * The class for a gutter.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport class Gutter extends Component {\r\n  /**\r\n   * Holds the gutter element.\r\n   */\r\n  private gutter: HTMLDivElement;\r\n\r\n  /**\r\n   * Holds the float element.\r\n   */\r\n  private float: HTMLDivElement;\r\n\r\n  /**\r\n   * Keeps the active row element.\r\n   */\r\n  private activeElm: Element;\r\n\r\n  /**\r\n   * Holds options.\r\n   */\r\n  private readonly opts: GutterOptions;\r\n\r\n  /**\r\n   * The number where the gutter starts.\r\n   */\r\n  private readonly start: number;\r\n\r\n  /**\r\n   * The Gutter constructor.\r\n   *\r\n   * @param Editor - An Editor instance.\r\n   */\r\n  constructor( Editor: Editor ) {\r\n    super( Editor );\r\n\r\n    this.opts  = this.getOptions<GutterOptions>( 'gutter', DEFAULT_OPTIONS );\r\n    this.start = this.opts.start;\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Renders a gutter element and rows.\r\n   */\r\n  private render(): void {\r\n    this.on( 'root:open', ( e, append, classes ) => {\r\n      classes.push( CLASS_HAS_GUTTER );\r\n    } );\r\n\r\n    this.on( 'editor:open', ( e, append, classes, lines ) => {\r\n      append( tag( [ CLASS_GUTTER, this.opts.sticky ? CLASS_STICKY : '' ], { 'aria-hidden': true } ) );\r\n      append( tag( CLASS_GUTTER_FLOAT ) );\r\n      append( this.renderRows( lines, append ) );\r\n      append( repeat( '</div>', 2 ) ); // float and gutter\r\n    } );\r\n\r\n    this.on( EVENT_INIT_STYLE, ( e, add ) => {\r\n      const { lineHeight } = this.options;\r\n      add( `.${ CLASS_GUTTER_ROW }`, { height: lineHeight ? `${ lineHeight }em` : undefined, lineHeight } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Renders rows of a gutter.\r\n   * `+1` creates an extra row for measurement of the gutter width.\r\n   *\r\n   * @param lines  - An array containing lines.\r\n   * @param append - The function that appends a HTML string.\r\n   */\r\n  private renderRows( lines: Lines, append: ( string: string ) => void ): string {\r\n    const html: string[] = [];\r\n    const max  = min( lines.length, this.options.maxInitialLines ) + 1;\r\n\r\n    for ( let i = 0; i < max; i++ ) {\r\n      const number = ( i === max - 1 ? lines.length - 1 : i ) + this.start;\r\n\r\n      append( tag( CLASS_GUTTER_ROW ) );\r\n      append( `<span class=\"${ CLASS_LINE_NUMBER }\">${ number }</span>` );\r\n\r\n      this.emit( 'gutter:row', html, i, number );\r\n\r\n      append( `</div>` );\r\n    }\r\n\r\n    return html.join( '' );\r\n  }\r\n\r\n  /**\r\n   * Initializes the component.\r\n   *\r\n   * @param elements - A collection of essential elements.\r\n   */\r\n  mount( elements: Elements ): void {\r\n    super.mount( elements );\r\n\r\n    this.gutter = query<HTMLDivElement>( elements.root, `.${ CLASS_GUTTER }` );\r\n    this.float  = query<HTMLDivElement>( this.gutter, `.${ CLASS_GUTTER_FLOAT }` );\r\n\r\n    if ( this.gutter ) {\r\n      const { children } = this.float;\r\n      const diff = this.Chunk.length - children.length;\r\n\r\n      if ( diff > 0 ) {\r\n        this.supply( diff );\r\n      } else if ( diff < 0 ) {\r\n        remove( slice( children, diff ) );\r\n      }\r\n\r\n      this.listen();\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Supplies the specified number of row and line number elements.\r\n   *\r\n   * @param length - The number of elements to create.\r\n   */\r\n  private supply( length: number ): void {\r\n    for ( let i = 0; i < length; i++ ) {\r\n      create( 'span', CLASS_LINE_NUMBER, div( CLASS_GUTTER_ROW, this.float ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  private listen(): void {\r\n    this.on( EVENT_CHUNK_SUPPLIED, ( e, chunk, diff ) => { this.supply( diff ) } );\r\n    this.on( [ EVENT_CHUNK_MOVED, EVENT_SCROLL_HEIGHT_CHANGED, EVENT_RESIZE ], this.update, this );\r\n    this.on( 'activeLine:updated', this.activate, this );\r\n    this.on( 'activeLine:deactivated', this.deactivate, this );\r\n\r\n    if ( this.opts.selectLine ) {\r\n      this.bind( this.gutter, 'pointerdown', this.onPointerDown, this );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the gutter emits the `pointerdown` event.\r\n   *\r\n   * @param e - A PointerEvent object.\r\n   */\r\n  private onPointerDown( e: PointerEvent ): void {\r\n    const { target } = e;\r\n\r\n    if ( isHTMLElement( target ) && hasClass( target, CLASS_LINE_NUMBER ) ) {\r\n      const number = +text( target );\r\n\r\n      if ( ! isNaN( number ) ) {\r\n        this.Selection.selectLine( number - this.start, true, true );\r\n        prevent( e );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates line numbers and offsets the float element to the Chunk position.\r\n   */\r\n  private update(): void {\r\n    const { Chunk: { start: chunkStart }, start } = this;\r\n    const { length } = this.lines;\r\n    const { children: rows } = this.float;\r\n\r\n    for ( let i = 0; i < rows.length; i++ ) {\r\n      const elm    = rows[ i ];\r\n      const number = ( i === rows.length - 1 ? length - 1 : chunkStart + i ) + start;\r\n      text( elm.firstChild, between( number, start, length + start - 1 ) ? `${ number }` : '' );\r\n    }\r\n\r\n    this.offset();\r\n    this.activate();\r\n  }\r\n\r\n  /**\r\n   * Offsets the float element to the current Chunk position.\r\n   */\r\n  private offset(): void {\r\n    const { Chunk, Chunk: { start } } = this;\r\n    const offset = Chunk.offsetY + ( start < 0 ? start * this.Measure.lineHeight : 0 );\r\n    styles( this.float, { top: unit( offset ) } );\r\n  }\r\n\r\n  /**\r\n   * Activates the specified row.\r\n   */\r\n  private activate(): void {\r\n    const row = this.Selection.focus[ 0 ];\r\n    const elm = this.getElm( row );\r\n\r\n    this.deactivate();\r\n\r\n    if ( elm ) {\r\n      addClass( elm, CLASS_ACTIVE );\r\n      this.activeElm = elm;\r\n      this.emit( 'gutter:activated', elm );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivates the active row if there is.\r\n   */\r\n  private deactivate(): void {\r\n    const { activeElm } = this;\r\n\r\n    if ( activeElm ) {\r\n      toggleClass( activeElm, CLASS_ACTIVE, false );\r\n      this.emit( 'gutter:deactivated', activeElm );\r\n      this.activeElm = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the element at the row index.\r\n   *\r\n   * @param row - A row index.\r\n   *\r\n   * @return A row element if available, or otherwise `undefined`.\r\n   */\r\n  private getElm( row: number ): Element | undefined {\r\n    return row > -1 ? this.float.children[ row - this.Chunk.start ] : undefined;\r\n  }\r\n}\r\n","import { HistoryOptions } from '@ryusei/code';\n\n\n/**\n * The default options for the History component.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: HistoryOptions = {\n  limit   : 100,\n  debounce: 300,\n};\n","import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The collection of shortcuts for the History extension.\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[]> = {\n  undo: [ 'Z', true, false ],\n  redo: [ 'Z', true, true ],\n};\n","import { Elements, EventBusEvent, HistoryOptions, Range } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_CHANGE, EVENT_CHANGED, EVENT_KEYMAP, EVENT_RESET } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { compare, debounce } from '../../utils';\nimport { Throttle } from '../../utils/function/throttle/throttle';\nimport { DEFAULT_OPTIONS } from './defaults';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * The interface of each record for the history.\n */\nexport interface HistoryRecord {\n  /**\n   * A Range object.\n   */\n  range: Range;\n\n  /**\n   * A pure text of the code.\n   */\n  value: string;\n\n  /**\n   * A number of lines.\n   */\n  length: number;\n\n  /**\n   * Additional data to store in the record.\n   */\n  data?: Record<string, any>;\n}\n\n/**\n * The input type of the history.\n *\n * @since 0.1.0\n */\nconst RESTORATION_INPUT_TYPE = 'history';\n\n/**\n * The component for managing history.\n * This component requires the Keymap component.\n *\n * @since 0.1.0\n */\nexport class History extends Component {\n  /**\n   * Holds history records.\n   */\n  private history: HistoryRecord[] = [];\n\n  /**\n   * Indicates the current history index.\n   */\n  private index = 0;\n\n  /**\n   * The debounced `push` function.\n   */\n  private debouncedPush: Throttle;\n\n  /**\n   * Holds history options.\n   */\n  private opts: HistoryOptions;\n\n  /**\n   * The Comment constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.addKeyBindings( KEYMAP );\n  }\n\n  /**\n   * Initialized the instance.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    this.opts          = this.getOptions( 'history', DEFAULT_OPTIONS );\n    this.debouncedPush = debounce( this.push.bind( this ), this.opts.debounce );\n    this.listen();\n  }\n\n  /**\n   * Listens to some internal events.\n   */\n  private listen(): void {\n    this.on( EVENT_CHANGE, this.onChange, this );\n    this.on( EVENT_CHANGED, this.onChanged, this );\n\n    this.on( `${ EVENT_KEYMAP }:undo ${ EVENT_KEYMAP }:redo`, ( e, ke, action ) => {\n      ke.preventDefault();\n\n      if ( ! this.Editor.readOnly ) {\n        this[ action ]();\n      }\n    } );\n\n    this.on( EVENT_RESET, () => {\n      this.history.length = 0;\n    } );\n  }\n\n  /**\n   * Creates a history record object.\n   *\n   * @return A created HistoryRecord object.\n   */\n  private record(): HistoryRecord {\n    return {\n      range : this.Selection.get(),\n      value : this.Code.value,\n      length: this.lines.length,\n    };\n  }\n\n  /**\n   * Restores the provided record.\n   * Needs to apply the latest code to the input before sync.\n   *\n   * @param record - A record to restore.\n   */\n  private restore( record: HistoryRecord ): void {\n    const { range, length } = record;\n    const { start, end } = range;\n\n    this.emit( EVENT_CHANGE, RESTORATION_INPUT_TYPE );\n\n    this.Code.value = record.value;\n    this.Sync.sync( 0, length - 1, start[ 0 ] );\n    this.Selection.set( start, end );\n\n    this.emit( EVENT_CHANGED, RESTORATION_INPUT_TYPE );\n    this.emit( 'history:restored', record );\n  }\n\n  /**\n   * Pushes a record to the history and resets the index.\n   * If the `record` is not provided, a new record will be generated via the current editor status.\n   *\n   * @param record - Optional. A record to push.\n   */\n  private push( record: HistoryRecord ): void {\n    const current = this.history[ this.index ];\n\n    if ( current && this.isSame( current, record ) ) {\n      return;\n    }\n\n    this.history.push( record );\n\n    if ( this.length > this.opts.limit ) {\n      this.history.shift();\n    }\n\n    this.index = this.length - 1;\n    this.emit( 'history:pushed', record );\n\n    this.debouncedPush.cancel();\n  }\n\n  /**\n   * Checks if the provided 2 records are same or not.\n   *\n   * @param record1 - A record to check.\n   * @param record2 - Another record to check.\n   *\n   * @return `true` if the records are same, or otherwise `false`.\n   */\n  private isSame( record1: HistoryRecord, record2: HistoryRecord ): boolean {\n    return record1.value === record2.value\n      && ! compare( record1.range.start, record2.range.start )\n      && ! compare( record1.range.end, record2.range.end );\n  }\n\n  /**\n   * Checks if an old record is now active or not.\n   *\n   * @return `true` if an old record is active, or `false` otherwise.\n   */\n  private isUndoing(): boolean {\n    return this.index !== this.length - 1;\n  }\n\n  /**\n   * Called when the code is being changed.\n   *\n   * @param e    - A EventBusEvent object.\n   * @param type - An input type. This may be empty.\n   */\n  private onChange( e: EventBusEvent, type: string ): void {\n    if ( type !== RESTORATION_INPUT_TYPE ) {\n      const { history } = this;\n\n      if ( this.isUndoing() ) {\n        history.splice( this.index + 1, history.length );\n      }\n\n      if ( ! this.Selection.isCollapsed() || ! this.length || type === 'replace' ) {\n        this.push( this.record() );\n      }\n    }\n  }\n\n  /**\n   * Called just after the code is changed.\n   *\n   * @param e    - A EventBusEvent object.\n   * @param type - An input type. This may be empty.\n   */\n  private onChanged( e: EventBusEvent, type: string ): void {\n    if ( ! this.Input.composing && type !== RESTORATION_INPUT_TYPE ) {\n      if ( type === 'input' ) {\n        this.debouncedPush( this.record() );\n      } else {\n        this.push( this.record() );\n      }\n    }\n  }\n\n  /**\n   * Performs undo.\n   */\n  undo(): void {\n    this.debouncedPush.invoke();\n\n    if ( 0 < this.index && this.index < this.length ) {\n      this.restore( this.history[ --this.index ] );\n    }\n  }\n\n  /**\n   * Performs redo only if previously undo() is operated.\n   */\n  redo(): void {\n    if ( this.index < this.length - 1 ) {\n      this.restore( this.history[ ++this.index ] );\n    }\n  }\n\n  /**\n   * Returns the current history length.\n   *\n   * @return The number of records.\n   */\n  get length(): number {\n    return this.history.length;\n  }\n}\n","import { IndentationOptions } from '@ryusei/code';\n\n\n/**\n * The default options for the Tab component.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: IndentationOptions = {\n  help      : true,\n  deepIndent: true,\n};\n","/**\n * The collection of i18n strings.\n *\n * @since 0.1.0\n */\nexport const I18N = {\n  indentNotice  : 'Indent/Move Focus',\n  indentDisabled: 'Inserting indents by the Tab is currently disabled. You can toggle it by %s.',\n};\n","import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The collection of shortcuts for the Indentation extension.\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[]> = {\n  indent       : [ 'Tab' ],\n  unindent     : [ 'Tab', false, true ],\n  toggleTabMode: [ 'M', true ],\n};\n","import { Elements, EventBusEvent, IndentationOptions, IndentConfig, Position } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { LINE_BREAK } from '../../constants/characters';\nimport {\n  EVENT_CHANGE,\n  EVENT_CHANGED,\n  EVENT_FOCUS,\n  EVENT_KEYDOWN,\n  EVENT_KEYMAP,\n  EVENT_NEWLINE,\n} from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { div, format, html, isFunction, max, prevent } from '../../utils';\nimport { Dialog } from '../Dialog/Dialog';\nimport { DEFAULT_OPTIONS } from './defaults';\nimport { I18N } from './i18n';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * The dialog ID for the indent notice.\n *\n * @since 0.1.0\n */\nconst DIALOG_ID = 'tab-notice';\n\n/**\n * The component for handing the Tab key to insert/remove indents.\n * Just overriding the default behavior of the Tab key can not satisfy the \"No Keyboard Trap\" criterion.\n * Therefore as default, the Tab indentation is initially disabled, and it will be enabled when:\n * - the editor is focused by pointer devices, such as a mouse\n * - users explicitly enable it via CTRL+M\n *\n * @link https://www.w3.org/TR/WCAG21/#no-keyboard-trap\n *\n * @since 0.1.0\n */\nexport class Indentation extends Component {\n  /**\n   * Indicates whether the notification message has been already shown or not.\n   */\n  private static noticed: boolean;\n\n  /**\n   * Holds the indent representation.\n   */\n  private space: string;\n\n  /**\n   * Indicates whether to disable tab indentation or not.\n   */\n  private disabled: boolean;\n\n  /**\n   * Holds options.\n   */\n  private opts: IndentationOptions;\n\n  /**\n   * Holds the Dialog component.\n   */\n  private Dialog: Dialog;\n\n  /**\n   * The Indentation constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.addI18n( I18N );\n    this.addKeyBindings( KEYMAP );\n  }\n\n  /**\n   * Initializes the component.\n   * This component requires the Dialog component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    if ( ! ( this.Dialog = this.require( 'Dialog' ) ) ) {\n      return;\n    }\n\n    super.mount( elements );\n\n    this.space    = this.options.indent;\n    this.opts     = this.getOptions<IndentationOptions>( 'indentation', DEFAULT_OPTIONS );\n    this.disabled = this.opts.activation !== 'load';\n\n    this.register();\n    this.listen();\n  }\n\n  /**\n   * Explicitly enables or disables the component.\n   *\n   * @param disabled - Determines whether to disable the component or not.\n   */\n  setDisabled( disabled: boolean ): void {\n    this.disabled = disabled;\n    Indentation.noticed = true;\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    let focused: boolean;\n\n    this.on( EVENT_FOCUS, ( e, type ) => {\n      if ( type === 'pointer' && ! focused ) {\n        this.setDisabled( false );\n      }\n\n      focused = true;\n    } );\n\n    this.on( `${ EVENT_KEYMAP }:indent ${ EVENT_KEYMAP }:unindent`, ( e, ke, action ) => {\n      if ( ! this.disabled ) {\n        if ( action === 'indent' ) {\n          this.indent();\n        } else {\n          this.unindent();\n        }\n\n        prevent( ke );\n      }\n    } );\n\n    this.on( `${ EVENT_KEYMAP }:toggleTabMode`, ( e, ke ) => {\n      this.setDisabled( ! this.disabled );\n      prevent( ke );\n    } );\n\n    this.on( EVENT_NEWLINE, () => {\n      this.indentNewline();\n\n      if ( this.opts.deepIndent ) {\n        this.indentDeep();\n      }\n    } );\n\n    this.on( EVENT_KEYDOWN, this.onKeydown, this );\n  }\n\n  /**\n   * Called when any key is pressed on the editor.\n   *\n   * @param e     - An EventBusEvent object.\n   * @param ke    - A KeyboardEvent object.\n   */\n  private onKeydown( e: EventBusEvent, ke: KeyboardEvent ): void {\n    if ( this.opts.help && ! Indentation.noticed && ke.key === 'Tab' ) {\n      this.Dialog.show( DIALOG_ID );\n      Indentation.noticed = true;\n      prevent( ke );\n      return;\n    }\n\n    this.remove( ke );\n  }\n\n  /**\n   * Registers the dialog for the indentation notice.\n   */\n  private register(): void {\n    const { i18n } = this;\n    const body = div();\n\n    html( body, format(\n      `<p>${ i18n.indentDisabled }</p>`,\n      `<strong>${ this.Keymap.getShortcut( 'toggleTabMode' ) }</strong>`\n    ) );\n\n    this.Dialog.register( DIALOG_ID, body, i18n.indentNotice, [\n      {\n        id   : 'activate',\n        click: () => {\n          this.setDisabled( false );\n          this.Dialog.hide();\n        },\n      },\n      'confirm',\n    ] );\n  }\n\n  /**\n   * Prepends indents to all selected lines.\n   */\n  private indent(): void {\n    const { Input, Selection, space, space: { length: size } } = this;\n\n    if ( Selection.isCollapsed() ) {\n      Input.apply( { type: 'indent', insertion: space, offset: size } );\n    } else {\n      this.emit( EVENT_CHANGE );\n\n      const { start, end } = Selection.get();\n      this.Code.replaceLinesBy( start[ 0 ], end[ 0 ], line => space + line );\n      this.Sync.sync( start[ 0 ], end[ 0 ] );\n      Selection.set( [ start[ 0 ], start[ 1 ] + size ], [ end[ 0 ], end[ 1 ] + size ] );\n\n      this.emit( EVENT_CHANGED );\n    }\n  }\n\n  /**\n   * Removes indents from all selected lines.\n   */\n  private unindent(): void {\n    const { space } = this;\n    const { start, end } = this.Selection.get();\n\n    let startOffset = 0;\n    let endOffset   = 0;\n    let changed;\n\n    this.Code.replaceLinesBy( start[ 0 ], end[ 0 ], ( line, index, array ) => {\n      const match = line.match( new RegExp( `^(${ space }| {0,${ space.length }})` ) );\n\n      if ( match ) {\n        const [ indent ] = match;\n        line = line.replace( indent, '' );\n\n        if ( index === 0 ) {\n          this.emit( EVENT_CHANGE );\n          startOffset -= indent.length;\n        }\n\n        if ( index === array.length - 1 ) {\n          endOffset -= indent.length;\n        }\n\n        changed = true;\n      }\n\n      return line;\n    } );\n\n    if ( changed ) {\n      const startCol = max( start[ 1 ] + startOffset, 0 );\n      const endCol   = max( end[ 1 ] + endOffset, 0 );\n\n      this.Sync.sync( start[ 0 ], end[ 0 ] );\n      this.Selection.set( [ start[ 0 ], startCol ], [ end[ 0 ], endCol ] );\n      this.emit( EVENT_CHANGED );\n    }\n  }\n\n  /**\n   * Adds an indent to the newline when the enter key is pressed.\n   */\n  private indentNewline(): void {\n    const { Input } = this;\n    const indent = this.lines[ Input.row ].getIndent();\n\n    if ( indent ) {\n      Input.set( 'newline', {\n        value   : Input.before + LINE_BREAK + indent + Input.after.replace( /^[ \\t]+/, '' ),\n        position: [ Input.row + 1, indent.length ],\n      } );\n    }\n  }\n\n  /**\n   * Adds an indent after specific patterns.\n   */\n  private indentDeep(): void {\n    const index = this.findConfigIndex();\n\n    if ( index > -1 && this.shouldIndentDeep( index ) ) {\n      const { Input, space } = this;\n      const indent = this.lines[ Input.row ].getIndent();\n      const string = LINE_BREAK + indent + space + ( this.isClosed( index ) ? LINE_BREAK + indent : '' );\n\n      Input.set( 'indentDeep', {\n        key      : 'Enter',\n        insertion: string,\n        position : [ Input.row + 1, indent.length + space.length ],\n      } );\n    }\n  }\n\n  /**\n   * Returns an indent config index.\n   *\n   * @return A config index if found, or -1 if not.\n   */\n  private findConfigIndex(): number {\n    const config = this.getConfig();\n\n    for ( let i = 0; i < config.length; i++ ) {\n      const settings = config[ i ];\n\n      if ( isFunction( settings[ 0 ] ) ) {\n        return settings[ 0 ]( this.Editor ) ? i : -1;\n      }\n\n      const { Input } = this;\n\n      if ( settings[ 0 ].test( Input.before.trim() ) ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Determines whether to increase the indent level or not.\n   *\n   * @param index - A config index.\n   *\n   * @return `true` if the level should be increased, or otherwise `false`.\n   */\n  private shouldIndentDeep( index: number ): boolean {\n    const config    = this.getConfig()[ index ];\n    const condition = config && config[ 2 ];\n\n    if ( isFunction( condition ) ) {\n      return condition( this.Editor );\n    }\n\n    return ! condition || this.Scope.isIn( condition );\n  }\n\n  /**\n   * Checks if the position where the indentation is being added is enclosed by paired characters or not.\n   *\n   * @param index - A config index.\n   *\n   * @return `true` if the closing representation is found, or otherwise `false`.\n   */\n  private isClosed( index: number ): boolean {\n    const config    = this.getConfig()[ index ];\n    const condition = config && config[ 1 ];\n\n    if ( ! condition ) {\n      return false;\n    }\n\n    if ( isFunction( condition ) ) {\n      return condition( this.Editor );\n    }\n\n    const { Input } = this;\n    return condition.test( Input.after.trim() );\n  }\n\n  /**\n   * When the backspace key is pressed,\n   * removes indents of a line if they are same with the previous one's.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private remove( e: KeyboardEvent ): void {\n    const { Selection } = this;\n\n    if ( e.key === 'Backspace' && Selection.isCollapsed() ) {\n      const { lines } = this;\n      const { start } = Selection.get();\n      const prevRow  = start[ 0 ] - 1;\n      const prevLine = lines[ prevRow ];\n\n      if ( ! prevLine ) {\n        return;\n      }\n\n      const prevIndent = prevLine.getIndent();\n      const curIndent  = lines[ start[ 0 ] ].getIndent();\n\n      if ( prevIndent && prevIndent === curIndent && start[ 1 ] === curIndent.length ) {\n        this.emit( EVENT_CHANGE );\n\n        const position = [ prevRow, prevLine.text.length ] as Position;\n\n        this.Code.replaceRange( position, start, '' );\n        this.Sync.sync( prevRow, start[ 0 ] );\n        Selection.set( position );\n\n        this.emit( EVENT_CHANGED );\n\n        prevent( e );\n      }\n    }\n  }\n\n  /**\n   * Returns a config for indentation.\n   *\n   * @return A config array.\n   */\n  private getConfig(): IndentConfig[] {\n    return this.getLanguage().indent || [];\n  }\n}\n","/**\n * The collection of i18n strings.\n *\n * @since 0.1.0\n */\nexport const I18N = {\n  jumpToLine : 'Jump to Line',\n  jumpToolbar: 'Jump Toolbar',\n};\n","import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The collection of shortcuts for the Jump extension.\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[]> = {\n  jumpToLine: [ 'G', true ],\n};\n","import { Elements, JumpOptions } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_KEYMAP } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { between, create, debounce, div, matchesKey, prevent, text } from '../../utils';\nimport { Toolbar } from '../Toolbar/Toolbar';\nimport { I18N } from './i18n';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * The ID for the \"Jump to the Line\" toolbar.\n *\n * @since 0.1.0\n */\nexport const TOOLBAR_ID = 'jump-to-line';\n\n/**\n * The throttle duration for applying the input result to the range.\n *\n * @since 0.1.0\n */\nexport const JUMP_DEBOUNCE_DURATION = 10;\n\n/**\n * The class for jumping to the specific line.\n *\n * @since 0.1.0\n */\nexport class Jump extends Component {\n  /**\n   * Holds the Toolbar component.\n   */\n  private Toolbar: Toolbar;\n\n  /**\n   * Holds the input element.\n   */\n  private field: HTMLInputElement;\n\n  /**\n   * Holds the location element.\n   */\n  private location: HTMLSpanElement;\n\n  /**\n   * The Indentation constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.addI18n( I18N );\n    this.addKeyBindings( KEYMAP );\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    if ( ! ( this.Toolbar = this.require( 'Toolbar' ) ) ) {\n      return;\n    }\n\n    super.mount( elements );\n\n    this.create();\n    this.listen();\n  }\n\n  /**\n   * Creates elements for the jump interface and registers the wrapper to the toolbar.\n   */\n  private create(): void {\n    const wrapper = div();\n\n    this.field = this.Toolbar.createField( { id: 'jumpToLine', tabindex: 1 }, wrapper );\n\n    if ( ! this.getOptions<JumpOptions>( 'jump' ).hideLocation ) {\n      this.location = create( 'span', null, wrapper );\n    }\n\n    this.Toolbar.register( TOOLBAR_ID, wrapper, this.i18n.jumpToolbar );\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    this.on( `${ EVENT_KEYMAP }:jumpToLine`, ( e, ke ) => {\n      this.update();\n      this.Toolbar.show( TOOLBAR_ID );\n      prevent( ke );\n    } );\n\n    this.bind( this.field, 'input', debounce( this.jump.bind( this ), JUMP_DEBOUNCE_DURATION ) );\n\n    this.bind( this.field, 'keydown', ( e: KeyboardEvent ) => {\n      if ( matchesKey( e, this.options.keymap.jumpToLine ) ) {\n        prevent( e );\n      }\n    } );\n  }\n\n  /**\n   * Jumps to the line specified by the input.\n   */\n  private jump(): void {\n    const row = parseInt( this.field.value ) - 1;\n\n    if ( ! isNaN( row ) && between( row, 0, this.lines.length - 1 ) ) {\n      this.View.jump( row, true );\n\n      this.Selection.set( [ row, 0 ] );\n      this.field.focus();\n      this.update();\n\n      this.emit( 'jump:jumped' );\n    }\n  }\n\n  /**\n   * Updates the location.\n   */\n  private update(): void {\n    if ( this.location ) {\n      text( this.location, this.Selection.getLocation() );\n    }\n  }\n}\n","import { ResizeOptions } from '@ryusei/code';\n\n\n/**\n * The default options for the Resize component.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: ResizeOptions = {\n  horizontal: true,\n  vertical  : true,\n};\n","/**\n * The collection of i18n strings.\n *\n * @since 0.1.0\n */\nexport const I18N = {\n  resizeBar: 'Drag to Resize/Double Click to Reset',\n};\n","import { AbstractDraggableBar } from '../../classes/AbstractDraggableBar/AbstractDraggableBar';\nimport { EVENT_RESIZE } from '../../constants/events';\nimport { PROJECT_CODE } from '../../constants/project';\nimport { Editor } from '../../core/Editor/Editor';\nimport { attr, endsWith, off, on, round, styles, unit } from '../../utils';\n\n\n/**\n * The class name for the resize bar.\n *\n * @since 0.1.0\n */\nexport const CLASS_SIZER_BAR = `${ PROJECT_CODE }__sizer__bar`;\n\n/**\n * The class for creating a resize bar.\n *\n * @since 0.1.0\n */\nexport class ResizeBar extends AbstractDraggableBar {\n  /**\n   * Holds the Editor instance.\n   */\n  private readonly Editor: Editor;\n\n  /**\n   * Keeps the initial width/height of the target element.\n   */\n  private startSize: number;\n\n  /**\n   * The ResizeBar constructor.\n   *\n   * @param Editor   - An Editor instance.\n   * @param parent   - A parent element where the bar will be appended.\n   * @param vertical - Determines whether to create a vertical or horizontal sizer.\n   */\n  constructor( Editor: Editor, parent: HTMLElement, vertical: boolean ) {\n    super( [ CLASS_SIZER_BAR, `${ CLASS_SIZER_BAR }--${ vertical ? 'vertical' : 'horizontal' }` ], parent, vertical );\n    this.Editor = Editor;\n    this.init();\n  }\n\n  /**\n   * Initializes the instance.\n   * Note that `aria-valuemin` and `aria-valuemax` is not necessary because their default values are `0` and `100`.\n   *\n   * @link https://www.w3.org/TR/wai-aria-1.2/#separator\n   */\n  private init(): void {\n    const { Editor } = this;\n    const { resizeBar } = Editor.options.i18n;\n\n    attr( this.elm, {\n      role              : 'separator',\n      'aria-controls'   : Editor.elements.root.id,\n      'aria-orientation': this.vertical ? 'horizontal' : 'vertical',\n      'aria-valuenow'   : 0,\n      'aria-label'      : resizeBar,\n      title             : resizeBar,\n    } );\n\n    Editor.event.on( EVENT_RESIZE, this.updateAria.bind( this ) );\n\n    on( this.elm, 'dblclick', () => {\n      Editor[ this.names.height ] = '';\n    } );\n  }\n\n  /**\n   * Called when the bar starts being dragged.\n   *\n   * @param e - A PointerEvent object.\n   */\n  protected onDrag( e: PointerEvent ): void {\n    super.onDrag( e );\n    this.startSize = this.Editor[ this.names.height ];\n  }\n\n  /**\n   * Called while the bar is dragged.\n   *\n   * @param e - A PointerEvent object.\n   */\n  protected onDragging( e: PointerEvent ): void {\n    super.onDragging( e );\n\n    const diff = this.getCoord( e ) - this.startCoord;\n    this.Editor[ this.names.height ] = unit( this.startSize + diff );\n  }\n\n  /**\n   * Updates aria attributes related with the separator role.\n   * This method will be called through the event bus.\n   */\n  private updateAria(): void {\n    const { names } = this;\n    const min = this.convertValueToPixel( names.minHeight ) || 0;\n    const max = this.convertValueToPixel( names.maxHeight );\n    const now = this.Editor[ names.height ] - min;\n\n    if ( max > min ) {\n      attr( this.elm, { 'aria-valuenow': round( 100 * 100 * now / ( max - min ) ) / 100 } );\n    }\n  }\n\n  /**\n   * Converts the CSS value to pixel.\n   *\n   * @param prop - A CSS prop name.\n   *\n   * @return A value in pixel.\n   */\n  private convertValueToPixel( prop: string ): number {\n    const { names } = this;\n    const { root } = this.Editor.elements;\n    const value = styles( root, prop );\n\n    if ( endsWith( value, '%' ) ) {\n      return parseFloat( value ) * root.parentElement[ names.scrollHeight ] / 100;\n    }\n\n    return parseFloat( value );\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    off( null, '', this );\n    super.destroy();\n  }\n}\n","import { Elements, ResizeOptions } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { PROJECT_CODE } from '../../constants/project';\nimport { div } from '../../utils';\nimport { DEFAULT_OPTIONS } from './defaults';\nimport { I18N } from './i18n';\nimport { ResizeBar } from './ResizeBar';\n\n\n/**\n * The class name for the wrapper element that contains resize bars.\n *\n * @since 0.1.0\n */\nexport const CLASS_SIZER = `${ PROJECT_CODE }__sizer`;\n\n/**\n * The component for resizing the editor by drag bars.\n *\n * @since 0.1.0\n */\nexport class Resize extends Component {\n  /**\n   * Stores ResizeBar instances.\n   */\n  private bars: ResizeBar[] = [];\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    const { Editor, bars } = this;\n    const wrapper = div( CLASS_SIZER, elements.overlay );\n    const options = this.getOptions<ResizeOptions>( 'resize', DEFAULT_OPTIONS );\n\n    this.addI18n( I18N );\n\n    if ( options.horizontal ) {\n      bars.push( new ResizeBar( Editor, wrapper, false ) );\n    }\n\n    if ( options.vertical ) {\n      bars.push( new ResizeBar( Editor, wrapper, true ) );\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  destroy(): void {\n    this.bars.forEach( bar => { bar.destroy() } );\n    super.destroy();\n  }\n}\n","import { UIButtonSettings } from '@ryusei/code';\r\nimport { Search } from './Search';\r\n\r\n\r\n/**\r\n * Buttons settings for the search interface.\r\n */\r\nexport const SEARCH_BUTTONS: UIButtonSettings<Search>[] = [\r\n  {\r\n    id      : 'matchCase',\r\n    icon    : 'matchCase',\r\n    click   : 'toggleMatchCase',\r\n    checkbox: true,\r\n  },\r\n  {\r\n    id      : 'wholeWord',\r\n    icon    : 'word',\r\n    click   : 'toggleWholeWord',\r\n    checkbox: true,\r\n  },\r\n  {\r\n    id      : 'regexp',\r\n    icon    : 'regexp',\r\n    click   : 'toggleRegExp',\r\n    checkbox: true,\r\n  },\r\n  {\r\n    id   : 'prevMatch',\r\n    icon : 'arrowUp',\r\n    click: 'prev',\r\n  },\r\n  {\r\n    id   : 'nextMatch',\r\n    icon : 'arrowDown',\r\n    click: 'next',\r\n  },\r\n];\r\n\r\n/**\r\n * Buttons settings for the replace interface.\r\n */\r\nexport const REPLACE_BUTTONS: UIButtonSettings<Search>[] = [\r\n  {\r\n    id   : 'replace',\r\n    click: 'replace',\r\n  },\r\n  {\r\n    id   : 'replaceAll',\r\n    click: 'replaceAll',\r\n  },\r\n];\r\n","import { PROJECT_CODE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The class for the search interface.\r\n */\r\nexport const CLASS_SEARCH = `${ PROJECT_CODE }__search`;\r\n\r\n/**\r\n * The class for the replace interface.\r\n */\r\nexport const CLASS_REPLACE = `${ PROJECT_CODE }__replace`;\r\n\r\n/**\r\n * The class for controls in the search interface.\r\n */\r\nexport const CLASS_SEARCH_CONTROLS = `${ CLASS_SEARCH }__controls`;\r\n\r\n/**\r\n * The class for controls in the replace interface.\r\n */\r\nexport const CLASS_REPLACE_CONTROLS = `${ CLASS_REPLACE }__controls`;\r\n\r\n/**\r\n * The class for displaying matches count.\r\n */\r\nexport const CLASS_MATCHES_COUNT = `${ CLASS_SEARCH }__matches`;\r\n","/**\n * The ID for the search toolbar.\n *\n * @since 0.1.0\n */\nexport const TOOLBAR_ID = 'search';\n\n/**\n * The group ID for markers.\n *\n * @since 0.1.0\n */\nexport const MARKER_ID = 'match';\n\n/**\n * The group ID for an active marker.\n *\n * @since 0.1.0\n */\nexport const ACTIVE_MARKER_ID = 'active-match';\n\n/**\n * The throttle duration for applying the input result to the range.\n *\n * @since 0.1.0\n */\nexport const SEARCH_THROTTLE_DURATION = 10;\n\n/**\n * The delay time until jumping to the next match after replace.\n *\n * @since 0.1.0\n */\nexport const JUMP_DELAY_AFTER_REPLACE = 20;\n","import { SearchOptions } from '@ryusei/code';\n\n\n/**\n * The default options for the Search component.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: SearchOptions = {\n  hideButtons: [],\n};\n","/**\n * The collection of i18n strings.\n *\n * @since 0.1.0\n */\nexport const I18N = {\n  search       : 'Search',\n  searchToolbar: 'Search/Replace Toolbar',\n  wholeWord    : 'Match Whole Word',\n  prevMatch    : 'Previous Match',\n  nextMatch    : 'Next Match',\n  replace      : 'Replace',\n  replaceAll   : 'Replace All',\n  matchCase    : 'Match Case',\n  regexp       : 'Regex',\n  noResults    : 'No results',\n};\n","import { IconSettings } from '@ryusei/code';\n\n\n/**\n * Icons for the Search component.\n *\n * @since 0.1.0\n */\nexport const ICONS: Record<string, IconSettings> = {\n  regexp: [\n    'm15 2a1.5 1.5 0 0 0-1.5 1.5v3.4l-3.1-1.7a1.5 1.5 0 0 0-2 0.57 1.5 1.5 0 0 0 0.58 2l3 1.7-3 1.7a1.5 1.5 0 0 0-0.58 2 1.5 1.5 0 0 0 2 0.58l3.1-1.7v3.4a1.5 1.5 0 0 0 1.5 1.5 1.5 1.5 0 0 0 1.5-1.5v-3.4l3.1 1.7a1.5 1.5 0 0 0 2-0.58 1.5 1.5 0 0 0-0.58-2l-3-1.7 3-1.7a1.5 1.5 0 0 0 0.58-2 1.5 1.5 0 0 0-2-0.57l-3.1 1.7v-3.4a1.5 1.5 0 0 0-1.5-1.5zm-9.7 13c-1.8 0-3.3 1.5-3.3 3.3s1.5 3.3 3.3 3.3c1.8 0 3.3-1.5 3.3-3.3s-1.5-3.3-3.3-3.3z',\n  ],\n  word: [\n    'm22 4h-2.95l-2.37 11.3-2.56-11.3h-3.94l-2.44 11.3-2.51-11.3h-3.16l4.11 16h2.87l3.02-11.8 3.04 11.8h2.9z',\n  ],\n  matchCase: [\n    'm6.9 4.2c-3.7 0-5.6 2-5.6 6v3.5c0 4 1.8 6 5.5 6 1.7 0 3-0.42 4-1.3 0.97-0.88 1.5-2.1 1.5-3.8v-0.15h-2.8v0.18c0 0.77-0.22 1.4-0.66 1.8s-1.1 0.66-1.9 0.66c-0.92 0-1.6-0.26-2-0.84-0.44-0.55-0.64-1.5-0.64-2.7v-3.3c0-1.3 0.2-2.2 0.62-2.8s1.1-0.86 2-0.86c0.81 0 1.5 0.24 1.9 0.68 0.44 0.46 0.68 1.1 0.68 1.8v0.13h2.9v-0.15c0-1.6-0.51-2.8-1.5-3.7-0.99-0.88-2.3-1.3-4-1.3zm11 3.8c-1.5 0-2.6 0.4-3.4 1.2-0.84 0.79-1.2 2-1.2 3.6v2.1c0 1.6 0.4 2.9 1.2 3.6 0.84 0.79 2 1.2 3.4 1.2 1.4 0 2.5-0.35 3.3-1.1 0.79-0.73 1.2-1.7 1.2-3v-0.15h-2.6v0.13c0 0.53-0.18 0.95-0.51 1.2-0.33 0.31-0.77 0.44-1.3 0.44-0.64 0-1.1-0.18-1.5-0.55-0.35-0.35-0.51-0.97-0.51-1.8v-2.1c0-1.6 0.66-2.4 2-2.4 0.57 0 1 0.15 1.3 0.46 0.33 0.31 0.51 0.75 0.51 1.3v0.13h2.6v-0.22c0-1.3-0.4-2.3-1.2-3-0.79-0.7-1.9-1.1-3.3-1.1z',\n  ],\n};\n","import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The collection of shortcuts for the Search extension.\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[]> = {\n  search    : [ 'F', true ],\n  searchNext: [ 'F3' ],\n  searchPrev: [ 'F3', false, true ],\n  replace   : [ 'F', true, true ],\n};\n","import { Elements, Range, SearchOptions } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { MAX_RANGES } from '../../components/Range/Range';\nimport { CLASS_ACTIVE } from '../../constants/classes';\nimport { EVENT_CHANGE, EVENT_CHANGED, EVENT_KEYMAP, EVENT_READONLY, EVENT_SYNCED } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport {\n  assign,\n  attr,\n  clamp,\n  compare,\n  create,\n  div,\n  includes,\n  isUndefined,\n  prevent,\n  text,\n  throttle,\n  toggleClass,\n} from '../../utils';\nimport { Throttle } from '../../utils/function/throttle/throttle';\nimport { Toolbar } from '../Toolbar/Toolbar';\nimport { REPLACE_BUTTONS, SEARCH_BUTTONS } from './buttons';\nimport {\n  CLASS_MATCHES_COUNT,\n  CLASS_REPLACE,\n  CLASS_REPLACE_CONTROLS,\n  CLASS_SEARCH,\n  CLASS_SEARCH_CONTROLS,\n} from './classes';\nimport {\n  ACTIVE_MARKER_ID,\n  JUMP_DELAY_AFTER_REPLACE,\n  MARKER_ID,\n  SEARCH_THROTTLE_DURATION,\n  TOOLBAR_ID,\n} from './constants';\nimport { DEFAULT_OPTIONS } from './defaults';\nimport { I18N } from './i18n';\nimport { ICONS } from './icons';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * The class for searching texts in the code.\n *\n * @since 0.1.0\n */\nexport class Search extends Component {\n  /**\n   * Holds the Toolbar component.\n   */\n  private Toolbar: Toolbar;\n\n  /**\n   * Holds the wrapper element.\n   */\n  private wrapper: HTMLDivElement;\n\n  /**\n   * Holds the element that wraps elements of the search interface.\n   */\n  private searchBar: HTMLDivElement;\n\n  /**\n   * Holds the element that wraps elements of the replace interface.\n   */\n  private replaceBar: HTMLDivElement;\n\n  /**\n   * Holds the element that displays matches count.\n   */\n  private counter: HTMLSpanElement;\n\n  /**\n   * Stores button elements.\n   */\n  private buttons: Record<string, HTMLButtonElement>;\n\n  /**\n   * The throttled search function.\n   */\n  private throttledSearch: Throttle<( search: string, index?: number ) => void>;\n\n  /**\n   * Holds matched ranges.\n   */\n  private ranges: Range[] = [];\n\n  /**\n   * The current range index.\n   */\n  private index = -1;\n\n  /**\n   * Indicates whether to ignore cases or not.\n   */\n  private matchCase: boolean;\n\n  /**\n   * Whether to search texts by the regular expression or not.\n   */\n  private regexp: boolean;\n\n  /**\n   * Whether to search texts by a whole word or not.\n   */\n  private wholeWord: boolean;\n\n  /**\n   * Holds search options.\n   */\n  private opts: SearchOptions;\n\n  /**\n   * Keeps the ID of the timer for the delay until jumping to the next match.\n   */\n  private jumpTimerAfterReplace: ReturnType<typeof setTimeout>;\n\n  /**\n   * Holds the search input element.\n   */\n  searchField: HTMLInputElement;\n\n  /**\n   * Holds the replace input element.\n   */\n  replaceField: HTMLInputElement;\n\n  /**\n   * The Search constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.addIcons( ICONS );\n    this.addI18n( I18N );\n    this.addKeyBindings( KEYMAP );\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    if ( ! ( this.Toolbar = this.require( 'Toolbar' ) ) ) {\n      return;\n    }\n\n    super.mount( elements );\n\n    this.opts            = this.getOptions( 'search', DEFAULT_OPTIONS );\n    this.throttledSearch = throttle( this.search.bind( this ), SEARCH_THROTTLE_DURATION );\n\n    this.create();\n    this.Toolbar.register( TOOLBAR_ID, this.wrapper, this.i18n.searchToolbar );\n\n    this.listen();\n  }\n\n  /**\n   * Creates elements for the search interface.\n   */\n  private create(): void {\n    const { Toolbar } = this;\n\n    const wrapper    = div();\n    const searchBar  = div( CLASS_SEARCH, wrapper );\n    const replaceBar = div( CLASS_REPLACE, wrapper );\n\n    this.searchField  = Toolbar.createField( { id: 'search', tabindex: 1 }, searchBar );\n    this.replaceField = Toolbar.createField( { id: 'replace', tabindex: 1 }, replaceBar );\n\n    const searchControls  = div( CLASS_SEARCH_CONTROLS, searchBar );\n    const replaceControls = div( CLASS_REPLACE_CONTROLS, replaceBar );\n\n    const searchButtons  = SEARCH_BUTTONS.filter( settings => ! includes( this.opts.hideButtons, settings.id ) );\n    const replaceButtons = REPLACE_BUTTONS.filter( settings => ! includes( this.opts.hideButtons, settings.id ) );\n\n    this.buttons = assign(\n      Toolbar.createButtons<Search>( searchButtons, searchControls, this ),\n      Toolbar.createButtons<Search>( replaceButtons, replaceControls, this )\n    );\n\n    if ( ! this.opts.hideMatchCount ) {\n      this.counter = create( 'span', CLASS_MATCHES_COUNT, searchControls );\n    }\n\n    this.wrapper    = wrapper;\n    this.searchBar  = searchBar;\n    this.replaceBar = replaceBar;\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    const { searchField } = this;\n\n    this.on( `${ EVENT_KEYMAP }:search`, ( e, ke ) => {\n      this.show( ! this.options.keymap.replace );\n      prevent( ke );\n    } );\n\n    this.on( `${ EVENT_KEYMAP }:replace`, ( e, ke ) => {\n      this.show( true );\n      prevent( ke );\n    } );\n\n    this.bind( searchField, 'input', this.onInput, this );\n    this.bind( searchField, 'keydown', this.onSearchFieldKeydown, this );\n    this.bind( this.replaceField, 'keydown', this.onReplaceFieldKeydown, this );\n\n    this.on( 'toolbar:opened', ( e, toolbar, id ) => {\n      if ( id !== TOOLBAR_ID ) {\n        this.clear();\n      }\n    } );\n\n    this.on( 'toolbar:closed', this.clear, this );\n\n    this.on( [ EVENT_CHANGED, EVENT_SYNCED ], () => {\n      const { value } = searchField;\n\n      if ( this.isActive() && value ) {\n        this.throttledSearch( value, this.index );\n      }\n    } );\n\n    this.on( EVENT_READONLY, ( e, readOnly ) => {\n      if ( this.isActive() ) {\n        this.toggleReplace( ! readOnly );\n      }\n    } );\n  }\n\n  /**\n   * Called when any key is pressed on the search field.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onSearchFieldKeydown( e: KeyboardEvent ): void {\n    if ( e.key === 'Enter' ) {\n      this.next();\n      prevent( e );\n      return;\n    }\n\n    this.onKeydown( e );\n  }\n\n  /**\n   * Called when any key is pressed on the replace field.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onReplaceFieldKeydown( e: KeyboardEvent ): void {\n    if ( e.key === 'Enter' ) {\n      this.replace();\n      prevent( e );\n      return;\n    }\n\n    this.onKeydown( e );\n  }\n\n  /**\n   * Called when any key is pressed on both the search and input fields.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onKeydown( e: KeyboardEvent ): void {\n    const key = e.key.toUpperCase();\n    const { Keymap } = this;\n    const matches = Keymap.matches.bind( Keymap, e );\n    const next    = matches( 'searchNext' );\n    const prev    = matches( 'searchPrev' );\n\n    if ( next || prev ) {\n      this[ prev ? 'prev' : 'next' ]();\n      prevent( e );\n    } else if ( matches( 'search' ) ) {\n      this.show( false );\n      prevent( e );\n    } else if ( matches( 'replace' ) ) {\n      this.show( true );\n      prevent( e );\n    } else if ( e.ctrlKey ) {\n      if ( key !== 'A' && key !== 'X' && key === 'C' ) {\n        prevent( e );\n      }\n    } else if ( e.altKey ) {\n      prevent( e );\n    }\n  }\n\n  /**\n   * Called when the field receives input.\n   */\n  private onInput(): void {\n    const { value } = this.searchField;\n\n    if ( value ) {\n      this.throttledSearch( value );\n    } else {\n      this.clear();\n      this.toggleDisabled();\n    }\n  }\n\n  /**\n   * Searches the provided string with current settings.\n   *\n   * @param search - Optional. A string to search.\n   * @param index  - Optional. An index to activate.\n   *\n   * @return An array with tuples that contains `[ index, length ]`.\n   */\n  private search( search: string = this.searchField.value, index?: number ): void {\n    const { Range } = this;\n\n    let source: string | RegExp;\n\n    try {\n      source = this.regexp && search ? new RegExp( search ) : search;\n    } catch ( e ) {\n      return;\n    }\n\n    const ranges = this.Code.search( source, ! this.matchCase, this.wholeWord, MAX_RANGES );\n\n    this.clear();\n    Range.register( MARKER_ID, ranges );\n\n    this.ranges = ranges;\n\n    if ( isUndefined( index ) || index < 0 ) {\n      this.index = -1;\n      this.next();\n    } else {\n      this.index = clamp( index, 0, ranges.length - 1 );\n      this.activate( this.index );\n    }\n\n    this.updateMatchesCount();\n    this.toggleDisabled();\n  }\n\n  /**\n   * Search again without changing the current index.\n   *\n   * @param index - Optional. An index to activate.\n   */\n  private rematch( index?: number ): void {\n    this.search( undefined, index );\n  }\n\n  /**\n   * Updates matches counter.\n   */\n  private updateMatchesCount(): void {\n    if ( this.counter ) {\n      const { length } = this.ranges;\n\n      let string: string;\n\n      if ( ! length ) {\n        string = this.i18n.noResults;\n      } else if ( length > MAX_RANGES ) {\n        string = `${ MAX_RANGES }+`;\n      } else {\n        string = `${ this.index + 1 }/${ length }`;\n      }\n\n      text( this.counter, string );\n    }\n  }\n\n  /**\n   * Toggles `disabled` property of some buttons.\n   */\n  private toggleDisabled(): void {\n    [ 'prevMatch', 'nextMatch', 'replace', 'replaceAll' ].forEach( name => {\n      const button = this.buttons[ name ];\n\n      if ( button ) {\n        button.disabled = ! this.ranges.length;\n      }\n    } );\n  }\n\n  /**\n   * Jumps to the start position of the range specified by the index.\n   *\n   * @param index - An index of the range to jump to.\n   */\n  private jump( index: number ): void {\n    const range = this.ranges[ index ];\n\n    if ( range ) {\n      this.View.jump( range.start[ 0 ], true );\n    }\n  }\n\n  /**\n   * Highlights the prev or next matched text and jumps there.\n   *\n   * @param prev - Whether to highlight the previous or next match.\n   */\n  private move( prev: boolean ): void {\n    const { length } = this.ranges;\n\n    let index = this.index + ( prev ? -1 : 1 );\n\n    if ( index >= length ) {\n      index = 0;\n    } else if ( index < 0 ) {\n      index = length - 1;\n    }\n\n    this.activate( index );\n    this.jump( index );\n\n    this.index = index;\n    this.updateMatchesCount();\n  }\n\n  /**\n   * Toggles the active class and the `aria-checked` attribute.\n   *\n   * @param button  - A target button element.\n   * @param checked - Determines whether to check or uncheck them.\n   */\n  private toggleChecked( button: HTMLButtonElement, checked: boolean ): void {\n    toggleClass( button, CLASS_ACTIVE, checked );\n    attr( button, { 'aria-checked': checked } );\n  }\n\n  /**\n   * Toggles the replace UI.\n   *\n   * @param show - Determines whether to show the replace UI or not.\n   */\n  private toggleReplace( show: boolean ): void {\n    toggleClass( this.replaceBar, CLASS_ACTIVE, show && ! this.Editor.readOnly && ! this.opts.hideReplace );\n  }\n\n  /**\n   * Checks if the search toolbar is active or not.\n   *\n   * @return `true` if the search toolbar is active, or otherwise `false`.\n   */\n  private isActive(): boolean {\n    return this.Toolbar.isActive( TOOLBAR_ID );\n  }\n\n  /**\n   * Toggles the \"Match Case\" mode.\n   *\n   * @param activate - Optional. Whether to activate the \"Match Case\" mode or not.\n   */\n  toggleMatchCase( activate = ! this.matchCase ): void {\n    this.toggleChecked( this.buttons.matchCase, ( this.matchCase = activate ) );\n    this.search();\n  }\n\n  /**\n   * Toggles the \"RegExp\" mode.\n   *\n   * @param activate - Optional. Whether to activate the \"RegExp\" mode or not.\n   */\n  toggleRegExp( activate = ! this.regexp ): void {\n    this.toggleChecked( this.buttons.regexp, ( this.regexp = activate ) );\n    this.search();\n  }\n\n  /**\n   * Toggles the \"Match Whole Word\" mode.\n   *\n   * @param wholeWord - Optional. Whether to activate the \"Match Whole Word\" mode or not.\n   */\n  toggleWholeWord( wholeWord = ! this.wholeWord ): void {\n    this.toggleChecked( this.buttons.wholeWord, ( this.wholeWord = wholeWord ) );\n    this.search();\n  }\n\n  /**\n   * Highlights the matched text at the index.\n   *\n   * @param index - An index of the range to highlight.\n   */\n  activate( index: number ): void {\n    const activeRange = this.ranges[ index ];\n\n    if ( activeRange ) {\n      const { Range } = this;\n      Range.clear( ACTIVE_MARKER_ID );\n      Range.register( ACTIVE_MARKER_ID, [ activeRange ] );\n    }\n  }\n\n  /**\n   * Highlights the next matched text and jumps there.\n   */\n  next(): void {\n    this.move( false );\n  }\n\n  /**\n   * Highlights the previous matched text and jumps there.\n   */\n  prev(): void {\n    this.move( true );\n  }\n\n  /**\n   * Replaces the search result with the provided replacement string.\n   * If the length of ranges does not change after replacing,\n   * that means the replacement includes the original word itself.\n   *\n   * @param replacement - Optional. A replacement string.\n   * @param index       - Optional. An index to replace.\n   */\n  replace( replacement = this.replaceField.value, index = this.index ): void {\n    const { ranges } = this;\n    const activeRange = ranges[ index ];\n\n    if ( activeRange ) {\n      const { Selection } = this;\n      const { start, end } = activeRange;\n      const nextRange = ranges[ index + 1 ];\n\n      Selection.update( start, start, true );\n\n      this.emit( EVENT_CHANGE, 'replace' );\n      this.jump( index );\n\n      this.Code.replaceRange( start, end, replacement );\n      this.Sync.sync( start[ 0 ], end[ 0 ] );\n\n      this.emit( EVENT_CHANGED, 'replace' );\n      this.rematch( index );\n\n      if ( nextRange ) {\n        this.index = this.toIndex( nextRange );\n        this.activate( this.index );\n      }\n\n      this.jumpTimerAfterReplace = setTimeout( () => {\n        this.jump( this.index );\n      }, JUMP_DELAY_AFTER_REPLACE );\n    }\n  }\n\n  /**\n   * Converts the provided range to the range index.\n   *\n   * @param range - A range to convert into a range index.\n   *\n   * @return A range index if available, or otherwise `-1`.\n   */\n  private toIndex( range: Range ): number {\n    const { ranges } = this;\n\n    for ( let i = 0; i < ranges.length; i++ ) {\n      if ( ! compare( ranges[ i ].start, range.start ) && ! compare( ranges[ i ].end, range.end ) ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Replaces all matched strings with the replacement.\n   *\n   * @param replacement - Optional. A replacement string.\n   */\n  replaceAll( replacement = this.replaceField.value ): void {\n    const { ranges } = this;\n\n    if ( ranges.length ) {\n      this.emit( EVENT_CHANGE );\n\n      ranges.forEach( range => {\n        this.Code.replaceRange( range.start, range.end, replacement );\n      } );\n\n      const endRow = ranges[ ranges.length - 1 ].end[ 0 ];\n\n      this.View.jump( endRow );\n      this.Sync.sync( ranges[ 0 ].start[ 0 ], endRow );\n\n      this.clear();\n\n      this.emit( EVENT_CHANGED );\n    }\n  }\n\n  /**\n   * Shows the toolbar.\n   *\n   * @param replace - Whether to display the replace interface or not.\n   */\n  show( replace: boolean ): void {\n    const { Selection, searchField } = this;\n\n    this.toggleReplace( replace );\n\n    if ( ! Selection.isCollapsed() ) {\n      if ( ! Selection.isMultiline() ) {\n        searchField.value = Selection.toString();\n      }\n    }\n\n    this.Toolbar.show( TOOLBAR_ID );\n    this.rematch();\n  }\n\n  /**\n   * Clears all markers.\n   */\n  clear(): void {\n    const { Range } = this;\n    Range.clear( MARKER_ID );\n    Range.clear( ACTIVE_MARKER_ID );\n\n    this.ranges = [];\n    this.updateMatchesCount();\n    this.throttledSearch.cancel();\n    clearTimeout( this.jumpTimerAfterReplace );\n  }\n}\n","import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The collection of shortcuts for the Shortcut extension.\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[]> = {\n  cutLine : [ 'X', true ],\n  copyLine: [ 'C', true ],\n  moveUp  : [ 'ArrowUp', true ],\n  moveDown: [ 'ArrowDown', true ],\n};\n","import { Elements } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_KEYMAP } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { endsWith, isPrevented, prevent } from '../../utils';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * The class for handling some shortcuts.\n *\n * @since 0.1.0\n */\nexport class Shortcut extends Component {\n  /**\n   * The Search constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.addKeyBindings( KEYMAP );\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    const { Selection, Measure, Edit } = this;\n\n    this.on( `${ EVENT_KEYMAP }:copyLine`, ( e, ke ) => {\n      if ( Selection.isCollapsed() && ! isPrevented( ke ) ) {\n        Selection.selectLine( undefined, true, true );\n        Edit.copy();\n        prevent( ke );\n      }\n    } );\n\n    this.on( `${ EVENT_KEYMAP }:cutLine`, ( e, ke ) => {\n      if ( Selection.isCollapsed() && ! isPrevented( ke ) ) {\n        Edit.cutLine();\n        prevent( ke );\n      }\n    } );\n\n    this.on( `${ EVENT_KEYMAP }:moveUp ${ EVENT_KEYMAP }:moveDown`, ( e, ke ) => {\n      const { scroller } = elements;\n      scroller.scrollTop += ( endsWith( e.type, 'n' ) ? 1 : -1 ) * Measure.lineHeight;\n      prevent( ke );\n    } );\n  }\n}\n","import { PROJECT_CODE } from '../../constants/project';\n\n\n/**\n * Classes for the toolbar components.\n *\n * @since 0.1.0\n */\nexport const CLASS_TOOLBAR       = `${ PROJECT_CODE }__toolbar`;\nexport const CLASS_TOOLBAR_BODY  = `${ CLASS_TOOLBAR }__body`;\nexport const CLASS_TOOLBAR_UI    = `${ CLASS_TOOLBAR }__ui`;\nexport const CLASS_TOOLBAR_GROUP = `${ CLASS_TOOLBAR }__group`;\n","import { RyuseiCode } from '../../core/RyuseiCode/RyuseiCode';\r\nimport * as Extensions from '../../extensions';\r\n\r\n\r\nRyuseiCode.compose( Extensions );\r\n\r\nexport { RyuseiCode as default } from '../../core/RyuseiCode/RyuseiCode';\r\n","import { ToolbarGroupData } from '@ryusei/code';\nimport { UIComponent } from '../../classes/UIComponent/UIComponent';\nimport { EVENT_RESIZE } from '../../constants/events';\nimport { addClass, append, attr, div, height, isIE, prepend, removeClass, styles, unit } from '../../utils';\nimport { CLASS_TOOLBAR, CLASS_TOOLBAR_BODY, CLASS_TOOLBAR_GROUP, CLASS_TOOLBAR_UI } from './classes';\n\n\n/**\n * The class for creating a toolbar.\n *\n * @since 0.1.0\n */\nexport class Toolbar extends UIComponent<ToolbarGroupData> {\n  /**\n   * Holds the toolbar element.\n   */\n  private body: HTMLDivElement;\n\n  /**\n   * Listens to some events and receives requests from other components.\n   */\n  protected listen(): void {\n    super.listen();\n    this.on( EVENT_RESIZE, this.resize, this );\n  }\n\n  /**\n   * Creates toolbar elements.\n   *\n   * @link https://www.w3.org/TR/wai-aria-1.2/#toolbar\n   */\n  protected create(): void {\n    const { elements } = this;\n    const id      = `${ elements.root.id }-toolbar`;\n    const wrapper = div( { id, role: 'toolbar', class: CLASS_TOOLBAR } );\n    const close   = this.createCloseButton( { 'aria-controls': id } );\n\n    this.body = div( CLASS_TOOLBAR_BODY, wrapper );\n\n    append( div( CLASS_TOOLBAR_UI, wrapper ), close );\n    prepend( elements.root, wrapper );\n\n    this.wrapper = wrapper;\n  }\n\n  /**\n   * Appends the group element to the body element instead of the wrapper element.\n   *\n   * @param group - A group ID.\n   */\n  protected append( group: string ): void {\n    append( this.body, this.groups[ group ].elm );\n  }\n\n  /**\n   * Resizes the scroller according to the toolbar height.\n   */\n  private resize(): void {\n    if ( isIE() && this.isActive() ) {\n      const maxHeight = styles( this.elements.root, 'maxHeight' );\n      styles( this.elements.body, { maxHeight: `calc(${ maxHeight } - ${ unit( height( this.wrapper ) ) })` } );\n    }\n  }\n\n  /**\n   * Registers a group to the toolbar.\n   *\n   * @param group - A group ID.\n   * @param elm   - An element to register.\n   * @param label - A label of the toolbar.\n   */\n  register( group: string, elm: HTMLDivElement, label: string ): void {\n    addClass( elm, CLASS_TOOLBAR_GROUP );\n    this.groups[ group ] = { elm, label };\n  }\n\n  /**\n   * Displays the toolbar.\n   *\n   * @param group - A group ID to display.\n   */\n  show( group: string ): void {\n    const { pageXOffset, pageYOffset } = window;\n    const { wrapper } = this;\n\n    super.show( group );\n    this.resize();\n\n    if ( this.group ) {\n      removeClass( wrapper, `${ CLASS_TOOLBAR }--${ this.group }` );\n    }\n\n    addClass( wrapper, `${ CLASS_TOOLBAR }--${ group }` );\n    attr( wrapper, { 'aria-label': this.groups[ group ].label } );\n\n    this.autoFocus( group );\n\n    window.scrollTo( pageXOffset, pageYOffset );\n    this.View.emitResize();\n\n    this.emit( 'toolbar:opened', this, group );\n  }\n\n  /**\n   * Hides the toolbar.\n   */\n  hide(): void {\n    const { pageXOffset, pageYOffset } = window;\n    super.hide();\n\n    removeClass( this.wrapper, `${ CLASS_TOOLBAR }--${ this.group }` );\n    styles( this.elements.body, { maxHeight: '' } );\n\n    this.Selection.reselect();\n    window.scrollTo( pageXOffset, pageYOffset );\n\n    this.View.emitResize();\n    this.emit( 'toolbar:closed', this, this.group );\n  }\n}\n"],"names":["KEYMAP","selectAll","MODIFIER_KEYS","default","mac","DEFAULT_OPTIONS","language","placeholder","minWidth","maxWidth","minHeight","maxHeight","indent","tabSize","tabIndex","keymap","maxInitialLines","icons","arrowUp","arrowDown","close","i18n","copy","cut","paste","confirm","activate","notice","cancel","failedToCopy","scrollbar","inputLabel","location","includes","array","value","indexOf","isObject","subject","isArray","Array","isFunction","isString","isUndefined","isText","Text","isHTMLElement","HTMLElement","isBr","HTMLBRElement","toArray","nest","arrayProto","prototype","slice","arrayLike","start","end","call","splice","deleteCount","args","activeElement","document","toggleClass","elm","classes","add","forEach","name","classList","addClass","append","parent","children","appendChild","bind","forOwn","object","iteratee","keys","Object","i","length","assign","sources","source","key","attr","attrs","getAttribute","removeAttribute","setAttribute","String","before","nodes","ref","node","parentNode","insertBefore","closest","selector","Element","matches","parentElement","create","tag","createElement","div","focus","preventScroll","hasClass","className","contains","height","clientHeight","html","innerHTML","isPrevented","e","defaultPrevented","handlerMap","WeakMap","on","events","callback","split","event","addEventListener","handlers","get","push","set","off","callbackOrKey","removeEventListener","handler","delete","prepend","child","firstChild","prevent","stopPropagation","cancelable","preventDefault","query","querySelector","queryAll","querySelectorAll","rect","target","getBoundingClientRect","remove","removeChild","removeClass","styles","getComputedStyle","style","class","filter","Boolean","join","result","prop","trim","text","textContent","unit","isGecko","window","isIE","isMobile","test","navigator","userAgent","maxTouchPoints","PROJECT_CODE","assert","condition","message","Error","throttle","func","interval","initialCall","debounce","raf","id","invoker","throttled","invoke","this","requestAnimationFrame","setTimeout","apply","cancelAnimationFrame","clearTimeout","duration","nextTick","rafThrottle","ARROW_KEYS","NORMALIZATION_MAP","Up","Down","Right","Left","Del","Esc","Spacebar","normalizeKey","matchesKey","matchers","toUpperCase","some","matcher","ctrlKey","shiftKey","altKey","between","number","minOrMax","maxOrMin","exclusive","min","Math","max","clamp","x","y","minimum","maximum","floor","ceil","abs","round","compare","position1","position2","createRange","getSelection","findSelectionBoundary","offset","childNodes","found","count","string","search","from","to","match","RegExp","endsWith","escapeRegExp","replace","format","nthIndexOf","nth","index","repeat","startsWith","ids","Component","Editor","mount","elements","_this","thisArg","priority","emit","getLanguage","position","info","use","config","destroy","method","require","addIcons","options","addI18n","addKeyBindings","shortcuts","getOptions","defaults","CLASS_ROOT","CLASS_BODY","CLASS_SCROLLER","CLASS_CONTAINER","CLASS_EDITOR","CLASS_SCROLLBAR","CLASS_LINES","CLASS_LINE","CLASS_CARET","CLASS_MARKERS","CLASS_MARKER","CLASS_CONTEXT_MENU","CLASS_CONTEXT_MENU_GROUP","CLASS_CONTEXT_MENU_LIST","CLASS_CONTEXT_MENU_BUTTON","CLASS_BUTTON","CLASS_ACTIVE","CLASS_RENDERED","CLASS_ANCHOR","CLASS_FOCUS","CLASS_PRESERVED","CLASS_FOCUSED","CLASS_DRAGGING","CLASS_EMPTY","EVENT_MOUNTED","EVENT_FOCUS","EVENT_BLUR","EVENT_READONLY","EVENT_KEYDOWN","EVENT_NEWLINE","EVENT_CHANGE","EVENT_CHANGED","EVENT_COMPOSITION_START","EVENT_FOCUS_LINE_CHANGED","EVENT_KEYMAP","EVENT_CHUNK_MOVED","EVENT_CHUNK_SUPPLIED","EVENT_SELECTING","EVENT_SELECTED","EVENT_SCROLLED","EVENT_SCROLLER_SCROLL","EVENT_WINDOW_SCROLL","EVENT_RESIZE","EVENT_SCROLL_WIDTH_CHANGED","EVENT_SCROLL_HEIGHT_CHANGED","EVENT_SYNCED","EVENT_CONTEXT_MENU_CLICKED","EVENT_RESET","EVENT_INIT_STYLE","CustomCaret","_this2","move","Measure","getOffset","top","left","animation","show","hide","_private_blink","PRIMARY_CARET_ID","Caret","_private_create","role","editor","_private_listen","editable","primary","readOnly","_this4","_private_onSelected","Selection","_private_update","register","carets","caret","Chunk","scroller","lines","pageYOffset","scrollTop","onScroll","_this6","_private_onScroll","byScroller","_private_onScrolled","_private_activate","anotherBoundary","row","boundary","line","_private_deactivate","_private_emitChangedEvent","_private_setBoundaryChanged","changed","_private_supply","lineHeight","scrollerRect","innerHeight","visibleLines","totalLength","diff","_private_remove","elms","_private_html","where","insertAdjacentHTML","_private_moveDown","lengthToMove","_private_moveUp","_private_computeLengthToMoveDown","margin","border","_private_computeLengthToMoveUp","paddingBottom","padding","bottom","topBorder","bottomBorder","_private_detach","reduce","detached","isAnchor","isFocus","_private_attach","anchorIndex","focusIndex","firstElm","anchorLine","_private_anchor","focusLine","_private_focus","anchor","includesAnchor","includesFocus","includesPreservedAnchor","includesPreservedFocus","firstIndex","secondIndex","backward","secondElm","topElms","middleElms","bottomElms","nextElementSibling","_private_offset","offsetY","_private_jumpIntoView","_private_reposition","focusRow","_private_isVisible","getBoundary","addPreservedLine","sync","syncDiff","refresh","jump","paddingTop","offsetRows","scroll","getRow","getLine","domRect","LINE_BREAK","AbstractArrayLike","items","clear","matchesToken","token","state","CATEGORY_COMMENT","CATEGORY_BRACKET","Line","init","first","depth","undefined","tokens","time","Date","now","getIndent","getInfo","getInfoAt","col","isEmpty","Lines","insert","code","limit","lexer","run","shift","rowIndex","asyncSync","timers","_this8","findMinIndent","startRow","endRow","minIndent","scanUp","counterpart","j","scanDown","findBlockStart","distance","findBlockEnd","tail","syncSize","_private_setLength","_private_isSame","tokens1","tokens2","every","token1","token2","Code","Infinity","after","sliceLines","endIndex","sliceRange","startIndex","replaceLines","replacement","replaceRange","replaceLinesBy","size","isLast","acc","lineBreak","ignoreCase","wholeWord","ranges","regexp","exec","lastIndex","_private_positionToIndex","normalize","VIEW_BOX","createSvg","createElementNS","UIComponent","listen","escape","group","autoFocus","HTMLInputElement","select","createCloseButton","button","icon","click","createButtons","settings","component","buttons","_this11","createButton","checkbox","tabindex","iconName","label","concat","title","type","iconSettings","d","stroke","linecap","svg","viewBox","path","fill","createField","spellcheck","isActive","isFocused","MAIN_CONTEXT_MENU_ID","CONTEXT_MENU_EDIT","shortcut","disableOnReadOnly","CONTEXT_MENU_SELECTION","ContextMenu","root","_this13","overlay","_private_onMouseDown","clientX","clientY","_private_onContextMenu","_this14","_private_onKeydown","backwards","_private_move","wrapper","clientWidth","documentElement","_private_contains","_private_build","lists","list","map","_this15","buttonSettings","disabled","_private_findSettings","groups","_this16","clipboard","Clipboard","textarea","body","setSelectionRange","execPaste","execCommand","execCopy","onFailed","onPaste","readText","then","writeText","catch","_this17","Edit","_this19","ke","isKey","metaKey","_private_onMenuClick","menu","_private_onPaste","clipboardData","getData","_private_register","_private_isSelected","_private_isEditable","lastIndexOf","skipSelection","toString","range","_this20","alert","cutLine","COMPOSITION_INPUT_TYPE","Input","_this21","_private_onCompositionStart","removeAllRanges","_private_onCompositionUpdate","_this22","_private_onCompositionEnd","_private_onInput","_private_handleEnter","_private_handleDelete","_private_handleBackspace","prev","_private_appendLineBreak","_private_settleValue","insertion","_private_settlePosition","_private_getCaretPosition","props","char","charAt","selection","rangeCount","getRangeAt","cloneRange","setStart","Keymap","_this24","action","_private_find","_this25","getShortcut","modifiers","platform","MeasureText","font","getContext","_private_getCharWidth","chars","context","measureText","width","measure","_this26","_private_onMount","_this27","_private_updatePadding","parseFloat","right","_private_createMeasureText","_private_buildCSSFont","_private_clearRectCaches","getTop","getBottom","measureWidth","container","Marker","calcBoundaries","isBackward","useCache","fillHeight","startLeft","buildLine","StandaloneMarker","background","draw","isInside","CLASS_MARKER_SELECTION","SelectionMarker","_this30","_private_onStateChanged","_private_drawSelection","isCollapsed","Range","observe","_private_observe","_this32","_private_draw","data","_this33","marker","constructor","lastRange","markers","_this34","clearRanges","Scope","isIn","names","states","categories","inState","inCategory","_private_inScope","category","negated","_this35","toggleEditable","contentEditable","ORIGIN","EventBus","eventNS","namespace","eventHandlers","_this36","sort","handler1","handler2","_this37","eventObject","State","onKeydown","_private_onFocus","_private_onBlur","_private_onSelectionChange","_private_onSelectionStart","PointerEvent","_private_onSelectionEnd","_private_onKeyup","_private_isFocused","update","collapsed","initial","is","isPrev","hold","release","detail","_private_onDblClick","selectNode","addRange","lastLineLength","silently","selectLine","reselect","getRect","collapse","getLocation","toFocus","isMultiline","_private_setNativeSelection","isSingle","startLine","endLine","anchorNode","focusNode","setBaseAndExtent","setEnd","_private_getNativeSelection","_private_findActiveLine","_private_getWordRangeAt","words","_private_getNativeSelectionBoundary","prefix","_private_detectSelectAll","_private_ensureSelection","anchorOffset","focusOffset","anchorClone","cloneNode","focusClone","replaceChild","_this40","Style","_this41","_private_init","_this42","toLowerCase","selectors","_this43","Sync","jumpTo","View","_private_run","strict","_private_syncLines","_this45","_private_syncRanges","_this46","_private_splitRows","_private_compress","multiline","item","_private_findRoot","_private_findStartInLanguageBlock","lang","_private_isEmbedded","DRAG_START_EVENTS","DRAG_END_EVENTS","DRAGGING_EVENTS","ORIENTATION_MAP","vertical","scrollHeight","pageY","translateY","AbstractDraggableBar","_this47","onDrag","onDragging","onDragged","getCoord","EditorScrollbar","coord","sh","ch","st","active","heightRatio","offsetRatio","transform","_this50","_private_clipScrollOffset","caretRight","caretBottom","caretLeft","scrollLeft","caretRect","caretTop","editorRect","_private_getWidthBeforeContainer","middle","lineOffset","autoWidth","autoHeight","skipLengthCheck","isVisible","lineRect","bar","ATTRIBUTES_EDITABLE_AREA","autocorrect","autocapitalize","Renderer","renderLines","divs","rootClasses","_this51","extensions","idNumber","CoreComponents","_this52","Extension","_private_mount","autofocus","_private_collect","freeze","_this53","composing","_private_bind","pre","display","save","HTMLTextAreaElement","blur","extension","Components","emitResize","RyuseiCode","languages","alias","_private_mergeOptions","_this54","setRange","CLASS_ACTIVE_LINE","ActiveLine","_this55","_this56","_private_isActive","AutoClose","_this57","_private_close","_private_skip","closingChars","_private_getChars","closing","_private_getClosingString","closer","_private_getOffset","_private_validate","validator","_private_validateQuote","currInfo","prevInfo","_private_getConfig","autoClose","brackets","maxScanLines","MARKER_ID","BracketMatching","_this58","_this59","findClosing","Number","_private_infoToRange","lineComment","blockComment","COMMENT_INPUT_TYPE","Comment","_private_toggleBlock","_private_toggleLine","endPosition","uncommented","_private_commentOut","comment","commentStart","_private_uncomment","_private_sync","_private_detectBlockComment","_private_detectLineComment","head","trimmed","endCol","GENERAL_UI_BUTTONS","CLASS_DIALOG","COMMON_DIALOG_GROUP","Dialog","_this61","groupElm","headerElm","titleElm","footerElm","IndentMarker","Guide","_private_parse","CLASS_GUTTER","CLASS_GUTTER_FLOAT","CLASS_GUTTER_ROW","CLASS_LINE_NUMBER","sticky","Gutter","_this62","_private_render","_this63","_private_renderRows","chunk","_this64","_private_onPointerDown","isNaN","chunkStart","rows","activeElm","_private_getElm","undo","redo","RESTORATION_INPUT_TYPE","History","_this66","_private_record","_private_restore","record","_private_push","current","record1","record2","_private_isUndoing","_private_onChange","history","_private_onChanged","help","deepIndent","I18N","indentNotice","indentDisabled","unindent","toggleTabMode","DIALOG_ID","Indentation","activation","setDisabled","focused","_this68","_this69","_private_indent","space","_private_space","_private_unindent","startCol","startOffset","endOffset","_this70","_private_indentNewline","_private_indentDeep","_private_findConfigIndex","_private_shouldIndentDeep","_private_isClosed","prevRow","prevIndent","curIndent","prevLine","jumpToLine","jumpToolbar","TOOLBAR_ID","Jump","hideLocation","_this72","_private_jump","parseInt","horizontal","resizeBar","CLASS_SIZER_BAR","ResizeBar","_this74","_private_updateAria","_private_convertValueToPixel","Resize","bars","SEARCH_BUTTONS","REPLACE_BUTTONS","CLASS_SEARCH","CLASS_REPLACE","ACTIVE_MARKER_ID","hideButtons","searchToolbar","prevMatch","nextMatch","replaceAll","matchCase","noResults","ICONS","word","searchNext","searchPrev","Search","Toolbar","searchBar","replaceBar","searchControls","replaceControls","searchButtons","_this77","replaceButtons","hideMatchCount","searchField","_this78","toolbar","_private_onSearchFieldKeydown","_private_onReplaceFieldKeydown","next","_private_search","_private_rematch","_private_updateMatchesCount","_private_toggleDisabled","_this79","_private_toggleChecked","checked","_private_toggleReplace","hideReplace","toggleMatchCase","toggleRegExp","toggleWholeWord","activeRange","nextRange","_this80","_private_toIndex","_this81","copyLine","moveUp","moveDown","Shortcut","CLASS_TOOLBAR","_private_resize","pageXOffset","scrollTo"],"mappings":"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"}