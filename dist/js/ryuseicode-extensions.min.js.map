{"version":3,"file":"ryuseicode-extensions.min.js","sources":["../../src/js/constants/keymap.ts","../../src/js/constants/defaults.ts","../../src/js/constants/icons.ts","../../src/js/constants/i18n.ts","../../src/js/utils/array/includes/includes.ts","../../src/js/utils/type/type.ts","../../src/js/utils/array/toArray/toArray.ts","../../src/js/utils/array/index.ts","../../src/js/utils/arrayLike/slice/slice.ts","../../src/js/utils/arrayLike/splice/splice.ts","../../src/js/utils/dom/activeElement/activeElement.ts","../../src/js/utils/dom/toggleClass/toggleClass.ts","../../src/js/utils/dom/addClass/addClass.ts","../../src/js/utils/dom/append/append.ts","../../src/js/utils/object/forOwn/forOwn.ts","../../src/js/utils/object/assign/assign.ts","../../src/js/utils/dom/attr/attr.ts","../../src/js/utils/dom/before/before.ts","../../src/js/utils/dom/closest/closest.ts","../../src/js/utils/dom/matches/matches.ts","../../src/js/utils/dom/create/create.ts","../../src/js/utils/dom/div/div.ts","../../src/js/utils/dom/focus/focus.ts","../../src/js/utils/dom/hasClass/hasClass.ts","../../src/js/utils/dom/height/height.ts","../../src/js/utils/dom/html/html.ts","../../src/js/utils/dom/isPrevented/isPrevented.ts","../../src/js/utils/dom/on/on.ts","../../src/js/utils/dom/off/off.ts","../../src/js/utils/dom/prepend/prepend.ts","../../src/js/utils/dom/prevent/prevent.ts","../../src/js/utils/dom/query/query.ts","../../src/js/utils/dom/queryAll/queryAll.ts","../../src/js/utils/dom/rect/rect.ts","../../src/js/utils/dom/remove/remove.ts","../../src/js/utils/dom/removeClass/removeClass.ts","../../src/js/utils/dom/styles/styles.ts","../../src/js/utils/dom/tag/tag.ts","../../src/js/utils/dom/joinAttrs/joinAttrs.ts","../../src/js/utils/dom/text/text.ts","../../src/js/utils/dom/unit/unit.ts","../../src/js/utils/environment/isIE/isIE.ts","../../src/js/utils/environment/isMobile/isMobile.ts","../../src/js/utils/environment/isAndroid/isAndroid.ts","../../src/js/utils/environment/isIOS/isIOS.ts","../../src/js/constants/project.ts","../../src/js/utils/error/assert/assert.ts","../../src/js/utils/function/throttle/throttle.ts","../../src/js/utils/function/debounce/debounce.ts","../../src/js/utils/function/nextTick/nextTick.ts","../../src/js/utils/function/rafThrottle/rafThrottle.ts","../../src/js/constants/keys.ts","../../src/js/utils/key/normalizeKey/normalizeKey.ts","../../src/js/utils/key/matchesKey/matchesKey.ts","../../src/js/utils/math/between/between.ts","../../src/js/utils/math/clamp/clamp.ts","../../src/js/utils/math/index.ts","../../src/js/utils/selection/compare/compare.ts","../../src/js/utils/selection/createRange/createRange.ts","../../src/js/utils/selection/getSelection/getSelection.ts","../../src/js/utils/selection/findSelectionBoundary/findSelectionBoundary.ts","../../src/js/utils/string/count/count.ts","../../src/js/utils/string/endsWith/endsWith.ts","../../src/js/utils/string/escapeRegExp/escapeRegExp.ts","../../src/js/utils/string/format/format.ts","../../src/js/utils/string/nthIndexOf/nthIndexOf.ts","../../src/js/utils/string/repeat/repeat.ts","../../src/js/utils/string/startsWith/startsWith.ts","../../src/js/utils/string/uniqueId/uniqueId.ts","../../src/js/classes/Component/Component.ts","../../src/js/constants/classes.ts","../../src/js/constants/events.ts","../../src/js/constants/selection-states.ts","../../src/js/components/Caret/CustomCaret.ts","../../src/js/components/Caret/Caret.ts","../../src/js/components/Chunk/Chunk.ts","../../src/js/components/Chunk/constants.ts","../../src/js/constants/characters.ts","../../src/js/classes/AbstractArrayLike/AbstractArrayLike.ts","../../src/js/utils/token/matchesToken/matchesToken.ts","../../node_modules/@ryusei/light/dist/js/ryuseilight.esm.js","../../src/js/components/Code/Line.ts","../../src/js/components/Code/Lines.ts","../../src/js/components/Code/Code.ts","../../src/js/utils/icon/icon/icon.ts","../../src/js/classes/UIComponent/UIComponent.ts","../../src/js/constants/context-menu.ts","../../src/js/components/ContextMenu/ContextMenu.ts","../../src/js/components/Edit/Clipboard.ts","../../src/js/components/Edit/Edit.ts","../../src/js/components/Input/Input.ts","../../src/js/components/Keymap/Keymap.ts","../../src/js/utils/environment/isMac/isMac.ts","../../src/js/components/Measure/MeasureText.ts","../../src/js/components/Measure/Measure.ts","../../src/js/components/Range/Marker.ts","../../src/js/components/Range/StandaloneMarker.ts","../../src/js/components/Range/SelectionMarker.ts","../../src/js/components/Range/Range.ts","../../src/js/components/Scope/Scope.ts","../../src/js/utils/dom/toggleEditable/toggleEditable.ts","../../src/js/components/Selection/constants.ts","../../src/js/event/EventBus.ts","../../src/js/components/Selection/State.ts","../../src/js/event/State.ts","../../src/js/components/Selection/Selection.ts","../../src/js/utils/selection/setSelection/setSelection.ts","../../src/js/utils/environment/isGecko/isGecko.ts","../../src/js/components/Style/FontObserver.ts","../../src/js/components/Style/Style.ts","../../src/js/utils/string/camelToKebab/camelToKebab.ts","../../src/js/components/Sync/Sync.ts","../../src/js/components/Sync/constants.ts","../../src/js/classes/AbstractDraggableBar/AbstractDraggableBar.ts","../../src/js/components/View/EditorScrollbar.ts","../../src/js/components/View/Scrollbar.ts","../../src/js/components/View/View.ts","../../src/js/components/View/constants.ts","../../src/js/constants/attributes.ts","../../src/js/core/Renderer/Renderer.ts","../../src/js/core/Editor/Editor.ts","../../src/js/utils/string/escapeHtml/escapeHtml.ts","../../src/js/core/RyuseiCode/RyuseiCode.ts","../../src/js/extensions/ActiveLine/ActiveLine.ts","../../src/js/extensions/AutoClose/AutoClose.ts","../../src/js/extensions/BracketMatching/defaults.ts","../../src/js/extensions/BracketMatching/BracketMatching.ts","../../src/js/extensions/Comment/keymap.ts","../../src/js/extensions/Comment/Comment.ts","../../src/js/extensions/Dialog/buttons.ts","../../src/js/extensions/Dialog/classes.ts","../../src/js/extensions/Dialog/Dialog.ts","../../src/js/extensions/Guide/IndentMarker.ts","../../src/js/extensions/Guide/Guide.ts","../../src/js/extensions/Gutter/classes.ts","../../src/js/extensions/Gutter/defaults.ts","../../src/js/extensions/Gutter/Gutter.ts","../../src/js/extensions/History/defaults.ts","../../src/js/extensions/History/keymap.ts","../../src/js/extensions/History/History.ts","../../src/js/extensions/Indentation/defaults.ts","../../src/js/extensions/Indentation/i18n.ts","../../src/js/extensions/Indentation/keymap.ts","../../src/js/extensions/Indentation/Indentation.ts","../../src/js/extensions/Jump/i18n.ts","../../src/js/extensions/Jump/keymap.ts","../../src/js/extensions/Jump/Jump.ts","../../src/js/extensions/Resize/defaults.ts","../../src/js/extensions/Resize/i18n.ts","../../src/js/extensions/Resize/ResizeBar.ts","../../src/js/extensions/Resize/Resize.ts","../../src/js/extensions/Search/buttons.ts","../../src/js/extensions/Search/classes.ts","../../src/js/extensions/Search/constants.ts","../../src/js/extensions/Search/defaults.ts","../../src/js/extensions/Search/i18n.ts","../../src/js/extensions/Search/icons.ts","../../src/js/extensions/Search/keymap.ts","../../src/js/extensions/Search/Search.ts","../../src/js/extensions/Shortcut/keymap.ts","../../src/js/extensions/Shortcut/Shortcut.ts","../../src/js/extensions/Toolbar/classes.ts","../../src/js/build/extensions/extensions.ts","../../src/js/extensions/Toolbar/Toolbar.ts"],"sourcesContent":["import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The map for kay bindings (`[ key, ctrl, shift, alt ]`).\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[] | null | false> = {\n  selectAll: [ 'A', true ],\n};\n\n/**\n * The collection of modifier keys.\n *\n * @since 0.1.0\n */\nexport const MODIFIER_KEYS = {\n  default: [ 'Ctrl', 'Shift', 'Alt' ],\n  mac    : [ '⌘', '⇧', '⌥' ],\n};\n","import { Options } from '@ryusei/code';\nimport { I18N } from './i18n';\nimport { ICONS } from './icons';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * Default values for the editor options.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: Options = {\n  language       : 'javascript',\n  placeholder    : 'Enter code here…',\n  minWidth       : '200px',\n  maxWidth       : '100%',\n  minHeight      : '16em',\n  maxHeight      : '40em',\n  indent         : '  ',\n  tabSize        : 2,\n  tabIndex       : 0,\n  keymap         : KEYMAP,\n  maxInitialLines: 200,\n  icons          : ICONS,\n  i18n           : I18N,\n};\n","import { IconSettings } from '@ryusei/code';\n\n\n/**\n * Icon settings as [ path, stroke?, linecap? ].\n *\n * @since 0.1.0\n */\nexport const ICONS: Record<string, IconSettings> = {\n  arrowUp: [\n    'm18.6 10.3c-6.59-6.85-6.59-6.85-6.59-6.85m-6.59 6.85 6.59-6.85m0 17v-17',\n    3,\n  ],\n  arrowDown: [\n    'm5.41 13.7 6.59 6.85m6.59-6.85c-6.59 6.85-6.59 6.85-6.59 6.85m0-17v17',\n    3,\n  ],\n  close: [\n    'm19 18-14-13m0 13 14-13',\n    3,\n  ],\n};\n","/**\n * The collection of i18n strings.\n *\n * @since 0.1.0\n */\nexport const I18N = {\n  copy        : 'Copy',\n  cut         : 'Cut',\n  paste       : 'Paste',\n  selectAll   : 'Select All',\n  close       : 'Close',\n  confirm     : 'OK',\n  activate    : 'Activate',\n  notice      : 'Notice',\n  cancel      : 'Cancel',\n  failedToCopy: 'Can not copy on your environment.',\n  scrollbar   : 'Drag to Scroll',\n  inputLabel  : 'Edit contents',\n  location    : 'Line: %s, Column: %s',\n};\n","/**\n * Checks if the array includes the value or not.\n * `Array#includes` is not supported by IE.\n *\n * @param array - An array.\n * @param value - A value to search for.\n *\n * @return `true` if the array includes the value, or otherwise `false`.\n */\nexport function includes<T>( array: T[], value: T ): boolean {\n  return array.indexOf( value ) > -1;\n}\n","/**\r\n * Checks if the given subject is an object or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an object, or otherwise `false`.\r\n */\r\nexport function isObject( subject: any ): subject is object {\r\n  return subject !== null && typeof subject === 'object';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is an array or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an array, or otherwise `false`.\r\n */\r\nexport function isArray<T>( subject: any ): subject is T[] {\r\n  return Array.isArray( subject );\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a function or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a function, or otherwise `false`.\r\n */\r\nexport function isFunction( subject: any ): subject is ( ...args: any[] ) => any {\r\n  return typeof subject === 'function';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a string or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a string, or otherwise `false`.\r\n */\r\nexport function isString( subject: any ): subject is string {\r\n  return typeof subject === 'string';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is `undefined` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `undefined`, or otherwise `false`.\r\n */\r\nexport function isUndefined( subject: any ): subject is undefined {\r\n  return typeof subject === 'undefined';\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a Text node or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a Text node, or otherwise `false`.\r\n */\r\nexport function isText( subject: any ): subject is Text {\r\n  return subject instanceof Text;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a HTMLElement instance or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a HTMLElement instance, or otherwise `false`.\r\n */\r\nexport function isHTMLElement( subject: any ): subject is HTMLElement {\r\n  return subject instanceof HTMLElement;\r\n}\r\n\r\n/**\r\n * Checks if the given subject is a BR element or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a BR element, or otherwise `false`.\r\n */\r\nexport function isBr( subject: any ): subject is HTMLBRElement {\r\n  return subject instanceof HTMLBRElement;\r\n}\r\n","import { isArray } from '../../type/type';\n\n\nexport function toArray<T>( value: T | T[], nest: true ): T extends any[] ? T[] : T[][];\nexport function toArray<T>( value: T | T[] ): T[];\n\n/**\n * Push the provided value to an array if the value is not an array.\n *\n * @param value - A value to push.\n * @param nest  - Optional. Whether to push the value to an array if the value is already an array.\n *\n * @return An array containing the value, or the value itself if it is already an array.\n *         If the `nest` is `true` and the first child of the array is not an array,\n *         this returns an array with the provided array.\n */\nexport function toArray<T>( value: T | T[], nest = false ): T[] | T[][] {\n  if ( isArray( value ) ) {\n    if ( nest && ! isArray( value[ 0 ] ) ) {\n      return [ value ];\n    }\n\n    return value;\n  }\n\n  return [ value ];\n}\n","export { includes } from './includes/includes';\r\nexport { toArray } from './toArray/toArray';\r\n\r\nexport const arrayProto = Array.prototype;\r\n","import { arrayProto } from '../../array';\r\n\r\n\r\n/**\r\n * The slice method for an array-like object.\r\n *\r\n * @param arrayLike - An array-like object.\r\n * @param start     - Optional. A start index.\r\n * @param end       - Optional. A end index.\r\n *\r\n * @return An array with sliced elements.\r\n */\r\nexport function slice<T>( arrayLike: ArrayLike<T>, start?: number, end?: number ): T[] {\r\n  return arrayProto.slice.call( arrayLike, start, end );\r\n}\r\n","import { arrayProto } from '../../array';\r\n\r\n\r\n/**\r\n * The splice method for an array-like object.\r\n *\r\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\r\n *\r\n * @param arrayLike   - An array-like object.\r\n * @param start       - A start index.\r\n * @param deleteCount - Optional. A number of elements to remove from the `start` index.\r\n * @param args        - Optional. Any number of items to add.\r\n *\r\n * @return An array with deleted items.\r\n */\r\nexport function splice<T>( arrayLike: ArrayLike<T>, start: number, deleteCount?: number, ...args: T[] ): T[] {\r\n  return arrayProto.splice.call( arrayLike, start, deleteCount, ...args );\r\n}\r\n","/**\r\n * Returns the active element.\r\n * This is just an alias of `document.activeElement`.\r\n *\r\n * @return An active element.\r\n */\r\nexport function activeElement(): Element {\r\n  return document.activeElement;\r\n}\r\n","import { toArray } from '../../array';\n\n\n/**\n * Toggles the provided class or classes by following the `add` boolean.\n *\n * @param elm     - An element whose classes are toggled.\n * @param classes - A class or class names.\n * @param add     - Whether to add or remove a class.\n */\nexport function toggleClass( elm: Element, classes: string | string[], add: boolean ): void {\n  if ( elm ) {\n    toArray( classes ).forEach( name => {\n      if ( name ) {\n        elm.classList[ add ? 'add' : 'remove' ]( name );\n      }\n    } );\n  }\n}\n","import { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Adds classes to the element.\r\n *\r\n * @param elm     - An element to add classes to.\r\n * @param classes - Classes to add.\r\n */\r\nexport function addClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, classes, true );\r\n}\r\n","import { toArray } from '../../array';\r\n\r\n\r\n/**\r\n * Appends children to the parent element.\r\n *\r\n * @param parent   - A parent element.\r\n * @param children - A child or children to append to the parent.\r\n */\r\nexport function append( parent: Element, children: Node | Node[] ): void {\r\n  toArray( children ).forEach( parent.appendChild.bind( parent ) );\r\n}\r\n","/**\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\n *\n * @param object   - An object to iterate over.\n * @param iteratee - An iteratee function that takes the value and key as arguments.\n *\n * @return A provided object itself.\n */\nexport function forOwn<T extends object>(\n  object: T,\n  iteratee: ( value: T[ keyof T ], key: string ) => boolean | void\n): T {\n  if ( object ) {\n    const keys = Object.keys( object );\n\n    for ( let i = 0; i < keys.length; i++ ) {\n      if ( iteratee( object[ keys[ i ] ], keys[ i ] ) === false ) {\n        break;\n      }\n    }\n  }\n\n  return object;\n}\n","import { isObject, isUndefined } from '../../type/type';\nimport { forOwn } from '../forOwn/forOwn';\n\n\n/**\n * Assign U to T.\n *\n * @typeParam T - An object to assign to.\n * @typeParam U - An object to assign.\n *\n * @return An assigned object type.\n */\nexport type Assign<T, U> = Omit<T, keyof U> & U;\n\nexport function assign<T extends object>( object: T ): T;\n\n// There is a way to type arguments recursively, but these fixed definitions are enough for this project.\nexport function assign<T extends object, U extends object>( object: T, source: U ): Assign<T, U>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object>(\n  object: T, source1: U1, source2: U2\n): Assign<Assign<T, U1>, U2>;\n\nexport function assign<T extends object, U1 extends object, U2 extends object, U3 extends object>(\n  object: T, source1: U1, source2: U2, source3: U3\n): Assign<Assign<Assign<T, U1>, U2>, U3>;\n\n/**\n * Assigns all own enumerable properties of all source objects to the provided object.\n * `undefined` in source objects will be skipped.\n *\n * @param object  - An object to assign properties to.\n * @param sources - Objects to assign properties from.\n *\n * @return An object assigned properties of the sources to.\n */\nexport function assign<T extends object, U extends object>( object: T, ...sources: U[] ): any {\n  sources.forEach( source => {\n    if ( isObject( source ) ) {\n      forOwn( source, ( value, key ) => {\n        if ( ! isUndefined( source[ key ] ) ) {\n          object[ key ] = source[ key ];\n        }\n      } );\n    }\n  } );\n\n  return object;\n}\n","import { forOwn } from '../../object';\r\nimport { isObject, isString } from '../../type/type';\r\n\r\n\r\nexport function attr( elm: Element, attrs: string ): string;\r\nexport function attr( elm: Element, attrs: Record<string, string | number | boolean> ): void;\r\n\r\n/**\r\n * Sets new attributes to the passed element if the `attrs` is an object literal,\r\n * or gets an attribute value from it if the `attrs` is a string.\r\n *\r\n * @param elm   - An element to set or get an attribute.\r\n * @param attrs - An attribute name as a string or new attributes as an object literal.\r\n */\r\nexport function attr( elm: Element, attrs: string | Record<string, string | number | boolean> ): string | void {\r\n  if ( elm ) {\r\n    if ( isString( attrs ) ) {\r\n      return elm.getAttribute( attrs ) || '';\r\n    }\r\n\r\n    if ( isObject( attrs ) ) {\r\n      forOwn( attrs, ( value, key ) => {\r\n        if ( value === null ) {\r\n          elm.removeAttribute( key );\r\n        } else {\r\n          elm.setAttribute( key, String( value ) );\r\n        }\r\n      } );\r\n    }\r\n  }\r\n}\r\n","import { toArray } from '../../array';\r\n\r\n\r\n/**\r\n * Inserts a node or nodes before the specified reference node.\r\n *\r\n * @param nodes - A node or nodes to insert.\r\n * @param ref   - A reference node.\r\n */\r\nexport function before( nodes: Node | Node[], ref: Node ): void {\r\n  toArray( nodes ).forEach( node => {\r\n    if ( node ) {\r\n      const parent = node.parentNode || ( ref && ref.parentNode );\r\n\r\n      if ( parent ) {\r\n        parent.insertBefore( node, ref );\r\n      }\r\n    }\r\n  } );\r\n}\r\n","import { isFunction } from '../../type/type';\nimport { matches } from '../matches/matches';\n\n\n/**\n * With starting at the given element,\n * finds the closest parent element that matches the selector.\n *\n * @since 0.1.0\n *\n * @param elm      - A start element.\n * @param selector - A selector to search for.\n *\n * @return The closest element if found, or `null` if not.\n *\n * @throws TypeError\n */\nexport function closest( elm: HTMLElement, selector: string ): HTMLElement | null {\n  if ( isFunction( elm.closest ) ) {\n    return elm.closest( selector );\n  }\n\n  while ( elm ) {\n    if ( matches( elm, selector ) ) {\n      return elm;\n    }\n\n    elm = elm.parentElement;\n  }\n\n  return null;\n}\n","/**\n * Extends the HTMLElement interface for IE.\n *\n * @private\n * @since 0.1.0\n */\ninterface HTMLElementIE extends HTMLElement {\n  msMatchesSelector( selector: string ): boolean;\n}\n\n/**\n * Checks if the element matches the provided selector, or passes the predicate function.\n *\n * @since 0.1.0\n *\n * @param elm      - An element to test.\n * @param selector - A selector string to match.\n *\n * @return `true` if the element matches the selector.\n */\nexport function matches( elm: Element, selector: string ): boolean {\n  Element.prototype.matches = Element.prototype.matches || ( Element.prototype as HTMLElementIE ).msMatchesSelector;\n  return elm.matches( selector );\n}\n","import { isArray, isString } from '../../type/type';\nimport { addClass } from '../addClass/addClass';\nimport { append } from '../append/append';\nimport { attr } from '../attr/attr';\n\n\n/**\n * Creates a HTML element.\n *\n * @param tag    - A tag name.\n * @param attrs  - Optional. An object with attributes to apply the created element to, or a string with classes.\n * @param parent - Optional. A parent element where the created element is appended.\n */\nexport function create<K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  attrs?: Record<string, string | number | boolean> | string | string[],\n  parent?: HTMLElement\n): HTMLElementTagNameMap[ K ] {\n  const elm = document.createElement( tag );\n\n  if ( attrs ) {\n    if ( isString( attrs ) || isArray( attrs ) ) {\n      addClass( elm, attrs );\n    } else {\n      attr( elm, attrs );\n    }\n  }\n\n  if ( parent ) {\n    append( parent, elm );\n  }\n\n  return elm;\n}\n","import { create } from '../create/create';\r\n\r\n\r\n/**\r\n * The `create` function whose tag argument is fixed to `div`.\r\n *\r\n * @param attrs  - Optional. An object with attributes to apply the created element to, or a string with classes.\r\n * @param parent - Optional. A parent element where the created element is appended.\r\n */\r\nexport function div(\r\n  attrs?: Record<string, string | number | boolean> | string | string[],\r\n  parent?: HTMLElement\r\n): HTMLDivElement {\r\n  return create( 'div', attrs, parent );\r\n}\r\n","import { isFunction } from '../../type/type';\n\n\n/**\n * Focuses the provided element without scrolling the ascendant element.\n *\n * @param elm - An element to focus.\n */\nexport function focus( elm: HTMLElement ): void {\n  if ( isFunction( elm[ 'setActive' ] ) ) {\n    elm[ 'setActive' ]();\n  } else {\n    elm.focus( { preventScroll: true } );\n  }\n}\n","/**\r\n * Checks if the element contains the specified class or not.\r\n *\r\n * @param elm       - An element to check.\r\n * @param className - A class name that may be contained by the element.\r\n *\r\n * @return `true` if the element contains the class, or otherwise `false`.\r\n */\r\nexport function hasClass( elm: Element, className: string ): boolean {\r\n  return elm && elm.classList.contains( className );\r\n}\r\n","/**\n * Returns client height of the element.\n *\n * @param elm - An element to get height.\n */\nexport function height( elm: Element ): number {\n  return elm.clientHeight;\n}\n","import { isUndefined } from '../../type/type';\r\n\r\n\r\nexport function html( elm: Element ): string;\r\nexport function html( elm: Element, html: string ): void;\r\n\r\n/**\r\n * Sets or gets HTML of the provided element.\r\n *\r\n * @param elm - A element to get or set HTML.\r\n * @param html - Optional. HTML to set.\r\n */\r\nexport function html( elm: Element, html?: string ): string | void {\r\n  if ( elm ) {\r\n    if ( isUndefined( html ) ) {\r\n      return elm.innerHTML;\r\n    }\r\n\r\n    if ( elm.innerHTML !== html ) {\r\n      elm.innerHTML = html;\r\n    }\r\n  }\r\n}\r\n","/**\n * Checks if the default action of the event is prevented or not.\n *\n * @param e - An Event object.\n *\n * @return `true` if the default action is prevented, or otherwise `false`.\n */\nexport function isPrevented( e: Event ): boolean {\n  return e && e.defaultPrevented;\n}\n","/**\n * Stores registered handlers which has a key.\n *\n * @since 0.1.0\n */\nexport const handlerMap = new WeakMap<object, Array<{\n  elm: Document | Window | Element,\n  events: string,\n  callback: ( e: Event ) => void\n}>>();\n\nexport function on<K extends keyof DocumentEventMap>(\n  elm: Document,\n  events: K,\n  callback: ( e: DocumentEventMap[ K ] ) => void,\n  key?: object\n): void;\n\nexport function on<K extends keyof WindowEventMap>(\n  elm: Window,\n  events: K,\n  callback: ( e: WindowEventMap[ K ] ) => void,\n  key?: object\n): void;\n\nexport function on<K extends keyof HTMLElementEventMap>(\n  elm: HTMLElement,\n  events: K,\n  callback: ( e: HTMLElementEventMap[ K ] ) => void,\n  key?: object\n): void;\n\nexport function on<K extends keyof ElementEventMap>(\n  elm: Element,\n  events: K,\n  callback: ( e: ElementEventMap[ K ] ) => void,\n  key?: object\n): void;\n\nexport function on<T extends Event = Event>(\n  elm: Window | Document | Element,\n  events: string,\n  callback: ( e: T ) => void,\n  key?: object\n): void;\n\n/**\n * Attaches a handler to the event.\n *\n * @param elm      - An element, a window or a document.\n * @param events   - An event name or names.\n * @param callback - A handler to attach.\n * @param key      - Optional. The key for identifying the registered handler.\n */\nexport function on(\n  elm: Element | Window | Document,\n  events: string,\n  callback: ( e: Event ) => void,\n  key?: object\n): void {\n  events.split( ' ' ).forEach( event => {\n    elm.addEventListener( event, callback );\n\n    if ( key ) {\n      const handlers = handlerMap.get( key ) || [];\n      handlers.push( { elm, events, callback } );\n      handlerMap.set( key, handlers );\n    }\n  } );\n}\n","import { isFunction } from '../../type/type';\nimport { handlerMap } from '../on/on';\n\n\nexport function off<K extends keyof WindowEventMap>(\n  elm: Window,\n  events: K,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void;\n\nexport function off<K extends keyof DocumentEventMap>(\n  elm: Document,\n  events: K,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void;\n\nexport function off<K extends keyof HTMLElementEventMap>(\n  elm: HTMLElement,\n  events: K,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void;\n\nexport function off<K extends keyof SVGElementEventMap>(\n  elm: SVGElement,\n  events: K,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void;\n\nexport function off<K extends keyof ElementEventMap>(\n  elm: Element,\n  events: K,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void;\n\nexport function off<T extends Event = Event>(\n  elm: Window | Document | Element,\n  events: string,\n  callbackOrKey: object | ( ( e: T ) => void )\n): void;\n\n\n/**\n * Detaches a handler from the event or events.\n *\n * @param elm           - An element where events are removed.\n * @param events        - Optional. An event name or names.\n * @param callbackOrKey - Optional. A handler to remove or an object key.\n */\nexport function off(\n  elm: Window | Document | Element,\n  events: string,\n  callbackOrKey: object | ( ( e: Event ) => void )\n): void {\n  if ( isFunction( callbackOrKey ) ) {\n    events.split( ' ' ).forEach( event => {\n      elm.removeEventListener( event, callbackOrKey );\n    } );\n  } else {\n    const handlers = handlerMap.get( callbackOrKey );\n\n    if ( handlers ) {\n      handlers.forEach( handler => {\n        off( handler.elm, handler.events, handler.callback );\n      } );\n\n      handlerMap.delete( callbackOrKey );\n    }\n  }\n}\n","import { toArray } from '../../array';\r\n\r\n\r\n/**\r\n * Prepends children to the specified parent node.\r\n *\r\n * @param parent   - A parent node.\r\n * @param children - A child or children to prepend to the parent.\r\n */\r\nexport function prepend( parent: Node, children: Node | Node[] ): void {\r\n  toArray( children ).forEach( child => {\r\n    parent.insertBefore( child, parent.firstChild );\r\n  } );\r\n}\r\n","/**\r\n * Call the `preventDefault()` of the provided event.\r\n *\r\n * @param e               - An Event object.\r\n * @param stopPropagation - Optional. Whether to stop the event propergation or not.\r\n */\r\nexport function prevent( e: Event, stopPropagation?: boolean ): void {\r\n  if ( e ) {\r\n    if ( e.cancelable ) {\r\n      e.preventDefault();\r\n    }\r\n\r\n    if ( stopPropagation ) {\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Returns an element that matches the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return A found element or `null`.\r\n */\r\nexport function query<E extends Element = Element>( parent: Element | Document, selector?: string ): E | null {\r\n  return parent.querySelector( selector );\r\n}\r\n","/**\r\n * Returns elements that match the provided selector.\r\n *\r\n * @param parent   - A parent element to start searching from.\r\n * @param selector - A selector to query.\r\n *\r\n * @return The NodeList object that contains matched elements.\r\n */\r\nexport function queryAll<E extends Element = Element>( parent: Element | Document, selector: string ): NodeListOf<E> {\r\n  return parent.querySelectorAll( selector );\r\n}\r\n","/**\n * Returns a DOMRect object of the provided element or the selection range.\n *\n * @param target - An element or a range instance.\n */\nexport function rect( target: Element | Range ): DOMRect {\n  return target.getBoundingClientRect();\n}\n","import { toArray } from '../../array';\n\n\n/**\n * Removes the provided node from its parent.\n *\n * @param nodes - A node or nodes to remove.\n */\nexport function remove( nodes: Node | Node[] ): void {\n  toArray( nodes ).forEach( node => {\n    if ( node && node.parentNode ) {\n      node.parentNode.removeChild( node );\n    }\n  } );\n}\n","import { toggleClass } from '../toggleClass/toggleClass';\r\n\r\n\r\n/**\r\n * Removes classes from the element.\r\n *\r\n * @param elm     - An element to remove classes from.\r\n * @param classes - Classes to remove.\r\n */\r\nexport function removeClass( elm: Element, classes: string | string[] ): void {\r\n  toggleClass( elm, classes, false );\r\n}\r\n","import { forOwn } from '../../object';\nimport { isString, isUndefined } from '../../type/type';\n\n\n/**\n * The union for CSS style properties, such as \"padding\", \"fontSize\", etc.\n *\n * @since 0.1.0\n */\nexport type CSSStyleProperties = Exclude<keyof CSSStyleDeclaration, number>;\n\nexport function styles(\n  elm: HTMLElement,\n  styles: Record<string, string | number>\n): void;\n\nexport function styles<K extends CSSStyleProperties>(\n  elm: HTMLElement,\n  styles: K\n): CSSStyleDeclaration[ K ];\n\nexport function styles(\n  elm: HTMLElement,\n  styles: string\n): string;\n\n\n/**\n * Applies inline styles to the provided element by an object literal.\n *\n * @param elm    - An element to apply styles to.\n * @param styles - An object literal with styles.\n */\nexport function styles<K extends CSSStyleProperties>(\n  elm: HTMLElement,\n  styles: Record<string, string | number> | K\n): CSSStyleDeclaration[ K ] | void {\n  if ( isString( styles ) ) {\n    return getComputedStyle( elm )[ styles ];\n  }\n\n  forOwn( styles, ( value, key ) => {\n    if ( ! isUndefined( value ) ) {\n      elm.style[ key ] = String( value );\n    }\n  } );\n}\n","import { toArray } from '../../array';\r\nimport { assign } from '../../object';\r\nimport { joinAttrs } from '../joinAttrs/joinAttrs';\r\n\r\n\r\n/**\r\n * Returns an open tag with provided classes.\r\n *\r\n * @param classes - Classes.\r\n * @param attrs   - Optional. An object with attributes.\r\n * @param tag     - Optional. A tag name.\r\n */\r\nexport function tag(\r\n  classes: string | string[],\r\n  attrs: Record<string, string | number | boolean> = {},\r\n  tag?: string\r\n): string {\r\n  return `<${ tag || 'div' } ${ joinAttrs( assign( attrs, {\r\n    class: toArray( classes ).filter( Boolean ).join( ' ' ),\r\n  } ) ) }>`;\r\n}\r\n","import { forOwn } from '../../object';\n\n\n/**\n * Joins the provided object as a single line for DOM attributes.\n *\n * @param attrs - An object literal for attributes.\n *\n * @return A single string containing all attributes.\n */\nexport function joinAttrs( attrs: Record<string, string | number | boolean> ): string {\n  let result = '';\n\n  forOwn( attrs, ( value, prop ) => {\n    if ( prop && ( value || value === false || value === 0 ) ) {\n      result += ` ${ prop }=\"${ value }\"`;\n    }\n  } );\n\n  return result.trim();\n}\n","import { isUndefined } from '../../type/type';\n\n\nexport function text( node: Node ): string;\nexport function text( node: Node, text: string ): void;\n\n/**\n * Sets or gets a text content of the provided node.\n *\n * @param node - A node to get or set a text.\n * @param text - Optional. A text to set.\n */\nexport function text( node: Node, text?: string ): string | void {\n  if ( node ) {\n    if ( isUndefined( text ) ) {\n      return node.textContent;\n    }\n\n    node.textContent = text;\n  }\n}\n","import { isString } from '../../type/type';\n\n\n/**\n * Appends `px` to the value.\n * If the value is already string, just returns it.\n *\n * @param value - A value to append `px` to.\n */\nexport function unit( value: number | string ): string {\n  return isString( value ) ? value : `${ value }px`;\n}\n","/**\n * Checks is the browser is IE or not.\n *\n * @return `true` if the browser is IE, or otherwise `false`.\n */\nexport function isIE(): boolean {\n  return /*@cc_on!@*/false || !! document[ 'documentMode' ];\n}\n","import { isAndroid } from '../isAndroid/isAndroid';\r\nimport { isIOS } from '../isIOS/isIOS';\r\n\r\n\r\n/**\r\n * Checks if the device is likely mobile or not.\r\n *\r\n * @return `true` if the device is likely mobile, or otherwise `false`.\r\n */\r\nexport function isMobile(): boolean {\r\n  return isAndroid() || isIOS();\r\n}\r\n","/**\r\n * Checks if the client is Android or not.\r\n *\r\n * @return `true` if the client is Android, or otherwise `false`.\r\n */\r\nexport function isAndroid(): boolean {\r\n  return /android/i.test( navigator.userAgent );\r\n}\r\n","/**\r\n * Checks if the client is iOS or not.\r\n *\r\n * @return `true` if the client is iOS, or otherwise `false`.\r\n */\r\nexport function isIOS(): boolean {\r\n  const { userAgent } = navigator;\r\n  return /iPad|iPhone|iPod/.test( userAgent )\r\n    || ( userAgent.indexOf( 'Mac' ) > -1 && navigator.maxTouchPoints > 1 );\r\n}\r\n","/**\n * The project code.\n *\n * @since 0.1.0\n */\nexport const PROJECT_CODE = 'ryuseicode';\n\n/**\n * The abbreviated project code.\n *\n * @since 0.1.0\n */\nexport const PROJECT_CODE_SHORT = 'rc';\n","import { PROJECT_CODE } from '../../../constants/project';\r\n\r\n\r\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message to display.\r\n */\r\nexport function assert( condition: any, message = '' ): void {\r\n  if ( ! condition ) {\r\n    throw new Error( `[${ PROJECT_CODE }] ${ message }` );\r\n  }\r\n}\r\n","import { AnyFunction } from '@ryusei/code';\nimport { isUndefined } from '../../type/type';\n\n\n/**\n * The interface for a throttled function.\n *\n * @since 0.1.0\n */\nexport interface Throttle<F extends AnyFunction = AnyFunction> extends Function {\n  ( ...args: Parameters<F> ): void,\n\n  /**\n   * Cancels the active timer.\n   */\n  cancel: () => void;\n\n  /**\n   * Invokes the pending process immediately.\n   */\n  invoke: () => void;\n}\n\n/**\n * Returns a function that invokes the provided function at most once in the specified duration.\n *\n * @since 0.1.0\n *\n * @param func        - A function to throttle.\n * @param interval    - A throttle duration in milliseconds.\n * @param initialCall - Optional. Determines whether to call the function initially.\n * @param debounce    - Optional. If `true`, the function returns a debounced function instead of throttled one.\n * @param raf         - Optional. Determines whether to use the `requestAnimationFrame` or not.\n *\n * @return A throttled function.\n */\nexport function throttle<F extends AnyFunction = AnyFunction>(\n  func: F,\n  interval: number,\n  initialCall?: boolean,\n  debounce?: boolean,\n  raf?: boolean\n): Throttle<F> {\n  let id: any;\n  let invoker: () => void;\n\n  function throttled( this: ThisParameterType<F>, ...args: Parameters<F> ): void {\n    if ( debounce ) {\n      cancel();\n    }\n\n    invoker = invoke.bind( this, ...args );\n\n    if ( ! id ) {\n      if ( isUndefined( id ) && initialCall ) {\n        invoker();\n      } else {\n        id = raf ? requestAnimationFrame( invoker ) : setTimeout( invoker, interval );\n      }\n    }\n  }\n\n  function invoke( this: ThisParameterType<F>, ...args: Parameters<F> ): void {\n    func.apply( this, args );\n    cancel();\n  }\n\n  function cancel(): void {\n    raf ? cancelAnimationFrame( id ) : clearTimeout( id );\n    id = null;\n  }\n\n  throttled.cancel = cancel;\n\n  throttled.invoke = () => {\n    if ( id ) {\n      invoker();\n    }\n  };\n\n  return throttled;\n}\n","import { AnyFunction } from '@ryusei/code';\r\nimport { Throttle, throttle } from '../throttle/throttle';\r\n\r\n\r\n/**\r\n * Returns a debounced function that invokes the provided function only after the internal timer expires.\r\n * The timer is reset whenever the debounced function is called.\r\n *\r\n * @param func     - A callback function.\r\n * @param duration - Debounce duration in milliseconds.\r\n *\r\n * @return A debounced function.\r\n */\r\nexport function debounce<F extends AnyFunction = AnyFunction>( func: AnyFunction, duration: number ): Throttle<F> {\r\n  return throttle( func, duration, false, true );\r\n}\r\n","import { AnyFunction } from '@ryusei/code';\r\n\r\n\r\n/**\r\n * Fires the provided function on the next tick.\r\n *\r\n * @param func - A function to call.\r\n */\r\nexport function nextTick( func: AnyFunction ): void {\r\n  setTimeout( func );\r\n}\r\n","import { AnyFunction } from '@ryusei/code';\r\nimport { Throttle, throttle } from '../throttle/throttle';\r\n\r\n\r\n/**\r\n * Implements the `throttle` function via requestAnimationFrame.\r\n *\r\n * @param func - A function to throttle.\r\n * @param initialCall - Optional. Determines whether to call the function initially.\r\n *\r\n * @return A throttled function.\r\n */\r\nexport function rafThrottle<F extends AnyFunction = AnyFunction>(\r\n  func: F,\r\n  initialCall?: boolean\r\n): Throttle<F> {\r\n  return throttle( func, 0, initialCall, false, true );\r\n}\r\n","/**\n * The collection of forward arrow keys.\n *\n * @private\n * @since 0.1.0\n */\nexport const ARROW_FORWARD = [\n  'ArrowDown',\n  'ArrowRight',\n];\n\n/**\n * The collection of backward arrow keys.\n *\n * @private\n * @since 0.1.0\n */\nexport const ARROW_BACKWARD = [\n  'ArrowUp',\n  'ArrowLeft',\n];\n\n/**\n * The collection of all arrow keys.\n *\n * @private\n * @since 0.1.0\n */\nexport const ARROW_KEYS = [\n  ...ARROW_FORWARD,\n  ...ARROW_BACKWARD,\n];\n\n\n/**\n * The map for normalizing differences of keys in browsers.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\n *\n * @private\n * @since 0.1.0\n */\nexport const NORMALIZATION_MAP = {\n  Up      : 'ArrowUp',\n  Down    : 'ArrowDown',\n  Right   : 'ArrowRight',\n  Left    : 'ArrowLeft',\n  Del     : 'Delete',\n  Esc     : 'Escape',\n  Spacebar: ' ',\n};\n","import { NORMALIZATION_MAP } from '../../../constants/keys';\n\n\n/**\n * Normalizes the provided key for different browsers.\n *\n * @param key - A key to normalize.\n */\nexport function normalizeKey( key: string ): string {\n  return NORMALIZATION_MAP[ key ] || key;\n}\n","import { KeyMatcher } from '@ryusei/code';\r\nimport { toArray } from '../../array';\r\nimport { normalizeKey } from '../normalizeKey/normalizeKey';\r\n\r\n\r\n/**\r\n * Checks if the keyboard event matches the provided matcher or not.\r\n *\r\n * @param e        - A KeyboardEvent object.\r\n * @param matchers - A KeyMatcher tuple or an array with matchers.\r\n *\r\n * @return `true` if the keyboard event satisfies the matcher, or otherwise `false`.\r\n */\r\nexport function matchesKey( e: KeyboardEvent, matchers: KeyMatcher | KeyMatcher[] | null | false ): boolean {\r\n  const key = normalizeKey( e.key ).toUpperCase();\r\n\r\n  return matchers && toArray( matchers, true ).some( matcher => {\r\n    return key === matcher[ 0 ].toUpperCase()\r\n      && ! matcher[ 1 ] === ! e.ctrlKey\r\n      && ! matcher[ 2 ] === ! e.shiftKey\r\n      && ! matcher[ 3 ] === ! e.altKey;\r\n  } );\r\n}\r\n","/**\r\n * Checks if the subject number is between `minOrMax` and `maxOrMin`.\r\n *\r\n * @param number    - A subject number to check.\r\n * @param minOrMax  - A min or max number.\r\n * @param maxOrMin  - A max or min number.\r\n * @param exclusive - Optional. Whether to exclude `x` or `y`.\r\n */\r\nexport function between( number: number, minOrMax: number, maxOrMin: number, exclusive?: boolean ): boolean {\r\n  const min = Math.min( minOrMax, maxOrMin );\r\n  const max = Math.max( minOrMax, maxOrMin );\r\n  return exclusive ? min < number && number < max : min <= number && number <= max;\r\n}\r\n","const { max, min } = Math;\r\n\r\n/**\r\n * Clamps a number.\r\n *\r\n * @param number - A subject number to check.\r\n * @param x      - A min or max number.\r\n * @param y      - A min or max number.\r\n */\r\nexport function clamp( number: number, x: number, y: number ): number {\r\n  const minimum = min( x, y );\r\n  const maximum = max( x, y );\r\n  return min( max( minimum, number ), maximum );\r\n}\r\n","export { between } from './between/between';\r\nexport { clamp }   from './clamp/clamp';\r\n\r\nexport const { min, max, floor, ceil, abs, round } = Math;\r\n","import { Position } from '@ryusei/code';\r\n\r\n\r\n/**\r\n * Compares the provided 2 positions.\r\n *\r\n * @return If the `position1` is preceding, returns a negative number,\r\n *         or if it is following, returns a positive one. If they are same, returns `0`.\r\n */\r\nexport function compare( position1: Position, position2: Position ): number {\r\n  return position1[ 0 ] - position2[ 0 ] || position1[ 1 ] - position2[ 1 ];\r\n}\r\n","/**\n * The alias of document.createRange.\n * The Range constructor is not supported by IE.\n *\n * @since 0.1.0\n *\n * @return A Range instance.\n */\nexport function createRange(): Range {\n  return document.createRange();\n}\n","/**\n * The alias of window.getSelection.\n *\n * @since 0.1.0\n *\n * @return A Selection instance.\n */\nexport function getSelection(): Selection {\n  return window.getSelection();\n}\n","import { SelectionBoundary } from '@ryusei/code';\r\nimport { isText } from '../../type/type';\r\n\r\n\r\n/**\r\n * Finds a node that the offset number belongs to.\r\n *\r\n * @param elm    - An element to find in.\r\n * @param offset - An offset index.\r\n *\r\n * @return An object that contains a found node and a offset number.\r\n */\r\nexport function findSelectionBoundary( elm: Element, offset: number ): SelectionBoundary | null {\r\n  const children = elm.childNodes;\r\n\r\n  if ( ! children.length && ! offset ) {\r\n    return { node: elm, offset: 0 };\r\n  }\r\n\r\n  if ( offset <= elm.textContent.length ) {\r\n    for ( let i = 0; i < children.length; i++ ) {\r\n      const node   = children[ i ];\r\n      const length = node.textContent.length;\r\n\r\n      if ( isText( node ) ) {\r\n        if ( offset <= length ) {\r\n          return { node, offset };\r\n        }\r\n      } else if ( node instanceof Element ) {\r\n        const found = findSelectionBoundary( node, offset );\r\n\r\n        if ( found ) {\r\n          return found;\r\n        }\r\n      }\r\n\r\n      offset -= length;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n","/**\n * Counts the search string occurrence in the provided sting.\n *\n * @param string - A string to search in.\n * @param search - A string to search for.\n * @param from   - An index to search from.\n * @param to     - An index to search to.\n *\n * @return A number of occurrence.\n */\nexport function count( string: string, search: string, from = 0, to = string.length ): number {\n  if ( from || to !== string.length ) {\n    string = string.slice( from, to );\n  }\n\n  return ( string.match( new RegExp( search, 'g' ) ) || [] ).length;\n}\n","/**\n * Checks if the string ends with the `search` string or not.\n *\n * @param string - A string to check.\n * @param search - A string to search.\n *\n * @return `true` if the string ends with the `search`, or otherwise `false`.\n */\nexport function endsWith( string: string, search: string ): boolean {\n  return string.slice( - search.length ) === search;\n}\n","/**\n * Escapes string for the RegExp source.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n *\n * @param string - A string to escape.\n */\nexport function escapeRegExp( string: string ): string {\n  return string.replace( /[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&' );\n}\n","/**\n * Formats a string.\n *\n * @param string       - A string to format.\n * @param replacements - A replacement or replacements.\n *\n * @return A formatted string.\n */\nexport function format( string: string, ...replacements: Array<string | number> ): string {\n  for ( let i = 0; i < replacements.length; i++ ) {\n    string = string.replace( '%s', String( replacements[ i ] ) );\n  }\n\n  return string;\n}\n","/**\n * Returns the index within the provided string of the nth occurrence.\n * The optional `from` index determines the start position to search the target from.\n *\n * @param string - A string to search in.\n * @param search - A string to search startsWith\n * @param nth    - A number of the occurrence.\n * @param from   - Optional. A start index to search from.\n *\n * @return An index if the nth occurrence of the `search` string is found, or `-1` if not.\n */\nexport function nthIndexOf( string: string, search: string, nth: number, from = 0 ): number {\n  let index = from - 1;\n  let count = nth;\n\n  while( ( index !== -1 || nth === count ) && count-- ) {\n    index = string.indexOf( search, index + 1 );\n  }\n\n  return index;\n}\n","import { floor } from '../../math';\r\n\r\n\r\n/**\r\n * Returns a new string filled with a number of copies of the provided string.\r\n *\r\n * @param string - A string to repeat.\r\n * @param count  - An integer for determining the number of repeats.\r\n *\r\n * @return A new string containing copies of the provided string.\r\n */\r\nexport function repeat( string: string, count: number ): string {\r\n  if ( ! String.prototype.repeat ) {\r\n    let result = '';\r\n\r\n    while ( count > 0 ) {\r\n      if ( count % 2 ) {\r\n        result += string;\r\n      }\r\n\r\n      count = floor( count / 2 );\r\n      string += string;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  return string.repeat( count );\r\n}\r\n","/**\n * Checks if the string starts with the `search` string or not.\n *\n * @param string - A string to check.\n * @param search - A string to search.\n *\n * @return `true` if the string starts with the `search`, or otherwise `false`.\n */\nexport function startsWith( string: string, search: string ): boolean {\n  return string.slice( 0, search.length ) === search;\n}\n","const ids: Record<string, number> = {};\n\n/**\n * Returns a sequential unique ID as \"{ prefix }-{ number }\".\n *\n * @param prefix - A prefix for the ID.\n */\nexport function uniqueId( prefix: string ): string {\n  const number   = ( ids[ prefix ] || 0 ) + 1;\n  const idNumber = number < 10 ? `0${ number }` : number;\n\n  ids[ prefix ] = number;\n\n  return `${ prefix }${ idNumber }`;\n}\n","import {\n  Elements,\n  EventBusCallback,\n  Extensions,\n  IconSettings, KeyMatcher,\n  Language,\n  LanguageConfig,\n  Options,\n  Position,\n} from '@ryusei/code';\nimport { AnyFunction } from '@ryusei/light/dist/types/types';\nimport {\n  Caret,\n  Chunk,\n  Code,\n  ContextMenu,\n  Edit,\n  Input,\n  Keymap,\n  Measure,\n  Range,\n  Scope,\n  Selection,\n  Style,\n  Sync,\n  View,\n} from '../../components';\nimport { Lines } from '../../components/Code/Lines';\nimport { Editor } from '../../core/Editor/Editor';\nimport { EventBus } from '../../event/EventBus';\nimport { assert, assign, forOwn, isObject, isUndefined, off, on } from '../../utils';\n\n\n/**\n * The base class for a component.\n *\n * @since 0.1.0\n */\nexport class Component {\n  /**\n   * The EventBus instance.\n   * Use `on()`, `off()` and `emit()` methods instead of this.\n   */\n  protected readonly event: EventBus<Editor>;\n\n  /**\n   * The collection of all options.\n   */\n  protected readonly options: Options;\n\n  /**\n   * The Editor instance.\n   */\n  protected Editor: Editor;\n\n  /**\n   * The Caret instance.\n   */\n  protected Caret: Caret;\n\n  /**\n   * The Chunk instance.\n   */\n  protected Chunk: Chunk;\n\n  /**\n   * The Code instance.\n   */\n  protected Code: Code;\n\n  /**\n   * The ContextMenu instance.\n   */\n  protected ContextMenu: ContextMenu;\n\n  /**\n   * The Edit instance.\n   */\n  protected Edit: Edit;\n\n  /**\n   * The Input instance.\n   */\n  protected Input: Input;\n\n  /**\n   * The Input instance.\n   */\n  protected Keymap: Keymap;\n\n  /**\n   * The Measure instance.\n   */\n  protected Measure: Measure;\n\n  /**\n   * The Range instance.\n   */\n  protected Range: Range;\n\n  /**\n   * The Scope instance.\n   */\n  protected Scope: Scope;\n\n  /**\n   * The Selection instance.\n   */\n  protected Selection: Selection;\n\n  /**\n   * The Style instance.\n   */\n  protected Style: Style;\n\n  /**\n   * The Sync instance.\n   */\n  protected Sync: Sync;\n\n  /**\n   * The View instance.\n   */\n  protected View: View;\n\n  /**\n   * The collection of essential editor elements.\n   */\n  protected elements: Elements;\n\n  /**\n   * The Language object.\n   */\n  protected language: Language;\n\n  /**\n   * The Component constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    this.Editor   = Editor;\n    this.event    = Editor.event;\n    this.options  = Editor.options;\n    this.language = Editor.language;\n  }\n\n  /**\n   * Called when the component is mounted.\n   *\n   * @param elements - A collection of editor elements.\n   */\n  mount( elements: Elements ): void {\n    this.elements = elements;\n\n    forOwn( this.Editor.Components, ( Component, key ) => {\n      this[ key ] = Component;\n    } );\n  }\n\n  /**\n   * Called when the editor is destroyed.\n   *\n   * @internal\n   */\n  destroy(): void {\n    off( null, '', this );\n  }\n\n  /**\n   * Attaches an event handler to an event or events with passing this instance as a key.\n   * They can only be detached by the `off()` member method.\n   *\n   * @param events   - An event name, names split by spaces, or an array with names.\n   * @param callback - A callback function.\n   * @param thisArg  - Optional. Specifies the `this` parameter of the callback function.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   */\n  protected on<F extends EventBusCallback>(\n    events: string | string[],\n    callback: EventBusCallback,\n    thisArg?: ThisParameterType<F>,\n    priority?: number\n  ): void {\n    this.event.on( events, thisArg ? callback.bind( thisArg ) : callback, this, priority );\n  }\n\n  /**\n   * Detaches handlers registered by `on()` without removing handlers attached by other components.\n   *\n   * @param events - An event name, names split by spaces, or an array with names.\n   */\n  protected off( events: string | string[] ): void {\n    this.event.off( events, this );\n  }\n\n  /**\n   * Triggers handlers attached to the event.\n   *\n   * @param event - An event name.\n   * @param args  - Optional. Any number of arguments to pass to callback functions.\n   */\n  protected emit( event: string, ...args: any[] ): void {\n    this.event.emit( event, ...args );\n  }\n\n  /**\n   * Listens to native events.\n   * This method stores all listeners and automatically removes them on destruction.\n   *\n   * @param elm      - A document, a window or an element.\n   * @param events   - An event name or names split by spaces.\n   * @param callback - A callback function.\n   * @param thisArg  - Optional. Specifies the `this` parameter of the callback function.\n   */\n  protected bind<F extends ( e: Event ) => void>(\n    elm: Document | Window | Element,\n    events: string,\n    callback: F,\n    thisArg?: ThisParameterType<F>\n  ): void {\n    on( elm, events, thisArg ? callback.bind( thisArg ) : callback, this );\n  }\n\n  /**\n   * Returns a Language or LanguageConfig object at the focus or specified position.\n   * This method can return different objects depending on the position\n   * if the language allows to embed other languages, such as HTML and PHP.\n   *\n   * @param position - Optional. Specifies the position to get the language at.\n   *\n   * @return A main Language object or sub language config object.\n   */\n  protected getLanguage( position?: Position ): Language | LanguageConfig {\n    position = position || this.Selection.focus;\n\n    const { language } = this;\n    const info = this.lines.getInfoAt( position );\n\n    if ( info && info.language && language.use && language.use[ info.language ] ) {\n      return language.use[ info.language ].config;\n    }\n\n    return language;\n  }\n\n  /**\n   * Attempts to invoke the public method of the specified extension.\n   * In terms of the \"loose coupling\", you'd better try not to use this method.\n   * Using events is enough in most cases.\n   *\n   * @example\n   * ```ts\n   * // Attempts to show the \"search\" toolbar.\n   * Editor.invoke( 'Toolbar', 'show', 'search' );\n   * ```\n   *\n   * @param name   - A name of the extension.\n   * @param method - A method name to invoke.\n   * @param args   - Optional. Arguments for the method.\n   *\n   * @return The return value of the method.\n   */\n  protected invoke< K extends keyof Extensions, P extends keyof Extensions[ K ], V extends Extensions[ K ][ P ]>(\n    name: K,\n    method: P,\n    ...args: V extends AnyFunction ? Parameters<V> : any[]\n  ): V extends AnyFunction ? ReturnType<V> : void {\n    return this.Editor.invoke( name, method, ...args );\n  }\n\n  /**\n   * Returns the specified extension.\n   * In terms of the \"loose coupling\", you'd better try not to use this method.\n   * Using events is enough in most cases.\n   *\n   * @param name - A name of an extension.\n   *\n   * @return An extension if found, or otherwise `undefined`.\n   */\n  protected require<K extends keyof Extensions>( name: K ): Extensions[ K ] | undefined {\n    return this.Editor.require( name );\n  }\n\n  /**\n   * Adds default icon strings. They can be still overridden by options.\n   * The IconSettings is a tuple as `[ string, number?, string? ]` corresponding with `[ path, stroke?, linecap? ]`.\n   *\n   * @example\n   * ```ts\n   * this.addIcons( {\n   *   myIcon: [\n   *     'm19 18-14-13m0 13 14-13',\n   *     3,\n   *   ],\n   * } );\n   * ```\n   *\n   * @param icons - Icon settings to add.\n   */\n  protected addIcons( icons: Record<string, IconSettings> ): void {\n    const { options } = this;\n    options.icons = assign( {}, icons, options.icons );\n  }\n\n  /**\n   * Adds default i18n strings. They can be still overridden by options.\n   *\n   * @example\n   * ```ts\n   * this.addI18n( {\n   *   myMessage: 'Hello!',\n   * } );\n   * ```\n   *\n   * @param i18n - Additional i18n strings.\n   */\n  protected addI18n( i18n: Record<string, string> ): void {\n    const { options } = this;\n    options.i18n = assign( {}, i18n, options.i18n );\n  }\n\n  /**\n   * Adds default shortcuts to the keymap object. They can be still overridden by options.\n   * Call this method before RyuseiCode mounts components so that the Keymap component recognizes shortcuts.\n   *\n   * @example\n   * ```js\n   * class MyExtension extends Component {\n   *   constructor( Editor ) {\n   *     super( Editor );\n   *\n   *     this.addKeyBindings( {\n   *       myShortcut: [ 'P', true, true ],\n   *     } );\n   *   }\n   * }\n   * ```\n   *\n   * @param shortcuts - Additional shortcuts.\n   */\n  protected addKeyBindings( shortcuts: Record<string, KeyMatcher | KeyMatcher[]> ): void {\n    const { options } = this;\n    options.keymap = assign( {}, shortcuts, options.keymap );\n  }\n\n  /**\n   * Returns options for each extension, merging provided default values.\n   *\n   * @example\n   * ```js\n   * class MyExtension extends Component {\n   *   constructor( Editor ) {\n   *     super( Editor );\n   *\n   *     const extensionOptions = this.getOptions( 'myExtension', { option1: true } );\n   *   }\n   * }\n   * ```\n   *\n   * @param name     - An option name.\n   * @param defaults - Default values.\n   *\n   * @return A merged options, or `null`.\n   */\n  protected getOptions<T extends object>( name: string, defaults?: T ): T {\n    const options = this.options[ name ];\n\n    if ( isUndefined( options ) || options === true ) {\n      return defaults || {} as T;\n    }\n\n    if ( isObject( options ) ) {\n      return assign( {}, defaults, options );\n    }\n\n    assert( false );\n  }\n\n  /**\n   * Returns the latest Lines instance.\n   * This is an alias of `Code#Lines`.\n   *\n   * @return The Lines instance.\n   */\n  get lines(): Lines {\n    return this.Code.Lines;\n  }\n\n  /**\n   * Returns the i18n collection.\n   * This is an alias of `this.options.i18n`.\n   *\n   * @return The object with i18n strings.\n   */\n  get i18n(): Record<string, string> {\n    return this.options.i18n;\n  }\n}\n","import { PROJECT_CODE, PROJECT_CODE_SHORT } from './project';\n\n\nexport const CLASS_ROOT                  = PROJECT_CODE;\nexport const CLASS_VIEW                  = `${ PROJECT_CODE }__view`;\nexport const CLASS_BODY                  = `${ PROJECT_CODE }__body`;\nexport const CLASS_SCROLLER              = `${ PROJECT_CODE }__scroller`;\nexport const CLASS_CONTAINER             = `${ PROJECT_CODE }__container`;\nexport const CLASS_EDITOR                = `${ PROJECT_CODE }__editor`;\nexport const CLASS_TEXTAREA              = `${ PROJECT_CODE }__textarea`;\nexport const CLASS_SCROLLBARS            = `${ PROJECT_CODE }__scrollbars`;\nexport const CLASS_SCROLLBAR             = `${ PROJECT_CODE }__scrollbar`;\nexport const CLASS_LINES                 = `${ PROJECT_CODE }__lines`;\nexport const CLASS_LINE                  = `${ PROJECT_CODE }__line`;\nexport const CLASS_SOURCE                = `${ PROJECT_CODE }__source`;\nexport const CLASS_BACKGROUND            = `${ PROJECT_CODE }__background`;\nexport const CLASS_CARETS                = `${ PROJECT_CODE }__carets`;\nexport const CLASS_CARET                 = `${ PROJECT_CODE }__caret`;\nexport const CLASS_MARKERS               = `${ PROJECT_CODE }__markers`;\nexport const CLASS_MARKER                = `${ PROJECT_CODE }__marker`;\nexport const CLASS_OVERLAY               = `${ PROJECT_CODE }__overlay`;\nexport const CLASS_CONTEXT_MENU          = `${ PROJECT_CODE }__context-menu`;\nexport const CLASS_CONTEXT_MENU_GROUP    = `${ CLASS_CONTEXT_MENU }__group`;\nexport const CLASS_CONTEXT_MENU_LIST     = `${ CLASS_CONTEXT_MENU }__list`;\nexport const CLASS_CONTEXT_MENU_ITEM     = `${ CLASS_CONTEXT_MENU }__item`;\nexport const CLASS_CONTEXT_MENU_BUTTON   = `${ CLASS_CONTEXT_MENU }__button`;\nexport const CLASS_CONTEXT_MENU_LABEL    = `${ CLASS_CONTEXT_MENU_BUTTON }__label`;\nexport const CLASS_CONTEXT_MENU_SHORTCUT = `${ CLASS_CONTEXT_MENU_BUTTON }__shortcut`;\nexport const CLASS_TOKEN                 = `${ PROJECT_CODE_SHORT }__token`;\nexport const CLASS_INPUT                 = `${ PROJECT_CODE }__input`;\nexport const CLASS_BUTTON                = `${ PROJECT_CODE }__button`;\nexport const CLASS_ICON                  = `${ PROJECT_CODE }__icon`;\nexport const CLASS_PLACEHOLDER           = `${ PROJECT_CODE }__placeholder`;\n\nexport const CLASS_ACTIVE      = 'is-active';\nexport const CLASS_RENDERED    = 'is-rendered';\nexport const CLASS_INITIALIZED = 'is-initialized';\nexport const CLASS_ANCHOR      = 'is-anchor';\nexport const CLASS_FOCUS       = 'is-focus';\nexport const CLASS_PRESERVED   = 'is-preserved';\nexport const CLASS_FOCUSED     = 'is-focused';\nexport const CLASS_READONLY    = 'is-readonly';\nexport const CLASS_DRAGGING    = 'is-dragging';\nexport const CLASS_EMPTY       = 'is-empty';\nexport const CLASS_MOBILE      = 'is-mobile';\n","export const EVENT_MOUNT                 = 'mount';\nexport const EVENT_MOUNTED               = 'mounted';\nexport const EVENT_FOCUS                 = 'focus';\nexport const EVENT_BLUR                  = 'blur';\nexport const EVENT_READONLY              = 'readOnly';\nexport const EVENT_KEYDOWN               = 'keydown';\nexport const EVENT_INPUT                 = 'input';\nexport const EVENT_NEWLINE               = 'newline';\nexport const EVENT_CHANGE                = 'change';\nexport const EVENT_CHANGED               = 'changed';\nexport const EVENT_COMPOSITION_START     = 'compositionStart';\nexport const EVENT_COMPOSITION_UPDATE    = 'compositionUpdate';\nexport const EVENT_COMPOSITION_END       = 'compositionEnd';\nexport const EVENT_ANCHOR_LINE_CHANGED   = 'anchorLineChanged';\nexport const EVENT_FOCUS_LINE_CHANGED    = 'focusLineChanged';\nexport const EVENT_COPY                  = 'copy';\nexport const EVENT_CUT                   = 'cut';\nexport const EVENT_PASTE                 = 'paste';\nexport const EVENT_KEYMAP                = 'keymap';\nexport const EVENT_CHUNK_MOVED           = 'chunkMoved';\nexport const EVENT_CHUNK_SUPPLIED        = 'chunkSupplied';\nexport const EVENT_SELECTING             = 'selecting';\nexport const EVENT_SELECTED              = 'selected';\nexport const EVENT_SELECTION_CHANGE      = 'selectionChanged';\nexport const EVENT_SCROLL                = 'scroll';\nexport const EVENT_SCROLLED              = 'scrolled';\nexport const EVENT_SCROLLER_SCROLL       = 'scrollerScroll';\nexport const EVENT_WINDOW_SCROLL         = 'windowScroll';\nexport const EVENT_RESIZE                = 'resize';\nexport const EVENT_SCROLL_WIDTH_CHANGED  = 'scrollWidthChanged';\nexport const EVENT_SCROLL_HEIGHT_CHANGED = 'scrollHeightChanged';\nexport const EVENT_SYNCED                = 'synced';\nexport const EVENT_CONTEXT_MENU_OPENED   = 'contextMenuOpened';\nexport const EVENT_CONTEXT_MENU_CLOSED   = 'contextMenuClosed';\nexport const EVENT_CONTEXT_MENU_CLICKED  = 'contextMenuClicked';\nexport const EVENT_RESET                 = 'reset';\nexport const EVENT_INIT_STYLE            = 'initStyle';\nexport const EVENT_FONT_LOADED           = 'fontLoaded';\nexport const EVENT_DESTROYED             = 'destroyed';\n","/**\n * The editor is not active.\n */\nexport const IDLE = 0;\n\n/**\n * The selection is collapsed.\n */\nexport const COLLAPSED = 1;\n\n/**\n * The selection will change soon. The native selection has not been updated at this timing.\n */\nexport const START = 2;\n\n/**\n * The selection has just changed after the `START` state. The native selection has been updated.\n */\nexport const CHANGED = 3;\n\n/**\n * The selection has been programmatically updated.\n */\nexport const UPDATE = 4;\n\n/**\n * An user is selecting a document.\n */\nexport const SELECTING = 5;\n\n/**\n * The existing selection is being extended.\n */\nexport const EXTEND = 6;\n\n/**\n * User finishes the selection. The native selection has not been updated at this timing (in Gecko).\n */\nexport const END = 7;\n\n/**\n * The selection is settled and it is not collapsed.\n */\nexport const SELECTED = 8;\n\n/**\n * All contents are selected.\n */\nexport const SELECTED_ALL = 9;\n\n/**\n * The selection is right-clicked.\n */\nexport const CLICKED_RIGHT = 10;\n","import { Position } from '@ryusei/code';\nimport { CLASS_ACTIVE, CLASS_CARET } from '../../constants/classes';\nimport { EVENT_RESIZE } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { addClass, debounce, div, removeClass, styles, unit } from '../../utils';\n\n\n/**\n * The offset amount for the horizontal position of the caret.\n *\n * @since 0.1.0\n */\nconst HORIZONTAL_OFFSET = -1;\n\n/**\n * The debounce duration for the `blink` method.\n *\n * @since 0.1.0\n */\nconst BLINK_DEBOUNCE_DURATION = 30;\n\n/**\n * The class for creating and controlling the caret element.\n *\n * @since 0.1.0\n */\nexport class CustomCaret {\n  /**\n   * The caret element.\n   */\n  readonly caret: HTMLDivElement;\n\n  /**\n   * Holds the Editor instance.\n   */\n  private readonly Editor: Editor;\n\n  /**\n   * Keeps the current position.\n   */\n  private position: Position;\n\n  /**\n   * The Caret constructor.\n   *\n   * @param Editor - An Editor instance.\n   * @param id     - An ID for the caret.\n   * @param parent - A parent element where the caret is appended.\n   */\n  constructor( Editor: Editor, id: string, parent: HTMLElement ) {\n    this.Editor = Editor;\n    this.caret  = div( [ CLASS_CARET, `${ CLASS_CARET }--${ id }` ], parent );\n    this.blink  = debounce( this.blink.bind( this ), BLINK_DEBOUNCE_DURATION );\n\n    Editor.event.on( EVENT_RESIZE, () => {\n      if ( this.position ) {\n        this.move( this.position );\n      }\n    } );\n  }\n\n  /**\n   * Moves the caret to the specified position.\n   *\n   * @param position - A position to set as [ row, col ].\n   */\n  move( position: Position ): void {\n    const { Measure } = this.Editor.Components;\n    const rect = Measure.getOffset( position );\n\n    styles( this.caret, {\n      top      : unit( rect.top ),\n      left     : unit( rect.left + HORIZONTAL_OFFSET ),\n      animation: 'none',\n    } );\n\n    this.blink();\n    this.position = position;\n  }\n\n  /**\n   * Displays the caret.\n   */\n  show(): void {\n    addClass( this.caret, CLASS_ACTIVE );\n  }\n\n  /**\n   * Hides the caret.\n   */\n  hide(): void {\n    removeClass( this.caret, CLASS_ACTIVE );\n  }\n\n  /**\n   * Starts the blink animation by removing the `none` value from the `animation`.\n   */\n  private blink(): void {\n    styles( this.caret, { animation: '' } );\n  }\n}\n","import { Elements, EventBusEvent } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { CLASS_CARETS } from '../../constants/classes';\nimport { EVENT_READONLY, EVENT_SELECTED, EVENT_SELECTING } from '../../constants/events';\nimport { CHANGED, COLLAPSED, SELECTED } from '../../constants/selection-states';\nimport { Editor } from '../../core/Editor/Editor';\nimport { assert, div, isIE, isMobile, rafThrottle } from '../../utils';\nimport { Selection } from '../Selection/Selection';\nimport { CustomCaret } from './CustomCaret';\n\n\n/**\n * The ID of the primary caret.\n *\n * @since 0.1.0\n */\nexport const PRIMARY_CARET_ID = 'primary';\n\n/**\n * The component for generating and handling carets.\n *\n * @since 0.1.0\n */\nexport class Caret extends Component {\n  /**\n   * The wrapper element that contains caret elements.\n   */\n  private wrapper: HTMLDivElement;\n\n  /**\n   * Stores the all registered Caret instances.\n   */\n  private carets: Record<string, CustomCaret> = {};\n\n  /**\n   * Holds the primary Caret instance.\n   */\n  private primary: CustomCaret;\n\n  /**\n   * Mounts the component.\n   * Uses the native caret on IE and mobile devices.\n   *\n   * @internal\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.create();\n\n    if ( ! isIE() && ! isMobile() ) {\n      this.register( PRIMARY_CARET_ID );\n      this.primary = this.get( PRIMARY_CARET_ID );\n      this.listen();\n    }\n  }\n\n  /**\n   * Creates a wrapper element that contains carets.\n   */\n  private create(): void {\n    this.wrapper = div( {\n      class        : CLASS_CARETS,\n      role         : 'presentation',\n      'aria-hidden': true,\n    }, this.elements.editor );\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    const { editable } = this.elements;\n    const { primary, Editor } = this;\n\n    this.bind( editable, 'focus', () => {\n      if ( ! Editor.readOnly ) {\n        primary.show();\n      }\n    } );\n\n    this.bind( editable, 'blur', () => {\n      primary.hide();\n    } );\n\n    this.update = rafThrottle( this.update.bind( this ), true );\n\n    this.on( EVENT_READONLY, ( e, readOnly ) => {\n      if ( readOnly ) {\n        primary.hide();\n      } else {\n        if ( Editor.isFocused() ) {\n          this.update();\n          primary.show();\n        }\n      }\n    } );\n\n    this.on( EVENT_SELECTED, this.onSelected, this );\n    this.on( EVENT_SELECTING, this.update );\n  }\n\n  /**\n   * Called when the selection state is changed.\n   *\n   * @param e         - An EventBusEvent object.\n   * @param Selection - A Selection instance.\n   */\n  private onSelected( e: EventBusEvent<Editor>, Selection: Selection ): void {\n    if ( ! this.Editor.readOnly ) {\n      if ( Selection.is( CHANGED, COLLAPSED, SELECTED ) ) {\n        this.update();\n      }\n    }\n  }\n\n  /**\n   * Updates the primary caret position on the animation frame.\n   */\n  private update(): void {\n    this.primary.move( this.Selection.get( false ).end );\n  }\n\n  /**\n   * Registers a new caret.\n   *\n   * @param id - The ID for the caret to register.\n   *\n   * @return The registered CustomCaret instance.\n   */\n  register( id: string ): CustomCaret {\n    const { carets } = this;\n    assert( ! carets[ id ] );\n\n    const caret = new CustomCaret( this.Editor, id, this.wrapper );\n    carets[ id ] = caret;\n\n    return caret;\n  }\n\n  /**\n   * Returns the primary or the specific CustomCaret instance.\n   *\n   * @param id - Optional. A caret ID.\n   *\n   * @return A CustomCaret instance if available, or otherwise `undefined`.\n   */\n  get( id = PRIMARY_CARET_ID ): CustomCaret | undefined {\n    return this.carets[ id ];\n  }\n\n  /**\n   * Returns the DOMRect object of the primary caret.\n   *\n   * @return A DOMRect object.\n   */\n  get rect(): DOMRect | null {\n    return this.Selection.getRect( true );\n  }\n}\n","import { Elements, EventBusEvent } from '@ryusei/code';\r\nimport { Component } from '../../classes/Component/Component';\r\nimport { CLASS_ANCHOR, CLASS_EMPTY, CLASS_FOCUS, CLASS_LINE, CLASS_PRESERVED } from '../../constants/classes';\r\nimport {\r\n  EVENT_ANCHOR_LINE_CHANGED,\r\n  EVENT_CHUNK_MOVED,\r\n  EVENT_CHUNK_SUPPLIED,\r\n  EVENT_FOCUS_LINE_CHANGED,\r\n  EVENT_RESIZE,\r\n  EVENT_SCROLL,\r\n  EVENT_SCROLL_HEIGHT_CHANGED,\r\n  EVENT_SCROLLED,\r\n  EVENT_SCROLLER_SCROLL,\r\n  EVENT_SELECTED,\r\n  EVENT_SELECTING,\r\n  EVENT_WINDOW_SCROLL,\r\n} from '../../constants/events';\r\nimport { CHANGED, COLLAPSED } from '../../constants/selection-states';\r\nimport { Editor } from '../../core/Editor/Editor';\r\nimport {\r\n  abs,\r\n  addClass,\r\n  append,\r\n  assert,\r\n  assign,\r\n  attr,\r\n  before,\r\n  between,\r\n  ceil,\r\n  clamp,\r\n  debounce,\r\n  div,\r\n  floor,\r\n  hasClass,\r\n  html,\r\n  max,\r\n  min,\r\n  prepend,\r\n  queryAll,\r\n  rafThrottle,\r\n  rect,\r\n  remove,\r\n  removeClass,\r\n  slice,\r\n  tag,\r\n  text,\r\n} from '../../utils';\r\nimport { Selection } from '../Selection/Selection';\r\nimport { MARGIN_LINES, SCROLL_END_DEBOUNCE_DURATION } from './constants';\r\n\r\n\r\n/**\r\n * The type for the data of the anchor or focus line.\r\n *\r\n * @since 0.1.0\r\n */\r\ntype LineBoundaryData = { line?: Element, row?: number };\r\n\r\n/**\r\n * The class for handling line elements.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport class Chunk extends Component {\r\n  /**\r\n   * Indicates what row corresponds with the first line element.\r\n   * The number can be negative.\r\n   *\r\n   * @readonly\r\n   */\r\n  start = 0;\r\n\r\n  /**\r\n   * The number of margin lines before and after visible lines.\r\n   * The total number of lines will be `margin * 2 + visibleLines`.\r\n   *\r\n   * @readonly\r\n   */\r\n  margin = MARGIN_LINES;\r\n\r\n  /**\r\n   * The number of visible lines calculated by the editor height and the line height.\r\n   *\r\n   * @readonly\r\n   */\r\n  visibleLines: number;\r\n\r\n  /**\r\n   * The current offset amount from the top of the scroller element in pixel.\r\n   *\r\n   * @readonly\r\n   */\r\n  offsetY = 0;\r\n\r\n  /**\r\n   * The anchor line data.\r\n   */\r\n  private anchor: LineBoundaryData = {};\r\n\r\n  /**\r\n   * The focus line data.\r\n   */\r\n  private focus: LineBoundaryData  = {};\r\n\r\n  /**\r\n   * Indicates whether the anchor line is changed or not.\r\n   */\r\n  private anchorChanged: boolean;\r\n\r\n  /**\r\n   * Indicates whether the focus line is changed or not.\r\n   */\r\n  private focusChanged: boolean;\r\n\r\n  /**\r\n   * Holds the previous scroll position.\r\n   */\r\n  private scrollTop = 0;\r\n\r\n  /**\r\n   * Holds the scroller element.\r\n   */\r\n  private scroller: HTMLElement;\r\n\r\n  /**\r\n   * Holds the parent element of lines.\r\n   */\r\n  private parent: HTMLElement;\r\n\r\n  /**\r\n   * Indicates the chunk is active or not.\r\n   */\r\n  private active: boolean;\r\n\r\n  /**\r\n   * Caches the border positions.\r\n   */\r\n  private borderCache: [ number, number ];\r\n\r\n  /**\r\n   * Initializes the component.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param elements - A collection of essential editor elements.\r\n   */\r\n  mount( elements: Elements ): void {\r\n    super.mount( elements );\r\n\r\n    const { scroller } = elements;\r\n\r\n    this.scroller   = scroller;\r\n    this.parent     = elements.lines;\r\n    this.scrollTop  = window.pageYOffset + scroller.scrollTop;\r\n    this.active     = this.isVisible();\r\n    this.onScrolled = debounce( this.onScrolled.bind( this ), SCROLL_END_DEBOUNCE_DURATION );\r\n\r\n    this.supply();\r\n    this.remove();\r\n    this.listen();\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  private listen(): void {\r\n    const onScroll = rafThrottle( this.onScroll.bind( this ) );\r\n\r\n    this.bind( this.scroller, 'scroll', () => {\r\n      onScroll( true );\r\n      this.emit( EVENT_SCROLLER_SCROLL );\r\n    } );\r\n\r\n    this.bind( window, 'scroll', () => {\r\n      onScroll( false );\r\n      this.emit( EVENT_WINDOW_SCROLL );\r\n    } );\r\n\r\n    this.bind( window, 'scroll', rafThrottle( () => {\r\n      this.active      = this.isVisible();\r\n      this.borderCache = null;\r\n    } ) );\r\n\r\n    this.on( EVENT_RESIZE, () => {\r\n      this.borderCache = null;\r\n      this.reposition();\r\n    } );\r\n\r\n    this.on( EVENT_SCROLL_HEIGHT_CHANGED, () => {\r\n      this.supply();\r\n      this.borderCache = null;\r\n    } );\r\n\r\n    this.on( EVENT_SELECTED, this.onSelected, this, 0 );\r\n    this.on( EVENT_SELECTING, () => {\r\n      this.activate( true );\r\n\r\n      if ( this.focusChanged ) {\r\n        this.emitChangedEvent( true );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Called whenever the selection state changes.\r\n   *\r\n   * @param e         - An EventBusEvent object.\r\n   * @param Selection - A Selection instance.\r\n   */\r\n  private onSelected( e: EventBusEvent<Editor>, Selection: Selection ): void {\r\n    if ( Selection.is( COLLAPSED, CHANGED ) ) {\r\n      this.activate( true );\r\n      this.activate( false );\r\n\r\n      if ( this.anchorChanged ) {\r\n        this.emitChangedEvent( false );\r\n      }\r\n\r\n      if ( this.focusChanged ) {\r\n        this.emitChangedEvent( true );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called whenever the editor scrolls.\r\n   * Be aware that the `scrollY` property is not supported in IE.\r\n   *\r\n   * @return byScroller - Indicates whether the editor is scrolled by the editor element itself or the window.\r\n   */\r\n  private onScroll( byScroller: boolean ): void {\r\n    const top = window.pageYOffset + this.scroller.scrollTop;\r\n\r\n    if ( this.active ) {\r\n      const { scrollTop } = this;\r\n\r\n      if ( scrollTop < top ) {\r\n        this.moveDown();\r\n      } else if ( scrollTop > top ) {\r\n        this.moveUp();\r\n      }\r\n\r\n      this.emit( EVENT_SCROLL, true );\r\n      this.onScrolled( byScroller );\r\n    }\r\n\r\n    this.scrollTop = top;\r\n  }\r\n\r\n  /**\r\n   * Called the scroll likely ends.\r\n   *\r\n   * @return byScroller - Indicates whether the editor is scrolled by the editor element itself or the window.\r\n   */\r\n  private onScrolled( byScroller: boolean ): void {\r\n    this.emit( EVENT_SCROLLED, byScroller );\r\n  }\r\n\r\n  /**\r\n   * Activates the anchor or focus line.\r\n   * - If the selection is collapsed outside of the view,\r\n   *   the anchor and focus lines are merged into a single boundary line.\r\n   * - If the line is not available but there is a boundary,\r\n   *   that means the boundary has been added manually by the Selection component.\r\n   *\r\n   * @param focus - Determines whether to activate focus or anchor line.\r\n   */\r\n  private activate( focus: boolean ): void {\r\n    const className = focus ? CLASS_FOCUS : CLASS_ANCHOR;\r\n    const row       = this.Selection.get( false )[ focus ? 'end' : 'start' ][ 0 ];\r\n    const boundary  = this.getBoundary( focus );\r\n\r\n    let line = this.getLine( row );\r\n\r\n    if ( ! line ) {\r\n      const anotherBoundary = this.getBoundary( ! focus );\r\n\r\n      if ( anotherBoundary.row === row ) {\r\n        line = anotherBoundary.line;\r\n      }\r\n    }\r\n\r\n    if ( line ) {\r\n      if ( boundary.row !== row ) {\r\n        this.deactivate( focus );\r\n\r\n        addClass( line, className );\r\n        assign( boundary, { line, row } );\r\n\r\n        this.setBoundaryChanged( focus, true );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivates the anchor or focus line if it is changed.\r\n   *\r\n   * @param focus - Determines whether to deactivate focus or anchor line.\r\n   */\r\n  private deactivate( focus: boolean ): void {\r\n    const boundary = this.getBoundary( focus );\r\n    const { line } = boundary;\r\n\r\n    if ( line ) {\r\n      if ( hasClass( line, CLASS_PRESERVED ) && ! hasClass( line, focus ? CLASS_ANCHOR : CLASS_FOCUS ) ) {\r\n        remove( line );\r\n      } else {\r\n        removeClass( line, focus ? CLASS_FOCUS : CLASS_ANCHOR );\r\n      }\r\n\r\n      boundary.line = null;\r\n      boundary.row  = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emits the `changed` event for an anchor or focus line.\r\n   *\r\n   * @param focus - Determines whether to emit the event for the focus or anchor line.\r\n   */\r\n  private emitChangedEvent( focus: boolean ): void {\r\n    const boundary = this.getBoundary( focus );\r\n    assert( boundary.line );\r\n    this.emit( focus ? EVENT_FOCUS_LINE_CHANGED : EVENT_ANCHOR_LINE_CHANGED, boundary.line, boundary.row );\r\n\r\n    if ( focus ) {\r\n      this.focusChanged = false;\r\n    } else {\r\n      this.anchorChanged = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the `anchorChanged` or `focusChanged` property.\r\n   *\r\n   * @param focus   - Determines which property should be changed.\r\n   * @param changed - The value for the property.\r\n   */\r\n  private setBoundaryChanged( focus: boolean, changed: boolean ): void {\r\n    if ( focus ) {\r\n      this.focusChanged = changed;\r\n    } else {\r\n      this.anchorChanged = changed;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Supplies line elements so that they can fill the viewport.\r\n   */\r\n  private supply(): void {\r\n    const { lineHeight, scrollerRect } = this.Measure;\r\n\r\n    const maxHeight    = min( scrollerRect.height, window.innerHeight );\r\n    const visibleLines = ceil( maxHeight / lineHeight );\r\n    const totalLength  = visibleLines + this.margin * 2;\r\n\r\n    if ( visibleLines !== this.visibleLines ) {\r\n      const { elms } = this;\r\n      const { length } = elms;\r\n      const diff = totalLength - length;\r\n\r\n      if ( diff > 0 ) {\r\n        this.html( this.start + length, diff, 'beforeend' );\r\n        this.emit( EVENT_CHUNK_SUPPLIED, this, diff );\r\n      }\r\n\r\n      this.visibleLines = visibleLines;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes unnecessary lines.\r\n   */\r\n  private remove(): void {\r\n    const { elms, length } = this;\r\n\r\n    if ( elms.length > length ) {\r\n      remove( elms.slice( length - elms.length ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a HTML string of lines.\r\n   *\r\n   * @param start  - A start row index.\r\n   * @param length - A number of lines.\r\n   * @param where  - Optional. If provided, built HTML will be inserted to the parent by the `insertAdjacentHTML`.\r\n   *\r\n   * @return A built HTML.\r\n   */\r\n  private html( start: number, length: number, where?: InsertPosition ): string {\r\n    let html = '';\r\n\r\n    for ( let i = 0; i < length; i++ ) {\r\n      const row  = start + i;\r\n      const line = this.lines[ row ];\r\n\r\n      html += tag( [ CLASS_LINE, line ? '' : CLASS_EMPTY ] );\r\n      html += line ? line.html : '';\r\n      html += '</div>';\r\n    }\r\n\r\n    if ( where ) {\r\n      this.parent.insertAdjacentHTML( where, html );\r\n    }\r\n\r\n    return html;\r\n  }\r\n\r\n  /**\r\n   * Moves down elements which are outside of the border.\r\n   */\r\n  private moveDown(): void {\r\n    const lengthToMove = this.computeLengthToMoveDown();\r\n\r\n    if ( lengthToMove >= this.length ) {\r\n      this.jumpIntoView();\r\n    } else if ( lengthToMove > 0 ) {\r\n      const { lineHeight } = this.Measure;\r\n\r\n      this.offsetY += lineHeight * lengthToMove;\r\n\r\n      if ( this.start < 0 ) {\r\n        this.offsetY = max( this.offsetY + this.start * lineHeight, 0 );\r\n      }\r\n\r\n      const { elms } = this;\r\n      const html = this.html( this.start + elms.length, lengthToMove );\r\n      elms[ elms.length - 1 ].insertAdjacentHTML( 'afterend', html );\r\n\r\n      remove( this.detach( 0, lengthToMove ) );\r\n\r\n      this.start += lengthToMove;\r\n\r\n      this.attach();\r\n      this.offset();\r\n\r\n      this.emit( EVENT_CHUNK_MOVED, this );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Moves up elements which are outside of the border.\r\n   */\r\n  private moveUp(): void {\r\n    const lengthToMove = this.computeLengthToMoveUp();\r\n\r\n    if ( lengthToMove >= this.length ) {\r\n      this.jumpIntoView();\r\n    } else if ( lengthToMove > 0 ) {\r\n      const { lineHeight } = this.Measure;\r\n\r\n      remove( this.detach( - lengthToMove ) );\r\n\r\n      const { elms } = this;\r\n      const html = this.html( this.start - lengthToMove, lengthToMove );\r\n      elms[ 0 ].insertAdjacentHTML( 'beforebegin', html );\r\n\r\n      this.start -= lengthToMove;\r\n      this.offsetY = max( this.offsetY - lineHeight * lengthToMove, 0 );\r\n\r\n      this.attach();\r\n      this.offset();\r\n\r\n      this.emit( EVENT_CHUNK_MOVED, this );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Computes the number of lines to move down.\r\n   *\r\n   * @return A number of lines to move down.\r\n   */\r\n  private computeLengthToMoveDown(): number {\r\n    if ( this.end < this.lines.length ) {\r\n      const { Measure: { lineHeight }, margin } = this;\r\n      const { top } = rect( this.parent );\r\n      const border = this.border[ 0 ];\r\n\r\n      if ( top + lineHeight * margin < border ) {\r\n        return floor( ( border - top ) / lineHeight );\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Computes the number of lines to move up.\r\n   *\r\n   * @return A number of lines to move up.\r\n   */\r\n  private computeLengthToMoveUp(): number  {\r\n    if ( this.start > 0 ) {\r\n      const { Measure: { lineHeight, padding: { bottom: paddingBottom } }, margin } = this;\r\n      const { top, bottom } = rect( this.parent );\r\n      const [ topBorder, bottomBorder ] = this.border;\r\n\r\n      if ( top > topBorder ) {\r\n        return margin + floor( ( top - topBorder ) / lineHeight );\r\n      }\r\n\r\n      if ( bottom - lineHeight * margin - paddingBottom > bottomBorder ) {\r\n        return floor( ( bottom - paddingBottom - bottomBorder ) / lineHeight );\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Detaches lines in the specified lines from the chunk.\r\n   * Both anchor and focus lines will be preserved, and others will be returned.\r\n   *\r\n   * @param start - A start index.\r\n   * @param end   - An end index.\r\n   *\r\n   * @return An array with detached elements.\r\n   */\r\n  private detach( start: number, end?: number ): HTMLElement[] {\r\n    return this.elms.slice( start, end ).reduce( ( detached: HTMLElement[], elm: HTMLElement ) => {\r\n      const isAnchor = hasClass( elm, CLASS_ANCHOR );\r\n      const isFocus  = hasClass( elm, CLASS_FOCUS );\r\n\r\n      if ( isAnchor || isFocus ) {\r\n        addClass( elm, CLASS_PRESERVED );\r\n        attr( elm, { 'aria-hidden': true } );\r\n      } else {\r\n        detached.push( elm );\r\n      }\r\n\r\n      return detached;\r\n    }, [] );\r\n  }\r\n\r\n  /**\r\n   * Attaches detached anchor and focus lines to the chunk.\r\n   * Do not move the anchor and focus lines to keep the native selection.\r\n   */\r\n  private attach(): void {\r\n    const { Selection, anchor: { line: anchorLine }, focus: { line: focusLine } } = this;\r\n    const { anchor, focus } = Selection;\r\n    const includesAnchor          = this.includes( anchor[ 0 ] );\r\n    const includesFocus           = this.includes( focus[ 0 ] );\r\n    const includesPreservedAnchor = includesAnchor && hasClass( anchorLine, CLASS_PRESERVED );\r\n    const includesPreservedFocus  = includesFocus && hasClass( focusLine, CLASS_PRESERVED );\r\n\r\n    if ( includesPreservedAnchor || includesPreservedFocus ) {\r\n      const anchorIndex = includesAnchor ? anchor[ 0 ] - this.start : -1;\r\n      const focusIndex  = includesFocus ? focus[ 0 ] - this.start : -1;\r\n      const firstIndex  = min( anchorIndex, focusIndex );\r\n      const secondIndex = max( anchorIndex, focusIndex );\r\n      const backward    = Selection.isBackward();\r\n\r\n      let firstElm: Element, secondElm: Element;\r\n\r\n      if ( firstIndex > -1 ) {\r\n        firstElm  = backward ? focusLine : anchorLine;\r\n        secondElm = backward ? anchorLine : focusLine;\r\n      } else {\r\n        secondElm = includesAnchor ? anchorLine : focusLine;\r\n      }\r\n\r\n      const { elms } = this;\r\n      const topElms    = firstElm ? elms.slice( 0, firstIndex ) : elms.slice( 0, secondIndex );\r\n      const middleElms = firstElm ? elms.slice( firstIndex + 1, secondIndex ) : [];\r\n      const bottomElms = elms.slice( secondIndex + 1 );\r\n\r\n      if ( includesPreservedAnchor ) {\r\n        removeClass( anchorLine, CLASS_PRESERVED );\r\n        attr( anchorLine, { 'aria-hidden': null } );\r\n        remove( elms[ anchorIndex ] );\r\n      }\r\n\r\n      if ( includesPreservedFocus && anchorIndex !== focusIndex ) {\r\n        removeClass( focusLine, CLASS_PRESERVED );\r\n        attr( focusLine, { 'aria-hidden': null } );\r\n        remove( elms[ focusIndex ] );\r\n      }\r\n\r\n      before( topElms, firstElm || secondElm );\r\n      before( middleElms, secondElm );\r\n\r\n      const { nextElementSibling } = secondElm;\r\n\r\n      if ( bottomElms.length && bottomElms[ 0 ] !== nextElementSibling ) {\r\n        before( bottomElms, nextElementSibling );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Offsets the parent element to make it visible inside the viewport.\r\n   *\r\n   * @param offsetY - Optional. Amount of the offset. If empty, the current `offsetY` will be used.\r\n   */\r\n  private offset( offsetY = this.offsetY ): void {\r\n    this.parent.style.top = `${ offsetY }px`;\r\n  }\r\n\r\n  /**\r\n   * Makes the chunk jump so that it is visible in the view.\r\n   */\r\n  private jumpIntoView(): void {\r\n    this.jump( this.Measure.closest( this.scroller.scrollTop ) );\r\n  }\r\n\r\n  /**\r\n   * Repositions the chunk to the current scroll top position.\r\n   */\r\n  private reposition(): void {\r\n    const top = this.Measure.getTop( this.start );\r\n\r\n    if ( top !== this.offsetY ) {\r\n      const focusRow      = this.focus.row;\r\n      const includesFocus = this.includes( focusRow );\r\n\r\n      this.jumpIntoView();\r\n\r\n      if ( includesFocus ) {\r\n        this.View.jump( focusRow );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the part of the scroller element is vertically visible or not.\r\n   * This method does not care the horizontal visibility.\r\n   *\r\n   * @return `true` if the scroller is visible, or otherwise `false`.\r\n   */\r\n  private isVisible(): boolean {\r\n    const { top, bottom } = rect( this.scroller );\r\n    const { innerHeight } = window;\r\n    return between( top, 0, innerHeight ) || between( bottom, 0, innerHeight ) || top < 0 && bottom > innerHeight;\r\n  }\r\n\r\n  /**\r\n   * Jumps to the specified row index.\r\n   * Use `View#jump()` instead if you want to scroll to the specific line.\r\n   *\r\n   * @param row - A row to jump to.\r\n   */\r\n  private jump( row: number ): void {\r\n    const { Measure, length } = this;\r\n    const { padding: { top: paddingTop }, lineHeight } = Measure;\r\n    const offsetRows = ceil( paddingTop / lineHeight );\r\n\r\n    this.start   = clamp( row - offsetRows, 0, max( this.lines.length - length + this.margin, 0 ) );\r\n    this.offsetY = Measure.getTop( this.start );\r\n\r\n    const elms = this.detach( 0 );\r\n\r\n    elms[ 0 ].insertAdjacentHTML( 'afterend', this.html( this.start, length ) );\r\n    remove( elms );\r\n\r\n    this.offset();\r\n    this.attach();\r\n\r\n    this.emit( EVENT_CHUNK_MOVED, this );\r\n  }\r\n\r\n  /**\r\n   * Returns the focus or anchor boundary data object which contains the line element and the row index.\r\n   *\r\n   * @param focus - Determines whether to return the focus or anchor boundary data.\r\n   *\r\n   * @return The boundary data object.\r\n   */\r\n  getBoundary( focus: boolean ): LineBoundaryData {\r\n    return focus ? this.focus : this.anchor;\r\n  }\r\n\r\n  /**\r\n   * Manually adds preserved line.\r\n   * This method should be only used by the Selection component.\r\n   * Note that the `changed` event will be emitted by the `activate` method.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param focus - Determines whether to add a focus or anchor line.\r\n   * @param row   - A row index.\r\n   *\r\n   * @return A created preserved line element.\r\n   */\r\n  addPreservedLine( focus: boolean, row: number ): Element {\r\n    const { parent } = this;\r\n    const classes = `${ CLASS_LINE } ${ focus ? CLASS_FOCUS : CLASS_ANCHOR } ${ CLASS_PRESERVED }`;\r\n    const line    = div( { class: classes, 'aria-hidden': true } );\r\n\r\n    this.deactivate( focus );\r\n\r\n    html( line, this.lines[ row ].html );\r\n\r\n    if ( row < this.start ) {\r\n      prepend( parent, line );\r\n    } else {\r\n      append( parent, line );\r\n    }\r\n\r\n    assign( this.getBoundary( focus ), { line, row } );\r\n    this.setBoundaryChanged( focus, true );\r\n\r\n    return line;\r\n  }\r\n\r\n  /**\r\n   * Updates HTML of elements with the latest HTML of lines.\r\n   * If omitting elements, updates all elements in the chunk.\r\n   *\r\n   * @param elms  - Optional. Elements to update.\r\n   * @param start - Optional. A start index that corresponds with the first element.\r\n   */\r\n  sync( elms = this.elms, start = this.start ): void {\r\n    for ( let i = 0; i < elms.length; i++ ) {\r\n      const line = this.lines[ i + start ];\r\n      const elm  = elms[ i ];\r\n\r\n      if ( line ) {\r\n        html( elm, line.html );\r\n        removeClass( elm, CLASS_EMPTY );\r\n      } else {\r\n        text( elm, '' );\r\n        addClass( elm, CLASS_EMPTY );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Syncs difference of the number of lines before syncing each HTML for performance.\r\n   * If the `diff` length is greater than the `margin`, this method does nothing.\r\n   *\r\n   * @param row  - A row index.\r\n   * @param diff - Difference of the number of lines before and after editing.\r\n   */\r\n  syncDiff( row: number, diff: number ): void {\r\n    if ( abs( diff ) < MARGIN_LINES ) {\r\n      const index = row - this.start;\r\n      const { elms } = this;\r\n\r\n      if ( diff > 0 ) {\r\n        before( elms.slice( - diff ), elms[ index ].nextElementSibling );\r\n      } else if ( diff < 0 ) {\r\n        append( this.parent, elms.slice( index + 1, index + 1 - diff ) );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refreshes the chunk.\r\n   */\r\n  refresh(): void {\r\n    this.moveDown();\r\n    this.moveUp();\r\n  }\r\n\r\n  /**\r\n   * Scrolls to the specified top position\r\n   * and manually calls the `onScroll` handler for succeeding synchronous processes.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param scrollTop - A scroll position.\r\n   */\r\n  scroll( scrollTop: number ): void {\r\n    this.scroller.scrollTop = scrollTop;\r\n    this.onScroll( true );\r\n  }\r\n\r\n  /**\r\n   * Returns the row index which the provided line element corresponds with.\r\n   *\r\n   * @param elm - A line element.\r\n   *\r\n   * @return The row index of the line element if available, or otherwise `-1`.\r\n   */\r\n  getRow( elm: HTMLElement ): number {\r\n    const row = this.elms.indexOf( elm );\r\n    return row > -1 ? row + this.start : -1;\r\n  }\r\n\r\n  /**\r\n   * Returns the line at the specified row if available.\r\n   *\r\n   * @param row - A row index.\r\n   *\r\n   * @return A line element if available, or `undefined` if not.\r\n   */\r\n  getLine( row: number ): Element | undefined {\r\n    return this.elms[ row - this.start ];\r\n  }\r\n\r\n  /**\r\n   * Checks if the chunk includes the specified row or not.\r\n   *\r\n   * @param row - A row index.\r\n   *\r\n   * @return `true` if the chunk includes the row, or otherwise `false`.\r\n   */\r\n  includes( row: number ): boolean {\r\n    return between( row, this.start, this.end );\r\n  }\r\n\r\n  /**\r\n   * Returns the end index of the chunk lines.\r\n   * This may be greater than the actual total number of lines.\r\n   *\r\n   * @return An end index of the chunk.\r\n   */\r\n  get end(): number {\r\n    return this.start + this.length - 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of chunk lines without preserved ones.\r\n   *\r\n   * @return A number of line elements in the chunk.\r\n   */\r\n  get length(): number {\r\n    return this.visibleLines + this.margin * 2;\r\n  }\r\n\r\n  /**\r\n   * Returns chunk lines without preserved ones.\r\n   *\r\n   * @return An array containing line elements in the chunk.\r\n   */\r\n  get elms(): Element[] {\r\n    return slice( queryAll( this.parent, `.${ CLASS_LINE }:not(.${ CLASS_PRESERVED })` ) );\r\n  }\r\n\r\n  /**\r\n   * Returns borders to move elements up or down.\r\n   *\r\n   * @return A tuple containing top and bottom borders.\r\n   */\r\n  protected get border(): [ number, number ] {\r\n    if ( ! this.borderCache ) {\r\n      const domRect = rect( this.scroller );\r\n      const top     = max( domRect.top, 0 );\r\n      const bottom  = min( domRect.bottom, window.innerHeight );\r\n\r\n      this.borderCache = [ top, bottom ];\r\n    }\r\n\r\n    return this.borderCache;\r\n  }\r\n}\r\n","/**\n * Debounce duration for invoking the `scrollEnd()`.\n * This must not be less than the native scroll interval.\n *\n * @since 0.1.0\n */\nexport const SCROLL_END_DEBOUNCE_DURATION = 60;\n\n/**\n * The number of lines for margin.\n *\n * @since 0.1.0\n */\nexport const MARGIN_LINES = 10;\n","/**\n * The line break character.\n *\n * @private\n * @since 0.1.0\n */\nexport const LINE_BREAK = '\\n';\n\n/**\n * The space that has no width.\n *\n * @private\n * @since 0.1.0\n */\nexport const ZERO_WIDTH_SPACE = '\\ufeff';\n","import { arrayProto, splice } from '../../utils';\n\n\n/**\n * The abstract class for implementing an ArrayLike class.\n *\n * @since 0.1.0\n *\n * @typeParam T - A type for each element.\n */\nexport abstract class AbstractArrayLike<T> implements ArrayLike<T> {\n  /**\n   * The length of elements.\n   */\n  length = 0;\n\n  /**\n   * The index signature for behaving an array-like object.\n   */\n  [ index: number ]: T;\n\n  /**\n   * Implements the `push` method by using native method.\n   *\n   * @param items - Items to push.\n   */\n  push( ...items: T[] ): void {\n    arrayProto.push.apply( this, items );\n  }\n\n  /**\n   * Implements the `splice` method by using native method.\n   *\n   * @param start       - A start index.\n   * @param deleteCount - The number of items to delete from the start index.\n   * @param items       - New items to insert at the start index.\n   */\n  splice( start: number, deleteCount?: number, ...items: T[] ): void {\n    splice( this, start, deleteCount, ...items );\n  }\n\n  /**\n   * Clears elements.\n   */\n  clear(): void {\n    splice( this, 0, this.length );\n  }\n}\n","import { Token, TokenMatcher } from '@ryusei/code';\r\nimport { isUndefined } from '../../type/type';\r\n\r\n\r\n/**\r\n * Checks if the token matches the provided matcher or not.\r\n *\r\n * @param token   - A token to test.\r\n * @param matcher - An array described as a TokenMatcher tuple.\r\n */\r\nexport function matchesToken( token: Token, matcher: TokenMatcher ): boolean {\r\n  if ( token && token[ 0 ] === matcher[ 0 ] && ( ! matcher[ 1 ] || matcher[ 1 ].test( token[ 1 ] ) ) ) {\r\n    return isUndefined( matcher[ 2 ] ) || token[ 2 ].state === matcher[ 2 ];\r\n  }\r\n\r\n  return false;\r\n}\r\n","/*!\n * RyuseiLight.js\n * Version  : 1.2.0\n * License  : MIT\n * Copyright: 2020 Naotoshi Fujita\n */\n\n/**\r\n * The line break character.\r\n *\r\n * @private\r\n * @since 0.0.1\r\n */\nvar LINE_BREAK = '\\n';\nvar CATEGORY_KEYWORD = 'keyword';\nvar CATEGORY_CONSTANT = 'constant';\nvar CATEGORY_COMMENT = 'comment';\nvar CATEGORY_TAG = 'tag';\nvar CATEGORY_TAG_CLOSE = 'tag.close';\nvar CATEGORY_SELECTOR = 'selector';\nvar CATEGORY_ATRULE = 'atrule';\nvar CATEGORY_ATTRIBUTE = 'attr';\nvar CATEGORY_PROPERTY = 'prop';\nvar CATEGORY_VALUE = 'value';\nvar CATEGORY_VARIABLE = 'variable';\nvar CATEGORY_ENTITY = 'entity';\nvar CATEGORY_CDATA = 'cdata';\nvar CATEGORY_PROLOG = 'prolog';\nvar CATEGORY_IDENTIFIER = 'identifier';\nvar CATEGORY_STRING = 'string';\nvar CATEGORY_NUMBER = 'number';\nvar CATEGORY_BOOLEAN = 'boolean';\nvar CATEGORY_FUNCTION = 'function';\nvar CATEGORY_CLASS = 'class';\nvar CATEGORY_DECORATOR = 'decorator';\nvar CATEGORY_REGEXP = 'regexp';\nvar CATEGORY_OPERATOR = 'operator';\nvar CATEGORY_BRACKET = 'bracket';\nvar CATEGORY_DELIMITER = 'delimiter';\nvar CATEGORY_SYMBOL = 'symbol';\nvar CATEGORY_SPACE = 'space';\nvar CATEGORY_TEXT = 'text'; // Internal use only\n\nvar CATEGORY_LINEBREAK = 'lb';\n/**\r\n * Checks if the given subject is an object or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an object, or otherwise `false`.\r\n */\n\nfunction isObject(subject) {\n  return subject !== null && typeof subject === 'object';\n}\n/**\r\n * Checks if the given subject is an array or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an array, or otherwise `false`.\r\n */\n\n\nfunction isArray(subject) {\n  return Array.isArray(subject);\n}\n/**\r\n * Checks if the given subject is a string or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is a string, or otherwise `false`.\r\n */\n\n\nfunction isString(subject) {\n  return typeof subject === 'string';\n}\n/**\r\n * Checks if the given subject is `undefined` or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is `undefined`, or otherwise `false`.\r\n */\n\n\nfunction isUndefined(subject) {\n  return typeof subject === 'undefined';\n}\n/**\r\n * Checks if the given subject is an HTMLElement instance or not.\r\n *\r\n * @param subject - A subject to check.\r\n *\r\n * @return `true` if the subject is an HTMLElement instance, or otherwise `false`.\r\n */\n\n\nfunction isHTMLElement(subject) {\n  return subject instanceof HTMLElement;\n}\n/**\r\n * Push the provided value to an array only if the value is not an array.\r\n *\r\n * @param value - A value to push.\r\n *\r\n * @return An array containing the value, or the value itself if it is already an array.\r\n */\n\n\nfunction toArray(value) {\n  return isArray(value) ? value : [value];\n}\n/**\r\n * Adds classes to the element.\r\n *\r\n * @param elm     - An element to add classes to.\r\n * @param classes - Classes to add.\r\n */\n\n\nfunction addClass$1(elm, classes) {\n  toArray(classes).forEach(function (name) {\n    if (name) {\n      elm.classList.add(name);\n    }\n  });\n}\n/**\r\n * Appends children to the parent element.\r\n *\r\n * @param parent   - A parent element.\r\n * @param children - A child or children to append to the parent.\r\n */\n\n\nfunction append(parent, children) {\n  children = toArray(children);\n\n  for (var i = 0; i < children.length; i++) {\n    parent.appendChild(children[i]);\n  }\n}\n/**\r\n * Iterates over the provided object by own enumerable keys with calling the iteratee function.\r\n *\r\n * @param object   - An object to iterate over.\r\n * @param iteratee - An iteratee function that takes the value and key as arguments.\r\n *\r\n * @return A provided object itself.\r\n */\n\n\nfunction forOwn(object, iteratee) {\n  if (object) {\n    var keys = Object.keys(object);\n\n    for (var i = 0; i < keys.length; i++) {\n      iteratee(object[keys[i]], keys[i]);\n    }\n  }\n}\n/**\r\n * Assigns all own enumerable properties of all source objects to the provided object.\r\n * `undefined` in source objects will be skipped.\r\n *\r\n * @param object  - An object to assign properties to.\r\n * @param sources - Objects to assign properties from.\r\n *\r\n * @return An object assigned properties of the sources to.\r\n */\n\n\nfunction assign(object) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  sources.forEach(function (source) {\n    if (isObject(source)) {\n      forOwn(source, function (value, key) {\n        if (!isUndefined(source[key])) {\n          object[key] = source[key];\n        }\n      });\n    }\n  });\n  return object;\n}\n/**\r\n * Sets new attributes to the passed element if the `attrs` is an object literal,\r\n * or gets an attribute value from it if the `attrs` is a string.\r\n *\r\n * @param elm   - An element to set or get an attribute.\r\n * @param attrs - An attribute name as a string or new attributes as an object literal.\r\n */\n\n\nfunction attr(elm, attrs) {\n  if (isString(attrs)) {\n    return elm.getAttribute(attrs) || '';\n  }\n\n  if (isObject(attrs)) {\n    forOwn(attrs, function (value, key) {\n      elm.setAttribute(key, String(value));\n    });\n  }\n}\n/**\r\n * Creates an HTML element.\r\n *\r\n * @param tag     - A tag name.\r\n * @param classes - Optional. Classes to add.\r\n * @param parent  - Optional. A parent element where the created element is appended.\r\n */\n\n\nfunction create(tag, classes, parent) {\n  var elm = document.createElement(tag);\n\n  if (classes) {\n    addClass$1(elm, classes);\n  }\n\n  if (parent) {\n    append(parent, elm);\n  }\n\n  return elm;\n}\n/**\r\n * Returns an element that matches the provided selector.\r\n *\r\n * @param selector - A selector.\r\n * @param parent   - Optional. A parent element to start searching elements from.\r\n *\r\n * @return A found element or `null`.\r\n */\n\n\nfunction query(selector, parent) {\n  if (parent === void 0) {\n    parent = document;\n  }\n\n  return parent.querySelector(selector);\n}\n/**\r\n * Applies inline styles to the provided element by an object literal.\r\n *\r\n * @param elm    - An element to apply styles to.\r\n * @param styles - An object literal with styles.\r\n */\n\n\nfunction styles(elm, styles) {\n  forOwn(styles, function (value, key) {\n    elm.style[key] = String(value);\n  });\n}\n/**\r\n * Returns an open tag with provided classes.\r\n *\r\n * @param classes - Classes.\r\n * @param tag     - Optional. A tag name.\r\n */\n\n\nfunction tag(classes, tag) {\n  return \"<\" + (tag || 'div') + \" class=\\\"\" + classes.join(' ') + \"\\\">\";\n}\n/**\r\n * Sets or gets a text content of the provided node.\r\n *\r\n * @param node - A node to get or set a text.\r\n * @param text - Optional. A text to set.\r\n */\n\n\nfunction text(node, text) {\n  if (isUndefined(text)) {\n    return node.textContent;\n  }\n\n  node.textContent = text;\n}\n/**\r\n * Throws an error if the provided condition is falsy.\r\n *\r\n * @param condition - If falsy, an error is thrown.\r\n * @param message   - Optional. A message for the error.\r\n */\n\n\nfunction assert(condition, message) {\n  if (message === void 0) {\n    message = '';\n  }\n\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n/**\r\n * The project code name.\r\n *\r\n * @since 0.0.1\r\n */\n\n\nvar PROJECT_CODE = 'ryuseilight';\n/**\r\n * The abbreviated project code.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar PROJECT_CODE_SHORT = 'rl';\n/**\r\n * Displays an error message on the console.\r\n *\r\n * @param message - An error message.\r\n */\n\nfunction error(message) {\n  console.error(\"[\" + PROJECT_CODE + \"] \" + message);\n}\n/**\r\n * Returns a function that invokes the provided function at most once in the specified duration.\r\n *\r\n * @since 0.0.1\r\n *\r\n * @param callback - A function to throttle.\r\n * @param interval - A throttle duration in milliseconds.\r\n *\r\n * @return A throttled function.\r\n */\n\n\nfunction throttle(callback, interval) {\n  var timer;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function () {\n        callback();\n        timer = null;\n      }, interval);\n    }\n  };\n}\n/**\r\n * Finds the provided key from a map and returns its index.\r\n *\r\n * @param map - A map to search in.\r\n * @param key - A key to search for.\r\n *\r\n * @return An index if found, or `-1` otherwise.\r\n */\n\n\nfunction find(map, key) {\n  for (var i = 0; i < map.length; i++) {\n    if (map[i][0] === key) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\r\n * Insert entries before the reference entry specified by the `ref`.\r\n * If the reference is not found, a new entry is created.\r\n *\r\n * @param map     - A map to insert values to.\r\n * @param ref     - A reference key.\r\n * @param entries - entries to insert.\r\n */\n\n\nfunction before(map, ref, entries) {\n  var index = find(map, ref);\n\n  if (index > -1) {\n    map.splice.apply(map, [index, 0].concat(entries));\n  } else {\n    map.push.apply(map, entries);\n  }\n}\n/**\r\n * Converts essential HTML special characters to HTML entities.\r\n *\r\n * @param string - A string to escape.\r\n *\r\n * @return An escaped string.\r\n */\n\n\nfunction escapeHtml(string) {\n  return string.replace(/&/g, '&amp;').replace(/</g, '&lt;');\n}\n/**\r\n * Checks if the string starts with the `char` or not.\r\n *\r\n * @param string - A string to check.\r\n * @param char   - A character.\r\n *\r\n * @return `true` if the string starts with the `char`, or otherwise `false`.\r\n */\n\n\nfunction startsWith(string, _char) {\n  return string.charAt(0) === _char;\n}\n/**\r\n * Checks if the RegExp supports the sticky flag or not.\r\n */\n\n\nvar isStickySupported = !isUndefined(/x/.sticky);\n/**\r\n * The class for creating a simple lexer by a Language object.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar Lexer = /*#__PURE__*/function () {\n  /**\r\n   * The Lexer constructor.\r\n   *\r\n   * @param language - A Language object.\r\n   */\n  function Lexer(language) {\n    this.language = language;\n    this.init(language);\n  }\n  /**\r\n   * Initializes the language object.\r\n   *\r\n   * @param language - A Language object to initialize.\r\n   */\n\n\n  var _proto = Lexer.prototype;\n\n  _proto.init = function init(language) {\n    var _this = this;\n\n    forOwn(language.grammar, function (tokenizers, key) {\n      language.grammar[key] = _this.merge(language, tokenizers);\n    });\n    forOwn(language.use, this.init.bind(this));\n  }\n  /**\r\n   * Includes tokenizers required by `#` annotation and flatten them.\r\n   *\r\n   * @param language   - A language object.\r\n   * @param tokenizers - Tokenizers.\r\n   *\r\n   * @return Merged tokenizers.\r\n   */\n  ;\n\n  _proto.merge = function merge(language, tokenizers) {\n    var merged = [];\n\n    for (var i = 0; i < tokenizers.length; i++) {\n      var tokenizer = tokenizers[i];\n      var _tokenizers$i = tokenizers[i],\n          category = _tokenizers$i[0],\n          regexp = _tokenizers$i[1];\n\n      if (startsWith(category, '#') && !regexp) {\n        merged.push.apply(merged, this.merge(language, language.grammar[category.slice(1)]));\n      } else {\n        (function () {\n          var flags = regexp.toString().match(/[gimsy]*$/)[0].replace(/[gy]/g, '');\n          var source = regexp.source + (isStickySupported ? '' : '|()');\n          forOwn(language.source, function (replacement, key) {\n            source = source.replace(new RegExp(\"%\" + key, 'g'), replacement.source);\n          });\n          tokenizer[1] = new RegExp(source, (isStickySupported ? 'y' : 'g') + flags);\n          merged.push(tokenizer);\n        })();\n      }\n    }\n\n    return merged;\n  }\n  /**\r\n   * Parses the text by the provided language and tokenizers.\r\n   *\r\n   * @param text       - A text to tokenize.\r\n   * @param language   - A Language object.\r\n   * @param tokenizers - An array with tokenizers.\r\n   * @param state      - Optional. The current state name.\r\n   *\r\n   * @return An index of the text where the handling ends.\r\n   */\n  ;\n\n  _proto.parse = function parse(text, language, tokenizers, state) {\n    var index = 0;\n    var position = 0;\n    this.depth++;\n\n    main: while (index < text.length && !this.aborted) {\n      for (var i = 0; i < tokenizers.length; i++) {\n        var tokenizer = tokenizers[i];\n        var regexp = tokenizer[1],\n            action = tokenizer[2];\n        regexp.lastIndex = index;\n        var match = regexp.exec(text);\n\n        if (!match || !match[0]) {\n          continue;\n        }\n\n        if (position < index) {\n          this.push([CATEGORY_TEXT, text.slice(position, index)], language, state);\n        }\n\n        if (action === '@back') {\n          position = index;\n          break main;\n        }\n\n        var offset = this.handle(match, language, tokenizer, state);\n        index += offset || 1;\n        position = index;\n\n        if (action === '@break') {\n          break main;\n        }\n\n        continue main;\n      }\n\n      index++;\n    }\n\n    if (position < index) {\n      this.push([CATEGORY_TEXT, text.slice(position)], language, state);\n    }\n\n    this.depth--;\n    return index;\n  }\n  /**\r\n   * Pushes the provided token to the lines array.\r\n   *\r\n   * @param token    - A token to push.\r\n   * @param language - A Language object.\r\n   * @param state    - A state name.\r\n   */\n  ;\n\n  _proto.push = function push(token, language, state) {\n    var depth = this.depth;\n    var category = token[0],\n        text = token[1];\n    var start = this.index;\n    var index = 0;\n    var from = 0;\n\n    while (index > -1 && !this.aborted) {\n      index = text.indexOf(LINE_BREAK, from);\n      var line = this.lines[this.index];\n      var empty = from === index && !line.length;\n      var code = empty ? LINE_BREAK : text.slice(from, index < 0 ? undefined : index);\n      var info = {\n        depth: depth,\n        language: language.id,\n        state: state\n      };\n\n      if (code) {\n        if (category !== CATEGORY_TEXT) {\n          info.head = index > -1 && !from;\n          info.tail = index < 0 && !!from;\n          info.split = index > -1 || !!from;\n          info.distance = this.index - start;\n        }\n\n        line.push([category === CATEGORY_TEXT && empty ? CATEGORY_LINEBREAK : category, code, info]);\n      }\n\n      if (index > -1) {\n        this.index++;\n        this.aborted = this.limit && this.index >= this.limit;\n\n        if (!this.aborted) {\n          from = index + 1;\n          this.lines[this.index] = [];\n        }\n      }\n    }\n  }\n  /**\r\n   * Handles the matched text.\r\n   *\r\n   * @param match     - A matched result.\r\n   * @param language  - A Language object.\r\n   * @param tokenizer - A tokenizer that has been matched with the text.\r\n   * @param state     - A state name.\r\n   *\r\n   * @return An index of the text where the handling ends.\r\n   */\n  ;\n\n  _proto.handle = function handle(match, language, tokenizer, state) {\n    var category = tokenizer[0];\n\n    if (!category) {\n      return 0;\n    }\n\n    var text = match[0];\n\n    if (tokenizer[3] === '@debug') {\n      // eslint-disable-next-line\n      console.log(text, tokenizer);\n    }\n\n    if (startsWith(category, '@')) {\n      assert(language.use);\n      var lang = language.use[category.slice(1)];\n      assert(lang);\n      return this.parse(text, lang, lang.grammar.main, category);\n    }\n\n    if (startsWith(category, '#')) {\n      var tokenizers = language.grammar[category.slice(1)];\n      assert(tokenizers);\n\n      if (tokenizer[2] === '@rest') {\n        text = match.input.slice(match.index);\n      }\n\n      return this.parse(text, language, tokenizers, category);\n    }\n\n    this.push([category, text], language, state);\n    return text.length;\n  }\n  /**\r\n   * Tokenizes the text by the current language.\r\n   *\r\n   * @param text  - A text to tokenize.\r\n   * @param limit - Optional. Limits the number of lines.\r\n   *\r\n   * @return An array with tokens.\r\n   */\n  ;\n\n  _proto.tokenize = function tokenize(text, limit) {\n    this.lines = [[]];\n    this.index = 0;\n    this.depth = -1;\n    this.limit = limit || 0;\n    this.aborted = false;\n    this.parse(text, this.language, this.language.grammar.main, '#main');\n    return this.lines;\n  };\n\n  return Lexer;\n}();\n\nvar ROOT = PROJECT_CODE;\nvar CONTAINER = PROJECT_CODE_SHORT + \"__container\";\nvar BODY = PROJECT_CODE_SHORT + \"__body\";\nvar CODE = PROJECT_CODE_SHORT + \"__code\";\nvar LINE = PROJECT_CODE_SHORT + \"__line\";\nvar TOKEN = PROJECT_CODE_SHORT + \"__token\";\nvar ACTIVE = 'is-active';\n/**\r\n * The class for providing the very simple event bus.\r\n *\r\n * @private\r\n * @since 0.0.1\r\n */\n\nvar EventBus = /*#__PURE__*/function () {\n  function EventBus() {\n    /**\r\n     * Holds handlers.\r\n     */\n    this.handlers = {};\n  }\n  /**\r\n   * Attaches a handler.\r\n   *\r\n   * @param event    - An event name.\r\n   * @param callback - A callback function to register.\r\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\r\n   */\n\n\n  var _proto2 = EventBus.prototype;\n\n  _proto2.on = function on(event, callback, priority) {\n    if (priority === void 0) {\n      priority = 10;\n    }\n\n    var handlers = this.handlers[event] = this.handlers[event] || [];\n    handlers.push({\n      callback: callback,\n      priority: priority\n    });\n    handlers.sort(function (handler1, handler2) {\n      return handler1.priority - handler2.priority;\n    });\n  }\n  /**\r\n   * Emits an event.\r\n   *\r\n   * @param event - An event name.\r\n   * @param args  - Optional. Any number of arguments to pass to callbacks.\r\n   */\n  ;\n\n  _proto2.emit = function emit(event) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    (this.handlers[event] || []).forEach(function (handler) {\n      handler.callback.apply(handler, args);\n    });\n  }\n  /**\r\n   * Destroys the event bus.\r\n   */\n  ;\n\n  _proto2.destroy = function destroy() {\n    this.handlers = {};\n  };\n\n  return EventBus;\n}();\n/**\r\n * Stores all Extensions functions.\r\n */\n\n\nvar Extensions = {};\n/**\r\n * The class for highlighting code via provided tokens.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar Renderer = /*#__PURE__*/function () {\n  /**\r\n   * The Renderer constructor.\r\n   *\r\n   * @param lines   - Lines with tokens to render.\r\n   * @param info    - The language info object.\r\n   * @param root    - Optional. A root element to highlight.\r\n   * @param options - Options.\r\n   */\n  function Renderer(lines, info, root, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    /**\r\n     * Holds lines with tokens.\r\n     */\n    this.lines = [];\n    /**\r\n     * Holds the EventBus instance.\r\n     */\n\n    this.event = new EventBus();\n    this.lines = lines;\n    this.info = info;\n    this.root = root;\n    this.options = options;\n    this.init();\n  }\n  /**\r\n   * Adds extensions.\r\n   *\r\n   * @param extensions - An object literal with Component functions.\r\n   */\n\n\n  Renderer.compose = function compose(extensions) {\n    forOwn(extensions, function (Component, name) {\n      Extensions[name] = Component;\n    });\n  }\n  /**\r\n   * Initializes the instance.\r\n   */\n  ;\n\n  var _proto3 = Renderer.prototype;\n\n  _proto3.init = function init() {\n    var _this2 = this;\n\n    var lines = this.lines;\n\n    if (lines.length) {\n      var tokens = lines[lines.length - 1];\n\n      if (!tokens.length || tokens.length === 1 && !tokens[0][1].trim()) {\n        // Removes the last empty line.\n        lines.pop();\n      }\n    }\n\n    forOwn(Extensions, function (Component) {\n      Component(_this2);\n    });\n    this.event.emit('mounted');\n  }\n  /**\r\n   * Renders lines as HTML.\r\n   *\r\n   * @param append - A function to add fragments to the HTML string.\r\n   *\r\n   * @return A rendered HTML string.\r\n   */\n  ;\n\n  _proto3.renderLines = function renderLines(append) {\n    var event = this.event;\n    var tagName = this.options.span ? 'span' : 'code';\n\n    for (var i = 0; i < this.lines.length; i++) {\n      var tokens = this.lines[i];\n      var classes = [LINE];\n      event.emit('line:open', append, classes, i);\n      append(tag(classes));\n\n      var _loop = function _loop(j) {\n        var token = tokens[j];\n        var categories = token[0].split('.');\n        var className = PROJECT_CODE_SHORT + \"__\" + categories[0];\n        var modifiers = categories.slice(1).map(function (sub) {\n          return className + \"--\" + sub;\n        });\n        var classes = [TOKEN, className].concat(modifiers);\n        event.emit('token', token, classes);\n        append(\"\" + tag(classes, tagName) + escapeHtml(token[1]) + \"</\" + tagName + \">\");\n      };\n\n      for (var j = 0; j < tokens.length; j++) {\n        _loop(j);\n      }\n\n      append('</div>');\n      event.emit('line:closed', append, i);\n    }\n  }\n  /**\r\n   * Returns all lines and wrapper elements.\r\n   *\r\n   * @param pre - Whether to wrap elements by `pre` or not.\r\n   *\r\n   * @return An HTML string.\r\n   */\n  ;\n\n  _proto3.html = function html(pre) {\n    var event = this.event;\n    var closeTag = '</div>';\n    var html = '';\n\n    var append = function append(fragment) {\n      html += fragment;\n    };\n\n    if (pre) {\n      html += tag([ROOT + \" \" + ROOT + \"--\" + this.info.id], 'pre');\n    }\n\n    var containerClasses = [CONTAINER];\n    event.emit('open', append, containerClasses);\n    html += tag(containerClasses);\n    var bodyClasses = [\"\" + BODY + (this.options.wrap ? \" \" + BODY + \"--wrap\" : '')];\n    event.emit('body:open', append, bodyClasses);\n    html += tag(bodyClasses);\n    event.emit('code:open', append);\n    html += tag([CODE]);\n    this.renderLines(append);\n    html += closeTag; // code\n\n    event.emit('body:close', append);\n    html += closeTag; // body\n\n    event.emit('close', append);\n    html += closeTag; // container\n\n    event.emit('closed', append);\n\n    if (pre) {\n      html += \"</pre>\";\n    }\n\n    return html;\n  }\n  /**\r\n   * Destroys the instance.\r\n   */\n  ;\n\n  _proto3.destroy = function destroy() {\n    this.event.emit('destroy');\n    this.event.destroy();\n  };\n\n  return Renderer;\n}();\n/**\r\n * The data attribute name for a language.\r\n *\r\n * @since 0.0.1\r\n */\n\n\nvar ATTRIBUTE_LANGUAGE = \"data-\" + PROJECT_CODE_SHORT + \"-language\";\nvar REGEXP_NUMBER = /[+-]?(\\d+\\.?\\d*|\\d*\\.?\\d+)([eE][+-]?\\d+)?/;\nvar REGEXP_BOOLEAN = /\\b(?:true|false)\\b/;\nvar REGEXP_BRACKET = /[[\\]{}()]/;\nvar REGEXP_SPACE = /[ \\t]+/;\nvar REGEXP_QUOTE = /'(?:\\\\'|.)*?'/;\nvar REGEXP_DOUBLE_QUOTE = /\"(?:\\\\\"|.)*?\"/;\nvar REGEXP_MULTILINE_COMMENT = /\\/\\*[\\s\\S]*?(\\*\\/|$)/;\nvar REGEXP_SLASH_COMMENT = /\\/\\/.*/;\nvar REGEXP_GENERAL_KEYWORDS = /\\b(?:break|catch|class|continue|do|else|extends|finally|for|function|if|implements|in|instanceof|interface|new|null|return|throw|try|while)\\b/;\n/**\r\n * Returns the CSS language definition.\r\n *\r\n * @return A Language object.\r\n */\n\nfunction css() {\n  return {\n    id: 'css',\n    name: 'CSS',\n    grammar: {\n      main: [['#common'], // An atrule without a block\n      ['#findSingleAtrule'], // Blocks including atrules\n      ['#findBlock']],\n      findBlock: [['#block', /(?:(?![\\t\\n\\r ;\\{\\}])[\\s\\S])(?:(?![;\\{\\}])[\\s\\S])*\\{[\\s\\S]*?\\}/, '@rest']],\n      findSingleAtrule: [['#atrule', /@(?:(?![;\\{])[\\s\\S])+?;/]],\n      // Finds atrules before { and ;\n      findAtrule: [['#atrule', /@(?:(?![;\\{])[\\s\\S])*?(?=[;\\{])/]],\n      // May not start with digits\n      findSelector: [['#selector', /(?:(?![\\t\\n\\r ;\\{\\}])[\\s\\S])[\\s\\S]*?(?=\\{)/]],\n      common: [[CATEGORY_STRING, /([\"'])[\\s\\S]*?(?:(?!\\\\)[\\s\\S])\\1/], [CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT], [CATEGORY_SPACE, REGEXP_SPACE]],\n      block: [['#inner', /{/, '@rest'], [CATEGORY_BRACKET, /}/, '@break'], ['#findAtrule'], ['#findSelector'], [CATEGORY_SPACE, REGEXP_SPACE]],\n      inner: [[CATEGORY_BRACKET, /{/], ['#common'], ['#findBlock'], ['#props'], ['#findAtrule'], ['', /}/, '@back']],\n      atrule: [['#common'], ['#url', /\\burl\\(/, '@rest'], [CATEGORY_SPACE, REGEXP_SPACE], [CATEGORY_ATRULE, /[^\\s();]+/], [CATEGORY_DELIMITER, /[:;,]/], ['#paren', /\\(/, '@rest']],\n      paren: [[CATEGORY_BRACKET, /^\\(/], ['#common'], ['#paren', /\\(/, '@rest'], [CATEGORY_BRACKET, /\\)/, '@break'], ['#props']],\n      selector: [['#common'], [CATEGORY_OPERATOR, /[>+~]/], [CATEGORY_BRACKET, /[[\\]()]/], [CATEGORY_DELIMITER, /=/], [CATEGORY_SELECTOR, /::?\\S+/], [CATEGORY_SELECTOR, /[\\W\\d]\\S+/], [CATEGORY_TAG, /\\b[a-z]+|\\*/i], [CATEGORY_SELECTOR, /\\S+/]],\n      url: [['#common'], [CATEGORY_FUNCTION, /^url/], [CATEGORY_BRACKET, /\\(/], [CATEGORY_STRING, /[^)]+/], [CATEGORY_BRACKET, /\\)/, '@break']],\n      props: [[CATEGORY_PROPERTY, /[a-z0-9-_\\xA0-\\uFFFF]+(?=:)/i], ['#url', /\\burl\\(/, '@rest'], [CATEGORY_FUNCTION, /\\b[\\w-]+(?=\\()\\b/], [CATEGORY_KEYWORD, /!important|\\b(?:initial|inherit|unset)/], [CATEGORY_PROPERTY, /[a-z0-9-]+(?=:)/], [CATEGORY_NUMBER, /#([0-9a-f]{6}|[0-9a-f]{3})/i], [CATEGORY_NUMBER, /\\bU\\+[0-9a-f?-]+/i], [CATEGORY_NUMBER, /[+-]?(\\d+\\.?\\d*|\\d*\\.?\\d+)/], [CATEGORY_DELIMITER, /[:;,]/], ['#paren', /\\(/, '@rest'], [CATEGORY_BRACKET, /[[\\])]/], [CATEGORY_SPACE, REGEXP_SPACE]]\n    }\n  };\n}\n/**\r\n * Returns the JavaScript language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction javascript() {\n  return {\n    id: 'javascript',\n    name: 'JavaScript',\n    alias: ['js'],\n    source: {\n      func: /[_$a-z\\xA0-\\uFFFF][_$a-z0-9\\xA0-\\uFFFF]*/\n    },\n    grammar: {\n      main: [[CATEGORY_STRING, REGEXP_QUOTE], [CATEGORY_STRING, REGEXP_DOUBLE_QUOTE], ['#backtick', /`/, '@rest'], [CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT], [CATEGORY_COMMENT, REGEXP_SLASH_COMMENT], [CATEGORY_REGEXP, /\\/(\\[.*?]|\\\\\\/|.)+?\\/[gimsuy]*/], [CATEGORY_KEYWORD, REGEXP_GENERAL_KEYWORDS], [CATEGORY_KEYWORD, /\\b(?:as|async|await|case|catch|const|debugger|default|delete|enum|export|from|import|let|package|private|protected|public|super|switch|static|this|typeof|undefined|var|void|with|yield)\\b/], [CATEGORY_KEYWORD, /\\b((get|set)(?=\\s+%func))/i], [CATEGORY_CLASS, /\\b[A-Z][\\w$]*\\b/], [CATEGORY_FUNCTION, /%func(?=\\s*\\()/i], [CATEGORY_BOOLEAN, REGEXP_BOOLEAN], [CATEGORY_DECORATOR, /@[^\\s(@]+/], [CATEGORY_IDENTIFIER, /\\b[a-z_$][\\w$]*\\b/], [CATEGORY_NUMBER, REGEXP_NUMBER], [CATEGORY_OPERATOR, /=>/], [CATEGORY_OPERATOR, /\\+[+=]?|-[-=]?|\\*\\*?=?|[/%^]=?|&&?=?|\\|\\|?=?|\\?\\??=?|<<?=?|>>>=?|>>?=?|[!=]=?=?|[~:^]/], [CATEGORY_BRACKET, REGEXP_BRACKET], [CATEGORY_DELIMITER, /[;.,]+/], [CATEGORY_SPACE, REGEXP_SPACE]],\n      backtick: [[CATEGORY_STRING, /^`/], [CATEGORY_STRING, /(\\$[^{]|\\\\[$`]|[^`$])+/], ['#expression', /\\${/, '@rest'], [CATEGORY_STRING, /`/, '@break']],\n      expression: [[CATEGORY_DELIMITER, /^\\${/], [CATEGORY_DELIMITER, /}/, '@break'], ['#main']]\n    }\n  };\n}\n/**\r\n * Returns the HTML language definition.\r\n *\r\n * @param options - Optional. Options.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction html(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var script = (options.script || javascript)();\n  var style = (options.style || css)();\n  var cdata = [CATEGORY_CDATA, /<!\\[CDATA\\[[\\s\\S]*\\]\\]>/i]; // Embedded scripts or styles may contain CDATA sections.\n\n  script.grammar.main.unshift(cdata);\n  style.grammar.main.unshift(cdata);\n  return {\n    id: 'html',\n    alias: ['markup'],\n    name: 'HTML',\n    use: {\n      script: script,\n      style: style\n    },\n    grammar: {\n      main: [[CATEGORY_COMMENT, /<!\\x2D\\x2D[\\s\\S]*?\\x2D\\x2D>/], [CATEGORY_PROLOG, /<!DOCTYPE[\\s\\S]*?>/i], cdata, ['#script', /<script[\\s\\S]*?>[\\s\\S]*?<\\/script>/], ['#style', /<style[\\s\\S]*?>[\\s\\S]*?<\\/style>/], ['#tag', /<[\\s\\S]*?>/], [CATEGORY_ENTITY, /&[\\da-z]+;|&#\\d+;/i], [CATEGORY_SPACE, REGEXP_SPACE]],\n      script: [['#tag', /^<script[\\s\\S]*?>/], cdata, ['@script', /[\\s\\S]+(?=<\\/script>)/], ['#tag', /<\\/script>/]],\n      style: [['#tag', /^<style[\\s\\S]*?>/], ['@style', /[\\s\\S]+(?=<\\/style>)/], ['#tag', /<\\/style>/]],\n      tag: [['#closeTag', /<\\/.+>/], ['#tagContent']],\n      closeTag: [[CATEGORY_TAG_CLOSE, /[^\\s/<>\"'=]+/], ['#tagContent']],\n      tagContent: [['#attr', /[\\t\\n\\r ]+[\\s\\S]+(?=[\\t\\n\\r \\/>])/], [CATEGORY_TAG, /[^\\s/<>\"'=]+/], [CATEGORY_BRACKET, /[<>]/], [CATEGORY_DELIMITER, /[/]/]],\n      attr: [[CATEGORY_SPACE, REGEXP_SPACE], [CATEGORY_VALUE, /(['\"])(\\\\\\1|.)*?\\1/], [CATEGORY_DELIMITER, /[/=]/], [CATEGORY_ATTRIBUTE, /[^\\s/>\"'=]+/]]\n    }\n  };\n}\n/**\r\n * Returns the JSON language definition.\r\n *\r\n * @link https://www.json.org/json-en.html\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction json() {\n  return {\n    id: 'json',\n    name: 'JSON',\n    grammar: {\n      main: [[CATEGORY_PROPERTY, /\".*?[^\\\\]\"(?=:)/], [CATEGORY_STRING, REGEXP_DOUBLE_QUOTE], [CATEGORY_KEYWORD, /\\bnull\\b/], [CATEGORY_NUMBER, /[+-]?(\\d+\\.?\\d*)([eE][+-]?\\d+)?/], [CATEGORY_BRACKET, /[{}[\\]]/], [CATEGORY_BOOLEAN, REGEXP_BOOLEAN], [CATEGORY_OPERATOR, /:/], [CATEGORY_DELIMITER, /,/], [CATEGORY_SPACE, REGEXP_SPACE]]\n    }\n  };\n}\n/**\r\n * Returns the JSX language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction jsx(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var language = assign((options.base || javascript)(), {\n    id: 'jsx',\n    name: 'JSX',\n    alias: ['react']\n  });\n  var grammar = language.grammar;\n  before(grammar.main, CATEGORY_CLASS, [['#findPairedTag'], ['#findSelfClosedTag']]);\n  assign(grammar, {\n    // This doesn't pick correct paired tags if nested, but they are incrementally searched later.\n    findPairedTag: [['#pairedTag', /(?:<[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*?([0-9A-Z_a-z]+)[\\s\\S]*?>[\\s\\S]*?<\\/\\1>)|<[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*?>[\\s\\S]*?<\\/>/, '@rest']],\n    // Should not match the closing delimiter inside `{}`, `''` and `\"\"`.\n    findSelfClosedTag: [['#selfClosedTag', /<(?:\\{[\\s\\S]*?\\}|([\"'])[\\s\\S]*?\\1|(?:(?!>)[\\s\\S]))+?\\/>/]],\n    findBracket: [['#code', /{/, '@rest']],\n    pairedTag: [['#openTag', /^</, '@rest'], ['#findBracket'], ['#findPairedTag'], ['#findSelfClosedTag'], ['#tagName', /<\\/([\\w][^\\s]*?)?>/, '@break'], [CATEGORY_SPACE, REGEXP_SPACE]],\n    code: [[CATEGORY_BRACKET, /^{/], [CATEGORY_BRACKET, /}/, '@break'], ['#findBracket'], ['#main']],\n    selfClosedTag: [['#openTag', /^</, '@rest']],\n    openTag: [['#tagName', /<\\s*[^\\s/>\"'=]*/], ['#findBracket'], [CATEGORY_ATTRIBUTE, /[^\\s/>\"'=]+/], [CATEGORY_VALUE, /(['\"])(\\\\\\1|.)*?\\1/], [CATEGORY_SPACE, REGEXP_SPACE], [CATEGORY_DELIMITER, /[/=]/], [CATEGORY_BRACKET, />/, '@break']],\n    tagName: [[CATEGORY_BRACKET, /[<>]/], [CATEGORY_SPACE, REGEXP_SPACE], [CATEGORY_DELIMITER, /\\//], [CATEGORY_CLASS, /[A-Z][\\w$-]*/], [CATEGORY_TAG, /[^\\s/>\"'=]+/]]\n  });\n  return language;\n}\n/**\r\n * Returns the None language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction none() {\n  return {\n    id: 'none',\n    name: '',\n    grammar: {\n      main: []\n    }\n  };\n}\n/**\r\n * Returns the SCSS language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction scss() {\n  var language = assign(css(), {\n    id: 'scss',\n    name: 'SCSS'\n  });\n  var grammar = language.grammar;\n  assign(grammar, {\n    findBlock: [\n    /**\r\n     * Include: div {}, .class {}, #id {}, * {}, *{}, #{ $variable } {}, .something__#{ $variable } {}\r\n     * Exclude: #{ variable }: value\r\n     */\n    ['#block', /([\\*-_a-z]|#\\{(?:(?!;)[\\s\\S])*?\\}|((#\\{(?:(?!;)[\\s\\S])*?\\}|(?:(?![\\t-\\r ;\\{\\}\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF])[\\s\\S]))(#\\{(?:(?!;)[\\s\\S])*?\\}|(?:(?![#;\\{\\}])[\\s\\S])|#(?:(?!\\{)[\\s\\S]))+?))(?!#)\\{[\\s\\S]*?\\}/i, '@rest']],\n    // May contain #{} interpolation\n    findSingleAtrule: [['#atrule', /@(#\\{|(?:(?![;\\{])[\\s\\S]))+?;/]],\n    findAtrule: [['#atrule', /@(#\\{|(?:(?![;\\{])[\\s\\S]))*?(?=[;\\{])/]],\n    // May contain #{} interpolation\n    findSelector: [['#selector', /(?:(?!;)[\\s\\S])*?(?:(?!#)[\\s\\S])(?=\\{)/, '']],\n    findInterp: [['#interp', /#{/, '@rest']],\n    common: [['#string'], [CATEGORY_COMMENT, REGEXP_MULTILINE_COMMENT], [CATEGORY_COMMENT, REGEXP_SLASH_COMMENT], [CATEGORY_DELIMITER, /;/], [CATEGORY_SPACE, REGEXP_SPACE]],\n    string: [['#singleQuote', /'/, '@rest'], ['#doubleQuote', /\"/, '@rest']],\n    singleQuote: [[CATEGORY_STRING, /^'/], ['#findInterp'], [CATEGORY_STRING, /(\\\\'|#[^{]|[^'#])+/], [CATEGORY_STRING, /'/, '@break']],\n    doubleQuote: [[CATEGORY_STRING, /^\"/], ['#findInterp'], [CATEGORY_STRING, /(\\\\\"|#[^{]|[^\"#])+/], [CATEGORY_STRING, /\"/, '@break']],\n    selector: [['#common'], ['#findInterp'], [CATEGORY_OPERATOR, /[>+~]/], [CATEGORY_BRACKET, /[[\\]()]/], [CATEGORY_DELIMITER, /=/], [CATEGORY_SELECTOR, /::?\\S+(?=#{)/], [CATEGORY_SELECTOR, /[\\W\\d]\\S+(?=#{)/], [CATEGORY_TAG, /\\b[a-zA-Z]+\\b|\\*/], [CATEGORY_SELECTOR, /([^#\\s]|#[^{\\s])+/]],\n    url: [['#common'], ['#findInterp'], [CATEGORY_FUNCTION, /^url/], [CATEGORY_BRACKET, /\\(/], [CATEGORY_STRING, /[^)]+(?=#{)/], [CATEGORY_STRING, /[^)]+/], [CATEGORY_BRACKET, /\\)/, '@break']],\n    interp: [[CATEGORY_DELIMITER, /#{/], [CATEGORY_DELIMITER, /}/, '@break'], ['#common'], ['#props']]\n  });\n  grammar.inner.unshift(['#findInterp']);\n  before(grammar.atrule, '#url', [['#findInterp']]);\n  before(grammar.props, CATEGORY_PROPERTY, [['#findInterp'], [CATEGORY_VARIABLE, /\\$[\\w-_]+/]]);\n  return language;\n}\n/**\r\n * Returns the XML language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction xml() {\n  var language = assign(html(), {\n    id: 'xml',\n    name: 'XML',\n    alias: []\n  });\n  language.grammar.main.unshift([CATEGORY_PROLOG, /<\\?[\\s\\S]*?\\?>/]);\n  return language;\n}\n/**\r\n * Returns the XML language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction svg() {\n  return assign(xml(), {\n    id: 'svg',\n    name: 'SVG',\n    alias: []\n  });\n}\n/**\r\n * Returns the Typescript language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction typescript() {\n  var language = assign(javascript(), {\n    id: 'typescript',\n    name: 'TypeScript',\n    alias: ['ts']\n  });\n  var grammar = language.grammar;\n  var main = grammar.main;\n  before(main, CATEGORY_KEYWORD, [[CATEGORY_KEYWORD, /\\b(?:declare|keyof|namespace|readonly|type|string|number|boolean|bigint|symbol|object|any|never|unknown|infer|is)\\b/]]);\n  before(main, CATEGORY_FUNCTION, [['#functions', /([_$a-z\\xA0-\\uFFFF][_$a-z0-9\\xA0-\\uFFFF]*)?(?:<[^>]+?>)?\\s*?\\(/]]);\n  assign(grammar, {\n    functions: [[CATEGORY_FUNCTION, /^[\\w$]+/]].concat(main.filter(function (tokenizer) {\n      return tokenizer[0] !== '#functions';\n    }))\n  });\n  return language;\n}\n/**\r\n * Returns the TSX language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction tsx() {\n  return assign(jsx({\n    base: typescript\n  }), {\n    id: 'tsx',\n    name: 'TSX'\n  });\n}\n/**\r\n * Returns the VUE language definition.\r\n *\r\n * @return A Language object.\r\n */\n\n\nfunction vue(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var language = assign(html(options), {\n    id: 'vue',\n    name: 'Vue',\n    alias: []\n  }); // Vue uses Mustache syntax for writing code inside tags.\n\n  language.grammar.main.push(['@script', /{{[\\s\\S]*?}}/]);\n  return language;\n} // export { common }     from './common/common';\n\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  css: css,\n  html: html,\n  javascript: javascript,\n  json: json,\n  jsx: jsx,\n  none: none,\n  scss: scss,\n  svg: svg,\n  tsx: tsx,\n  typescript: typescript,\n  vue: vue,\n  xml: xml\n});\n/**\r\n * Stores all Lexer instances.\r\n */\n\nvar lexers = {};\n/**\r\n * The class that tokenizes code for syntax highlighting.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar RyuseiLight = /*#__PURE__*/function () {\n  /**\r\n   * The RyuseiLight constructor.\r\n   *\r\n   * @param options  - Optional. Options.\r\n   */\n  function RyuseiLight(options) {\n    /**\r\n     * Holds all renderers.\r\n     */\n    this.renderers = [];\n    this.options = assign({}, options);\n  }\n  /**\r\n   * Registers languages.\r\n   *\r\n   * @param languages - A Language object or objects.\r\n   */\n\n\n  RyuseiLight.register = function register(languages) {\n    toArray(languages).forEach(function (language) {\n      var id = language.id;\n\n      if (id && !lexers[id]) {\n        (language.alias || []).concat(id).forEach(function (id) {\n          lexers[id] = new Lexer(language);\n        });\n      }\n    });\n  }\n  /**\r\n   * Tokenizes the provided string.\r\n   *\r\n   * @param code     - A string to tokenize.\r\n   * @param language - A language ID.\r\n   * @param limit    - Optional. Limits the (ideal) number of lines.\r\n   *\r\n   * @return An array of arrays with tokens as [ string, string ].\r\n   */\n  ;\n\n  RyuseiLight.tokenize = function tokenize(code, language, limit) {\n    return RyuseiLight.getLexer(language).tokenize(code, limit);\n  }\n  /**\r\n   * Checks if the given language has been already registered or not.\r\n   *\r\n   * @param language - A language to check.\r\n   */\n  ;\n\n  RyuseiLight.has = function has(language) {\n    return !!lexers[language];\n  }\n  /**\r\n   * Returns a registered Lexer instance.\r\n   * If it's not found, the `none` lexer will be returned.\r\n   *\r\n   * @param language - A language name.\r\n   */\n  ;\n\n  RyuseiLight.getLexer = function getLexer(language) {\n    if (!lexers.none) {\n      RyuseiLight.register(none());\n    }\n\n    return lexers[language] || lexers.none;\n  }\n  /**\r\n   * Returns a new Renderer instance.\r\n   *\r\n   * @param code    - A code to highlight.\r\n   * @param elm     - Optional. An element to highlight.\r\n   * @param options - Optional. Options.\r\n   */\n  ;\n\n  var _proto4 = RyuseiLight.prototype;\n\n  _proto4.getRenderer = function getRenderer(code, elm, options) {\n    options = assign({}, this.options, options);\n    var language = options.language;\n    var _RyuseiLight$getLexer = RyuseiLight.getLexer(language).language,\n        name = _RyuseiLight$getLexer.name,\n        id = _RyuseiLight$getLexer.id;\n    return new Renderer(RyuseiLight.tokenize(code, language), {\n      name: name,\n      id: id\n    }, elm, options);\n  }\n  /**\r\n   * Applies the highlighter to elements that matches the selector or the provided element.\r\n   *\r\n   * @param target  - A selector or an element.\r\n   * @param options - Optional. Options.\r\n   */\n  ;\n\n  _proto4.apply = function apply(target, options) {\n    var elms = isString(target) ? document.querySelectorAll(target) : [target];\n\n    for (var i = 0; i < elms.length; i++) {\n      var elm = elms[i];\n\n      if (isHTMLElement(elm)) {\n        var elmOptions = assign({}, options, {\n          language: attr(elm, ATTRIBUTE_LANGUAGE) || undefined\n        });\n        var renderer = this.getRenderer(text(elm), elm, elmOptions);\n        var isPre = elm instanceof HTMLPreElement;\n\n        if (isPre) {\n          addClass$1(elm, [ROOT, ROOT + \"--\" + renderer.info.id]);\n        }\n\n        elm.innerHTML = renderer.html(!isPre);\n        renderer.event.emit('applied', elm);\n        this.renderers.push(renderer);\n      }\n    }\n  }\n  /**\r\n   * Returns highlighted HTML by tokenizing the provided code.\r\n   *\r\n   * @param code    - Code to highlight.\r\n   * @param options - Optional. Options.\r\n   *\r\n   * @return Highlighted HTML string.\r\n   */\n  ;\n\n  _proto4.html = function html(code, options) {\n    assert(isString(code), 'Invalid code.');\n    return this.getRenderer(code, null, options).html(true);\n  }\n  /**\r\n   * Destroys the instance.\r\n   */\n  ;\n\n  _proto4.destroy = function destroy() {\n    this.renderers.forEach(function (renderer) {\n      renderer.destroy();\n    });\n  };\n\n  return RyuseiLight;\n}();\n/**\r\n * Composes extensions.\r\n *\r\n * @param extensions - An object literal with Extension functions.\r\n */\n\n\nRyuseiLight.compose = Renderer.compose;\n/**\r\n * The data attribute name for active lines.\r\n * The value must be an array in JSON format, such as \"[ 2, [ 5, 10 ] ]\"\r\n *\r\n * @private\r\n * @since 0.0.1\r\n */\n\nvar ATTRIBUTE_ACTIVE_LINES = \"data-\" + PROJECT_CODE_SHORT + \"-active-lines\";\n/**\r\n * The component for highlighting lines.\r\n *\r\n * @since 0.0.1\r\n */\n\nfunction ActiveLines(_ref) {\n  var event = _ref.event,\n      root = _ref.root,\n      options = _ref.options;\n  var lines = root && parseData(root) || options.activeLines;\n\n  if (isArray(lines)) {\n    var activeLines = normalize(lines);\n    event.on('gutter:row:open', function (html, classes, index) {\n      if (activeLines[index]) {\n        classes.push(activeLines[index]);\n      }\n    });\n    event.on('line:open', function (html, classes, index) {\n      if (activeLines[index]) {\n        classes.push(activeLines[index]);\n      }\n    });\n  }\n}\n/**\r\n * Attempts to get definition of active lines from a data attribute.\r\n *\r\n * @param elm - A root element.\r\n *\r\n * @return An array with line numbers if available, or otherwise `undefined`.\r\n */\n\n\nfunction parseData(elm) {\n  var data = attr(elm, ATTRIBUTE_ACTIVE_LINES);\n\n  if (data) {\n    try {\n      return JSON.parse(data);\n    } catch (e) {\n      error(e.message);\n    }\n  }\n}\n/**\r\n * Normalizes the definition of lines to activate.\r\n *\r\n * @param lines - An array with line numbers.\r\n *\r\n * @return An array with normalized line numbers.\r\n */\n\n\nfunction normalize(lines) {\n  var numbers = [];\n  lines.forEach(function (range) {\n    if (!isArray(range)) {\n      range = [range, range];\n    }\n\n    var start = (+range[0] || 1) - 1;\n    var end = (+range[1] || 1) - 1;\n\n    for (var i = start; i <= end; i++) {\n      numbers[i] = ACTIVE;\n    }\n  });\n  return numbers;\n}\n/**\r\n * The data attribute name for a caption.\r\n *\r\n * @since 0.0.22\r\n */\n\n\nvar ATTRIBUTE_CAPTION = \"data-\" + PROJECT_CODE_SHORT + \"-caption\";\n/**\r\n * The component for wrapping a code snipped by a figure tag and appending a figcaption.\r\n *\r\n * @since 0.0.22\r\n */\n\nfunction Caption(_ref2) {\n  var event = _ref2.event,\n      root = _ref2.root,\n      options = _ref2.options;\n  var attrCaption = root && attr(root, ATTRIBUTE_CAPTION);\n\n  if (!attrCaption && !options.caption) {\n    return;\n  }\n\n  var captionOptions = options.caption;\n\n  var _assign = assign({}, isObject(captionOptions) ? captionOptions : null),\n      position = _assign.position,\n      html = _assign.html;\n\n  var caption = attrCaption || html || (isString(captionOptions) ? captionOptions : '');\n\n  if (caption) {\n    var bottom = position === 'bottom';\n    event.on('open', function (append) {\n      append(\"<figure class=\\\"\" + PROJECT_CODE_SHORT + \"__figure\\\">\");\n\n      if (!bottom) {\n        appendCaption(append, caption);\n      }\n    });\n    event.on('closed', function (append) {\n      if (bottom) {\n        appendCaption(append, caption, true);\n      }\n\n      append('</figure>');\n    });\n  }\n}\n/**\r\n * Appends a figcaption element with a provided caption.\r\n *\r\n * @param append  - The append function.\r\n * @param caption - A caption.\r\n * @param bottom  - Optional. Set `true` for a bottom caption.\r\n */\n\n\nfunction appendCaption(append, caption, bottom) {\n  var className = PROJECT_CODE_SHORT + \"__figcaption\";\n  append(\"<figcaption class=\\\"\" + className + \" \" + (className + (bottom ? '--bottom' : '--top')) + \"\\\">\");\n  append(\"<span>\" + caption + \"</span>\");\n  append(\"</figcaption>\");\n}\n/**\r\n * Default options for the Copy component.\r\n *\r\n * @private\r\n *\r\n * @since 0.0.1\r\n */\n\n\nvar DEFAULT_OPTIONS$1 = {\n  html: 'Copy',\n  activeHtml: 'Done',\n  duration: 1000,\n  ariaLabel: 'Copy code to clipboard',\n  position: 'topRight'\n};\n/**\r\n * The component for creating a copy button and handling click.\r\n *\r\n * @since 0.0.1\r\n */\n\nfunction Copy(_ref3) {\n  var lines = _ref3.lines,\n      event = _ref3.event,\n      options = _ref3.options;\n\n  if (options.copy) {\n    var copyOptions = assign({}, DEFAULT_OPTIONS$1, isObject(options.copy) ? options.copy : {});\n    var buttonClass = PROJECT_CODE_SHORT + \"__copy\";\n    var labelClass = PROJECT_CODE_SHORT + \"__button__label\";\n    options.tools = copyOptions.position;\n    event.on(\"tools:\" + copyOptions.position, function (append) {\n      append(\"<button type=\\\"button\\\" class=\\\"rl__button \" + buttonClass + \"\\\" aria-label=\\\"\" + copyOptions.ariaLabel + \"\\\">\");\n      append(\"<span class=\\\"\" + labelClass + \" \" + labelClass + \"--inactive\\\">\" + copyOptions.html + \"</span>\");\n      append(\"<span class=\\\"\" + labelClass + \" \" + labelClass + \"--active\\\">\" + copyOptions.activeHtml + \"</span>\");\n      append(\"</button>\");\n    });\n    event.on('applied', function (root) {\n      var button = query(\".\" + buttonClass, root);\n      var code = lines.map(function (line) {\n        return line.map(function (token) {\n          return token[1];\n        }).join('');\n      }).join(LINE_BREAK);\n\n      if (button) {\n        var onClick = function onClick() {\n          copy(code, button, copyOptions.duration);\n        };\n\n        button.addEventListener('click', onClick);\n        event.on('destroy', function () {\n          button.removeEventListener('click', onClick);\n        });\n      }\n    });\n  }\n}\n/**\r\n * Attempts to copy the provided code by the Clipboard API.\r\n *\r\n * @param code     - A code to copy.\r\n * @param button   - A button element.\r\n * @param duration - Duration for the button activation.\r\n */\n\n\nfunction copy(code, button, duration) {\n  var onSuccess = function onSuccess() {\n    if (duration) {\n      toggleClass(button, duration);\n    }\n  };\n\n  if (navigator.clipboard) {\n    navigator.clipboard.writeText(code).then(onSuccess)[\"catch\"](function () {\n      return execCopy(code, onSuccess);\n    });\n  } else {\n    execCopy(code, onSuccess);\n  }\n}\n/**\r\n * Attempts to copy the provided code by the `document.execCommand()` for old browsers.\r\n * Note that this method is deprecated.\r\n *\r\n * @param code      - Code to copy.\r\n * @param onSuccess - Called after the copy is done.\r\n */\n\n\nfunction execCopy(code, onSuccess) {\n  var textarea = create('textarea');\n  textarea.textContent = code;\n  styles(textarea, {\n    position: 'absolute',\n    left: '-99999px'\n  });\n  append(document.body, textarea);\n  textarea.focus();\n  textarea.select();\n  var failed;\n\n  try {\n    document.execCommand('copy');\n  } catch (e) {\n    alert('Failed to copy.');\n    failed = true;\n  }\n\n  document.body.removeChild(textarea);\n\n  if (!failed) {\n    onSuccess();\n  }\n}\n/**\r\n * Toggles the active class of the button.\r\n *\r\n * @param button   - A button element.\r\n * @param duration - Duration for the button activation.\r\n */\n\n\nfunction toggleClass(button, duration) {\n  addClass$1(button, ACTIVE);\n  var prop = '_rlTimer';\n\n  if (button[prop]) {\n    clearTimeout(button[prop]);\n  }\n\n  button[prop] = setTimeout(function () {\n    button.classList.remove(ACTIVE);\n  }, duration);\n}\n/**\r\n * The class name for added lines.\r\n *\r\n * @private\r\n * @since 0.0.17\r\n */\n\n\nvar CLASS_ADDED = 'is-added';\n/**\r\n * The class name for deleted lines.\r\n *\r\n * @private\r\n * @since 0.0.17\r\n */\n\nvar CLASS_DELETED = 'is-deleted';\n/**\r\n * The class name for deleted lines.\r\n *\r\n * @private\r\n * @since 0.0.17\r\n */\n\nvar CLASS_DIFF = PROJECT_CODE_SHORT + \"__diff\";\n/**\r\n * Default options for the Diff component.\r\n *\r\n * @since 0.0.17\r\n */\n\nvar DEFAULT_OPTIONS = {\n  addedSymbol: '+',\n  deletedSymbol: '-'\n};\n/**\r\n * The component for highlighting added/deleted lines.\r\n *\r\n * @since 0.0.17\r\n */\n\nfunction Diff(_ref4) {\n  var event = _ref4.event,\n      lines = _ref4.lines,\n      options = _ref4.options;\n\n  if (!options.diff) {\n    return;\n  }\n\n  options.gutter = true;\n  var diffOptions = assign({}, DEFAULT_OPTIONS, isObject(options.diff) ? options.diff : null);\n  var added = [];\n  var deleted = [];\n  lines.forEach(function (tokens, index) {\n    if (tokens.length) {\n      var _text = tokens[0][1];\n      var processed;\n\n      if (startsWith(_text, diffOptions.addedSymbol)) {\n        added.push(index);\n        processed = true;\n      } else if (startsWith(_text, diffOptions.deletedSymbol)) {\n        deleted.push(index);\n        processed = true;\n      }\n\n      if (processed) {\n        convertSymbols(diffOptions.removeSymbols, tokens);\n      }\n    }\n  });\n\n  if (!added.length && !deleted.length) {\n    return;\n  }\n\n  event.on('line:open', function (append, classes, i) {\n    addClass(added, deleted, i, classes);\n  });\n  event.on('gutter:row:open', function (append, classes, i) {\n    addClass(added, deleted, i, classes);\n  });\n  event.on('gutter:row:opened', function (append, i) {\n    var content = LINE_BREAK;\n\n    if (added.indexOf(i) > -1) {\n      content = diffOptions.addedSymbol;\n    } else if (deleted.indexOf(i) > -1) {\n      content = diffOptions.deletedSymbol;\n    }\n\n    append(\"<span class=\\\"\" + CLASS_DIFF + \"\\\">\" + content + \"</span>\");\n  }, 20);\n  event.on('lineNumber:open', function (append, classes, i, data) {\n    data.skip = deleted.indexOf(i) > -1;\n  });\n}\n/**\r\n * Adds a status class according to the added or deleted lines.\r\n *\r\n * @param added   - An array with added line indices.\r\n * @param deleted - An array with deleted line indices.\r\n * @param index   - A line index.\r\n * @param classes - An array with line classes.\r\n */\n\n\nfunction addClass(added, deleted, index, classes) {\n  if (added.indexOf(index) > -1) {\n    classes.push(CLASS_ADDED);\n  } else if (deleted.indexOf(index) > -1) {\n    classes.push(CLASS_DELETED);\n  }\n}\n/**\r\n * Converts +/- symbols to spaces or removes them.\r\n *\r\n * @param remove - Whether to remove symbols or not.\r\n * @param tokens - Target tokens.\r\n */\n\n\nfunction convertSymbols(remove, tokens) {\n  var _tokens$ = tokens[0],\n      category = _tokens$[0],\n      text = _tokens$[1];\n\n  if (remove) {\n    if (text.length === 1) {\n      tokens.shift();\n    } else {\n      tokens[0] = [category, text.slice(1)];\n    }\n  } else {\n    var spaceToken = [CATEGORY_SPACE, ' '];\n\n    if (text.length === 1) {\n      tokens[0] = spaceToken;\n    } else {\n      tokens[0] = [category, text.slice(1)];\n      tokens.unshift(spaceToken);\n    }\n  }\n}\n/**\r\n * The throttle duration in milliseconds for resizing gutter rows.\r\n *\r\n * @since 0.0.1\r\n */\n\n\nvar THROTTLE_DURATION = 100;\n/**\r\n * The class name for a gutter element.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar GUTTER_CLASS_NAME = PROJECT_CODE_SHORT + \"__gutter\";\n/**\r\n * The class name for row element in a gutter.\r\n *\r\n * @since 0.0.1\r\n */\n\nvar GUTTER_ROW_CLASS_NAME = GUTTER_CLASS_NAME + \"__row\";\n/**\r\n * The component for creating a gutter and its rows.\r\n * This is usually activated by other extensions through the `gutter` option.\r\n *\r\n * @since 0.0.1\r\n */\n\nfunction Gutter(_ref5) {\n  var lines = _ref5.lines,\n      event = _ref5.event,\n      root = _ref5.root,\n      options = _ref5.options;\n  // Wait for initialization of other extensions.\n  event.on('mounted', function () {\n    if (!options.gutter) {\n      return;\n    }\n\n    event.on('open', function (append, classes) {\n      classes.push('has-gutter');\n    });\n    event.on('code:open', function (append) {\n      append(\"<div class=\\\"\" + GUTTER_CLASS_NAME + \"\\\" aria-hidden=\\\"true\\\">\");\n\n      for (var i = 0; i < lines.length; i++) {\n        var classes = [GUTTER_ROW_CLASS_NAME];\n        event.emit('gutter:row:open', append, classes, i);\n        append(\"<div class=\\\"\" + classes.join(' ') + \"\\\">\");\n        event.emit('gutter:row:opened', append, i);\n        append(\"</div>\");\n      }\n\n      append(\"</div>\");\n    });\n\n    if (!root || typeof window === 'undefined') {\n      return;\n    }\n\n    window.addEventListener('resize', throttle(resize, THROTTLE_DURATION));\n    resize();\n    event.on('destroy', function () {\n      window.removeEventListener('resize', resize);\n    });\n    /**\r\n     * Resizes rows according to line height.\r\n     */\n\n    function resize() {\n      var rows = root.getElementsByClassName(GUTTER_ROW_CLASS_NAME);\n      var code = query(\".\" + CODE, root);\n\n      if (rows.length && code) {\n        for (var i = 0; i < code.children.length; i++) {\n          var row = rows[i];\n          var line = code.children[i];\n\n          if (isHTMLElement(row) && row.clientHeight !== line.clientHeight) {\n            styles(row, {\n              height: line.clientHeight + \"px\"\n            });\n          }\n        }\n      }\n    }\n  });\n}\n/**\r\n * The component for rendering a language name.\r\n *\r\n * @since 0.0.1\r\n */\n\n\nfunction LanguageName(_ref6) {\n  var event = _ref6.event,\n      info = _ref6.info,\n      options = _ref6.options;\n  var name = info.name;\n\n  if (options.languageName && name) {\n    var position = options.languageName === 'topLeft' ? 'topLeft' : 'topRight';\n    options.overlay = options.overlay || {};\n    options.overlay[position] = true;\n    event.on(\"overlay:\" + position, function (append) {\n      append(\"<span class=\\\"\" + PROJECT_CODE_SHORT + \"__name\\\">\" + info.name + \"</span>\");\n    });\n  }\n}\n/**\r\n * The data attribute name for line numbers.\r\n * This accepts boolean or number as a value.\r\n *\r\n * @private\r\n * @since 0.0.1\r\n */\n\n\nvar ATTRIBUTE_LINE_NUMBERS = \"data-\" + PROJECT_CODE_SHORT + \"-line-numbers\";\n/**\r\n * The class name for each line number element.\r\n *\r\n * @private\r\n * @since 0.0.23\r\n */\n\nvar LINE_NUMBER_CLASS_NAME = PROJECT_CODE_SHORT + \"__line-number\";\n/**\r\n * The component for displaying line numbers in a gutter.\r\n *\r\n * @since 0.0.1\r\n */\n\nfunction LineNumbers(_ref7) {\n  var root = _ref7.root,\n      event = _ref7.event,\n      options = _ref7.options;\n  var data = root ? attr(root, ATTRIBUTE_LINE_NUMBERS) : '';\n  var number = data === '' ? +options.lineNumbers : +data;\n\n  if (number || number === 0) {\n    options.gutter = true;\n    var offset = Math.floor(number) - 1;\n    event.on('gutter:row:opened', function (append, i) {\n      var classes = [LINE_NUMBER_CLASS_NAME];\n      var data = {\n        skip: false,\n        content: i + 1 + offset\n      };\n      event.emit('lineNumber:open', append, classes, i, data);\n\n      if (data.skip) {\n        data.content = LINE_BREAK;\n        offset--;\n      }\n\n      append(\"<span class=\\\"\" + classes.join(' ') + \"\\\">\" + data.content + \"</span>\");\n    });\n  }\n}\n/**\r\n * The component for rendering overlay and tools elements.\r\n *\r\n * @since 0.0.1\r\n */\n\n\nfunction Overlay(_ref8) {\n  var event = _ref8.event,\n      options = _ref8.options;\n  event.on('mounted', function () {\n    var _options$overlay = options.overlay,\n        overlay = _options$overlay === void 0 ? {} : _options$overlay;\n    var tools = options.tools;\n    var topRight = overlay.topRight,\n        topLeft = overlay.topLeft;\n    topRight = topRight || tools === 'topRight';\n    topLeft = topLeft || tools === 'topLeft';\n    [topRight, topLeft].forEach(function (active, index) {\n      if (active) {\n        if (tools) {\n          appendTools(event, index === 1);\n        }\n\n        appendOverlay(event, index === 1);\n      }\n    });\n\n    if (topRight || topLeft) {\n      event.on('open', function (append, classes) {\n        classes.push('has-top-overlay');\n      });\n    }\n  });\n}\n/**\r\n * Appends HTML for the overlay.\r\n *\r\n * @private\r\n *\r\n * @param event - The EventBus object.\r\n * @param left  - Optional. Set `true` for the left overlay.\r\n */\n\n\nfunction appendOverlay(event, left) {\n  var className = PROJECT_CODE_SHORT + \"__overlay\";\n  event.on('close', function (append) {\n    append(\"<div class=\\\"\" + className + \" \" + className + \"--top-\" + (left ? 'left' : 'right') + \"\\\">\");\n    event.emit(\"overlay:top\" + (left ? 'Left' : 'Right'), append);\n    append(\"</div>\");\n  });\n}\n/**\r\n * Appends HTML for tools.\r\n *\r\n * @private\r\n *\r\n * @param event - The EventBus object.\r\n * @param left  - Optional. Set `true` for the left tools.\r\n */\n\n\nfunction appendTools(event, left) {\n  var position = left ? 'Left' : 'Right';\n  event.on(\"overlay:top\" + position, function (append) {\n    append(\"<span class=\\\"\" + PROJECT_CODE_SHORT + \"__tools\\\">\");\n    event.emit(\"tools:top\" + position, append);\n    append(\"</span>\");\n  });\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ActiveLines: ActiveLines,\n  Caption: Caption,\n  Copy: Copy,\n  Diff: Diff,\n  Gutter: Gutter,\n  LanguageName: LanguageName,\n  LineNumbers: LineNumbers,\n  Overlay: Overlay\n});\nexport { ActiveLines, CATEGORY_ATRULE, CATEGORY_ATTRIBUTE, CATEGORY_BOOLEAN, CATEGORY_BRACKET, CATEGORY_CDATA, CATEGORY_CLASS, CATEGORY_COMMENT, CATEGORY_CONSTANT, CATEGORY_DECORATOR, CATEGORY_DELIMITER, CATEGORY_ENTITY, CATEGORY_FUNCTION, CATEGORY_IDENTIFIER, CATEGORY_KEYWORD, CATEGORY_LINEBREAK, CATEGORY_NUMBER, CATEGORY_OPERATOR, CATEGORY_PROLOG, CATEGORY_PROPERTY, CATEGORY_REGEXP, CATEGORY_SELECTOR, CATEGORY_SPACE, CATEGORY_STRING, CATEGORY_SYMBOL, CATEGORY_TAG, CATEGORY_TAG_CLOSE, CATEGORY_TEXT, CATEGORY_VALUE, CATEGORY_VARIABLE, Caption, Copy, Diff, index as Extensions, Gutter, LanguageName, Lexer, LineNumbers, Overlay, RyuseiLight, css, RyuseiLight as default, html, javascript, json, jsx, index$1 as languages, none, scss, svg, tsx, typescript, vue, xml };\n","import { Options, Token, TokenInfo } from '@ryusei/code';\nimport { CATEGORY_COMMENT, CATEGORY_LINEBREAK, CATEGORY_SPACE } from '@ryusei/light';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { count, includes, isUndefined } from '../../utils';\n\n\n/**\n * Determines what HTML should be inserted to empty lines.\n * Be aware that changing this character may break the selection.\n *\n * @since 0.1.0\n */\nconst EMPTY_LINE_HTML = '<br>';\n\n/**\n * The class for managing data of each line.\n *\n * @since 0.1.0\n */\nexport class Line {\n  /**\n   * Holds options.\n   */\n  private readonly options: Options;\n\n  /**\n   * Holds the last update time.\n   */\n  private time = 0;\n\n  /**\n   * Keeps the built HTML string.\n   */\n  private htmlCache: string;\n\n  /**\n   * Keeps the built text.\n   */\n  private textCache: string;\n\n  /**\n   * Holds the depth of the first token.\n   */\n  depth = 0;\n\n  /**\n   * Holds tokens.\n   */\n  tokens: readonly Token[] = [];\n\n  /**\n   * A language of the first token.\n   */\n  language: string;\n\n  /**\n   * Indicates whether the first token is split into multilines or not.\n   */\n  split: boolean;\n\n  /**\n   * Depth of tabs.\n   */\n  indentDepth = 0;\n\n  /**\n   * The Line constructor.\n   *\n   * @param options - Options.\n   */\n  constructor( options: Options ) {\n    this.options = options;\n  }\n\n  /**\n   * Initializes some properties.\n   */\n  protected init(): void {\n    const { first } = this;\n    const info = ( first && first[ 2 ] ) || {} as TokenInfo;\n\n    this.depth       = info.depth || 0;\n    this.language    = info.language || '';\n    this.split       = info.split;\n    this.indentDepth = count( this.getIndent(), this.options.indent );\n    this.htmlCache   = undefined;\n    this.textCache   = undefined;\n  }\n\n  /**\n   * Sets new tokens and initializes properties.\n   * To avoid updating tokens by the old value made by async processes,\n   * pass the update time with `Date.now()`.\n   *\n   * @param tokens - An array with tokens.\n   * @param time   - Optional. If this time is older than the current time, tokens will not be updated.\n   */\n  set( tokens: readonly Token[], time?: number ): void {\n    if ( ! time || time > this.time ) {\n      this.tokens = tokens;\n      this.time   = time || Date.now();\n\n      this.init();\n    }\n  }\n\n  /**\n   * Returns the indent of the line if available.\n   *\n   * @return An indent string if available, or an empty string if not.\n   */\n  getIndent(): string {\n    const { first } = this;\n\n    if ( first ) {\n      if ( first[ 0 ] === CATEGORY_SPACE ) {\n        return first[ 1 ];\n      }\n\n      if ( first[ 0 ] === CATEGORY_COMMENT ) {\n        const match = this.text.match( new RegExp( `^${ this.options.indent }+` ) );\n        return match ? match[ 0 ] : '';\n      }\n    }\n\n    return '';\n  }\n\n  /**\n   * Returns the TokenInfo object at the index.\n   *\n   * @param index - A token index.\n   *\n   * @return A TokenInfo object if available, or `undefined` if not.\n   */\n  getInfo( index: number ): TokenInfo | undefined {\n    const token = this.tokens[ index ];\n    return token && token[ 2 ];\n  }\n\n  /**\n   * Returns the TokenInfo object at the col index.\n   *\n   * @param col - A col index.\n   *\n   * @return A TokenInfo object if available, or `undefined` if not.\n   */\n  getInfoAt( col: number ): TokenInfo | undefined {\n    const { tokens, tokens: { length } } = this;\n\n    if ( tokens.length ) {\n      if ( col === this.text.length ) {\n        return tokens[ length - 1 ][ 2 ];\n      }\n\n      for ( let i = 0; i < length; i++ ) {\n        const info = tokens[ i ][ 2 ];\n\n        if ( info.from <= col && col < info.to ) {\n          return info;\n        }\n      }\n    }\n  }\n\n  /**\n   * Checks if the line contains only a line break/spaces or not.\n   *\n   * @return `true` if the line contains only a line break or spaces. Otherwise, `false`.\n   */\n  isEmpty(): boolean {\n    const { tokens } = this;\n    return tokens.length === 1 && includes( [ CATEGORY_LINEBREAK, CATEGORY_SPACE ], tokens[ 0 ][ 0 ] );\n  }\n\n  /**\n   * Builds the HTML by tokens.\n   * This should not be pre-built in the init function for better performance.\n   *\n   * @return The HTML string of the line.\n   */\n  get html(): string {\n    if ( ! this.htmlCache ) {\n      let html = '';\n\n      for ( let i = 0; i < this.tokens.length; i++ ) {\n        const token = this.tokens[ i ];\n\n        if ( i === 0 && token[ 1 ] === LINE_BREAK ) {\n          html += EMPTY_LINE_HTML;\n          break;\n        } else {\n          html += token[ 2 ].html;\n        }\n      }\n\n      this.htmlCache = html || EMPTY_LINE_HTML;\n    }\n\n    return this.htmlCache;\n  }\n\n  /**\n   * Builds the text by tokens.\n   *\n   * @return The text of the line.\n   */\n  get text(): string {\n    if ( isUndefined( this.textCache ) ) {\n      this.textCache = this.tokens.reduce( ( text, token ) => {\n        if ( token[ 0 ] !== CATEGORY_LINEBREAK ) {\n          text += token[ 1 ];\n        }\n\n        return text;\n      }, '' );\n    }\n\n    return this.textCache;\n  }\n\n  /**\n   * Returns the first token.\n   *\n   * @return The first token.\n   */\n  get first(): Token {\n    return this.tokens[ 0 ];\n  }\n}\n","import { Language, Options, Position, ScanResult, Token, TokenInfo, TokenMatcher } from '@ryusei/code';\nimport { AbstractArrayLike } from '../../classes/AbstractArrayLike/AbstractArrayLike';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { Editor } from '../../core/Editor/Editor';\nimport { EventBus } from '../../event/EventBus';\nimport { forOwn, isUndefined, max, min } from '../../utils';\nimport { matchesToken } from '../../utils/token';\nimport { Line } from './Line';\n\n\n/**\n * The max number of lines to be inserted at once.\n * Inserting many lines harms the performance.\n *\n * @since 0.1.0\n */\nconst MAX_INSERTION_LENGTH = 100;\n\n/**\n * Delay for the asynchronous tokenization.\n *\n * @since 0.1.0\n */\nconst ASYNC_SYNC_DELAY = 10;\n\n/**\n * The class for managing data of all lines.\n *\n * @since 0.1.0\n */\nexport class Lines extends AbstractArrayLike<Line> {\n  /**\n   * Holds the setTimeout ids.\n   */\n  private readonly timers: Record<string, ReturnType<typeof setTimeout>> = {};\n\n  /**\n   * Holds the language object.\n   */\n  private readonly language: Language;\n\n  /**\n   * Holds options.\n   */\n  private readonly options: Options;\n\n  /**\n   * Holds the EventBus object.\n   */\n  private readonly event: EventBus<Editor>;\n\n  /**\n   * The Lines constructor.\n   *\n   * @param event    - An EventBus instance.\n   * @param language - A Language object.\n   * @param options  - Options.\n   */\n  constructor( event: EventBus<Editor>, language: Language, options: Options ) {\n    super();\n\n    this.language = language;\n    this.event    = event;\n    this.options  = options;\n  }\n\n  /**\n   * Inserts a new empty Line instance or instances at the specified row.\n   *\n   * @param row   - A row index.\n   * @param count - A number of lines to insert.\n   */\n  insert( row: number, count?: number ): void {\n    count = count || 1;\n\n    while ( count-- > 0 ) {\n      this.splice( row, 0, new Line( this.options ) );\n    }\n  }\n\n  /**\n   * Deletes a Line instance or instances from the specified row.\n   *\n   * @param row   - A row index.\n   * @param count - A number of lines to delete.\n   */\n  delete( row: number, count: number ): void {\n    this.splice( row, count );\n  }\n\n  /**\n   * Syncs Line instances with the provided code.\n   *\n   * @param row    - A row index where sync starts.\n   * @param code   - Code to sync.\n   * @param limit  - Optional. Limits the number of lines to sync.\n   * @param before - Optional. A pseudo line prepended to the code.\n   * @param time   - Optional. A timestamp when the sync starts.\n   *\n   * @return `true` if the last line is changed, or otherwise `false`.\n   */\n  sync( row: number, code: string, limit?: number, before = '', time?: number ): boolean {\n    if ( before ) {\n      code = before + LINE_BREAK + code;\n\n      if ( limit ) {\n        limit++;\n      }\n    }\n\n    const lines = this.language.lexer.run( code, limit );\n\n    if ( before ) {\n      lines.shift();\n    }\n\n    let changed;\n\n    for ( let i = 0; i < lines.length; i++ ) {\n      const rowIndex = row + i;\n      const tokens   = lines[ i ];\n\n      if ( ! this[ rowIndex ] ) {\n        this.insert( rowIndex );\n      }\n\n      if ( this[ rowIndex ] ) {\n        if ( i === lines.length - 1 ) {\n          changed = ! this.isSame( this[ rowIndex ].tokens, tokens );\n        }\n\n        this[ rowIndex ].set( tokens, time );\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n   * Starts an asynchronous sync process.\n   *\n   * @param id       - A worker ID.\n   * @param row      - A row index where sync starts.\n   * @param code     - Code to sync.\n   * @param limit    - Optional. Limits the number of lines to sync.\n   * @param before   - Optional. A pseudo line prepended to the code.\n   * @param callback - Optional. A function called after syncing.\n   */\n  asyncSync(\n    id: string,\n    row: number,\n    code: string,\n    limit?: number,\n    before = '',\n    callback?: () => void\n  ): void {\n    const { timers } = this;\n\n    if ( timers[ id ] ) {\n      clearTimeout( timers[ id ] );\n    }\n\n    const time = Date.now();\n\n    timers[ id ] = setTimeout( () => {\n      this.sync( row, code, limit, before, time );\n\n      if ( callback ) {\n        callback();\n      }\n    }, ASYNC_SYNC_DELAY );\n  }\n\n  /**\n   * Finds the minimum indent string between the `startRow` and the `endRow`.\n   *\n   * @param startRow - A start row index to search from.\n   * @param endRow   - An end row index to search to.\n   *\n   * @return A minimum indent string.\n   */\n  findMinIndent( startRow: number, endRow: number ): string {\n    let minIndent = undefined;\n\n    for ( let i = startRow; i <= endRow; i++ ) {\n      const indent = this[ i ].getIndent();\n      minIndent = isUndefined( minIndent ) || minIndent.length > indent.length ? indent : minIndent;\n    }\n\n    return minIndent || '';\n  }\n\n  /**\n   * Returns a token info at the specified position.\n   *\n   * @param position - A position to search at.\n   *\n   * @return A TokenInfo if available, or otherwise `undefined`.\n   */\n  getInfoAt( position: Position ): TokenInfo | undefined {\n    const line = this[ position[ 0 ] ];\n    return line ? line.getInfoAt( position[ 1 ] ) : undefined;\n  }\n\n  /**\n   * Searches backwards for a token that matches the matcher.\n   * If the `counterpart` matcher is provided,\n   * this method attempts to match the target and counterpart, such as `{` and `}`.\n   *\n   * @param position    - A position to start searching.\n   * @param matcher     - A matcher.\n   * @param counterpart - Optional. A matcher of the counter part.\n   * @param depth       - Optional. Determines the initial depth.\n   * @param limit       - Optional. Limits the number of lines to scan.\n   *\n   * @return A TokenInfo object if found, or `undefined` if not.\n   */\n  scanUp(\n    position: Position,\n    matcher: TokenMatcher,\n    counterpart?: TokenMatcher,\n    depth = 0,\n    limit?: number\n  ): ScanResult | undefined {\n    const info = this.getInfoAt( position );\n\n    if ( info ) {\n      const [ row ] = position;\n      const min = limit ? max( 0, row - limit ) : 0;\n\n      for ( let i = row; i >= min; i-- ) {\n        const tokens = this[ i ].tokens;\n\n        for ( let j = i === row ? info.index : tokens.length - 1; j >= 0; j-- ) {\n          if ( matchesToken( tokens[ j ], matcher ) ) {\n            if ( ! depth ) {\n              return { row: i, info: this[ i ].getInfo( j ) };\n            }\n\n            depth++;\n          }\n\n          if ( counterpart && matchesToken( tokens[ j ], counterpart ) ) {\n            depth--;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Searches forwards for a token that matches the matcher.\n   * If the `counterpart` matcher is provided,\n   * this method attempts to match the target and counterpart, such as `{` and `}`.\n   *\n   * @param position    - A position to start searching.\n   * @param matcher     - A matcher.\n   * @param counterpart - Optional. A matcher of the counter part.\n   * @param depth       - Optional. Determines the initial depth.\n   * @param limit       - Optional. Limits the number of lines to scan.\n   *\n   * @return A TokenInfo object if found, or `undefined` if not.\n   */\n  scanDown(\n    position: Position,\n    matcher: TokenMatcher,\n    counterpart?: TokenMatcher,\n    depth = 0,\n    limit?: number\n  ): ScanResult | undefined {\n    const info = this.getInfoAt( position );\n\n    if ( info ) {\n      const [ row ] = position;\n      const { length } = this;\n      const max = limit ? min( length, row + limit ) : length;\n\n      for ( let i = row; i < max; i++ ) {\n        const tokens = this[ i ].tokens;\n\n        for ( let j = i === row ? info.index : 0; j < tokens.length; j++ ) {\n          if ( matchesToken( tokens[ j ], matcher ) ) {\n            if ( ! depth ) {\n              return { row: i, info: this[ i ].getInfo( j ) };\n            }\n\n            depth++;\n          }\n\n          if ( counterpart && matchesToken( tokens[ j ], counterpart ) ) {\n            depth--;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Searches for a start position where the split token actually starts.\n   * If the token at the position is not split, this returns `undefined`.\n   *\n   * @param position - A position.\n   *\n   * @return A position where the split token starts if available.\n   */\n  findBlockStart( position: Position ): Position | undefined {\n    const info = this.getInfoAt( position );\n\n    if ( info ) {\n      if ( info.split ) {\n        const startRow = position[ 0 ] - info.distance;\n        const line     = this[ startRow ];\n        const lastInfo = line.getInfo( line.tokens.length - 1 );\n        return [ startRow, lastInfo.from ];\n      }\n\n      return [ position[ 0 ], info.from ];\n    }\n  }\n\n  /**\n   * Searches for an end position where the split token actually ends.\n   * If the token at the position is not split, this returns `undefined`.\n   *\n   * @param position - A position.\n   *\n   * @return A position where the split token ends if available.\n   */\n  findBlockEnd( position: Position ): Position | undefined {\n    const info = this.getInfoAt( position );\n\n    if ( info ) {\n      if ( info.split && ! info.tail ) {\n        for ( let i = position[ 0 ] + 1; i < this.length; i++ ) {\n          const info = this[ i ].getInfo( 0 );\n\n          if ( info && info.tail ) {\n            return [ i, info.to ];\n          }\n        }\n      }\n\n      return [ position[ 0 ], info.to ];\n    }\n  }\n\n  /**\n   * Syncs the number of lines.\n   *\n   * @param row   - A row index.\n   * @param value - A new size.\n   *\n   * @return Increased or decreased number of lines.\n   */\n  syncSize( row: number, value: number ): number {\n    const diff = value - this.length;\n\n    if ( diff > 0 ) {\n      if ( diff < MAX_INSERTION_LENGTH ) {\n        this.insert( row, diff );\n      } else {\n        this.setLength( value );\n      }\n    } else if ( diff < 0 ) {\n      this.delete( row, -diff );\n    }\n\n    return diff;\n  }\n\n  /**\n   * Destroys the instance.\n   *\n   * @internal\n   */\n  destroy(): void {\n    forOwn( this.timers, clearTimeout );\n  }\n\n  /**\n   * Sets the length of this Lines.\n   * All overflown items will be removed from the end, or all missing items are added to the end as empty lines.\n   *\n   * @param value - A new length.\n   */\n  private setLength( value: number ): void {\n    const { length } = this;\n\n    if ( length > value ) {\n      this.splice( value, length - value );\n    } else if ( length < value ) {\n      while ( value-- > length ) {\n        this.push( new Line( this.options ) );\n      }\n    }\n  }\n\n  /**\n   * Checks if the passed 2 arrays with tokens are same or not.\n   *\n   * @param tokens1 - An array with tokens.\n   * @param tokens2 - Another array with tokens.\n   *\n   * @return `true` if they are considered as same, or otherwise `false`.\n   */\n  private isSame( tokens1: readonly Token[], tokens2: readonly Token[] ): boolean {\n    return tokens1.length === tokens2.length && tokens1.every( ( token1, index ) => {\n      const token2 = tokens2[ index ];\n      return token1[ 0 ] === token2[ 0 ] && token1[ 1 ] === token2[ 1 ] && token1[ 2 ].depth === token2[ 2 ].depth;\n    } );\n  }\n}\n","import { Position, Range } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { assert, count, escapeRegExp, isString, nthIndexOf } from '../../utils';\nimport { Lines } from './Lines';\n\n\n/**\n * The class for handling the raw text and syncing it to lines.\n *\n * @since 0.1.0\n */\nexport class Code extends Component {\n  /**\n   * Holds the text data.\n   */\n  protected text: string;\n\n  /**\n   * Holds the minimum row for asynchronous syncing.\n   */\n  protected minStart = Infinity;\n\n  /**\n   * Holds the maximum row for asynchronous syncing.\n   */\n  protected maxEnd = 0;\n\n  /**\n   * Caches the number of lines.\n   */\n  protected sizeCache: number;\n\n  /**\n   * The Lines instance.\n   */\n  Lines: Lines;\n\n  /**\n   * Sets a new value.\n   *\n   * @internal\n   *\n   * @param value - A new value.\n   */\n  init( value: string ): void {\n    if ( ! this.Lines ) {\n      this.Lines = new Lines( this.event, this.Editor.language, this.options );\n    } else {\n      this.Lines.clear();\n    }\n\n    this.value = value;\n    this.Lines.sync( 0, value );\n  }\n\n  /**\n   * Returns a text before the specified row index, including the row itself.\n   *\n   * @param row - A row index.\n   *\n   * @return A sliced text.\n   */\n  before( row: number ): string {\n    const { text } = this;\n\n    if ( row < 0 ) {\n      return '';\n    }\n\n    return text.slice( 0, row < this.size - 1 ? nthIndexOf( text, LINE_BREAK, row + 1 ) + 1 : text.length );\n  }\n\n  /**\n   * Returns a text after the specified row index, including the row itself.\n   *\n   * @param row - A row index.\n   *\n   * @return A sliced text.\n   */\n  after( row: number ): string {\n    const { text } = this;\n\n    if ( row <= 0 ) {\n      return text;\n    }\n\n    return text.slice( row < this.size ? nthIndexOf( text, LINE_BREAK, row ) + 1 : text.length );\n  }\n\n  /**\n   * Returns the code at the row index.\n   * Although the `Lines[ row ]` also returns the code at the row,\n   * which is much faster than this method,\n   * it may not be the latest before the `Sync` finishes syncing process.\n   *\n   * @param row - A row index.\n   *\n   * @return The text of the line at the specified row.\n   */\n  getLine( row: number ): string {\n    return row < this.size ? this.sliceLines( row, row ) : '';\n  }\n\n  /**\n   * Slices the code by the specified row range.\n   *\n   * @example\n   * ```ts\n   * // Gets lines from 1 to 9:\n   * const code = Code.sliceLines( 2, 10 );\n   * ```\n   *\n   * @param startRow - A start row index to start slicing a text.\n   * @param endRow   - An end row index to end slicing a text.\n   *\n   * @return A sliced text.\n   */\n  sliceLines( startRow: number, endRow: number ): string {\n    const { text } = this;\n    const endIndex = endRow < this.size - 1 ? nthIndexOf( text, LINE_BREAK, endRow + 1 ) + 1 : this.text.length;\n    return text.slice( nthIndexOf( text, LINE_BREAK, startRow ) + 1, endIndex );\n  }\n\n  /**\n   * Slices the code by the specified position range.\n   *\n   * @example\n   * ```ts\n   * const code = Code.sliceLines( [ 0, 1 ], [ 2, 9 ] );\n   * ```\n   *\n   * @param start - A start position to start slicing a text.\n   * @param end   - Optional. An end position to end slicing a text.\n   *\n   * @return A sliced text.\n   */\n  sliceRange( start: Position, end?: Position ): string {\n    const startIndex = this.positionToIndex( start );\n    const endIndex   = end ? this.positionToIndex( end ) : this.text.length;\n    return startIndex < endIndex ? this.text.slice( startIndex, endIndex ) : '';\n  }\n\n  /**\n   * Replaces lines by the replacement text.\n   *\n   * @example\n   * Consider the following HTML as an example:\n   * ```html\n   * <pre>\n   * function message() {\n   *   console.log( 'Hi!' );\n   * }\n   * </pre>\n   * ```\n   *\n   * Let's modify the line 2 (row index is `1`):\n   *\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'pre' );\n   *\n   * const { Code, Sync } = ryuseiCode.Editor.Components;\n   *\n   * setTimeout( () => {\n   *   Code.replaceLines( 1, 1, `  console.log( 'Bye!' );\\n` );\n   *   Sync.sync( 1, 1 );\n   * }, 2000 );\n   * ```\n   *\n   * @param startRow    - A start row index.\n   * @param endRow      - An end row index.\n   * @param replacement - A replacement text.\n   */\n  replaceLines( startRow: number, endRow: number, replacement: string ): void {\n    assert( startRow <= endRow );\n    this.text      = this.before( startRow - 1 ) + this.normalize( replacement ) + this.after( endRow + 1 );\n    this.sizeCache = 0;\n  }\n\n  /**\n   * Replaces the code in a specified range by the replacement text.\n   *\n   * @param start       - A start position.\n   * @param end         - An end position.\n   * @param replacement - A replacement text.\n   */\n  replaceRange( start: Position, end: Position, replacement: string ): void {\n    const startIndex = this.positionToIndex( start );\n    const endIndex   = this.positionToIndex( end );\n    const { value } = this;\n\n    if ( startIndex <= endIndex ) {\n      this.text      = value.slice( 0, startIndex ) + this.normalize( replacement ) + value.slice( endIndex );\n      this.sizeCache = 0;\n    }\n  }\n\n  /**\n   * Replaces lines by the iteratee function invoked for each line.\n   * The returning string of the function will be used as a new line.\n   *\n   * @example\n   * Consider the following HTML as an example:\n   *\n   * ```html\n   * <pre>\n   * 1\n   * 2\n   * 3\n   * </pre>\n   * ```\n   *\n   * Let's modify lines by an iteratee function:\n   *\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'pre' );\n   *\n   * const { Code, Sync } = ryuseiCode.Editor.Components;\n   *\n   * setTimeout( () => {\n   *   Code.replaceLinesBy( 0, 2, line => `Line: ${ line }` );\n   *   Sync.sync( 0, 2 );\n   * }, 2000 );\n   * ```\n   *\n   * The result will be:\n   * ```none\n   * Line: 1\n   * Line: 2\n   * Line: 3\n   * ```\n   *\n   * @param startRow - A start row index.\n   * @param endRow   - An end row index.\n   * @param iteratee - An iteratee function invoked for each line.\n   */\n  replaceLinesBy(\n    startRow: number,\n    endRow: number,\n    iteratee: ( line: string, index: number, array: string[] ) => string\n  ): void {\n    const { size } = this;\n    assert( endRow < size );\n\n    const isLast = endRow === size - 1;\n    const lines  = this.sliceLines( startRow, endRow ).split( LINE_BREAK, endRow - startRow + 1 );\n\n    this.replaceLines( startRow, endRow, lines.reduce( ( acc, line, index, array ) => {\n      const lineBreak = isLast && index === array.length - 1 ? '' : LINE_BREAK;\n      return acc + iteratee( line, index, array ) + lineBreak;\n    }, '' ) );\n  }\n\n  /**\n   * Searches the provided word or regexp and returns matched ranges.\n   *\n   * @example\n   * ```html\n   * <pre>\n   * foo\n   * bar\n   * foo\n   * </pre>\n   * ```\n   *\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'pre' );\n   *\n   * const { Code } = ryuseiCode.Editor.Components;\n   * const ranges = Code.search( 'foo' );\n   *\n   * // The ranges will contain 2 results:\n   * // { start: [ 0, 0 ], end: [ 0, 3 ] }\n   * // { start: [ 2, 0 ], end: [ 2, 3 ] }\n   * ```\n   *\n   * @param search     - A string or a regexp object.\n   * @param ignoreCase - Optional. Whether to perform case-insensitive search or not.\n   * @param wholeWord  - Optional. Whether to only match a whole word or not.\n   * @param limit      - Optional. Limits the number of matched results.\n   *\n   * @return An array with Range objects.\n   */\n  search( search: string | RegExp, ignoreCase?: boolean, wholeWord?: boolean, limit?: number ): Range[] {\n    const source = isString( search ) ? escapeRegExp( search ) : search.source;\n    const ranges: Range[] = [];\n\n    if ( source ) {\n      const regexp = new RegExp( wholeWord ? `\\\\b${ source }\\\\b` : source, ignoreCase ? 'gi' : 'g' );\n\n      lines:\n      for ( let i = 0; i < this.Lines.length; i++ ) {\n        const line = this.Lines[ i ];\n\n        let match: RegExpExecArray;\n\n        while ( ( match = regexp.exec( line.text ) ) ) {\n          if ( ! match[ 0 ] ) {\n            regexp.lastIndex++;\n          }\n\n          ranges.push( {\n            start: [ i, match.index ],\n            end  : [ i, match.index + match[ 0 ].length ],\n          } );\n\n          if ( limit && ranges.length >= limit ) {\n            break lines;\n          }\n        }\n      }\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * @internal\n   */\n  destroy(): void {\n    if ( this.Lines ) {\n      this.Lines.destroy();\n    }\n\n    super.destroy();\n  }\n\n  /**\n   * Converts the provided position to the text index.\n   *\n   * @param position - A position to convert.\n   *\n   * @return A converted index.\n   */\n  private positionToIndex( position: Position ): number {\n    const [ row ] = position;\n    assert( row < this.size );\n    return nthIndexOf( this.text, LINE_BREAK, row ) + 1 + position[ 1 ];\n  }\n\n  /**\n   * Normalizes characters of line breaks.\n   *\n   * @param value - A value to normalize.\n   *\n   * @return A normalized text.\n   */\n  protected normalize( value: string ): string {\n    return value.replace( /\\r\\n?/g, '\\n' );\n  }\n\n  /**\n   * Sets a new value.\n   *\n   * @param value - A value to set.\n   */\n  set value( value: string ) {\n    this.text      = this.normalize( value );\n    this.sizeCache = 0;\n  }\n\n  /**\n   * Returns the current code.\n   *\n   * @return The current code.\n   */\n  get value(): string {\n    return this.text;\n  }\n\n  /**\n   * Returns the number of lines by counting line breaks.\n   *\n   * @return The number of lines.\n   */\n  get size(): number {\n    this.sizeCache = this.sizeCache || count( this.text, LINE_BREAK ) + 1;\n    return this.sizeCache;\n  }\n}\n","import { CLASS_ICON } from '../../../constants/classes';\nimport { attr } from '../../dom';\n\n\n/**\n * The SVG view box settings.\n *\n * @since 0.1.0\n */\nexport const VIEW_BOX = '0 0 24 24';\n\n/**\n * Returns an icon SVG element specified by the name.\n *\n * @param d       - The path of the icon element.\n * @param stroke  - Stroke width.\n * @param linecap - Linecap.\n *\n * @return The SVG element of the icon.\n */\nexport function icon( d: string, stroke: number, linecap: string ): SVGElement {\n  const svg  = createSvg( 'svg', { viewBox: VIEW_BOX, class: CLASS_ICON } );\n  const path = createSvg( 'path', { d, fill: 'currentColor' } );\n\n  if ( stroke ) {\n    attr( path, { 'stroke-width': stroke, 'stroke-linecap': linecap, stroke: 'currentColor' } );\n  }\n\n  attr( svg, { viewBox: VIEW_BOX } );\n  svg.appendChild( path );\n\n  return svg;\n}\n\n/**\n * The helper function to create a SVG element.\n *\n * @param tag   - A tag name in the SVG namespace.\n * @param attrs - An object literal with attributes.\n *\n * @return An created element.\n */\nfunction createSvg( tag: string, attrs: Record<string, string | number | boolean> ): SVGElement {\n  const elm = document.createElementNS( 'http://www.w3.org/2000/svg', tag );\n  attr( elm, attrs );\n  return elm;\n}\n","import { Attributes, Elements, UIButtonSettings, UIFieldSettings, UIGroupData } from '@ryusei/code';\nimport { CLASS_ACTIVE, CLASS_BUTTON, CLASS_INPUT } from '../../constants/classes';\nimport {\n  activeElement,\n  addClass,\n  append,\n  assert,\n  attr,\n  create,\n  hasClass,\n  html,\n  isString,\n  isUndefined,\n  normalizeKey,\n  prevent,\n  query,\n  remove,\n  removeClass,\n  toArray,\n} from '../../utils';\nimport { icon } from '../../utils/icon';\nimport { Component } from '../Component/Component';\n\n\n/**\n * The stroke linecap value for the path element.\n */\nexport const STROKE_LINECAP = 'round';\n\n/**\n * The base class for creating UI, such as a toolbar or a dialog.\n *\n * @since 0.1.0\n */\nexport class UIComponent<T extends UIGroupData = UIGroupData> extends Component {\n  /**\n   * Holds the wrapper element.\n   */\n  protected wrapper: HTMLDivElement;\n\n  /**\n   * Holds the active group ID.\n   */\n  protected group: string;\n\n  /**\n   * Stores group elements.\n   */\n  protected groups: Record<string, T> = {};\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.create();\n    this.listen();\n  }\n\n  /**\n   * Creates elements.\n   * Override this method in a child class and provide a wrapper element.\n   */\n  protected create(): void {\n    assert( false );\n  }\n\n  /**\n   * Listens to some events.\n   */\n  protected listen(): void {\n    this.bind( window, 'keydown', this.escape, this );\n  }\n\n  /**\n   * Hides the toolbar when the escape key is pressed.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  protected escape( e: KeyboardEvent ): void {\n    if ( this.isActive() && normalizeKey( e.key ) === 'Escape' ) {\n      this.hide();\n      prevent( e );\n    }\n  }\n\n  /**\n   * Appends the group element to the wrapper element just before displaying the UI.\n   * Override this method to change the default element to append the group to.\n   *\n   * @param group - A group ID.\n   */\n  protected append( group: string ): void {\n    append( this.wrapper, this.groups[ group ].elm );\n  }\n\n  /**\n   * Sets focus to the first element that has the greatest tab index.\n   * If it is not found, sets focus to the first input or button element if available.\n   *\n   * @param group - A group ID.\n   */\n  protected autoFocus( group: string ): void {\n    const { elm } = this.groups[ group ];\n    const target = query<HTMLElement>( elm, '[tabindex]' ) || query( elm, 'input, button' );\n\n    if ( target ) {\n      target.focus();\n\n      if ( target instanceof HTMLInputElement ) {\n        target.select();\n      }\n    }\n  }\n\n  /**\n   * Creates a close button.\n   * The wrapper element must exist and have an ID attribute before calling this method.\n   *\n   * @param attrs - Attributes for the button.\n   *\n   * @return A created button element.\n   */\n  createCloseButton( attrs: Attributes ): HTMLButtonElement {\n    const button = this.createButtons( {\n      id   : 'close',\n      icon : 'close',\n      click: 'hide',\n    }, null, this ).close;\n\n    attr( button, attrs );\n\n    return button;\n  }\n\n  /**\n   * Creates buttons according to the settings.\n   *\n   * @param settings  - A settings object.\n   * @param parent    - A parent element to append the button to.\n   * @param component - A component instance.\n   * @param classes   - Additional classes for buttons.\n   *\n   * @return An object with created buttons.\n   */\n  createButtons<T extends Component>(\n    settings: UIButtonSettings<T> | UIButtonSettings<T>[],\n    parent: HTMLElement,\n    component: T,\n    classes?: string | string[]\n  ): Record<string, HTMLButtonElement> {\n    const buttons = {};\n\n    toArray( settings ).forEach( settings => {\n      const button = this.createButton( settings, parent, classes );\n      const { click } = settings;\n\n      if ( click ) {\n        this.bind( button, 'click', e => {\n          if ( isString( click ) ) {\n            component[ click ]();\n          } else {\n            click( e, this.Editor, settings );\n          }\n        } );\n      }\n\n      buttons[ settings.id ] = button;\n    }, [] );\n\n    return buttons;\n  }\n\n  /**\n   * Creates a button with the provided settings.\n   *\n   * @param settings - A settings object.\n   * @param parent   - A parent element to append the button to.\n   * @param classes  - Additional classes for buttons.\n   *\n   * @return A created button element.\n   */\n  protected createButton<T extends Component>(\n    settings: UIButtonSettings<T>,\n    parent: HTMLElement,\n    classes: string | string[]\n  ): HTMLButtonElement {\n    const { i18n } = this.options;\n    const { checkbox, tabindex, icon: iconName } = settings;\n    const label = i18n[ settings.i18n || settings.id ];\n\n    classes = [ CLASS_BUTTON ].concat( iconName ? `${ CLASS_BUTTON }--icon` : null, classes );\n\n    const button = create( 'button', {\n      title         : iconName ? label : null,\n      type          : 'button',\n      tabindex      : ! isUndefined( tabindex ) ? tabindex : null,\n      role          : checkbox ? 'checkbox' : null,\n      'aria-checked': checkbox ? 'false' : null,\n      'aria-label'  : label,\n    }, parent || settings.parent );\n\n    addClass( button, classes );\n\n    if ( iconName ) {\n      const iconSettings = this.options.icons[ iconName ];\n\n      if ( iconSettings ) {\n        append( button, icon( iconSettings[ 0 ], iconSettings[ 1 ], iconSettings[ 2 ] || STROKE_LINECAP ) );\n      }\n    } else {\n      html( button, settings.html || label );\n    }\n\n    return button;\n  }\n\n  /**\n   * A utility function to create an input field.\n   *\n   * @param settings - A settings object.\n   * @param parent   - A parent element where the created input element will be appended.\n   *\n   * @return A created input element.\n   */\n  createField(\n    settings: UIFieldSettings,\n    parent: HTMLElement\n  ): HTMLInputElement {\n    const label = this.i18n[ settings.i18n || settings.id ];\n    const { tabindex } = settings;\n\n    return create( 'input', {\n      class       : `${ CLASS_INPUT }`,\n      placeholder : label,\n      spellcheck  : false,\n      tabindex    : ! isUndefined( tabindex ) ? tabindex : null,\n      'aria-label': label,\n    }, parent );\n  }\n\n  /**\n   * Displays the UI.\n   *\n   * @param group - A group ID.\n   */\n  show( group: string ): void {\n    if ( this.isActive() ) {\n      remove( this.groups[ this.group ].elm );\n    }\n\n    addClass( this.wrapper, CLASS_ACTIVE );\n\n    this.append( group );\n    this.group = group;\n  }\n\n  /**\n   * Hides the UI.\n   */\n  hide(): void {\n    if ( this.isActive() ) {\n      removeClass( this.wrapper, CLASS_ACTIVE );\n      remove( this.groups[ this.group ].elm );\n    }\n  }\n\n  /**\n   * Checks if the specified group is active or not.\n   * If omitted, this checks any group is active or not.\n   *\n   * @param group - Optional. A group ID to check.\n   */\n  isActive( group?: string ): boolean {\n    return hasClass( this.wrapper, CLASS_ACTIVE ) && ( ! group || this.group === group );\n  }\n\n  /**\n   * Checks if one of the elements in the UI has focus or not.\n   *\n   * @return `true` if an element in the UI has focus, or otherwise `false`.\n   */\n  isFocused(): boolean {\n    return this.wrapper.contains( activeElement() );\n  }\n}\n","import { ContextMenuButtonSettings } from '@ryusei/code';\n\n\n/**\n * The ID for the main context menu.\n */\nexport const MAIN_CONTEXT_MENU_ID = 'main';\n\n/**\n * The collection of \"edit\" items for the context menu.\n *\n * @since 0.1.0\n */\nexport const CONTEXT_MENU_EDIT: ContextMenuButtonSettings[] = [\n  {\n    id      : 'copy',\n    shortcut: [ 'C', true ],\n  },\n  {\n    id               : 'cut',\n    shortcut         : [ 'X', true ],\n    disableOnReadOnly: true,\n  },\n  {\n    id               : 'paste',\n    shortcut         : [ 'V', true ],\n    disableOnReadOnly: true,\n  },\n];\n\n/**\n * The collection of \"selection\" items for the context menu.\n *\n * @since 0.1.0\n */\nexport const CONTEXT_MENU_SELECTION: ContextMenuButtonSettings[] = [\n  {\n    id      : 'selectAll',\n    shortcut: [ 'A', true ],\n  },\n];\n","import { ContextMenuButtonSettings, ContextMenuGroupData } from '@ryusei/code';\nimport { UIComponent } from '../../classes/UIComponent/UIComponent';\nimport {\n  CLASS_CONTEXT_MENU,\n  CLASS_CONTEXT_MENU_BUTTON,\n  CLASS_CONTEXT_MENU_GROUP,\n  CLASS_CONTEXT_MENU_ITEM,\n  CLASS_CONTEXT_MENU_LABEL,\n  CLASS_CONTEXT_MENU_LIST,\n  CLASS_CONTEXT_MENU_SHORTCUT,\n} from '../../constants/classes';\nimport { MAIN_CONTEXT_MENU_ID } from '../../constants/context-menu';\nimport {\n  EVENT_BLUR,\n  EVENT_CONTEXT_MENU_CLICKED,\n  EVENT_CONTEXT_MENU_CLOSED,\n  EVENT_CONTEXT_MENU_OPENED,\n  EVENT_READONLY,\n  EVENT_SCROLLER_SCROLL,\n  EVENT_WINDOW_SCROLL,\n} from '../../constants/events';\nimport { IDLE } from '../../constants/selection-states';\nimport {\n  activeElement,\n  assert,\n  assign,\n  attr,\n  create,\n  div,\n  forOwn,\n  height,\n  isHTMLElement,\n  min,\n  normalizeKey,\n  prevent,\n  queryAll,\n  rect,\n  styles,\n  text,\n  unit,\n} from '../../utils';\n\n\n/**\n * The margin from the menu to the right of the window.\n *\n * @since 0.1.0\n */\nconst MARGIN_RIGHT = 5;\n\n/**\n * The margin from the menu to the bottom of the window.\n *\n * @since 0.1.0\n */\nconst MARGIN_BOTTOM = 5;\n\n/**\n * The class for creating a context menu replacing the native one.\n *\n * @since 0.1.0\n */\nexport class ContextMenu extends UIComponent<ContextMenuGroupData> {\n  /**\n   * The index of the current menu item.\n   */\n  private index = -1;\n\n  /**\n   * Holds buttons that are currently displayed.\n   * This may be null when the menu is hidden.\n   */\n  buttons: Record<string, HTMLButtonElement> | null;\n\n  /**\n   * Listens some events.\n   */\n  protected listen(): void {\n    super.listen();\n\n    const { elements } = this;\n\n    this.bind( elements.editor, 'mousedown', this.onMouseDown, this );\n    this.bind( document, 'contextmenu', this.onContextMenu, this );\n    this.bind( window, 'keydown', this.onKeydown, this );\n\n    this.on( [ EVENT_BLUR, EVENT_SCROLLER_SCROLL, EVENT_WINDOW_SCROLL ], this.hide, this );\n\n    this.bind( elements.root, 'focusin', () => {\n      if ( ! this.contains( activeElement() ) && ! this.wrapper.contains( activeElement() ) ) {\n        this.hide();\n      }\n    } );\n  }\n\n  /**\n   * Creates the context menu elements.\n   *\n   * @link https://www.w3.org/TR/wai-aria-1.2/#menu\n   */\n  protected create(): void {\n    this.wrapper = div( { class: CLASS_CONTEXT_MENU, role: 'menu' }, this.elements.overlay );\n  }\n\n  /**\n   * Called when the mouse button is clicked.\n   * If the button number is 2, which means a right click,\n   * displays the menu and moves it at the cursor location, otherwise hides the menu.\n   *\n   * @param e - A MouseEvent object.\n   */\n  private onMouseDown( e: MouseEvent ): void {\n    if ( e.button === 2 ) {\n      this.show( MAIN_CONTEXT_MENU_ID );\n      this.move( e.clientX, e.clientY );\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Called when the contextmenu event of the document is fired.\n   * Since the context menu may scroll the scroller or the window,\n   * displaying the menu at this moment is too early.\n   *\n   * @param e - An Event object.\n   */\n  private onContextMenu( e: Event ): void {\n    if ( this.isActive() ) {\n      return prevent( e );\n    }\n\n    if ( this.contains( e.target ) ) {\n      const { Selection } = this;\n\n      if ( ! Selection.is( IDLE ) ) {\n        this.View.jump( Selection.focus[ 0 ] );\n\n        requestAnimationFrame( () => {\n          const { rect } = this.Caret;\n          this.show( MAIN_CONTEXT_MENU_ID );\n          this.move( rect.left, rect.bottom );\n        } );\n      }\n\n      prevent( e, true );\n    }\n  }\n\n  /**\n   * Called when the window receives the keydown.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onKeydown( e: KeyboardEvent ): void {\n    if ( this.isActive() ) {\n      const key     = normalizeKey( e.key );\n      const arrowUp = key === 'ArrowUp';\n\n      if ( key === 'ArrowDown' || arrowUp ) {\n        this.focus( arrowUp );\n        prevent( e );\n      }\n    }\n  }\n\n  /**\n   * Sets focus on the menu item in order.\n   *\n   * @param backwards - Whether to decrement or increment the menu index.\n   */\n  private focus( backwards: boolean ): void {\n    const buttons = queryAll<HTMLButtonElement>( this.wrapper, `.${ CLASS_CONTEXT_MENU_BUTTON }` );\n    const { length } = buttons;\n\n    if ( length ) {\n      this.index += backwards ? -1 : 1;\n\n      if ( this.index < 0 ) {\n        this.index = length - 1;\n      } else if ( this.index >= length ) {\n        this.index = 0;\n      }\n\n      buttons[ this.index ].focus();\n    }\n  }\n\n  /**\n   * Moves the menu to the provided client coordinates.\n   *\n   * @param clientX - A client x coordinate.\n   * @param clientY - A client y coordinate.\n   */\n  private move( clientX: number, clientY: number ): void {\n    const { wrapper, wrapper: { clientWidth } } = this;\n    const { documentElement } = document;\n    const rootRect = rect( this.elements.root );\n\n    if ( clientX + clientWidth > documentElement.clientWidth - MARGIN_RIGHT ) {\n      clientX -= clientWidth;\n    }\n\n    clientY = min( clientY, height( documentElement ) - height( wrapper ) - MARGIN_BOTTOM );\n\n    styles( wrapper, {\n      top : unit( clientY - rootRect.top ),\n      left: unit( clientX - rootRect.left ),\n    } );\n  }\n\n  /**\n   * Checks whether the editor contains the passed element/event target or not.\n   *\n   * @param target - An EventTarget object that is an Element instance in most cases.\n   *\n   * @return `true` if the editor contains the target, or otherwise `false`.\n   */\n  private contains( target: EventTarget | Element ): boolean {\n    return isHTMLElement( target ) && this.elements.editor.contains( target );\n  }\n\n  /**\n   * Creates elements for menu items.\n   *\n   * @param group - A group ID.\n   */\n  private build( group: string ): void {\n    const { lists, elm } = this.groups[ group ];\n    text( elm, '' );\n\n    forOwn( lists, ( settings, key ) => {\n      const list = create( 'ul', [ CLASS_CONTEXT_MENU_LIST, `${ CLASS_CONTEXT_MENU_LIST }--${ key }` ], elm );\n\n      settings = settings.map( settings => {\n        settings.parent = create( 'li', CLASS_CONTEXT_MENU_ITEM, list );\n        return settings;\n      } );\n\n      const buttons = this.createButtons<ContextMenu>( settings, null, this, CLASS_CONTEXT_MENU_BUTTON );\n\n      forOwn( buttons, ( button, id ) => {\n        const buttonSettings = this.findSettings( settings, id );\n        assert( buttonSettings );\n\n        attr( button, { role: 'menuitem' } );\n\n        this.bind( button, 'click', () => {\n          this.emit( EVENT_CONTEXT_MENU_CLICKED, this, group, id, button );\n          this.hide();\n        } );\n\n        if ( buttonSettings.disableOnReadOnly ) {\n          button.disabled = this.Editor.readOnly;\n          this.on( EVENT_READONLY, ( e, readOnly ) => { button.disabled = readOnly } );\n        }\n\n        this.bind( button, 'mouseover', () => {\n          button.focus();\n        } );\n      } );\n\n      this.buttons = assign( {}, this.buttons, buttons );\n    } );\n  }\n\n  /**\n   * Finds the each button settings from the array of settings.\n   *\n   * @param settings - An array with settings.\n   * @param id       - A button ID to find.\n   *\n   * @return The found button settings.\n   */\n  private findSettings( settings: ContextMenuButtonSettings[], id: string ): ContextMenuButtonSettings {\n    for ( let i = 0; i < settings.length; i++ ) {\n      if ( settings[ i ].id === id ) {\n        return settings[ i ];\n      }\n    }\n  }\n\n  /**\n   * Registers a menu item or items.\n   *\n   * @example\n   *\n   * Registers a new item to the \"edit\" list in the \"main\" context menu:\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'textarea' );\n   *\n   * const { ContextMenu } = ryuseiCode.Editor.Components;\n   *\n   * ContextMenu.register( 'main', 'edit', {\n   *   id  : 'myButton',\n   *   html: 'Click Me',\n   *   click() {\n   *     console.log( 'Clicked! );\n   *   },\n   * } );\n   * ```\n   *\n   * Registers a new list and items to the the \"main\" context menu:\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'textarea' );\n   *\n   * const { ContextMenu } = ryuseiCode.Editor.Components;\n   *\n   * ContextMenu.register( 'main', 'my-list', [\n   *   {\n   *     id  : 'button1',\n   *     html: 'Button 1',\n   *     click() {\n   *       console.log( 'You clicked the Button 1' );\n   *     },\n   *   },\n   *   {\n   *     id  : 'button2',\n   *     html: 'Button 2',\n   *     click() {\n   *       console.log( 'You clicked the Button 2' );\n   *     },\n   *   },\n   * ] );\n   * ```\n   *\n   * Registers a new group:\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'textarea' );\n   *\n   * const { ContextMenu } = ryuseiCode.Editor.Components;\n   *\n   * ContextMenu.register( 'my-context-menu', 'my-list', [\n   *   ...\n   * ] );\n   *\n   * ContextMenu.show( 'my-context-menu' );\n   * ```\n   *\n   * @param group    - A group ID. If it does not exist, a new group will be generated.\n   * @param list     - A list ID.\n   * @param settings - An menu item or items.\n   */\n  register( group: string, list: string, settings: ContextMenuButtonSettings[] ): void {\n    const { groups } = this;\n\n    if ( ! groups[ group ] ) {\n      groups[ group ] = {\n        elm  : div( [ CLASS_CONTEXT_MENU_GROUP, `${ CLASS_CONTEXT_MENU_GROUP }--${ group }` ] ),\n        lists: {},\n      };\n    }\n\n    settings.forEach( settings => {\n      const label    = this.i18n[ settings.i18n || settings.id ];\n      const shortcut = settings.shortcut ? this.Keymap.getShortcut( settings.shortcut ) : '';\n\n      settings.html = settings.html || `<span class=\"${ CLASS_CONTEXT_MENU_LABEL }\">${ label }</span>`\n        + ( shortcut ? `<span class=\"${ CLASS_CONTEXT_MENU_SHORTCUT }\">${ shortcut }</span>` : '' );\n    } );\n\n    const { lists } = groups[ group ];\n    lists[ list ] = ( lists[ list ] || [] ).concat( settings );\n  }\n\n  /**\n   * Displays the specified context menu.\n   *\n   * @param group - A group ID.\n   */\n  show( group: string ): void {\n    if ( this.groups[ group ] ) {\n      this.build( group );\n      super.show( group );\n      this.index = -1;\n      this.emit( EVENT_CONTEXT_MENU_OPENED );\n    }\n  }\n\n  /**\n   * Hides the context menu.\n   */\n  hide(): void {\n    if ( this.isActive() ) {\n      super.hide();\n      this.buttons = null;\n      this.emit( EVENT_CONTEXT_MENU_CLOSED );\n    }\n  }\n}\n","import { create, focus, remove, styles } from '../../utils';\n\n\n/**\n * The class for normalizing different copy/paste behaviours in browsers.\n *\n * @since 0.1.0\n */\nexport class Clipboard {\n  /**\n   * Creates a temporary textarea element.\n   *\n   * @param text - A value for the textarea.\n   *\n   * @return A created element.\n   */\n  private create( text: string ): HTMLTextAreaElement {\n    const textarea = create( 'textarea', {}, document.body );\n    const offset   = '-999999px';\n    styles( textarea, { position: 'absolute', top: offset, left: offset } );\n\n    textarea.value = text;\n    focus( textarea );\n    textarea.setSelectionRange( 0, text.length );\n\n    return textarea;\n  }\n\n  /**\n   * Pastes the text via execCommand for old browsers.\n   *\n   * @return A pasted text.\n   */\n  private execPaste(): string {\n    const textarea = this.create( '' );\n    document.execCommand( 'paste' );\n\n    const { value } = textarea;\n    remove( textarea );\n\n    return value;\n  }\n\n  /**\n   * Copies the provided text via execCommand for old browsers.\n   *\n   * @param text     - A text to copy.\n   * @param onFailed - Optional. A callback fired when copy failed.\n   */\n  private execCopy( text: string, onFailed?: () => void ): void {\n    const textarea = this.create( text );\n\n    try {\n      document.execCommand( 'copy' );\n    } catch ( e ) {\n      if ( onFailed ) {\n        onFailed();\n      }\n    }\n\n    remove( textarea );\n  }\n\n  /**\n   * Pastes the clipboard text.\n   *\n   * @param onPaste - A callback fired after pasting a text, taking a pasted value as the first argument.\n   */\n  paste( onPaste: ( text: string ) => void ): void {\n    const { clipboard } = navigator;\n\n    if ( clipboard ) {\n      clipboard.readText().then( onPaste );\n    } else {\n      onPaste( this.execPaste() );\n    }\n  }\n\n  /**\n   * Copies the passed text.\n   *\n   * @param text     - A text to copy.\n   * @param onFailed - Optional. A callback fired when copy failed.\n   */\n  copy( text: string, onFailed?: () => void ): void {\n    const { clipboard } = navigator;\n\n    if ( clipboard ) {\n      clipboard.writeText( text ).catch( () => {\n        this.execCopy( text, onFailed );\n      } );\n    } else {\n      this.execCopy( text, onFailed );\n    }\n  }\n}\n","import { Elements, EventBusEvent, Position } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { LINE_BREAK } from '../../constants/characters';\nimport { CONTEXT_MENU_EDIT, CONTEXT_MENU_SELECTION, MAIN_CONTEXT_MENU_ID } from '../../constants/context-menu';\nimport {\n  EVENT_CHANGE,\n  EVENT_CHANGED,\n  EVENT_CONTEXT_MENU_CLICKED,\n  EVENT_COPY,\n  EVENT_CUT,\n  EVENT_KEYDOWN,\n  EVENT_PASTE,\n} from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { count, includes, isIE, isUndefined, normalizeKey, prevent, toArray } from '../../utils';\nimport { ContextMenu } from '../ContextMenu/ContextMenu';\nimport { Clipboard } from './Clipboard';\n\n\n/**\n * The class for editing the code.\n *\n * @since 0.1.0\n */\nexport class Edit extends Component {\n  /**\n   * Indicates whether lines has been deleted by an input or not.\n   */\n  private deletedByInput: boolean;\n\n  /**\n   * Holds the Clipboard instance.\n   */\n  private clipboard = new Clipboard();\n\n  /**\n   * Initializes the component.\n   *\n   * @internal\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.register();\n    this.listen();\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    const { editable } = this.elements;\n\n    this.on( EVENT_KEYDOWN, this.onKeydown, this );\n\n    this.bind( editable, 'paste', this.onPaste, this );\n\n    this.bind( editable, 'copy cut', e => {\n      this[ e.type ]();\n    } );\n\n    this.bind( editable, 'dragover drop paste cut', e => {\n      prevent( e, true );\n    } );\n\n    this.on( EVENT_CONTEXT_MENU_CLICKED, this.onMenuClicked, this );\n\n    if ( isIE() ) {\n      this.bind( editable, 'compositionstart', e => {\n        if ( this.deletedByInput ) {\n          prevent( e, true );\n        }\n      } );\n    }\n  }\n\n  /**\n   * Called when any key is pressed.\n   *\n   * @param e  - An EventBusEvent object.\n   * @param ke - A KeyboardEvent object.\n   */\n  private onKeydown( e: EventBusEvent<Editor>, ke: KeyboardEvent ): void {\n    const { Selection } = this;\n    const key   = normalizeKey( ke.key );\n    const isKey = ( keys: string | string[] ) => includes( toArray( keys ), key );\n\n    this.deletedByInput = false;\n\n    if ( this.Keymap.matches( ke, 'selectAll' ) ) {\n      Selection.selectAll();\n      return prevent( ke, true );\n    }\n\n    if ( ke.altKey || ke.metaKey || ke.ctrlKey ) {\n      return;\n    }\n\n    if ( Selection.isMultiline() ) {\n      if ( key.length === 1 || isKey( [ 'Process', 'Enter' ] ) ) {\n        this.delete();\n        this.deletedByInput = true;\n      } else if ( isKey( [ 'Delete', 'Backspace' ] ) ) {\n        this.delete();\n        prevent( ke );\n      }\n    }\n  }\n\n  /**\n   * Called when the context menu item is clicked.\n   *\n   * @param e           - An EventBusEvent object.\n   * @param ContextMenu - A ContextMenu instance.\n   * @param group       - A group ID.\n   * @param id          - The ID of the clicked item.\n   */\n  private onMenuClicked( e: EventBusEvent<Editor>, ContextMenu: ContextMenu, group: string, id: string ): void {\n    if ( group === MAIN_CONTEXT_MENU_ID ) {\n      const { Selection } = this;\n\n      if ( id === 'copy' || id === 'cut' ) {\n        if ( ! this.isSelected() ) {\n          Selection.selectLine( undefined, id === 'copy', true );\n        }\n\n        this[ id ]();\n      } else if ( id === 'paste' ) {\n        this.clipboard.paste( this.paste.bind( this ) );\n      } else if ( id === 'selectAll' ) {\n        Selection.selectAll();\n      }\n    }\n  }\n\n  /**\n   * Called when the text is being pasted to the editor.\n   *\n   * @param e - A ClipboardEvent object.\n   */\n  private onPaste( e: ClipboardEvent ): void {\n    const string = ( e.clipboardData || window[ 'clipboardData' ] ).getData( 'text' );\n\n    if ( string ) {\n      this.paste( string );\n    }\n\n    prevent( e );\n  }\n\n  /**\n   * Registers items to the context menu.\n   */\n  private register(): void {\n    const { ContextMenu } = this;\n    ContextMenu.register( MAIN_CONTEXT_MENU_ID, 'edit', CONTEXT_MENU_EDIT );\n    ContextMenu.register( MAIN_CONTEXT_MENU_ID, 'selection', CONTEXT_MENU_SELECTION );\n  }\n\n  /**\n   * Checks if some texts are selected or not.\n   * Be aware that this is not same with negating getSelection().isCollapsed.\n   *\n   * @return `true` if some texts are selected, or otherwise `false`.\n   */\n  private isSelected(): boolean {\n    return ! this.Selection.isCollapsed();\n  }\n\n  /**\n   * Checks if the Editor is editable or not.\n   *\n   * @return `true` if the Editor is editable.\n   */\n  private isEditable(): boolean {\n    return ! this.Editor.readOnly;\n  }\n\n  /**\n   * Deletes the selected text. Nothing will happen when the selection is collapsed.\n   */\n  delete(): void {\n    if ( this.isSelected() ) {\n      this.paste( '', 'delete' );\n    }\n  }\n\n  /**\n   * Pastes the provided text at the current position.\n   *\n   * @param string - A string to paste.\n   * @param type   - Optional. Specifies the input type.\n   */\n  paste( string: string, type = 'paste' ): void {\n    if ( ! this.isEditable() ) {\n      return;\n    }\n\n    if ( type === 'paste' ) {\n      this.emit( EVENT_PASTE, string );\n    }\n\n    const { Selection, Code } = this;\n    const { start, end } = Selection.get();\n    const size     = count( string, LINE_BREAK ) + 1;\n    const startRow = start[ 0 ];\n    const endRow   = startRow + size - 1;\n    const endLine  = string.slice( string.lastIndexOf( LINE_BREAK ) + 1 );\n    const col      = endLine.length + ( size > 1 ? 0 : start[ 1 ] );\n    const position = [ endRow, col ] as Position;\n\n    this.emit( EVENT_CHANGE, type );\n\n    Code.replaceRange( start, end, string );\n\n    this.Sync.sync( startRow, endRow, endRow );\n    Selection.set( position );\n\n    this.emit( EVENT_CHANGED, type );\n  }\n\n  /**\n   * Copies the provided text to the clipboard.\n   * If the text is not provided, this method tries to copy the current selection.\n   *\n   * @param string        - Optional. A string to copy.\n   * @param skipSelection - Optional. Whether to restore the selection range after copy or not.\n   */\n  copy( string?: string, skipSelection?: boolean ): void {\n    const { failedToCopy } = this.i18n;\n    const onFailed  = () => {\n      if ( this.require( 'Dialog' ) ) {\n        this.invoke( 'Dialog', 'message', failedToCopy );\n      } else {\n        alert( this.i18n.failedToCopy );\n      }\n    };\n\n    const copySelection = isUndefined( string );\n    string = copySelection ? this.Selection.toString() : string;\n\n    this.emit( EVENT_COPY, string );\n\n    const { Selection } = this;\n    const range = Selection.get( false );\n\n    this.clipboard.copy( string, onFailed );\n\n    if ( ! skipSelection ) {\n      Selection.set( range.start, range.end );\n    }\n  }\n\n  /**\n   * Cuts the selected code. Nothing will happen if the selection is collapsed.\n   */\n  cut(): void {\n    if ( this.isSelected() && this.isEditable() ) {\n      this.emit( EVENT_CUT );\n      this.copy( undefined, true );\n      this.delete();\n    }\n  }\n\n  /**\n   * Cuts the current line.\n   */\n  cutLine(): void {\n    if ( ! this.isEditable() ) {\n      return;\n    }\n\n    this.emit( EVENT_CUT );\n\n    const { Selection } = this;\n    const { start: [ startRow ] } = Selection.get();\n    const position = [ startRow, 0 ] as Position;\n\n    this.View.jump( startRow );\n    Selection.selectLine( startRow, false );\n\n    this.copy( undefined, true );\n\n    Selection.update( position );\n\n    this.emit( EVENT_CHANGE );\n\n    this.Code.replaceLines( startRow, startRow, '' );\n    this.Sync.sync( startRow, startRow );\n\n    Selection.set( position );\n\n    this.emit( EVENT_CHANGED );\n  }\n}\n","import { Elements, InputState, Position, TokenInfo } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { LINE_BREAK } from '../../constants/characters';\nimport {\n  EVENT_CHANGE,\n  EVENT_CHANGED,\n  EVENT_COMPOSITION_END,\n  EVENT_COMPOSITION_START,\n  EVENT_COMPOSITION_UPDATE,\n  EVENT_FOCUS_LINE_CHANGED,\n  EVENT_INPUT,\n  EVENT_KEYDOWN, EVENT_MOUNTED,\n  EVENT_NEWLINE,\n} from '../../constants/events';\nimport { ARROW_KEYS } from '../../constants/keys';\nimport {\n  assign,\n  getSelection,\n  isIE,\n  isPrevented,\n  isUndefined,\n  nextTick,\n  normalizeKey,\n  prevent,\n  text,\n} from '../../utils';\n\n\n/**\n * The input type for composition.\n *\n * @since 0.1.0\n */\nconst COMPOSITION_INPUT_TYPE = 'composition';\n\n/**\n * The class for handling the user input.\n *\n * @since 0.1.0\n */\nexport class Input extends Component {\n  /**\n   * The `TokenInfo` object saved when any key is pressed.\n   *\n   * @readonly\n   */\n  info: TokenInfo | null;\n\n  /**\n   * Indicates whether the input is in composition session or not.\n   *\n   * @readonly\n   */\n  composing: boolean;\n\n  /**\n   * Keeps the latest focus line.\n   *\n   * @readonly\n   */\n  line: Element;\n\n  /**\n   * Keeps the latest focus row index.\n   *\n   * @readonly\n   */\n  row: number;\n\n  /**\n   * Holds the current state.\n   */\n  private state: InputState;\n\n  /**\n   * Indicates whether the input is currently disabled or not.\n   */\n  private _disabled: boolean;\n\n  /**\n   * Initialized the component.\n   *\n   * @internal\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.listen();\n  }\n\n  /**\n   * Listen to some events.\n   */\n  private listen(): void {\n    const { editable } = this.elements;\n\n    this.bind( editable, 'keydown', this.onKeydown, this );\n    this.bind( editable, isIE() ? 'textinput' : 'input', this.onInput, this );\n    this.bind( editable, 'compositionstart', this.onCompositionStart, this );\n    this.bind( editable, 'compositionupdate', this.onCompositionUpdate, this );\n    this.bind( editable, 'compositionend', this.onCompositionEnd, this );\n\n    this.on( EVENT_MOUNTED, () => {\n      this.line = this.Chunk.elms[ 0 ];\n      this.row  = 0;\n    } );\n\n    this.on( EVENT_FOCUS_LINE_CHANGED, ( e, line, row ) => {\n      this.line = line;\n      this.row  = row;\n    } );\n  }\n\n  /**\n   * Called when the composition starts.\n   * Needs to emit the `change` event at this timing to save the start position.\n   * Note that some browsers do not support a CompositionEvent object.\n   *\n   * @param e - A CompositionEvent object or a regular Event object.\n   */\n  private onCompositionStart( e: CompositionEvent ): void {\n    if ( this.disabled ) {\n      const { Editor, Selection } = this;\n      const range = Selection.get( false );\n      getSelection().removeAllRanges();\n      Editor.blur();\n\n      nextTick( () => {\n        Editor.focus();\n        Selection.set( range.start, range.end );\n      } );\n\n      return;\n    }\n\n    this.composing = true;\n    this.set( COMPOSITION_INPUT_TYPE );\n    this.emit( EVENT_COMPOSITION_START, e );\n    this.emit( EVENT_CHANGE, COMPOSITION_INPUT_TYPE );\n  }\n\n  /**\n   * Called whenever the composing content is updated.\n   *\n   * @param e - A CompositionEvent object or a regular Event object.\n   */\n  private onCompositionUpdate( e: CompositionEvent ): void {\n    nextTick( () => {\n      this.Selection.update( this.getCaretPosition() );\n      this.emit( EVENT_COMPOSITION_UPDATE, e );\n    } );\n  }\n\n  /**\n   * Called when the composition ends.\n   *\n   * @param e - A CompositionEvent object or a regular Event object.\n   */\n  private onCompositionEnd( e: CompositionEvent ): void {\n    this.composing = false;\n    this.apply();\n    this.emit( EVENT_COMPOSITION_END, e );\n  }\n\n  /**\n   * Called whenever any key is pressed.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onKeydown( e: KeyboardEvent ): void {\n    const key = normalizeKey( e.key );\n    const { altKey, shiftKey } = e;\n\n    if ( this.disabled && ! ARROW_KEYS.includes( key ) ) {\n      return prevent( e, true );\n    }\n\n    this.emit( EVENT_KEYDOWN, e );\n\n    if ( isPrevented( e ) ) {\n      return;\n    }\n\n    this.info = this.lines.getInfoAt( this.getCaretPosition() );\n    this.set( 'input', { key } );\n\n    if ( key === 'Enter' ) {\n      this.handleEnter( e );\n      return;\n    }\n\n    if ( this.Selection.isCollapsed() ) {\n      if ( key === 'Delete' && ! shiftKey && ! altKey ) {\n        this.handleDelete( e );\n      } else if ( key === 'Backspace' && ! altKey ) {\n        this.handleBackspace( e );\n      }\n    }\n  }\n\n  /**\n   * Called whenever any input is received.\n   * Need to wait for the `compositionend` before calling `apply()`.\n   */\n  private onInput( e: InputEvent ): void {\n    this.emit( EVENT_INPUT, this, e );\n\n    if ( ! this.composing ) {\n      this.apply();\n    }\n  }\n\n  /**\n   * Handles the Enter key.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private handleEnter( e: KeyboardEvent ): void {\n    if ( ! this.composing ) {\n      this.set( 'newline', {\n        key     : 'Enter',\n        value   : this.before + LINE_BREAK + this.after,\n        position: [ this.row + 1, 0 ],\n      } );\n\n      this.emit( EVENT_NEWLINE, this );\n      this.apply();\n      prevent( e );\n    }\n  }\n\n  /**\n   * Handles the delete key.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private handleDelete( e: KeyboardEvent ): void {\n    const { row, lines } = this;\n\n    if ( this.col === this.value.length && row < lines.length - 1 ) {\n      this.apply( {\n        type    : 'deleteNext',\n        key     : 'Delete',\n        value   : this.value + lines[ row + 1 ].text,\n        startRow: row,\n        endRow  : row + 1,\n      } );\n\n      prevent( e );\n    }\n  }\n\n  /**\n   * Handles the backspace key.\n   */\n  private handleBackspace( e: KeyboardEvent ): void {\n    const { row, col } = this;\n\n    if ( col === 0 ) {\n      if ( row > 0 ) {\n        const prev = this.lines[ row - 1 ].text;\n\n        this.apply( {\n          type    : 'removePrev',\n          key     : 'Backspace',\n          value   : prev + this.value,\n          startRow: row - 1,\n          position: [ row - 1, prev.length ],\n        } );\n      }\n\n      prevent( e );\n    }\n  }\n\n  /**\n   * Appends a line break if the provided row is not the end of the document.\n   *\n   * @param value - A value where the line break will be appended.\n   * @param row   - Optional. A row index.\n   *\n   * @return The value with the line break, or the provided value itself.\n   */\n  private appendLineBreak( value: string, row = this.row ): string {\n    return value + ( row < this.lines.length - 1 ? LINE_BREAK : '' );\n  }\n\n  /**\n   * Settles the final value to apply.\n   *\n   * @param value  - A value to settle.\n   * @param endRow - An end row index.\n   */\n  private settleValue( value: string, endRow: number ): string {\n    const { state } = this;\n\n    if ( state ) {\n      if ( state.insertion ) {\n        value = this.before + state.insertion + this.after;\n      } else if ( ! isUndefined( state.value ) ) {\n        value = state.value;\n      }\n    }\n\n    return this.appendLineBreak( value, endRow );\n  }\n\n  /**\n   * Settles the final position to apply.\n   *\n   * @param position - A position to settle.\n   */\n  private settlePosition( position: Position ): Position {\n    const { state } = this;\n\n    if ( state ) {\n      if ( state.position ) {\n        return state.position;\n      }\n\n      position[ 1 ] += state.offset || 0;\n    }\n\n    return position;\n  }\n\n  /**\n   * Returns the current caret position.\n   *\n   * @return A position of the caret.\n   */\n  private getCaretPosition(): Position {\n    return [ this.row, this.col ];\n  }\n\n  /**\n   * Sets the input state.\n   * If the state with the provided type exists, new props will be assigned to it.\n   * The props object accepts following values:\n   *\n   * | State | Description |\n   * |---|---|\n   * | `key?` | The key that makes the input. |\n   * | `startRow?` | The start row index to replace lines with the current value from. |\n   * | `endRow?` | The end row index to replace lines with the current value to. |\n   * | `value?` | The value to replace lines with. If omitted, the current value will be used. |\n   * | `insertion?` | Specifies the value to insert at the caret position instead of setting the value. |\n   * | `offset?` | The number of offset cols after the state is applied. |\n   * | `position?` | Explicitly specifies the position after the state is applied. The `offset` will be ignored. |\n   *\n   * @param type  - The type of the state.\n   * @param props - Optional. An object with state values.\n   */\n  set( type: string, props: Omit<InputState, 'type'> = {} ): void {\n    const { state } = this;\n\n    if ( state && state.type === type ) {\n      this.state = assign( state, props );\n    } else {\n      this.state = assign( { type }, props );\n    }\n  }\n\n  /**\n   * Returns the current state object if available.\n   *\n   * @return The current state object if available, or `null` if not.\n   */\n  get(): InputState | null {\n    return this.state;\n  }\n\n  /**\n   * Applies the state to the editor and clears it.\n   *\n   * @example\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'textarea' );\n   *\n   * ryuseiCode.on( 'focus', () => {\n   *   const { Input } = ryuseiCode.Editor.Components;\n   *\n   *   setTimeout( () => {\n   *     Input.apply( {\n   *       insertion: 'foo',\n   *       offset: 3,\n   *     } );\n   *   }, 1000 );\n   * } );\n   * ```\n   *\n   * @param state - Optional. A new state to apply.\n   */\n  apply( state?: InputState ): void {\n    this.state = state || this.state;\n\n    if ( ! this.state || ! this.line ) {\n      return;\n    }\n\n    const { Selection, row } = this;\n    const { type, startRow = row, endRow = row } = this.state;\n    const position = this.getCaretPosition();\n\n    if ( type !== COMPOSITION_INPUT_TYPE ) {\n      this.emit( EVENT_CHANGE, type );\n    }\n\n    this.Code.replaceLines( startRow, endRow, this.settleValue( this.value, endRow ) );\n    this.Sync.sync( startRow, endRow, endRow );\n\n    Selection.set( this.settlePosition( position ) );\n\n    this.emit( EVENT_CHANGED, type );\n\n    this.state = null;\n    this.info  = null;\n  }\n\n  /**\n   * Returns a character at the current caret position or specified col index.\n   *\n   * @param col - Optional. A col index of the desired character.\n   *\n   * @return A character at the specified position.\n   */\n  char( col = this.col ): string {\n    return this.value.charAt( col );\n  }\n\n  /**\n   * Returns the value of the current line without the tailing line break.\n   *\n   * @return A text of the current line.\n   */\n  get value(): string {\n    return text( this.line ) || '';\n  }\n\n  /**\n   * Sets a new value to the current line.\n   * In most cases, it's better to use `apply()` to edit the line instead\n   * because this does not syncs the change to the editor.\n   *\n   * @param value - A new value to set.\n   */\n  set value( value: string ) {\n    text( this.line, value );\n  }\n\n  /**\n   * Returns the string of the current line before the caret position.\n   *\n   * @return The string before the caret.\n   */\n  get before(): string {\n    return this.value.slice( 0, this.col );\n  }\n\n  /**\n   * Returns the string of the current line after the caret position.\n   *\n   * @return The string after the caret.\n   */\n  get after(): string {\n    return this.value.slice( this.col );\n  }\n\n  /**\n   * Returns the length of the current line.\n   *\n   * @return The length of the current line.\n   */\n  get length(): number {\n    return this.value.length;\n  }\n\n  /**\n   * Returns the current col index.\n   *\n   * @return The col index of the caret.\n   */\n  get col(): number {\n    const { line } = this;\n    const selection = getSelection();\n\n    if ( line && selection.rangeCount > 0 ) {\n      const range = selection.getRangeAt( 0 ).cloneRange();\n      range.setStart( line, 0 );\n      return range.toString().length;\n    }\n\n    return 0;\n  }\n\n  /**\n   * Returns `true` if the input is disabled.\n   *\n   * @internal\n   *\n   * @return `true` if the input is disabled.\n   */\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  /**\n   * Makes the input disabled.\n   * All keys are ignored while it is disabled.\n   *\n   * @internal\n   *\n   * @param disabled - Determines whether to disable or enable the input.\n   */\n  set disabled( disabled: boolean ) {\n    this._disabled = disabled;\n  }\n}\n","import { Elements, EventBusEvent, KeyMatcher } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_KEYDOWN, EVENT_KEYMAP } from '../../constants/events';\nimport { KEYMAP, MODIFIER_KEYS } from '../../constants/keymap';\nimport { Editor } from '../../core/Editor/Editor';\nimport { assign, forOwn, includes, isArray, isMac, isString, matchesKey, normalizeKey, toArray } from '../../utils';\n\n\n/**\n * The component for detecting keyboard shortcuts and distributing them as internal events.\n *\n * @since 0.1.0\n */\nexport class Keymap extends Component {\n  /**\n   * Stores the target keys.\n   */\n  private keys: string[] = [];\n\n  /**\n   * The collection of shortcuts.\n   */\n  private keymap: Record<string, KeyMatcher| KeyMatcher[] | null | false>;\n\n  /**\n   * Initializes the component.\n   *\n   * @internal\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    this.keymap = assign( {}, KEYMAP, this.options.keymap );\n\n    forOwn( this.keymap, matchers => {\n      if ( matchers ) {\n        this.keys.push( ...toArray( matchers, true ).map( matcher => {\n          return matcher[ 0 ].toUpperCase();\n        } ) );\n      }\n    } );\n\n    this.on( EVENT_KEYDOWN, this.onKeydown, this, 0 );\n  }\n\n  /**\n   * Called when any key is pressed.\n   *\n   * @param e  - An EventBusEvent object.\n   * @param ke - A KeyboardEvent object.\n   */\n  private onKeydown( e: EventBusEvent<Editor>, ke: KeyboardEvent ): void {\n    if ( ! this.Editor.readOnly ) {\n      if ( includes( this.keys, normalizeKey( ke.key ).toUpperCase() ) ) {\n        const action = this.find( ke );\n\n        if ( action ) {\n          this.emit( `${ EVENT_KEYMAP }:${ action }`, ke, action );\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds the shortcut action from keymap definition.\n   *\n   * @param e - A KeyboardEvent object.\n   *\n   * @return A found action.\n   */\n  private find( e: KeyboardEvent ): string {\n    let action  = '';\n\n    forOwn( this.keymap, ( matchers, id ) => {\n      if ( this.matches( e, id ) ) {\n        action = id;\n        return false;\n      }\n    } );\n\n    return action;\n  }\n\n  /**\n   * Checks if the keyboard event matches keys of the provided action ID or not.\n   *\n   * @param e  - A KeyboardEvent object.\n   * @param id - An ID.\n   *\n   * @return `true` if the keyboard event matches keys of the ID, or otherwise `false`.\n   */\n  matches( e: KeyboardEvent, id: string ): boolean {\n    const matchers = this.keymap[ id ];\n    return matchers && matchesKey( e, matchers );\n  }\n\n  /**\n   * Builds a shortcut string that describes keys of the provided action ID or a KeyMatcher object.\n   * For example, `undo` or `[ 'Z', true ]` will be `Ctrl+Z`.\n   *\n   * @param id - An action ID in the keymap or a KeyMatcher object line.\n   *\n   * @return A built shortcut string. If the ID is not available, it returns an empty string.\n   */\n  getShortcut( id: string | KeyMatcher ): string {\n    const matchers = isString( id ) ? this.keymap[ id ] : id;\n\n    if ( matchers ) {\n      const matcher = isArray( matchers[ 0 ] ) ? matchers[ 0 ] : matchers as KeyMatcher;\n\n      if ( matcher ) {\n        const modifiers = MODIFIER_KEYS[ isMac() ? 'mac' : 'default' ];\n        const keys      = matcher.slice( 1 ).map( ( use, index ) => use && modifiers[ index ] ).filter( Boolean );\n        return keys.concat( matcher[ 0 ] ).join( '+' );\n      }\n    }\n\n    return '';\n  }\n}\n","/**\n * Checks is the platform is Mac or not.\n *\n * @return `true` if the platform is Mac, or otherwise `false`.\n */\nexport function isMac(): boolean {\n  return /Mac/i.test( navigator.platform );\n}\n","import { create, isIE, repeat } from '../../utils';\n\n\n/**\n * The utility class for measuring texts.\n *\n * @since 0.1.0\n */\nexport class MeasureText {\n  /**\n   * Holds the context object.\n   */\n  private context: CanvasRenderingContext2D;\n\n  /**\n   * Stores width of characters.\n   */\n  private chars: Record<string, number> = {};\n\n  /**\n   * The MeasureText constructor.\n   *\n   * @param font - A font string for the context.\n   */\n  constructor( font: string ) {\n    this.context = create( 'canvas' ).getContext( '2d' );\n    this.context.font = font;\n  }\n\n  /**\n   * Returns the width of the provided character.\n   * Note that IE rounds the width of the text.\n   *\n   * @param char     - A character to measure.\n   * @param useCache - Optional. Determines whether to use the cached width or not.\n   *\n   * @return The width of the character in pixel.\n   */\n  private getCharWidth( char: string, useCache = true ): number {\n    const { chars, context } = this;\n\n    return ( useCache && chars[ char ] ) || ( chars[ char ] = isIE()\n      ? context.measureText( repeat( char, 10 ) ).width / 10\n      : context.measureText( char ).width );\n  }\n\n  /**\n   * Returns the width of the provided text.\n   *\n   * @param text     - A text to measure.\n   * @param useCache - Optional. Determines whether to use the cached width or not.\n   */\n  measure( text: string, useCache = true ): number {\n    let width = 0;\n\n    for ( let i = 0; i < text.length; i++ ) {\n      width += this.getCharWidth( text.charAt( i ), useCache );\n    }\n\n    return width;\n  }\n\n  /**\n   * Clears cached width.\n   */\n  clear(): void {\n    this.chars = {};\n  }\n}\n","import { Elements, EventBusEvent, OffsetPosition, Position } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { CLASS_LINE } from '../../constants/classes';\nimport {\n  EVENT_FONT_LOADED,\n  EVENT_MOUNT,\n  EVENT_RESIZE,\n  EVENT_SCROLL_HEIGHT_CHANGED,\n  EVENT_SCROLLED,\n  EVENT_WINDOW_SCROLL,\n} from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { clamp, div, rect, remove, round, styles } from '../../utils';\nimport { MeasureText } from './MeasureText';\n\n\n/**\n * The class for measuring offset positions and caches some values.\n *\n * @since 0.1.0\n */\nexport class Measure extends Component {\n  /**\n   * Caches the lineHeight.\n   */\n  private lineHeightCache: number;\n\n  /**\n   * Caches the DOMRect objects of some elements.\n   */\n  private rectCaches: { editor?: DOMRect, scroller?: DOMRect, container?: DOMRect } = {};\n\n  /**\n   * Keeps the current CSS font settings.\n   */\n  private font: string;\n\n  /**\n   * Holds the MeasureText instance.\n   */\n  private measureText: MeasureText;\n\n  /**\n   * An object with padding values as `{ top, right, bottom, left }`;\n   */\n  padding: { top: number, right: number, bottom: number, left: number };\n\n  /**\n   * The Measure constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.on( EVENT_MOUNT, this.onMount, this, 0 );\n  }\n\n  /**\n   * Called just before components are mounted.\n   * This component must be initialized earlier than other components.\n   *\n   * @param e        - An EventBusEvent object.\n   * @param elements - A collection of essential editor elements.\n   */\n  private onMount( e: EventBusEvent<Editor>, elements: Elements ): void {\n    this.elements = elements;\n    this.createMeasureText();\n    this.updatePadding();\n    this.listen();\n  }\n\n  /**\n   * Listens to some events.\n   * The resize handler must be executed after the Style update listener and before others.\n   */\n  private listen(): void {\n    this.on( EVENT_RESIZE, () => {\n      this.lineHeightCache = 0;\n      this.updatePadding();\n      this.createMeasureText();\n      this.clearRectCaches();\n    }, null, 1 );\n\n    this.on( EVENT_FONT_LOADED, () => {\n      this.measureText.clear();\n    }, null, 1 );\n\n    this.on( [ EVENT_SCROLL_HEIGHT_CHANGED, EVENT_SCROLLED, EVENT_WINDOW_SCROLL ], this.clearRectCaches, this, 1 );\n  }\n\n  /**\n   * Updates the cache of the padding.\n   */\n  private updatePadding(): void {\n    const { editor } = this.elements;\n    const line = div( CLASS_LINE, editor );\n\n    this.padding = {\n      top   : parseFloat( styles( editor, 'paddingTop' ) ) || 0,\n      bottom: parseFloat( styles( editor, 'paddingBottom' ) ) || 0,\n      left  : parseFloat( styles( line, 'paddingLeft' ) ) || 0,\n      right : parseFloat( styles( line, 'paddingRight' ) ) || 0,\n    };\n\n    remove( line );\n  }\n\n  /**\n   * Creates a `MeasureText` instance only when the font settings are changed.\n   */\n  private createMeasureText() {\n    const font = this.buildCSSFont();\n\n    if ( this.font !== font ) {\n      this.measureText = new MeasureText( font );\n      this.font = font;\n    }\n  }\n\n  /**\n   * Returns the CSS font string of the current environment.\n   *\n   * @return A built string.\n   */\n  private buildCSSFont(): string {\n    const { lines } = this.elements;\n    return `${ styles( lines, 'fontSize' ) } ${ styles( lines, 'fontFamily' ) }`;\n  }\n\n  /**\n   * Clears the all rect caches.\n   */\n  private clearRectCaches(): void {\n    this.rectCaches = {};\n  }\n\n  /**\n   * Returns the top position of the line at the specified row.\n   * This clamps the row index from 0 and the total length of lines.\n   *\n   * @param row - A row index.\n   *\n   * @return A top position in pixel.\n   */\n  getTop( row: number ): number {\n    return clamp( row, 0, this.lines.length - 1 ) * this.lineHeight;\n  }\n\n  /**\n   * Returns the bottom position of the line at the specified row.\n   * This clamps the row index from 0 and the total length of lines.\n   *\n   * @param row - A row index.\n   *\n   * @return A bottom position in pixel.\n   */\n  getBottom( row: number ): number {\n    const { Code } = this;\n    const isLast = row >= Code.size - 1;\n    return this.getTop( row + 1 ) + ( isLast ? this.lineHeight : 0 );\n  }\n\n  /**\n   * Computes the closest row index to the offset `top` position.\n   *\n   * @param top - A offset position.\n   *\n   * @return The closest row index to the offset position.\n   */\n  closest( top: number ): number {\n    const row = round( ( top - this.padding.top ) / this.lineHeight );\n    return clamp( row, 0, this.lines.length - 1 );\n  }\n\n  /**\n   * Measures the provided string and returns the width.\n   * This method caches each width of the character in the string for performance.\n   *\n   * @param string   - A string to measure.\n   * @param useCache - Optional. Determines whether to use the cached width or not.\n   *\n   * @return The width of the string.\n   */\n  measureWidth( string: string, useCache = true ): number {\n    return this.measureText.measure( string, useCache );\n  }\n\n  /**\n   * Converts the passed position to the OffsetPosition object as `{ top: number, left: number }`.\n   *\n   * @param position - A position to convert.\n   *\n   * @return An object literal with top and left positions.\n   */\n  getOffset( position: Position ): OffsetPosition {\n    const { padding } = this;\n    const line = position[ 0 ] === this.Selection.focus[ 0 ] ? this.Input.value : this.Code.getLine( position[ 0 ] );\n\n    // console.log( line.slice( 0, position[ 1 ] ) );\n\n    return {\n      top : this.getTop( position[ 0 ] ) + padding.top,\n      left: this.measureWidth( line.slice( 0, position[ 1 ] ) ) + padding.left,\n    };\n  }\n\n  /**\n   * Returns a DOMRect object of the editor element.\n   *\n   * @return A DOMRect object.\n   */\n  get editorRect(): DOMRect {\n    return ( this.rectCaches.editor = this.rectCaches.editor || rect( this.elements.editor ) );\n  }\n\n  /**\n   * Returns a DOMRect object of the scroller element.\n   *\n   * @return A DOMRect object.\n   */\n  get scrollerRect(): DOMRect {\n    return ( this.rectCaches.scroller = this.rectCaches.scroller || rect( this.elements.scroller ) );\n  }\n\n  /**\n   * Returns a DOMRect object of the container element.\n   *\n   * @return A DOMRect object.\n   */\n  get containerRect(): DOMRect {\n    return ( this.rectCaches.container = this.rectCaches.container || rect( this.elements.container ) );\n  }\n\n  /**\n   * Returns the editor line height in pixel.\n   *\n   * @return The line height in pixel.\n   */\n  get lineHeight(): number {\n    return ( this.lineHeightCache = this.lineHeightCache\n      || parseFloat( styles( this.elements.editor, 'lineHeight' ) ) );\n  }\n}\n","import { OffsetPosition, Elements, Position } from '@ryusei/code';\nimport { CLASS_MARKER } from '../../constants/classes';\nimport { Editor } from '../../core/Editor/Editor';\nimport { compare, max, unit } from '../../utils';\n\n\n/**\n * The class for highlighting arbitrary texts.\n *\n * @since 0.1.0\n */\nexport class Marker {\n  /**\n   * Holds the Editor instance.\n   */\n  protected Editor: Editor;\n\n  /**\n   * Holds the editor elements.\n   */\n  protected elements: Elements;\n\n  /**\n   * Holds the scroller element.\n   */\n  protected scroller: HTMLElement;\n\n  /**\n   * Caches the generated HTML string.\n   */\n  protected cache: string;\n\n  /**\n   * Holds the marker content.\n   */\n  protected content: string;\n\n  /**\n   * The Marker constructor.\n   *\n   * @param Editor   - An Editor instance.\n   * @param elements - A collection of editor elements.\n   */\n  constructor( Editor: Editor, elements: Elements ) {\n    this.Editor   = Editor;\n    this.elements = elements;\n    this.scroller = elements.scroller;\n  }\n\n  /**\n   * Calculates boundaries for drawing the marker.\n   *\n   * @param anchor - An anchor position.\n   * @param focus  - A focus position.\n   *\n   * @return An object with start and end boundaries.\n   */\n  protected calcBoundaries( anchor: Position, focus: Position ): { start: OffsetPosition, end: OffsetPosition } {\n    const { Measure } = this.Editor.Components;\n    const isBackward = compare( anchor, focus ) > 0;\n\n    return {\n      start: Measure.getOffset( isBackward ? focus : anchor ),\n      end  : Measure.getOffset( isBackward ? anchor : focus ),\n    };\n  }\n\n  /**\n   * Generates HTML of the marker.\n   *\n   * @param anchor   - An anchor position.\n   * @param focus    - A focus position.\n   * @param useCache - A focus position.\n   *\n   * @return The generated HTML string of the marker.\n   */\n  html( anchor: Position, focus: Position, useCache = true ): string {\n    if ( useCache && this.cache ) {\n      return this.cache;\n    }\n\n    const { Measure: { lineHeight, padding } } = this.Editor.Components;\n    const { start, end } = this.calcBoundaries( anchor, focus );\n    const diff       = end.top - start.top;\n    const fillHeight = diff - lineHeight;\n    const startLeft  = max( start.left, padding.left );\n\n    let html = '';\n\n    if ( diff ) {\n      html += this.buildLine( start.top, startLeft, '100%' );\n      html += this.buildLine( end.top, padding.left, max( end.left - padding.left, 0 ) );\n\n      if ( fillHeight > 0 ) {\n        html += this.buildLine( start.top + lineHeight, padding.left, '100%', fillHeight );\n      }\n    } else {\n      html += this.buildLine( start.top, startLeft, max( end.left - startLeft, 0 ) );\n    }\n\n    this.cache = html;\n\n    return html;\n  }\n\n  /**\n   * Builds HTML of each line.\n   *\n   * @param top    - A top position.\n   * @param left   - A left position.\n   * @param width  - Width.\n   * @param height - Optional. Height.\n   *\n   * @return A generated HTML string.\n   */\n  protected buildLine( top: number, left: number, width: number | string, height?: number | string ): string {\n    let styles = `top: ${ unit( top ) }; left: ${ unit( left ) }; width: ${ unit( width ) };`;\n\n    if ( height ) {\n      styles += ` height: ${ unit( height ) };`;\n    }\n\n    return `<div class=\"${ CLASS_MARKER }\" style=\"${ styles }\"></div>`;\n  }\n}\n","import { Elements, Position } from '@ryusei/code';\nimport { CLASS_MARKERS } from '../../constants/classes';\nimport { Editor } from '../../core/Editor/Editor';\nimport { between, div, html, rect, remove } from '../../utils';\nimport { Marker } from './Marker';\n\n\n/**\n * The class for highlighting arbitrary texts.\n *\n * @since 0.1.0\n */\nexport class StandaloneMarker extends Marker {\n  /**\n   * The element for wrapping marker fragments.\n   */\n  private readonly wrapper: HTMLDivElement;\n\n  /**\n   * The Marker constructor.\n   *\n   * @param Editor   - An Editor instance.\n   * @param elements - A collection of editor elements.\n   * @param classes  - Optional. Class names for the wrapper element.\n   */\n  constructor( Editor: Editor, elements: Elements, classes?: string | string[] ) {\n    super( Editor, elements );\n    this.wrapper = div( [ CLASS_MARKERS ].concat( classes ), elements.background );\n  }\n\n  /**\n   * Draws the range for the anchor to the focus.\n   *\n   * @param anchor - An anchor position.\n   * @param focus  - A focus position.\n   */\n  protected draw( anchor: Position, focus: Position ): void {\n    html( this.wrapper, this.html( anchor, focus, false ) );\n  }\n\n  /**\n   * Clears the marker.\n   */\n  protected clear(): void {\n    html( this.wrapper, '' );\n  }\n\n  /**\n   * Checks if the provided client position is inside the current range or not.\n   *\n   * @param clientX - X position that is relative to the client.\n   * @param clientY - Y position that is relative to the client.\n   *\n   * @return `true` if the position is inside the range, or otherwise `false`.\n   */\n  isInside( clientX: number, clientY: number ): boolean {\n    const { children } = this.wrapper;\n\n    for ( let i = 0; i < children.length; i++ ) {\n      const domRect = rect( children[ i ] );\n\n      if( domRect.width\n        && between( clientX, domRect.left, domRect.right )\n        && between( clientY, domRect.top, domRect.bottom )\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    remove( this.wrapper );\n  }\n}\n","import { Elements, EventBusEvent } from '@ryusei/code';\r\nimport { CLASS_MARKERS } from '../../constants/classes';\r\nimport { EVENT_RESIZE, EVENT_SELECTED, EVENT_SELECTING } from '../../constants/events';\r\nimport { CHANGED, CLICKED_RIGHT, COLLAPSED, SELECTED } from '../../constants/selection-states';\r\nimport { Editor } from '../../core/Editor/Editor';\r\nimport { rafThrottle } from '../../utils';\r\nimport { Selection } from '../Selection/Selection';\r\nimport { StandaloneMarker } from './StandaloneMarker';\r\n\r\n\r\n/**\r\n * The modifier class for the selection marker.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport const CLASS_MARKER_SELECTION = `${ CLASS_MARKERS }--selection`;\r\n\r\n/**\r\n * The class for highlighting a selection range.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport class SelectionMarker extends StandaloneMarker {\r\n  /**\r\n   * The SelectionMarker constructor.\r\n   *\r\n   * @param editor   - An Editor instance.\r\n   * @param elements - A collection of editor elements.\r\n   */\r\n  constructor( editor: Editor, elements: Elements ) {\r\n    super( editor, elements, CLASS_MARKER_SELECTION );\r\n    this.listen();\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  protected listen(): void {\r\n    const { event } = this.Editor;\r\n\r\n    event.on( EVENT_SELECTED, this.onStateChanged.bind( this ), this, 0 );\r\n    event.on( EVENT_SELECTING, rafThrottle( this.drawSelection.bind( this ) ) );\r\n    event.on( EVENT_RESIZE, () => {\r\n      this.clear();\r\n      this.drawSelection();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Called when the selection state is changed.\r\n   *\r\n   * @param e         - An EventBusEvent object.\r\n   * @param Selection - A Selection instance.\r\n   * @param state     - A new state.\r\n   * @param prev      - A previous state.\r\n   */\r\n  private onStateChanged( e: EventBusEvent<Editor>, Selection: Selection, state: number, prev: number ): void {\r\n    if ( Selection.is( COLLAPSED, CHANGED ) ) {\r\n      this.clear();\r\n    }\r\n\r\n    if ( Selection.is( CHANGED, SELECTED ) && prev !== CLICKED_RIGHT ) {\r\n      this.drawSelection();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws the current selection.\r\n   */\r\n  private drawSelection(): void {\r\n    const { Selection } = this.Editor.Components;\r\n\r\n    if ( ! Selection.isCollapsed() ) {\r\n      const range = Selection.get( false );\r\n      this.draw( range.start, range.end );\r\n    } else {\r\n      this.clear();\r\n    }\r\n  }\r\n}\r\n","import { Elements, Range as PositionRange, RangeData } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { CLASS_MARKERS } from '../../constants/classes';\nimport { EVENT_CHUNK_MOVED, EVENT_FONT_LOADED, EVENT_RESIZE, EVENT_SCROLLED } from '../../constants/events';\nimport { between, compare, div, forOwn, text, throttle } from '../../utils';\nimport { Marker } from './Marker';\nimport { SelectionMarker } from './SelectionMarker';\n\n\n/**\n * The throttle duration for calling the `observe` method while scrolling.\n *\n * @since 0.1.0\n */\nexport const OBSERVE_THROTTLE_DURATION = 200;\n\n/**\n * Limits the number of ranges to register.\n *\n * @since 0.1.0\n */\nexport const MAX_RANGES = 10000;\n\n/**\n * The class for highlighting the selection and arbitrary ranges.\n *\n * @since 0.1.0\n */\nexport class Range extends Component {\n  /**\n   * Holds the SelectionMarker instance.\n   *\n   * @readonly\n   */\n  selection: SelectionMarker;\n\n  /**\n   * Stores ranges with categorizing them into arbitrary groups.\n   */\n  readonly ranges: Record<string, RangeData[]>= {};\n\n  /**\n   * Stores wrapper elements of markers.\n   */\n  readonly groups: Record<string, HTMLDivElement> = {};\n\n  /**\n   * Initializes the component.\n   *\n   * @internal\n   *\n   * @param elements - A collection of editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.selection = new SelectionMarker( this.Editor, elements );\n\n    const observe = this.observe.bind( this, false );\n    this.on( EVENT_CHUNK_MOVED, throttle( observe, OBSERVE_THROTTLE_DURATION ) );\n    this.on( EVENT_SCROLLED, observe );\n    this.on( [ EVENT_FONT_LOADED, EVENT_RESIZE ], this.observe.bind( this, true ) );\n  }\n\n  /**\n   * Observes ranges and draw/hide them.\n   *\n   * @param refresh - Optional. If `true`, redraws markers without their caches.\n   */\n  private observe( refresh?: boolean ): void {\n    if ( this.Editor ) {\n      forOwn( this.ranges, ( ranges, group ) => {\n        if ( this.groups[ group ] ) {\n          this.draw( group, refresh );\n        }\n      } );\n    }\n  }\n\n  /**\n   * Draws visible markers.\n   *\n   * @param group   - A group to draw.\n   * @param refresh - Optional. If `true`, redraws markers without their caches.\n   */\n  private draw( group: string, refresh?: boolean ): void {\n    const ranges = this.ranges[ group ];\n\n    let html = '';\n\n    ranges.forEach( data => {\n      const { range } = data;\n\n      if ( this.isVisible( range ) ) {\n        html += data.marker.html( range.start, range.end, ! refresh );\n      }\n    } );\n\n    this.groups[ group ].innerHTML = html;\n  }\n\n  /**\n   * Checks if the range should be drawn or not.\n   * This returns `true` when the range boundary is inside the viewport, or the range contains it.\n   *\n   * @param range - A range to check.\n   *\n   * @return `true` if the range should be drawn or otherwise `false`.\n   */\n  private isVisible( range: PositionRange ): boolean {\n    const { Chunk } = this;\n    const [ startRow ] = range.start;\n    const [ endRow ] = range.end;\n    return Chunk.includes( startRow ) || Chunk.includes( endRow ) || between( Chunk.start, startRow, endRow );\n  }\n\n  /**\n   * Registers ranges to the group and draw them as markers.\n   * They will remain until they are explicitly cleared by the `clear()` method.\n   * If `concat` is `true`, sequential ranges will be concatenated as a single range.\n   *\n   * @example\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'textarea' );\n   *\n   * const { Range } = ryuseiCode.Editor.Components;\n   *\n   * Range.register( 'my-ranges', [\n   *   { start: [ 0, 0 ], end: [ 0, 5 ] },\n   *   { start: [ 1, 0 ], end: [ 1, 3 ] },\n   * ] );\n   *\n   * // Clear ranges after 2 seconds.\n   * setTimeout( () => {\n   *   Range.clear( 'my-ranges' );\n   * }, 2000 );\n   * ```\n   *\n   * @param group       - A group name.\n   * @param ranges      - A range or ranges to draw.\n   * @param concat      - Optional. Determines whether to concat sequential ranges into the single one or not.\n   * @param constructor - Optional. Specifies the Marker constructor.\n   */\n  register( group: string, ranges: PositionRange[], concat = true, constructor: typeof Marker = Marker ): void {\n    const { ranges: info } = this;\n    let lastRange: PositionRange;\n\n    info[ group ] = info[ group ] || [];\n    ranges = ranges.slice( 0, MAX_RANGES );\n\n    for ( let i = 0; i < ranges.length; i++ ) {\n      const range = ranges[ i ];\n\n      if ( concat && lastRange && compare( lastRange.end, range.start ) === 0 ) {\n        lastRange.end = range.end;\n      } else {\n        lastRange = { start: range.start, end: range.end };\n        info[ group ].push( { range: lastRange, marker: new constructor( this.Editor, this.elements ) } );\n      }\n    }\n\n    if ( ! this.groups[ group ] ) {\n      const classes = [ CLASS_MARKERS, `${ CLASS_MARKERS }--${ group }` ];\n      this.groups[ group ] = div( classes, this.elements.background );\n    }\n\n    this.observe();\n  }\n\n  /**\n   * Clears ranges and rendered markers that belong to the specified group.\n   * If the group name is omitted, this method clears all ranges.\n   *\n   * @param group - Optional. A group name to clear.\n   */\n  clear( group?: string ): void {\n    if ( group ) {\n      const ranges = this.ranges[ group ];\n\n      if ( ranges ) {\n        text( this.groups[ group ], '' );\n        this.clearRanges( group );\n      }\n    } else {\n      forOwn( this.ranges, ( markers, key ) => { this.clear( key ) } );\n    }\n  }\n\n  /**\n   * Clears ranges in the specified group, but rendered markers will remain.\n   *\n   * @param group - A group name to clear.\n   */\n  clearRanges( group: string ): void {\n    this.ranges[ group ] = [];\n  }\n}\n","import { Position } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { startsWith, toArray } from '../../utils';\n\n\n/**\n * The class for checking a current state or category.\n * States and categories are defined by language tokenizers.\n *\n * @since 0.1.0\n */\nexport class Scope extends Component {\n  /**\n   * Checks if the current or specified position is in the specified state or category.\n   * With the `!` negating notation, this returns `true` if the position is NOT inside the scope.\n   *\n   * Note that the Lexer (RyuseiLight) determines states and categories.\n   *\n   * @example\n   * ```ts\n   * // Returns `true` if the caret is inside a comment.\n   * Scope.isIn( [ 'comment' ] );\n   *\n   * // Returns `true` if the caret is inside a \"attr\" state.\n   * Scope.isIn( [ '#attr' ] );\n   *\n   * // Returns `true` if the caret is not inside a comment and a string.\n   * Scope.isIn( [ '!comment', '!string' ] );\n   * ```\n   *\n   * @param names    - A name or an array with names of states and/or categories.\n   * @param position - Optional. Specifies the position to check.\n   *\n   * @return `true` if the start position is inside the scope.\n   */\n  isIn( names: string | string[], position?: Position ): boolean {\n    names = toArray( names );\n\n    const states     = names.filter( name => name.indexOf( '#' ) > -1 );\n    const categories = names.filter( name => name.indexOf( '#' ) === -1 );\n\n    return this.inState( states, position ) && this.inCategory( categories, position );\n  }\n\n  /**\n   * Checks if the current or specified position is in the specified state or not.\n   * The `!` negating notation is acceptable.\n   *\n   * @param states   - A name or an array with names of states.\n   * @param position - Optional. Specifies the position to check.\n   */\n  inState( states: string | string[], position?: Position ): boolean {\n    return this.inScope( states, false, position );\n  }\n\n  /**\n   * Checks if the current or specified position is in the specified category or not.\n   * The `!` negating notation is acceptable.\n   *\n   * @param categories - A name or an array with names of categories.\n   * @param position   - Optional. Specifies the position to check.\n   */\n  inCategory( categories: string | string[], position?: Position ): boolean {\n    return this.inScope( categories, true, position );\n  }\n\n  /**\n   * Checks if the current start position is in the specified state or not.\n   * If `category` is `true`, this method checks if the position is in the category or not.\n   *\n   * @param names    - A state or state names.\n   * @param category - Optional. Determines whether to check for a category or not.\n   * @param position - Optional. Specifies the position to check.\n   */\n  private inScope( names: string | string[], category: boolean, position?: Position ): boolean {\n    names = toArray( names );\n\n    const negated = names.filter( name => startsWith( name, '!' ) ).map( name => name.slice( 1 ) );\n\n    if ( negated.length && this.inScope( negated, category ) ) {\n      return false;\n    }\n\n    names = names.filter( name => ! startsWith( name, '!' ) );\n\n    return ! names.length || names.some( name => {\n      const info = this.lines.getInfoAt( position || this.Selection.get().start );\n      return info && info[ category ? 'category' : 'state' ] === name;\n    } );\n  }\n}\n","/**\n * Sets the `contentEditable` attribute of the provided element.\n *\n * @param elm      - An element.\n * @param editable - Whether to set the value to `true` or `false`.\n */\nexport function toggleEditable( elm: HTMLElement, editable: boolean ): void {\n  elm.contentEditable = editable ? 'true' : 'false';\n}\n","import { Position } from '@ryusei/code';\n\n\n/**\n * The origin position.\n *\n * @since 0.1.0\n */\nexport const ORIGIN: Position = [ 0, 0 ];\n\n/**\n * The delay time for reselection after scroll ends.\n *\n * @since 0.1.0\n */\nexport const DELAY_FOR_RESELECTION = 5;\n","import { EventBusCallback, EventBusEvent, EventHandler } from '@ryusei/code';\nimport { toArray } from '../utils';\n\n\n/**\n * The class for provides the simple event system.\n *\n * @since 0.1.0\n */\nexport class EventBus<T = undefined> {\n  /**\n   * Holds all handlers.\n   */\n  protected handlers: Record<string, EventHandler[]> = {};\n\n  /**\n   * The owner of the instance.\n   */\n  private readonly owner: T | undefined;\n\n  /**\n   * The EventBus constructor.\n   *\n   * @param owner - Optional. The owner of the instance.\n   */\n  constructor( owner?: T ) {\n    this.owner = owner;\n  }\n\n  /**\n   * Registers an event handler.\n   *\n   * @param events   - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param callback - A callback function to register.\n   * @param key      - Optional. An object for an identifier of the handler.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   *                   Lower numbers correspond with earlier execution. The default value is 10.\n   */\n  on( events: string | string[], callback: EventBusCallback, key?: object, priority = 10 ): void {\n    toArray( events ).filter( Boolean ).join( ' ' ).split( ' ' ).forEach( eventNS => {\n      const [ event, namespace ] = eventNS.split( '.' );\n      const eventHandlers = this.handlers[ event ] || [];\n\n      eventHandlers.push( { event, callback, namespace, priority, key } );\n      eventHandlers.sort( ( handler1, handler2 ) => handler1.priority - handler2.priority );\n\n      this.handlers[ event ] = eventHandlers;\n    } );\n  }\n\n  /**\n   * Removes event handlers registered by `on()`.\n   * If only the event name is provided, all handlers that associate with the event are removed.\n   * If the event name and namespace are specified, handlers that associate with the event and namespace are removed.\n   *\n   * @param events - An event name or names separated by spaces. Use a dot(.) to add a namespace.\n   * @param key    - Optional. An object for an identifier of the handler.\n   */\n  off( events: string | string[], key?: object ): void {\n    toArray( events ).filter( Boolean ).join( ' ' ).split( ' ' ).forEach( eventNS => {\n      const [ event, namespace ] = eventNS.split( '.' );\n      const eventHandlers = this.handlers[ event ];\n\n      if ( eventHandlers ) {\n        if ( key || namespace ) {\n          this.handlers[ event ] = eventHandlers.filter( handler => {\n            return ! ( handler.key === key && handler.namespace === namespace );\n          } );\n        } else {\n          this.handlers[ event ] = [];\n        }\n      }\n    } );\n  }\n\n  /**\n   * Triggers callback functions.\n   *\n   * @param event - An event name.\n   * @param args  - Optional. Any number of arguments to pass to callback functions.\n   */\n  emit( event: string, ...args: any[] ): void {\n    const eventHandlers = this.handlers[ event ];\n    const eventObject: EventBusEvent<T> = { type: event, owner: this.owner };\n\n    if ( eventHandlers ) {\n      eventHandlers.forEach( handler => { handler.callback( eventObject, ...args ) } );\n    }\n  }\n\n  /**\n   * Removes all handlers.\n   */\n  destroy(): void {\n    this.handlers = {};\n  }\n}\n","import { Elements } from '@ryusei/code';\nimport { EVENT_BLUR, EVENT_FOCUS } from '../../constants/events';\nimport { ARROW_KEYS } from '../../constants/keys';\nimport {\n  CHANGED,\n  CLICKED_RIGHT,\n  COLLAPSED,\n  END,\n  EXTEND,\n  IDLE,\n  SELECTED,\n  SELECTING,\n  START,\n  UPDATE,\n} from '../../constants/selection-states';\nimport { Editor } from '../../core/Editor/Editor';\nimport { State as Base } from '../../event/State';\nimport { activeElement, getSelection, includes, isPrevented, normalizeKey, off, on } from '../../utils';\nimport { Selection } from './Selection';\n\n\n/**\n * The class for observing the selection states.\n *\n * @since 0.1.0\n */\nexport class State extends Base<number> {\n  /**\n   * Holds collection of elements.\n   */\n  private readonly elements: Elements;\n\n  /**\n   * Holds the Editor instance.\n   */\n  private readonly Editor: Editor;\n\n  /**\n   * Holds the Selection instance.\n   */\n  private readonly Selection: Selection;\n\n  /**\n   * The WeakMap key for identifying event handlers(just uses a new empty object).\n   */\n  private readonly key = {};\n\n  /**\n   * Describes what device makes the selection change.\n   */\n  device: 'pointer' | 'keyboard';\n\n  /**\n   * The State constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( IDLE );\n    this.Editor    = Editor;\n    this.elements  = Editor.elements;\n    this.Selection = Editor.Components.Selection;\n    this.listen();\n  }\n\n  /**\n   * Listens to some events.\n   * Note that the `mouseup` event of `window` needs to be listened to instead of the editable element,\n   * because users may release the mouse outside of it.\n   */\n  private listen(): void {\n    const { editable } = this.elements;\n    const { event } = this.Editor;\n    const { key } = this;\n\n    const onKeydown = this.onKeydown.bind( this );\n\n    on( document, 'selectionchange', this.onSelectionChange.bind( this ), key );\n    on( window, 'pointerup', this.onSelectionEnd.bind( this ), key );\n\n    on( editable, 'pointerdown', this.onSelectionStart.bind( this ), key );\n    on( editable, 'keydown', onKeydown, key );\n    on( editable, 'keyup', this.onKeyup.bind( this ), key );\n\n    event.on( EVENT_FOCUS, this.onFocus.bind( this ) );\n    event.on( EVENT_BLUR, this.onBlur.bind( this ) );\n  }\n\n  /**\n   * Called when the editor is focused.\n   */\n  private onFocus(): void {\n    if ( this.is( IDLE ) ) {\n      this.set( COLLAPSED );\n    }\n  }\n\n  /**\n   * Called when the editor is blurred.\n   * Needs to check the Components existence because this may be called after destruction.\n   */\n  private onBlur(): void {\n    if ( this.Editor.Components ) {\n      if ( ! this.isFocused() ) {\n        this.set( IDLE );\n      }\n    }\n  }\n\n  /**\n   * Called whenever the selection of the document is changed.\n   * - Only handles the change made by the editable element.\n   * - Detects the selection change that made by the start action, such as `pointerdown` and\n   *   makes the state go into the `CHANGED` state.\n   * - If the selection changes after `CHANGED`, which means user selects texts and the range is not collapsed,\n   *   makes the state go into the `SELECTING` state.\n   * - In FF, the event is sometimes fired after `pointerdown`.\n   * - In iOS, the event is fired after `pointerup`.\n   */\n  private onSelectionChange(): void {\n    if ( activeElement() !== this.Editor.elements.editable ) {\n      return;\n    }\n\n    if ( this.is( START, EXTEND ) ) {\n      this.set( CHANGED );\n    } else if ( this.is( CHANGED ) ) {\n      this.set( SELECTING );\n    } else if ( this.is( COLLAPSED, SELECTED ) ) {\n      if ( getSelection().isCollapsed ) {\n        this.set( CHANGED );\n        this.set( COLLAPSED );\n      } else {\n        this.set( SELECTING );\n        this.set( SELECTED );\n      }\n    }\n  }\n\n  /**\n   * Called when the pointer becomes active or when arrow keys are pressed.\n   * If a shift key is pressed,\n   * that means the existing selection is being updated instead that a new one is created.\n   *\n   * @param e - An event object.\n   */\n  private onSelectionStart( e: PointerEvent | KeyboardEvent ): void {\n    if ( isPrevented( e ) ) {\n      return;\n    }\n\n    this.device = e instanceof PointerEvent ? 'pointer' : 'keyboard';\n\n    const { Selection } = this;\n\n    if ( e instanceof PointerEvent ) {\n      if ( e.button === 2 && Selection.isInside( e.clientX, e.clientY ) ) {\n        this.set( CLICKED_RIGHT );\n        return;\n      }\n    }\n\n    this.set( e.shiftKey ? EXTEND : START );\n  }\n\n  /**\n   * Called when the `pointerup` or `keyup` event is triggered on the window object.\n   * Note that the state goes into `SELECTED` when the previous state is `EXTEND`\n   * even if the native selection is collapsed,\n   * because an anchor node may disappear after scrolling.\n   * The selection is correctly handled by the Selection class.\n   */\n  private onSelectionEnd(): void {\n    if ( this.device && ! this.is( IDLE ) ) {\n      this.device = null;\n\n      if ( ! this.is( CLICKED_RIGHT ) ) {\n        if ( this.is( EXTEND ) ) {\n          this.set( SELECTED );\n        } else {\n          this.set( END );\n          this.set( getSelection().isCollapsed ? COLLAPSED : SELECTED );\n        }\n      }\n    }\n  }\n\n  /**\n   * Called when any key is pressed.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onKeydown( e: KeyboardEvent ): void {\n    if ( includes( ARROW_KEYS, normalizeKey( e.key ) ) ) {\n      this.onSelectionStart( e );\n    }\n  }\n\n  /**\n   * Called when any key is released.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onKeyup( e: KeyboardEvent ): void {\n    if ( includes( ARROW_KEYS, normalizeKey( e.key ) ) ) {\n      this.onSelectionEnd();\n    }\n  }\n\n  /**\n   * Checks if the editor or the context menu has focus or not.\n   *\n   * @return `true` if they have focus or otherwise `false`.\n   */\n  private isFocused(): boolean {\n    return this.elements.editor.contains( activeElement() ) || this.Editor.Components.ContextMenu.isFocused();\n  }\n\n  /**\n   * Should be called when the custom selection is manually updated.\n   *\n   * @param collapsed - Indicates whether the new selection is collapsed or not.\n   */\n  update( collapsed: boolean ): void {\n    if ( ! this.is( START, EXTEND ) ) {\n      this.set( UPDATE );\n      this.set( collapsed ? COLLAPSED : SELECTED );\n    }\n  }\n\n  /**\n   * Attempts to refresh the selection state.\n   *\n   * @param collapsed - Indicates whether the new selection is collapsed or not.\n   */\n  refresh( collapsed: boolean ): void {\n    if ( ! this.is( START, EXTEND ) ) {\n      this.set( START );\n      this.set( CHANGED );\n      this.set( collapsed ? COLLAPSED : SELECTED );\n    }\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    this.event.destroy();\n    off( null, '', this.key );\n  }\n}\n","import { EventBusCallback } from '@ryusei/code';\nimport { includes, slice } from '../utils';\nimport { EventBus } from './EventBus';\n\n\n/**\n * The class for providing a simple state system.\n *\n * @since 0.1.0\n */\nexport class State<T = number> {\n  /**\n   * Indicates the current state.\n   */\n  private state: T;\n\n  /**\n   * Keeps the prev state.\n   */\n  private prev: T | undefined;\n\n  /**\n   * Indicates whether the state change is on hold or not.\n   */\n  private held: boolean;\n\n  /**\n   * The EventBus instance.\n   */\n  protected event = new EventBus();\n\n  /**\n   * The State constructor.\n   *\n   * @param initial - An initial state.\n   */\n  constructor( initial: T ) {\n    this.state = initial;\n  }\n\n  /**\n   * Sets a new state.\n   *\n   * @param state - A state to change to.\n   */\n  set( state: T ): void {\n    if ( this.state !== state && ! this.held ) {\n      this.prev  = this.state;\n      this.state = state;\n      this.event.emit( 'changed', state, this.prev );\n    }\n  }\n\n  /**\n   * Checks if the current state is a provided one or one of them.\n   * If multiple states are passed, this method checks them by the `or` condition.\n   *\n   * @param states - A state or states to check.\n   */\n  is( ...states: T[] ): boolean {\n    return includes( slice( states ), this.state );\n  }\n\n  /**\n   * Checks if the previous state is a provided one or one of them.\n   * If multiple states are passed, this method checks them by the `or` condition.\n   *\n   * @param states - A state or states to check.\n   */\n  isPrev( ...states: T[] ): boolean {\n    return includes( slice( states ), this.prev );\n  }\n\n  /**\n   * Holds the current state so that it won't change.\n   */\n  hold(): void {\n    this.held = true;\n  }\n\n  /**\n   * Disables to hold the state.\n   */\n  release(): void {\n    this.held = false;\n  }\n\n  /**\n   * Registers the event handler.\n   *\n   * @param events   - An event name or names separated by spaces.\n   * @param callback - A callback function to register.\n   * @param priority - Optional. A priority number for the order in which the callbacks are invoked.\n   */\n  on( events: string, callback: EventBusCallback, priority?: number ): void {\n    this.event.on( events, callback, this, priority );\n  }\n}\n","import { Elements, EventBusEvent, Position, Range, SelectionBoundary } from '@ryusei/code';\r\nimport { Component } from '../../classes/Component/Component';\r\nimport { CLASS_EMPTY, CLASS_LINE } from '../../constants/classes';\r\nimport {\r\n  EVENT_SCROLLED,\r\n  EVENT_SCROLLER_SCROLL,\r\n  EVENT_SELECTED,\r\n  EVENT_SELECTING,\r\n  EVENT_SELECTION_CHANGE,\r\n  EVENT_WINDOW_SCROLL,\r\n} from '../../constants/events';\r\nimport {\r\n  CHANGED,\r\n  CLICKED_RIGHT,\r\n  COLLAPSED,\r\n  EXTEND,\r\n  SELECTED,\r\n  SELECTING,\r\n  START,\r\n  UPDATE,\r\n} from '../../constants/selection-states';\r\nimport * as STATES from '../../constants/selection-states';\r\nimport {\r\n  activeElement,\r\n  attr,\r\n  closest,\r\n  compare,\r\n  createRange,\r\n  findSelectionBoundary,\r\n  format,\r\n  getSelection,\r\n  hasClass,\r\n  isBr,\r\n  isGecko,\r\n  isHTMLElement,\r\n  isIE,\r\n  isMobile,\r\n  isText,\r\n  nextTick,\r\n  prevent, rect,\r\n  setSelection,\r\n  slice,\r\n} from '../../utils';\r\nimport { toggleEditable } from '../../utils/dom/toggleEditable/toggleEditable';\r\nimport { DELAY_FOR_RESELECTION, ORIGIN } from './constants';\r\nimport { State } from './State';\r\n\r\n\r\n/**\r\n * The class for handing both a native and custom selection.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport class Selection extends Component {\r\n  /**\r\n   * The collection of selection states.\r\n   *\r\n   * | State | Description |\r\n   * |---|---|\r\n   * | `IDLE` | The editor is not active. |\r\n   * | `COLLAPSED` | The selection is collapsed. |\r\n   * | `START` | The selection will change soon. The native selection has not been updated at this timing. |\r\n   * | `CHANGED` | Fired every time when the tween is updated. |\r\n   * | `UPDATE` | The selection has just changed after the `START` state. The native selection has been updated. |\r\n   * | `SELECTING` | An user starts selecting texts. |\r\n   * | `EXTEND` | The existing selection is being extended. |\r\n   * | `END` | User finishes the selection. The native selection has not been updated at this timing (in FF). |\r\n   * | `SELECTED` | The selection is settled and it is not collapsed. |\r\n   * | `SELECTED_ALL` | All contents are selected. |\r\n   * | `CLICKED_RIGHT` | The selection is right-clicked. |\r\n   */\r\n  readonly STATES = STATES;\r\n\r\n  /**\r\n   * The State instance that manages the selection states.\r\n   *\r\n   * @readonly\r\n   */\r\n  state: State;\r\n\r\n  /**\r\n   * The position where the selection starts.\r\n   *\r\n   * @readonly\r\n   */\r\n  anchor: Position = ORIGIN;\r\n\r\n  /**\r\n   * The position where the selection ends.\r\n   *\r\n   * @readonly\r\n   */\r\n  focus: Position = ORIGIN;\r\n\r\n  /**\r\n   * Keeps the latest scrollTop amount.\r\n   */\r\n  private scrollTop: number;\r\n\r\n  /**\r\n   * Initializes the component.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param elements - A collection of essential elements.\r\n   */\r\n  mount( elements: Elements ): void {\r\n    super.mount( elements );\r\n    this.state = new State( this.Editor );\r\n    this.listen();\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  private listen(): void {\r\n    const { editable } = this.elements;\r\n\r\n    this.bind( document, 'selectionchange', this.onSelectionChange, this );\r\n\r\n    if ( isIE() ) {\r\n      this.bind( editable, 'dblclick', this.onDblClick, this );\r\n    } else {\r\n      this.bind( editable, 'mousedown', this.onMouseDown, this );\r\n    }\r\n\r\n    this.state.on( 'changed', this.onStateChanged.bind( this ) );\r\n\r\n    this.on( [ EVENT_SCROLLER_SCROLL, EVENT_WINDOW_SCROLL ], this.onScroll, this );\r\n    this.on( EVENT_SCROLLED, this.ensureSelection, this );\r\n  }\r\n\r\n  /**\r\n   * Called whenever the selection is changed.\r\n   * Be aware that this is fired even when the editor is not focused.\r\n   */\r\n  private onSelectionChange(): void {\r\n    if ( this.isFocused() ) {\r\n      if ( this.is( SELECTING, EXTEND ) ) {\r\n        const focus = this.getNativeSelection( true );\r\n\r\n        if ( focus ) {\r\n          this.focus = focus;\r\n          this.emit( EVENT_SELECTING );\r\n        }\r\n      }\r\n\r\n      this.emit( EVENT_SELECTION_CHANGE );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the mouse button is pressed.\r\n   * Detects the double-click earlier than the `dblclick` to prevent the native smart selection.\r\n   *\r\n   * @param e - A MouseEvent object.\r\n   */\r\n  private onMouseDown( e: MouseEvent ): void {\r\n    if ( e.detail > 1 ) {\r\n      this.onDblClick();\r\n      prevent( e );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the code element is double-clicked.\r\n   * If a word is clicked, selects it. Otherwise, selects a clicked node.\r\n   */\r\n  private onDblClick(): void {\r\n    const range = this.getWordRangeAt( this.anchor );\r\n\r\n    if ( range ) {\r\n      this.set( range.start, range.end );\r\n    } else {\r\n      const boundary = this.getNativeSelectionBoundary( false );\r\n\r\n      if ( boundary ) {\r\n        const { node } = boundary;\r\n        const selection = getSelection();\r\n        const range     = createRange();\r\n\r\n        range.selectNode( node );\r\n        selection.removeAllRanges();\r\n        selection.addRange( range );\r\n\r\n        const anchor = this.getNativeSelection();\r\n        const focus  = this.getNativeSelection( true );\r\n\r\n        if ( anchor && focus ) {\r\n          this.set( anchor, focus );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called whenever the selection state is changed.\r\n   *\r\n   * - Updating positions at the `START` state is too early\r\n   *   because the native selection has not been updated yet.\r\n   * - Jumps to the focus position just before extending the existing selection by a keyboard\r\n   *   so that the native selection is able to be updated.\r\n   * - The `EVENT_SELECTING` event must be emitted after `EVENT_SELECTED` event\r\n   *   for listeners to prepare something at the `SELECTING` state.\r\n   * - When the state goes into `SELECTED` state, the custom selection may be collapsed,\r\n   *   e.g. single backward selection -> shift + arrow. To make sure the state becomes `COLLAPSED`,\r\n   *   sets the native selection.\r\n   *\r\n   * @param e     - An EventBusEvent object.\r\n   * @param state - A state number.\r\n   * @param prev  - A previous state number.\r\n   */\r\n  private onStateChanged( e: EventBusEvent, state: number, prev: number ): void {\r\n    if ( prev !== UPDATE && prev !== CLICKED_RIGHT ) {\r\n      if ( state === COLLAPSED || state === CHANGED || state === SELECTED ) {\r\n        this.anchor = this.getNativeSelection() || this.anchor;\r\n        this.focus  = this.getNativeSelection( true ) || this.focus;\r\n      }\r\n\r\n      if ( prev !== START && state === SELECTED ) {\r\n        if ( this.detectSelectAll() ) {\r\n          const { lines, lines: { length } } = this;\r\n          const lastLineLength = lines[ length - 1 ].text.length;\r\n\r\n          if ( compare( this.anchor, [ 0, 0 ] ) !== 0\r\n            || compare( this.focus, [ length - 1, lastLineLength ] ) !== 0 )\r\n          {\r\n            this.selectAll();\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.emit( EVENT_SELECTED, this, state, prev );\r\n\r\n    if ( state === SELECTING ) {\r\n      this.emit( EVENT_SELECTING );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the window or scroller scrolls.\r\n   */\r\n  private onScroll(): void {\r\n    const { Input } = this;\r\n    const top = window.pageYOffset + this.elements.scroller.scrollTop;\r\n\r\n    if ( this.isMultiline() && ! Input.disabled && top !== this.scrollTop ) {\r\n      this.Input.disabled = true;\r\n      this.scrollTop = top;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets a new selection.\r\n   *\r\n   * @param anchor - An anchor position.\r\n   * @param focus  - Optional. A focus position. If omitted, the selection will be collapsed to the anchor.\r\n   */\r\n  set( anchor: Position, focus?: Position ): void {\r\n    this.setNativeSelection( anchor, focus ) || this.update( anchor, focus );\r\n  }\r\n\r\n  /**\r\n   * Returns positions of the current selection.\r\n   * If the `normalize` is `true`, the `start` will be always preceding position.\r\n   *\r\n   * @param normalize - Optional. Whether to normalize the position or not.\r\n   *\r\n   * @return An object literal with anchor and focus positions.\r\n   */\r\n  get( normalize = true ): Range {\r\n    const { anchor, focus } = this;\r\n    const isBackward = this.isBackward();\r\n\r\n    return {\r\n      start: isBackward && normalize ? focus : anchor,\r\n      end  : isBackward && normalize ? anchor : focus,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Updates the custom selection range without using the native selection.\r\n   *\r\n   * @param anchor   - An anchor position.\r\n   * @param focus    - Optional. A focus position.\r\n   * @param silently - Optional. Whether to change the state or not.\r\n   */\r\n  update( anchor: Position, focus?: Position, silently?: boolean ): void {\r\n    this.anchor = anchor;\r\n    this.focus  = focus || anchor;\r\n\r\n    if ( ! silently ) {\r\n      this.state.update( this.isCollapsed() );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects the current or specified line.\r\n   *\r\n   * @param row       - Optional. A row index where to select.\r\n   * @param refresh   - Optional. Determines whether to refresh the current selection or not.\r\n   * @param backwards - Optional. Determines whether to select a line backwards or not.\r\n   */\r\n  selectLine( row = this.focus[ 0 ], refresh = true, backwards?: boolean ): void {\r\n    const { lines } = this;\r\n    const line = lines[ row ];\r\n\r\n    if ( line ) {\r\n      const start: Position = [ row, 0 ];\r\n      const end: Position   = row < lines.length - 1 ? [ row + 1, 0 ] : [ row, line.text.length ];\r\n\r\n      const anchor = backwards ? end : start;\r\n      const focus  = backwards ? start : end;\r\n\r\n      if ( refresh ) {\r\n        this.set( anchor, focus );\r\n      } else {\r\n        this.update( anchor, focus, true );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects again the current selection.\r\n   */\r\n  reselect(): void {\r\n    this.set( this.anchor, this.focus );\r\n  }\r\n\r\n  /**\r\n   * Selects the whole code.\r\n   */\r\n  selectAll(): void {\r\n    const { lines } = this;\r\n    const endRow = lines.length - 1;\r\n    this.set( [ 0, 0 ], [ endRow, lines[ endRow ].text.length ] );\r\n  }\r\n\r\n  /**\r\n   * Holds the current state so that it won't change.\r\n   */\r\n  hold(): void {\r\n    this.state.hold();\r\n  }\r\n\r\n  /**\r\n   * Disables to hold the state so that it will change.\r\n   */\r\n  release(): void {\r\n    this.state.release();\r\n  }\r\n\r\n  /**\r\n   * Converts the selection to a string.\r\n   * This returns an empty string when the selection is collapsed.\r\n   *\r\n   * @return A string representing the current selection.\r\n   */\r\n  toString(): string {\r\n    const range = this.get();\r\n    return this.Code.sliceRange( range.start, range.end );\r\n  }\r\n\r\n  /**\r\n   * Returns the DOMRect object of the native selection boundary.\r\n   * Note that the boundary node is usually a Text node,\r\n   * but sometimes the line or the editable element.\r\n   *\r\n   * @param focus - Determines whether to get the DOMRect of the focus or anchor node.\r\n   *\r\n   * @return A DOMRect object if available, or otherwise `null`.\r\n   */\r\n  getRect( focus: boolean ): DOMRect | null {\r\n    const boundary = this.getNativeSelectionBoundary( focus );\r\n\r\n    if ( boundary ) {\r\n      let { node, offset } = boundary;\r\n\r\n      while ( isHTMLElement( node ) ) {\r\n        node   = node.firstChild;\r\n        offset = 0;\r\n\r\n        if ( isBr( node ) ) {\r\n          return rect( node );\r\n        }\r\n      }\r\n\r\n      if ( node ) {\r\n        const range = createRange();\r\n        range.setStart( node, offset );\r\n        range.collapse( true );\r\n\r\n        return rect( range );\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Returns the current location as a string formatted by the i18n definition, such as `'Line: %s, Column: %s'`.\r\n   *\r\n   * @return A string that describes the current location.\r\n   */\r\n  getLocation(): string {\r\n    const { focus } = this;\r\n    return format( this.i18n.location, focus[ 0 ] + 1, focus[ 1 ] + 1 );\r\n  }\r\n\r\n  /**\r\n   * Checks if the selection state is one of the provided states or not.\r\n   * This is just an alias of the `state.is()` method.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * // Checks if the state is COLLAPSED or not:\r\n   * Selection.is( Selection.STATES.COLLAPSED );\r\n   *\r\n   * // Checks if the state is START, EXTEND or not:\r\n   * Selection.is( Selection.STATES.START, Selection.STATES.EXTEND );\r\n   * ```\r\n   *\r\n   * @param states - A state or states to check.\r\n   *\r\n   * @return `true` if the current state is one of the provided states, or otherwise `false`.\r\n   */\r\n  is( ...states: number[] ): boolean {\r\n    return this.state.is( ...states );\r\n  }\r\n\r\n  /**\r\n   * Collapses the selection to the anchor or focus position.\r\n   *\r\n   * @param toFocus - Optional. Collapses the selection to the focus position.\r\n   */\r\n  collapse( toFocus?: boolean ): void {\r\n    this.set( toFocus ? this.focus : this.anchor );\r\n  }\r\n\r\n  /**\r\n   * Checks is the selection is backward or not.\r\n   *\r\n   * @return `true` if the selection is backward, or otherwise `false`.\r\n   */\r\n  isBackward(): boolean {\r\n    return compare( this.anchor, this.focus ) > 0;\r\n  }\r\n\r\n  /**\r\n   * Checks if the selection is collapsed or not.\r\n   *\r\n   * @return `true` if the selection is collapsed, or otherwise `false`.\r\n   */\r\n  isCollapsed(): boolean {\r\n    return compare( this.anchor, this.focus ) === 0;\r\n  }\r\n\r\n  /**\r\n   * Checks if more than one line is selected or not.\r\n   *\r\n   * @return `true` if more than one line is selected or otherwise `false`.\r\n   */\r\n  isMultiline(): boolean {\r\n    return this.anchor[ 0 ] !== this.focus[ 0 ];\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided client position is inside the current selection or not.\r\n   *\r\n   * @param clientX - The X position that is relative to the client.\r\n   * @param clientY - The Y position that is relative to the client.\r\n   *\r\n   * @return `true` if the position is inside the selection, or otherwise `false`.\r\n   */\r\n  isInside( clientX: number, clientY: number ): boolean {\r\n    return this.Range.selection.isInside( clientX, clientY );\r\n  }\r\n\r\n  /**\r\n   * Destroys the instance.\r\n   *\r\n   * @internal\r\n   */\r\n  destroy(): void {\r\n    this.state.destroy();\r\n    super.destroy();\r\n  }\r\n\r\n  /**\r\n   * Sets a native selection range.\r\n   * Be aware that calling `setSelection` emits `selectionchange` only in IE, but does not in others.\r\n   *\r\n   * @param start - A start position.\r\n   * @param end   - Optional. An end position. If omitted, the start position is used alternatively.\r\n   *\r\n   * @return `true` if the selection is successfully changed, or otherwise `undefined`.\r\n   */\r\n  private setNativeSelection( start: Position, end = start ): boolean {\r\n    const { Chunk } = this;\r\n    const isSingle  = start[ 0 ] === end[ 0 ];\r\n    const startLine = Chunk.getLine( start[ 0 ] ) || Chunk.addPreservedLine( false, start[ 0 ] );\r\n    const endLine   = isSingle ? startLine : Chunk.getLine( end[ 0 ] ) || Chunk.addPreservedLine( true, end[ 0 ] );\r\n    const collapsed = compare( start, end ) === 0;\r\n    const anchor    = findSelectionBoundary( startLine, start[ 1 ] );\r\n    const focus     = collapsed ? anchor : findSelectionBoundary( endLine, end[ 1 ] );\r\n\r\n    if ( anchor && focus ) {\r\n      const anchorNode = anchor.node;\r\n      const focusNode  = focus.node;\r\n\r\n      anchor.node = isBr( anchorNode ) ? anchorNode.parentNode : anchorNode;\r\n      focus.node  = isBr( focusNode ) ? focusNode.parentNode : focusNode;\r\n\r\n      this.hold();\r\n      setSelection( anchor, focus );\r\n      this.release();\r\n\r\n      this.state.refresh( collapsed );\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Converts the native selection boundary to a position represented as [ row, col ].\r\n   * In FF, the selection\r\n   *\r\n   * @param focus - Optional. Whether to returns a position on the focus boundary or not.\r\n   *\r\n   * @return A converted position. If the position is not found, always returns [ 0, 0 ].\r\n   */\r\n  private getNativeSelection( focus?: boolean ): Position | null {\r\n    const line     = this.findActiveLine( focus );\r\n    const boundary = this.getNativeSelectionBoundary( focus );\r\n\r\n    if ( line && boundary ) {\r\n      const { Chunk } = this;\r\n      const range = createRange();\r\n\r\n      range.setStart( line, 0 );\r\n      range.setEnd( boundary.node, boundary.offset );\r\n\r\n      let row = Chunk.getRow( line );\r\n\r\n      if ( row < 0 ) {\r\n        const anchor = Chunk.getBoundary( false );\r\n        const focus  = Chunk.getBoundary( true );\r\n\r\n        if ( anchor.line === line ) {\r\n          row = anchor.row;\r\n        } else if ( focus.line === line ) {\r\n          row = focus.row;\r\n        }\r\n      }\r\n\r\n      if ( row > -1 ) {\r\n        return [ row, range.toString().length ];\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Finds a line where the native anchor node belongs.\r\n   * If the `focus` is set to `true`, finds a line where the native focus node belongs.\r\n   *\r\n   * @param focus - Determines whether to find a line that has focus node or not.\r\n   *\r\n   * @return A line where an anchor or a focus node belongs.\r\n   */\r\n  private findActiveLine( focus?: boolean ): HTMLElement | null {\r\n    const boundary = this.getNativeSelectionBoundary( focus );\r\n\r\n    if ( boundary ) {\r\n      const { node } = boundary;\r\n      const elm = isText( node ) ? node.parentNode : node;\r\n\r\n      if ( isHTMLElement( elm ) ) {\r\n        return closest( elm, `.${ CLASS_LINE }` );\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Converts the provided position to the range for wrapping the word at the position.\r\n   * If the text at the position is not a word, such as `/` or `-`, this returns `null`.\r\n   *\r\n   * @param row - A row index.\r\n   * @param col - A col index.\r\n   *\r\n   * @return An object that describes the range of the word at the position.\r\n   *         If the text is not a word, returns `null`.\r\n   */\r\n  private getWordRangeAt( [ row, col ]: Position ): Range {\r\n    const line = this.lines[ row ];\r\n\r\n    if ( line ) {\r\n      const string = line.text;\r\n      const words  = string.split( /[^\\w]/ );\r\n\r\n      let index = 0;\r\n\r\n      for ( let i = 0; i < words.length; i++ ) {\r\n        const from = i > 0 ? index + 1 : 0;\r\n        const to   = from + words[ i ].length;\r\n\r\n        if ( from <= col && col < to ) {\r\n          return { start: [ row, from ], end: [ row, to ] };\r\n        }\r\n\r\n        index = to;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Returns a boundary node and offset of the native selection.\r\n   * Be aware that the target node must be in the chunk,\r\n   * or otherwise this method returns `null`.\r\n   * Besides, IE returns a parent node as a boundary node, and child index as a offset\r\n   * if the boundary is `<br>`(an empty line).\r\n   *\r\n   * @param focus - Whether to get the focus boundary or not.\r\n   *\r\n   * @return An object literal with a node and offset.\r\n   */\r\n  private getNativeSelectionBoundary( focus: boolean ): SelectionBoundary {\r\n    const { editable } = this.elements;\r\n    const selection = getSelection();\r\n    const prefix    = focus ? 'focus' : 'anchor';\r\n\r\n    let node   = selection[ `${ prefix }Node` ];\r\n    let offset = selection[ `${ prefix }Offset` ];\r\n\r\n    if ( node === editable ) {\r\n      node   = editable.children[ offset ];\r\n      offset = 0;\r\n    }\r\n\r\n    return node ? { node, offset } : null;\r\n  }\r\n\r\n  /**\r\n   * Detects selection of all contents in a immediate way, such as the `Select All` iOS context menu.\r\n   *\r\n   * @return `true` if all contents are selected, or otherwise `false`.\r\n   */\r\n  private detectSelectAll(): boolean {\r\n    const { lines } = this.elements;\r\n    const anchorLine = this.findActiveLine( false );\r\n    const focusLine  = this.findActiveLine( true );\r\n    const elms       = slice( lines.children ).filter( elm => ! hasClass( elm, CLASS_EMPTY ) );\r\n\r\n    return anchorLine === elms[ 0 ]\r\n      && focusLine === elms[ elms.length - 1 ]\r\n      && compare( this.anchor, this.focus )\r\n      && this.anchor[ 1 ] === 0\r\n      && this.focus[ 1 ] === focusLine.textContent.length;\r\n  }\r\n\r\n  /**\r\n   * The dirty code to ensure the selection contains the latest nodes.\r\n   */\r\n  private ensureSelection(): void {\r\n    const { Input } = this;\r\n    const { editable } = this.elements;\r\n    const selection = getSelection();\r\n\r\n    if ( ! isMobile() && this.isMultiline() && activeElement() === editable && selection.setBaseAndExtent ) {\r\n      const { editable } = this.elements;\r\n      const { anchorOffset, focusOffset } = selection;\r\n      let { anchorNode, focusNode } = selection;\r\n      attr( editable, { 'aria-hidden': true } );\r\n\r\n      this.hold();\r\n      selection.removeAllRanges();\r\n\r\n      if ( isGecko() ) {\r\n        const anchorClone = anchorNode.cloneNode( true );\r\n        const focusClone  = focusNode.cloneNode( true );\r\n\r\n        anchorNode.parentNode.replaceChild( anchorClone, anchorNode );\r\n        focusNode.parentNode.replaceChild( focusClone, focusNode );\r\n\r\n        anchorNode = anchorClone;\r\n        focusNode  = focusClone;\r\n      } else {\r\n        toggleEditable( editable, false );\r\n      }\r\n\r\n      setTimeout( () => {\r\n        selection.setBaseAndExtent( anchorNode, anchorOffset, focusNode, focusOffset );\r\n\r\n        nextTick( () => {\r\n          this.Editor.focus();\r\n          Input.disabled = false;\r\n          toggleEditable( editable, true );\r\n          attr( editable, { 'aria-hidden': null } );\r\n          this.release();\r\n        } );\r\n      }, DELAY_FOR_RESELECTION );\r\n    } else {\r\n      Input.disabled = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the editor is focused or not.\r\n   *\r\n   * @return `true` if the editor is focused, or otherwise `false`.\r\n   */\r\n  private isFocused(): boolean {\r\n    return this.Editor && this.Editor.isFocused();\r\n  }\r\n}\r\n","import { SelectionBoundary } from '@ryusei/code';\r\nimport { getSelection } from '../getSelection/getSelection';\r\n\r\n\r\n/**\r\n * Sets a selection by an anchor and a focus object.\r\n * Note that the Range constructor does not supported by IE.\r\n *\r\n * @param anchor - An anchor boundary object.\r\n * @param focus  - A focus boundary object.\r\n */\r\nexport function setSelection( anchor: SelectionBoundary, focus: SelectionBoundary ): void {\r\n  if ( anchor && focus ) {\r\n    const selection = getSelection();\r\n\r\n    if ( selection.setBaseAndExtent ) {\r\n      selection.setBaseAndExtent( anchor.node, anchor.offset, focus.node, focus.offset );\r\n    } else {\r\n      const range = selection.rangeCount > 0 ? selection.getRangeAt( 0 ) : document.createRange();\r\n\r\n      range.setStart( anchor.node, anchor.offset );\r\n      range.setEnd( focus.node, focus.offset );\r\n      selection.removeAllRanges();\r\n      selection.addRange( range );\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Checks is the browser is based on the Gecko engine or not.\r\n *\r\n * @return `true` if the browser is the browser is based on the Gecko (Firefox), or otherwise `false`.\r\n */\r\nexport function isGecko(): boolean {\r\n  return !! window[ 'InstallTrigger' ];\r\n}\r\n","import { EVENT_FONT_LOADED } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { Measure } from '../Measure/Measure';\n\n\n/**\n * The sample string.\n *\n * @since 0.1.3\n */\nconst SAMPLE = '    ';\n\n/**\n * The timeout duration in milliseconds.\n *\n * @since 0.1.3\n */\nconst TIMEOUT = 5000;\n\n/**\n * The class for observing the font loading.\n *\n * @since 0.1.3\n */\nexport class FontObserver {\n  /**\n   * Keeps the initial width of the sample string.\n   */\n  private readonly initialWidth: number;\n\n  /**\n   * Holds the Editor instance.\n   */\n  private readonly Editor: Editor;\n\n  /**\n   * Holds the Measure instance.\n   */\n  private readonly Measure: Measure;\n\n  /**\n   * Keeps the time when the instance is created.\n   */\n  private readonly time = Date.now();\n\n  /**\n   * The Observer constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    this.Editor       = Editor;\n    this.Measure      = this.Editor.Components.Measure;\n    this.initialWidth = this.Measure.measureWidth( SAMPLE );\n\n    this.observe();\n  }\n\n  /**\n   * Observes the font loading.\n   */\n  private observe(): void {\n    const width = this.Measure.measureWidth( SAMPLE, false );\n\n    if ( width !== this.initialWidth ) {\n      this.Editor.event.emit( EVENT_FONT_LOADED );\n    } else {\n      if ( Date.now() - this.time < TIMEOUT ) {\n        requestAnimationFrame( this.observe.bind( this ) );\n      }\n    }\n  }\n}\n","import { Elements } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport {\n  CLASS_CARET,\n  CLASS_EDITOR,\n  CLASS_EMPTY,\n  CLASS_LINE,\n  CLASS_MARKER,\n  CLASS_PRESERVED,\n} from '../../constants/classes';\nimport { EVENT_INIT_STYLE } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { append, camelToKebab, forOwn, isString, isUndefined, query, remove, text, unit } from '../../utils';\nimport { FontObserver } from './FontObserver';\n\n\n/**\n * The component for customizing some styles of the editor.\n *\n * @since 0.1.0\n */\nexport class Style extends Component {\n  /**\n   * Stores all styles.\n   */\n  private selectors: Record<string, Record<string, number | string>> = {};\n\n  /**\n   * Holds the style element.\n   */\n  private style: HTMLStyleElement;\n\n  /**\n   * The Style constructor.\n   *\n   * @param Editor - An Editor element.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n\n    this.init();\n\n    this.on( 'view:open', ( e, append ) => {\n      this.emit( EVENT_INIT_STYLE, this.add.bind( this ) );\n      append( `<style id=\"${ this.options.id }-style\">${ this.build() }</style>` );\n    } );\n  }\n\n  /**\n   * Adds styles defined in options.\n   */\n  private init(): void {\n    const { options, options: { lineHeight, tabSize } } = this;\n\n    [ 'width', 'height', 'minWidth', 'minHeight', 'maxWidth', 'maxHeight' ].forEach( prop => {\n      const value = options[ prop ];\n\n      if ( value ) {\n        this.add( 'root', prop, unit( value ) );\n      }\n    } );\n\n    if ( tabSize ) {\n      this.add( 'root', '-moz-tab-size', tabSize );\n      this.add( 'root', 'tabSize', tabSize );\n    }\n\n    const height = lineHeight ? `${ lineHeight }em` : undefined;\n\n    this.add( `.${ CLASS_EDITOR }`, {\n      lineHeight: lineHeight,\n      fontFamily: options.monospaceFont,\n    } );\n\n    this.add( `.${ CLASS_MARKER }`, 'minHeight', height );\n    this.add( `.${ CLASS_CARET }`, 'height', height );\n    this.add( `.${ CLASS_LINE }:not(.${ CLASS_EMPTY }):not(.${ CLASS_PRESERVED })`, 'height', height );\n  }\n\n  /**\n   * Converts the selectors object into a single style string.\n   *\n   * @return A built string.\n   */\n  private build(): string {\n    let html = '';\n\n    forOwn( this.selectors, ( styles, selector ) => {\n      let props = '';\n\n      forOwn( styles, ( value, prop ) => {\n        if ( ! isUndefined( value ) ) {\n          props += `${ camelToKebab( prop ) }: ${ value };`;\n        }\n      } );\n\n      if ( props ) {\n        html += `${ selector }{${ props }}`;\n      }\n    } );\n\n    return html;\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @internal\n   *\n   * @param elements - A collection of essential editor elements.\n   */\n  mount( elements: Elements ): void {\n    this.style = query( elements.root, 'style' );\n    append( query( document, 'head' ), this.style );\n\n    if ( this.options.monospaceFont ) {\n      new FontObserver( this.Editor );\n    }\n  }\n\n  /**\n   * Adds styles to the specified selector.\n   * The `Editor#apply()` or `Editor#html()` applies the registered styles once,\n   * and therefore initial styles must be added before them.\n   * Otherwise, you should manually invoke the `apply()` method.\n   *\n   * @param selector - A selector string.\n   * @param prop     - A CSS property or an objet literal with properties and values.\n   * @param value    - Optional. A value for the property.\n   */\n  add( selector: string, prop: string | Record<string, number | string>, value?: number | string ): void {\n    if ( isString( prop ) ) {\n      if ( ! isUndefined( value ) ) {\n        const { selectors } = this;\n        selector = `#${ this.options.id }${ selector === 'root' ? '' : ' ' + selector }`;\n        selectors[ selector ] = selectors[ selector ] || {};\n        selectors[ selector ][ prop ] = value;\n      }\n    } else {\n      forOwn( prop, ( value, key ) => {\n        this.add( selector, key, value );\n      } );\n    }\n  }\n\n  /**\n   * Applies registered styles to the style element.\n   */\n  apply(): void {\n    text( this.style, this.build() );\n  }\n\n  /**\n   * Destroys the component.\n   *\n   * @internal\n   */\n  destroy(): void {\n    super.destroy();\n    remove( this.style );\n  }\n}\n","/**\r\n * Converts the provided string in the camel case to the kebab case.\r\n *\r\n * @param string - A string to convert.\r\n */\r\nexport function camelToKebab( string: string ): string {\r\n  return string.replace( /([a-z0-9])([A-Z])/g, '$1-$2' ).toLowerCase();\r\n}\r\n","import { RowRange } from '@ryusei/code';\r\nimport { Component } from '../../classes/Component/Component';\r\nimport { EVENT_SYNCED } from '../../constants/events';\r\nimport { between, isUndefined, max, min } from '../../utils';\r\nimport { ASYNC_SYNC_LINES, ASYNC_SYNC_LINES_BACKWARDS, SYNC_LINES_BACKWARDS } from './constants';\r\n\r\n\r\n/**\r\n * The type for an object with the number to start syncing the code and a prefix.\r\n *\r\n * @since 0.1.0\r\n */\r\ntype SyncStartInfo = { startRow: number, before: string };\r\n\r\n/**\r\n * The class for syncing changes to Lines and View components.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport class Sync extends Component {\r\n  /**\r\n   * Holds the minimum row for asynchronous syncing.\r\n   */\r\n  private minStart = Infinity;\r\n\r\n  /**\r\n   * Holds the maximum row for asynchronous syncing.\r\n   */\r\n  private maxEnd = 0;\r\n\r\n  /**\r\n   * Indicates whether the asynchronous syncing is on going or not.\r\n   */\r\n  private syncing: boolean;\r\n\r\n  /**\r\n   * Syncs changes between the start and end rows to other components.\r\n   *\r\n   * @example\r\n   * Consider the following HTML as an example:\r\n   *\r\n   * ```html\r\n   * <pre>\r\n   * function message() {\r\n   *   console.log( 'Hi!' );\r\n   * }\r\n   * </pre>\r\n   * ```\r\n   *\r\n   * Let's attempt to modify the line 2 (the row index is `1`):\r\n   *\r\n   * ```ts\r\n   * const ryuseiCode = new RyuseiCode();\r\n   * ryuseiCode.apply( 'pre' );\r\n   *\r\n   * const { Code, Sync } = ryuseiCode.Editor.Components;\r\n   *\r\n   * // Only the Code component knows the change\r\n   * Code.replaceLines( 1, 1, `  console.warn( 'error' );\\n` );\r\n   *\r\n   * // Syncs the change to other components\r\n   * Sync.sync( 1, 1 );\r\n   * ```\r\n   *\r\n   * @param startRow - A start row index.\r\n   * @param endRow   - An end row index.\r\n   * @param jumpTo   - Optional. Jumps to the specified row before starting synchronization.\r\n   */\r\n  sync( startRow: number, endRow: number, jumpTo?: number ): void {\r\n    const { Chunk, View } = this;\r\n    const diff = this.lines.syncSize( startRow, this.Code.size );\r\n\r\n    View.autoHeight();\r\n    View.autoWidth();\r\n\r\n    if ( ! isUndefined( jumpTo ) ) {\r\n      View.jump( jumpTo );\r\n    }\r\n\r\n    if ( Chunk.includes( startRow ) ) {\r\n      this.run( startRow, Chunk.end - startRow + 1 );\r\n    } else {\r\n      const { start, end } = Chunk;\r\n      this.run( start, end - start + 1, false );\r\n      this.syncLines( startRow, endRow );\r\n    }\r\n\r\n    Chunk.syncDiff( startRow, diff );\r\n    Chunk.sync();\r\n  }\r\n\r\n  /**\r\n   * Starts the sync sequence.\r\n   *\r\n   * @param row    - A row index.\r\n   * @param limit  - Limits the number of synchronously syncing.\r\n   * @param strict - Optional. Determines whether the synchronization must be strict or not.\r\n   */\r\n  private run( row: number, limit: number, strict = true ): void {\r\n    const result = this.find( row, SYNC_LINES_BACKWARDS );\r\n\r\n    let { startRow } = result;\r\n\r\n    if ( ! strict && row - startRow > SYNC_LINES_BACKWARDS ) {\r\n      startRow = row - SYNC_LINES_BACKWARDS;\r\n    }\r\n\r\n    limit = row - startRow + limit;\r\n\r\n    const changed = this.lines.sync( startRow, this.Code.after( startRow ), limit, result.before );\r\n\r\n    if ( changed || this.syncing ) {\r\n      const { size } = this.Code;\r\n\r\n      startRow = startRow + limit;\r\n\r\n      if ( startRow < size ) {\r\n        this.syncLines( startRow, size - 1 );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Asynchronously syncs lines between the provided range.\r\n   * If the range is wider than the current running process, cancels it and starts a new process.\r\n   *\r\n   * @param startRow - A start row index.\r\n   * @param endRow   - An end row index.\r\n   */\r\n  private syncLines( startRow: number, endRow: number ): void {\r\n    this.minStart = min( startRow, this.minStart );\r\n    this.maxEnd   = max( endRow, this.maxEnd );\r\n    this.syncing  = true;\r\n\r\n    const ranges = this.splitRows( this.minStart, this.maxEnd );\r\n\r\n    this.syncRanges( ranges, () => {\r\n      this.minStart = Infinity;\r\n      this.maxEnd   = 0;\r\n      this.syncing  = false;\r\n      this.Chunk.sync();\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Syncs provided ranges step by step.\r\n   *\r\n   * @param ranges   - An array with row ranges.\r\n   * @param callback - Optional. A callback fired after the sync is completed.\r\n   */\r\n  private syncRanges( ranges: RowRange[], callback?: () => void ): void {\r\n    const range = ranges.shift();\r\n    const { startRow, before } = this.find( range[ 0 ], ASYNC_SYNC_LINES_BACKWARDS );\r\n    const limit = range[ 1 ] - startRow + 1;\r\n\r\n    this.lines.asyncSync( 'syncRanges', startRow, this.Code.after( startRow ), limit, before, () => {\r\n      if ( ranges.length ) {\r\n        this.syncRanges( ranges, callback );\r\n        this.emit( EVENT_SYNCED, this, false );\r\n      } else {\r\n        if ( callback ) {\r\n          callback();\r\n        }\r\n\r\n        this.emit( EVENT_SYNCED, this, true );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Splits the provided row range into small fragments.\r\n   *\r\n   * @param startRow - A start row index.\r\n   * @param endRow   - An end row index.\r\n   *\r\n   * @return An array with row ranges.\r\n   */\r\n  private splitRows( startRow: number, endRow: number ): RowRange[] {\r\n    const ranges: RowRange[] = [];\r\n\r\n    while ( startRow <= endRow ) {\r\n      ranges.push( [ startRow, min( startRow + ASYNC_SYNC_LINES - 1, endRow ) ] );\r\n      startRow += ASYNC_SYNC_LINES;\r\n    }\r\n\r\n    return ranges;\r\n  }\r\n\r\n  /**\r\n   * Returns an info object to start syncing.\r\n   *\r\n   * @param row   - A row index.\r\n   * @param limit - Limits the number of lines.\r\n   *\r\n   * @return An object with a start row index and code to prepend.\r\n   */\r\n  private find( row: number, limit: number ): SyncStartInfo {\r\n    if ( this.isEmbedded( row ) ) {\r\n      return this.findStartInLanguageBlock( row, limit );\r\n    }\r\n\r\n    const startRow = this.findRoot( row );\r\n\r\n    if ( row - startRow > limit ) {\r\n      if ( this.isEmbedded( row - limit ) ) {\r\n        return this.findStartInLanguageBlock( row - limit, limit / 2 );\r\n      }\r\n\r\n      return this.compress( startRow, row, '', limit );\r\n    }\r\n\r\n    return { startRow, before: '' };\r\n  }\r\n\r\n  /**\r\n   * If the distance from the `row` to `startRow` is greater than the `limit`,\r\n   * attempt to shorten the distance by generating pseudo code.\r\n   *\r\n   * @param startRow - A start row index.\r\n   * @param row      - An original row index.\r\n   * @param before   - A pseudo line to prepend.\r\n   * @param limit    - A limit number of lines.\r\n   *\r\n   * @return An object with a start row index and code to prepend.\r\n   */\r\n  private compress( startRow: number, row: number, before: string, limit: number ): SyncStartInfo {\r\n    if ( row - startRow > limit ) {\r\n      const start = this.lines.findBlockStart( [ row - 1, 0 ] );\r\n\r\n      if ( start ) {\r\n        const { multiline } = this.getLanguage( start );\r\n        const info = this.lines.getInfoAt( start );\r\n\r\n        if ( info && multiline ) {\r\n          for ( let i = 0; i < multiline.length; i++ ) {\r\n            const item = multiline[ i ];\r\n\r\n            if ( info.category === item[ 2 ] && ( ! item[ 3 ] || info.state === item[ 3 ] ) ) {\r\n              startRow = start[ 0 ] + 1;\r\n              before   += item[ 0 ];\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return { startRow, before };\r\n  }\r\n\r\n  /**\r\n   * Finds the likely appropriate index where tokenization should start.\r\n   *\r\n   * @param row   - A row index.\r\n   * @param depth - Optional. Minimum depth of a line that can be a candidate.\r\n   *\r\n   * @return A better index for starting tokenization.\r\n   */\r\n  private findRoot( row: number, depth = 0 ): number {\r\n    const { lines } = this;\r\n\r\n    if ( between( row, 0, lines.length, true ) ) {\r\n      for ( let i = row - 1; i >= 0; i-- ) {\r\n        const line = lines[ i ];\r\n\r\n        if ( line.depth <= depth && line.tokens.length && ! line.isEmpty() ) {\r\n          if ( line.split ) {\r\n            i -= line.first[ 2 ].distance + 1;\r\n          } else {\r\n            return i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Finds a sync start info in an embedded language block.\r\n   *\r\n   * @param row   - A row index.\r\n   * @param limit - A limit number of lines.\r\n   *\r\n   * @return An object with a start row index and code to prepend.\r\n   */\r\n  private findStartInLanguageBlock( row: number, limit: number ): SyncStartInfo {\r\n    const { lines } = this;\r\n    const lang      = lines[ row ].language;\r\n    const config    = this.language.use[ lang ];\r\n    const startRow  = this.findRoot( row, config.depth );\r\n    const startLang = lines[ startRow ].language;\r\n\r\n    if ( startLang === lang ) {\r\n      return this.compress( startRow, row, config.code, limit );\r\n    }\r\n\r\n    return { startRow, before: '' };\r\n  }\r\n\r\n  /**\r\n   * Checks if the line at the specified row is inside an embedded block or not.\r\n   *\r\n   * @param row - A row index.\r\n   *\r\n   * @return `true` if the row is inside an embedded block, or otherwise `false`.\r\n   */\r\n  private isEmbedded( row: number ): boolean {\r\n    const line = this.lines[ row ];\r\n\r\n    if ( line ) {\r\n      const { language } = line;\r\n      return language && this.language.language.id !== language;\r\n    }\r\n  }\r\n}\r\n","/**\n * Max lines to asynchronously sync code to the Lines instance at once.\n *\n * @since 0.1.0\n */\nexport const ASYNC_SYNC_LINES = 3000;\n\n/**\n * Max lines to scan up for asynchronously sync.\n *\n * @since 0.1.0\n */\nexport const ASYNC_SYNC_LINES_BACKWARDS = 100;\n\n/**\n * Max lines to scan up for synchronously sync.\n *\n * @since 0.1.0\n */\nexport const SYNC_LINES_BACKWARDS = 100;\n","import { CLASS_DRAGGING } from '../../constants/classes';\nimport { div, forOwn, off, on, prevent, toggleClass } from '../../utils';\n\n\n/**\n * Event names for the beginning of dragging.\n *\n * @since 0.1.0\n */\nexport const DRAG_START_EVENTS = 'pointerdown';\n\n/**\n * Event names for the end of dragging.\n *\n * @since 0.1.0\n */\nexport const DRAG_END_EVENTS = 'pointerup';\n\n/**\n * Event names on dragging.\n *\n * @since 0.1.0\n */\nexport const DRAGGING_EVENTS = 'pointermove';\n\n/**\n * The conversion map for vertical/horizontal props.\n *\n * @since 0.1.0\n */\nconst ORIENTATION_MAP = {\n  vertical    : 'horizontal',\n  scrollHeight: 'scrollWidth',\n  clientHeight: 'clientWidth',\n  scrollTop   : 'scrollLeft',\n  minHeight   : 'minWidth',\n  maxHeight   : 'maxWidth',\n  height      : 'width',\n  top         : 'left',\n  pageY       : 'pageX',\n  translateY  : 'translateX',\n};\n\n/**\n * The abstract class for creating a draggable bar.\n *\n * @since 0.1.0\n */\nexport abstract class AbstractDraggableBar {\n  /**\n   * Indicates whether the bar is a vertical or horizontal sizer or not.\n   */\n  protected readonly vertical: boolean;\n\n  /**\n   * Holds the parent element.\n   */\n  protected readonly parent: HTMLElement;\n\n  /**\n   * The bar element.\n   */\n  protected readonly elm: HTMLDivElement;\n\n  /**\n   * Holds the prop names determined by the bar direction.\n   */\n  protected readonly names: Record<string, string> = {};\n\n  /**\n   * Keeps the coordinate at the drag start.\n   */\n  protected startCoord: number;\n\n  /**\n   * Keeps the last coordinate.\n   */\n  protected lastCoord: number;\n\n  /**\n   * The AbstractDraggableBar constructor.\n   *\n   * @param classes  - A class or classes of the bar.\n   * @param parent   - A parent element of the bar.\n   * @param vertical - Determines whether to create a vertical or horizontal bar.\n   */\n  protected constructor( classes: string | string[], parent: HTMLElement, vertical: boolean ) {\n    this.elm      = div( classes, parent );\n    this.parent   = parent;\n    this.vertical = vertical;\n\n    forOwn( ORIENTATION_MAP, ( prop, key ) => {\n      this.names[ key ] = vertical ? key : prop;\n    } );\n\n    this.bind();\n  }\n\n  /**\n   * Listens to some events.\n   */\n  protected bind(): void {\n    this.onDrag     = this.onDrag.bind( this );\n    this.onDragging = this.onDragging.bind( this );\n    this.onDragged  = this.onDragged.bind( this );\n\n    on( this.elm, DRAG_START_EVENTS, this.onDrag );\n  }\n\n  /**\n   * Called when the element starts being dragged.\n   *\n   * @param e - A PointerEvent object.\n   */\n  protected onDrag( e: PointerEvent ): void {\n    on( window, DRAG_END_EVENTS, this.onDragged );\n    on( window, DRAGGING_EVENTS, this.onDragging );\n\n    this.startCoord = this.getCoord( e );\n    this.lastCoord  = this.startCoord;\n    this.toggleClass( true );\n\n    prevent( e );\n  }\n\n  /**\n   * Called while the element is dragged.\n   *\n   * @param e - A PointerEvent object.\n   */\n  protected onDragging( e: PointerEvent ): void {\n    prevent( e );\n  }\n\n  /**\n   * Called when the element is released.\n   */\n  protected onDragged(): void {\n    off( window, DRAG_END_EVENTS, this.onDragged );\n    off( window, DRAGGING_EVENTS, this.onDragging );\n    this.toggleClass( false );\n  }\n\n  /**\n   * Returns the `pageX` and `pageY` coordinates provided by the event.\n   *\n   * @param e - A PointerEvent object.\n   *\n   * @return A pageX or pageY coordinate.\n   */\n  protected getCoord( e: PointerEvent ): number {\n    return e[ this.names.pageY ];\n  }\n\n  /**\n   * Toggles \"dragging\" classes of the element and parent element.\n   *\n   * @param add - Determines whether to add or remove classes.\n   */\n  protected toggleClass( add: boolean ): void {\n    toggleClass( this.elm, CLASS_DRAGGING, add );\n    toggleClass(\n      this.parent,\n      [ CLASS_DRAGGING, `${ CLASS_DRAGGING }--${ this.names.vertical }` ],\n      add\n    );\n  }\n\n  /**\n   * Destroys the bar.\n   */\n  destroy(): void {\n    off( this.elm, DRAG_START_EVENTS, this.onDrag );\n    off( window, DRAG_END_EVENTS, this.onDragged );\n    off( window, DRAGGING_EVENTS, this.onDragging );\n  }\n}\n","import {\n  EVENT_MOUNTED,\n  EVENT_RESIZE,\n  EVENT_SCROLL_HEIGHT_CHANGED,\n  EVENT_SCROLL_WIDTH_CHANGED,\n  EVENT_SCROLL,\n} from '../../constants/events';\nimport { rafThrottle } from '../../utils';\nimport { Scrollbar } from './Scrollbar';\n\n\n/**\n * The class for creating a scrollbar.\n *\n * @since 0.1.0\n */\nexport class EditorScrollbar extends Scrollbar {\n  /**\n   * Listens to some events.\n   */\n  protected listen(): void {\n    this.Editor.event.on(\n      [ EVENT_MOUNTED, EVENT_RESIZE, EVENT_SCROLL, EVENT_SCROLL_HEIGHT_CHANGED, EVENT_SCROLL_WIDTH_CHANGED ],\n      rafThrottle( this.update )\n    );\n  }\n}\n","import { AbstractDraggableBar } from '../../classes/AbstractDraggableBar/AbstractDraggableBar';\nimport { CLASS_ACTIVE, CLASS_SCROLLBAR } from '../../constants/classes';\nimport { EVENT_MOUNTED, EVENT_RESIZE } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { attr, isArray, off, on, rafThrottle, round, toggleClass, unit } from '../../utils';\n\n\n/**\n * The class for creating a scrollbar.\n *\n * @since 0.1.0\n */\nexport class Scrollbar extends AbstractDraggableBar {\n  /**\n   * Holds the Editor element.\n   */\n  protected readonly Editor: Editor;\n\n  /**\n   * The target element to scroll.\n   */\n  protected readonly scroller: HTMLElement;\n\n  /**\n   * Holds the margin settings.\n   */\n  private readonly margin: () => [ number, number ];\n\n  /**\n   * Keeps the scrollbar height.\n   */\n  private lastHeight: number;\n\n  /**\n   * The conversion ratio from the scroll offset to the bar offset.\n   * - top = scrollTop * ratio\n   * - scrollTop = top / ratio\n   */\n  private ratio = 1;\n\n  /**\n   * The Scrollbar constructor.\n   *\n   * @param Editor   - An EventBus instance.\n   * @param parent   - A parent element.\n   * @param scroller - A target element to scroll.\n   * @param vertical - Determines whether to create a vertical or horizontal scroll bar.\n   * @param margin   - Optional. Margins in pixel as `[ top, bottom ]` ( or `[ left, right ]` ).\n   */\n  constructor(\n    Editor: Editor,\n    parent: HTMLElement,\n    scroller: HTMLElement,\n    vertical: boolean,\n    margin: [ number, number ] | ( () => [ number, number ] ) = [ 0, 0 ]\n  ) {\n    super( [ CLASS_SCROLLBAR, `${ CLASS_SCROLLBAR }--${ vertical ? 'vertical' : 'horizontal' }` ], parent, vertical );\n\n    this.Editor   = Editor;\n    this.scroller = scroller;\n    this.margin   = isArray( margin ) ? () => margin : margin;\n\n    this.init();\n    this.listen();\n  }\n\n  /**\n   * Initializes the instance.\n   * Note that `aria-valuemin` and `aria-valuemax` is not necessary because their default values are `0` and `100`.\n   *\n   * @link https://www.w3.org/TR/wai-aria-1.2/#scrollbar\n   */\n  private init(): void {\n    const { Editor, scroller } = this;\n\n    attr( this.elm, {\n      role              : 'scrollbar',\n      'aria-controls'   : scroller.id,\n      'aria-orientation': this.names.vertical,\n      'aria-valuenow'   : 0,\n      'aria-label'      : Editor.options.i18n.scrollbar,\n    } );\n\n    this.update = this.update.bind( this );\n  }\n\n  /**\n   * Listens to some events.\n   */\n  protected listen(): void {\n    const update = rafThrottle( this.update );\n    on( this.scroller, 'scroll', update, this );\n    this.Editor.event.on( [ EVENT_MOUNTED, EVENT_RESIZE ], update );\n  }\n\n  /**\n   * Called while the bar is dragged.\n   *\n   * @param e - A PointerEvent object.\n   */\n  protected onDragging( e: PointerEvent ): void {\n    super.onDragging( e );\n\n    const coord = this.getCoord( e );\n    const diff  = coord - this.lastCoord;\n\n    this.scroller[ this.names.scrollTop ] += diff / this.ratio;\n    this.lastCoord = coord;\n  }\n\n  /**\n   * Updates the scrollbar height and offset according to the current scroll offset.\n   */\n  protected update(): void {\n    const { scroller, names, elm } = this;\n    const { style } = elm;\n    const sh          = scroller[ names.scrollHeight ];\n    const ch          = scroller[ names.clientHeight ];\n    const st          = scroller[ names.scrollTop ];\n    const active      = sh > ch;\n    const margin      = this.margin();\n    const heightRatio = 1 - ( ( margin[ 0 ] + margin[ 1 ] ) / ch );\n    const height      = ( ch * ch / sh ) * heightRatio;\n\n    if ( this.lastHeight !== height ) {\n      style[ names.height ] = unit( height );\n      this.lastHeight = height;\n    }\n\n    if ( active ) {\n      const offsetRatio = ( ch * heightRatio - elm[ names.clientHeight ] ) / ( sh - ch );\n      style.transform = `${ names.translateY }(${ unit( st * offsetRatio + margin[ 0 ] ) })`;\n      attr( elm, { 'aria-valuenow': round( 100 * 100 * st / ( sh - ch ) ) / 100 } );\n\n      this.ratio = offsetRatio;\n    }\n\n    toggleClass( elm, CLASS_ACTIVE, active );\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    off( null, '', this );\n    super.destroy();\n  }\n}\n","import { Elements, EventBusEvent } from '@ryusei/code';\r\nimport { Component } from '../../classes/Component/Component';\r\nimport { CLASS_PLACEHOLDER, CLASS_SCROLLBARS } from '../../constants/classes';\r\nimport {\r\n  EVENT_MOUNTED,\r\n  EVENT_RESIZE,\r\n  EVENT_SCROLL_HEIGHT_CHANGED,\r\n  EVENT_SCROLL_WIDTH_CHANGED,\r\n  EVENT_SCROLLED,\r\n  EVENT_SELECTED,\r\n  EVENT_SELECTING,\r\n} from '../../constants/events';\r\nimport { CHANGED, EXTEND, SELECTED, SELECTING, START } from '../../constants/selection-states';\r\nimport { Editor } from '../../core/Editor/Editor';\r\nimport { div, isIE, isMobile, max, min, rafThrottle, rect, styles, text, unit } from '../../utils';\r\nimport { Throttle } from '../../utils/function/throttle/throttle';\r\nimport { Selection } from '../Selection/Selection';\r\nimport { JUMP_OFFSET } from './constants';\r\nimport { EditorScrollbar } from './EditorScrollbar';\r\nimport { Scrollbar } from './Scrollbar';\r\n\r\n\r\n/**\r\n * The class for managing the viewport.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport class View extends Component {\r\n  /**\r\n   * Emits the resize event with reducing frequency by the animation frame.\r\n   *\r\n   * @readonly\r\n   */\r\n  emitResize: Throttle<() => void>;\r\n\r\n  /**\r\n   * Keeps the previous width of the viewport.\r\n   */\r\n  private lastWidth = 0;\r\n\r\n  /**\r\n   * Keeps the number of lines when the height is adjusted.\r\n   */\r\n  private lastLength: number;\r\n\r\n  /**\r\n   * Holds Scrollbar elements.\r\n   */\r\n  private scrollbars: Scrollbar[] = [];\r\n\r\n  /**\r\n   * Initializes the instance.\r\n   *\r\n   * @internal\r\n   *\r\n   * @param elements - A collection of essential editor elements.\r\n   */\r\n  mount( elements: Elements ): void {\r\n    super.mount( elements );\r\n\r\n    this.emitResize = rafThrottle( this.emit.bind( this, 'resize' ) );\r\n    elements.scroller.scrollTop = 0;\r\n\r\n    this.create();\r\n    this.autoHeight();\r\n    this.listen();\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  private listen(): void {\r\n    this.bind( window, 'resize', this.emitResize );\r\n\r\n    this.on( [ EVENT_MOUNTED, EVENT_RESIZE, EVENT_SCROLLED ], this.autoWidth, this );\r\n    this.on( EVENT_RESIZE, this.autoHeight.bind( this, true ), null, 2 );\r\n    this.on( EVENT_SELECTED, this.onSelected, this );\r\n    this.on( EVENT_SELECTING, this.clipScrollOffset, this );\r\n  }\r\n\r\n  /**\r\n   * Called when the selection state is changed.\r\n   *\r\n   * @param e         - An EventBusEvent object.\r\n   * @param Selection - A Selection instance.\r\n   */\r\n  private onSelected( e: EventBusEvent<Editor>, Selection: Selection ): void {\r\n    if ( Selection.is( START, EXTEND ) && Selection.state.device === 'keyboard' ) {\r\n      this.jump( Selection.focus[ 0 ] );\r\n    }\r\n\r\n    if ( Selection.is( CHANGED, SELECTING, SELECTED ) ) {\r\n      this.clipScrollOffset();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates the scrollbar elements.\r\n   */\r\n  private create(): void {\r\n    const { elements, elements: { scroller }, Editor } = this;\r\n    const wrapper = div( CLASS_SCROLLBARS, elements.body );\r\n\r\n    if ( ! isMobile() ) {\r\n      this.scrollbars = [\r\n        new EditorScrollbar( Editor, wrapper, scroller, true ),\r\n        new EditorScrollbar( Editor, wrapper, scroller, false, () => [ this.getWidthBeforeContainer(), 0 ] ),\r\n      ];\r\n    }\r\n\r\n    const { placeholder } = this.options;\r\n\r\n    if ( placeholder ) {\r\n      const placeholderElm = div( CLASS_PLACEHOLDER, elements.background );\r\n      text( placeholderElm, placeholder );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clips the caret position by all sides of the editor.\r\n   * Only the left border refers the editor rect so that it includes the width of the fixed gutter.\r\n   */\r\n  private clipScrollOffset(): void {\r\n    const { rect: caretRect } = this.Caret;\r\n    const { focus } = this.Selection;\r\n\r\n    if ( ! caretRect || ! this.Chunk.includes( focus[ 0 ] ) ) {\r\n      return;\r\n    }\r\n\r\n    const { Measure } = this;\r\n    const { scroller } = this.elements;\r\n    const { padding, scrollerRect, lineHeight } = Measure;\r\n    const { top: caretTop, right: caretRight, bottom: caretBottom, left: caretLeft } = caretRect;\r\n    const editorRect = rect( this.elements.editor );\r\n\r\n    let { scrollTop, scrollLeft } = scroller;\r\n\r\n    const top    = scrollerRect.top + lineHeight / 2 + padding.top;\r\n    const bottom = scrollerRect.bottom - lineHeight / 2 - padding.bottom;\r\n    const left   = ( isIE() ? scrollerRect.left : ( editorRect.left + scrollLeft ) ) + max( padding.left, lineHeight );\r\n    const right  = scrollerRect.right - max( padding.right, lineHeight );\r\n\r\n    if ( caretTop < top ) {\r\n      scrollTop -= top - caretTop;\r\n    }\r\n\r\n    if ( caretBottom > bottom ) {\r\n      scrollTop += caretBottom - bottom;\r\n    }\r\n\r\n    if ( caretLeft < left ) {\r\n      scrollLeft -= left - caretLeft;\r\n    }\r\n\r\n    if ( caretRight > right ) {\r\n      scrollLeft += caretRight - right;\r\n    }\r\n\r\n    if ( ! focus[ 1 ] ) {\r\n      scrollLeft = 0;\r\n    }\r\n\r\n    scroller.scrollTop  = scrollTop;\r\n    scroller.scrollLeft = scrollLeft;\r\n  }\r\n\r\n  /**\r\n   * Returns the width before the container element.\r\n   *\r\n   * @return The width before the container.\r\n   */\r\n  private getWidthBeforeContainer(): number {\r\n    const { Measure } = this;\r\n    return Measure.editorRect.left - Measure.containerRect.left;\r\n  }\r\n\r\n  /**\r\n   * Jumps to the specified row if it's not visible in the scroller.\r\n   * If the `middle` is `true`, this method try to vertically center the target line.\r\n   *\r\n   * @param row        - A row index to jump to.\r\n   * @param middle     - Optional. Determines whether to jump to the middle of the viewport or not.\r\n   * @param lineOffset - Optional. A number of lines to offset.\r\n   */\r\n  jump( row: number, middle?: boolean, lineOffset = JUMP_OFFSET ): void {\r\n    const { Measure, Chunk, Measure: { scrollerRect } } = this;\r\n\r\n    if ( middle ) {\r\n      Chunk.scroll( Measure.getBottom( row ) - scrollerRect.height / 2 + Measure.lineHeight * lineOffset );\r\n      return;\r\n    }\r\n\r\n    if ( ! this.isVisible( row ) ) {\r\n      const center = Chunk.start + ( Chunk.length - 1 ) / 2;\r\n\r\n      let scrollTop;\r\n\r\n      if ( row > center ) {\r\n        row = min( row + lineOffset, this.lines.length - 1 );\r\n        scrollTop = Measure.getBottom( row ) - scrollerRect.height + Measure.padding.top;\r\n      } else {\r\n        scrollTop = Measure.getTop( max( row - lineOffset, 0 ) );\r\n      }\r\n\r\n      Chunk.scroll( scrollTop );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adjusts the width of the lines element so that it can contain the longest line in the chunk.\r\n   */\r\n  autoWidth(): void {\r\n    const { Measure } = this;\r\n    const { width } = Measure.editorRect;\r\n\r\n    if ( width > Measure.scrollerRect.width - this.getWidthBeforeContainer() && width > this.lastWidth ) {\r\n      styles( this.elements.lines, { minWidth: unit( width ) } );\r\n      this.lastWidth = width;\r\n\r\n      this.emit( EVENT_SCROLL_WIDTH_CHANGED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adjusts the height of the container element so that it can contain all lines.\r\n   * It won't be smaller than the scroller element when the editor has explicit height.\r\n   *\r\n   * @param skipLengthCheck - Optional. Whether to skip checking the number of lines or not.\r\n   */\r\n  autoHeight( skipLengthCheck?: boolean ): void {\r\n    const { elements, lines: { length } } = this;\r\n\r\n    if ( skipLengthCheck || length !== this.lastLength ) {\r\n      const { Measure, Measure: { padding } } = this;\r\n      let height = Measure.lineHeight * ( length || 1 ) + padding.top + padding.bottom;\r\n\r\n      if ( elements.root.style.height || this.options.height ) {\r\n        height = max( height, Measure.scrollerRect.height );\r\n      }\r\n\r\n      styles( elements.container, { height: unit( height ) } );\r\n      this.lastLength = length;\r\n\r\n      this.emit( EVENT_SCROLL_HEIGHT_CHANGED );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the specified row is visible in the scroller or not.\r\n   *\r\n   * @param row        - A row index to check.\r\n   * @param lineOffset - Optional. A number of lines to offset top and bottom borders.\r\n   *\r\n   * @return `true` if the row is in the scroller viewport, or otherwise `false`.\r\n   */\r\n  isVisible( row: number, lineOffset = 0 ): boolean {\r\n    const { Chunk, Measure } = this;\r\n\r\n    if ( Chunk.includes( row ) ) {\r\n      const line = Chunk.getLine( row );\r\n\r\n      if ( line ) {\r\n        const { scrollerRect } = Measure;\r\n        const lineRect = rect( line );\r\n        const offset   = Measure.lineHeight * lineOffset;\r\n        return lineRect.top >= scrollerRect.top + offset && lineRect.bottom <= scrollerRect.bottom - offset;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Destroys the component.\r\n   *\r\n   * @internal\r\n   */\r\n  destroy(): void {\r\n    this.scrollbars.forEach( bar => { bar.destroy() } );\r\n    super.destroy();\r\n  }\r\n}\r\n","\n/**\n * The number of margin lines when jumping to a particular line.\n *\n * @since 0.1.0\n */\nexport const JUMP_OFFSET = 1;\n\n/**\n * Throttle duration for the resize function.\n *\n * @since 0.1.0\n */\nexport const RESIZE_THROTTLE_DURATION = 60;\n\n/**\n * Minimum required amount of the scroll offset to update.\n *\n * @since 0.1.0\n */\nexport const MIN_SCROLL_DIFF = 3;\n","/**\n * Attributes for the editable area.\n *\n * @link https://www.w3.org/TR/wai-aria-1.2/#aria-roledescription\n * @link https://www.w3.org/TR/wai-aria-1.2/#aria-multiline\n *\n * @since 0.1.0\n */\nexport const ATTRIBUTES_EDITABLE_AREA = {\n  autocorrect           : 'off',\n  autocapitalize        : 'off',\n  spellcheck            : 'false',\n  role                  : 'textbox',\n  'aria-multiline'      : true,\n  'aria-roledescription': 'editor',\n};\n","import { Attributes, Options } from '@ryusei/code';\nimport { Code } from '../../components';\nimport { Lines } from '../../components/Code/Lines';\nimport { ATTRIBUTES_EDITABLE_AREA } from '../../constants/attributes';\nimport {\n  CLASS_BODY,\n  CLASS_CONTAINER,\n  CLASS_EDITOR,\n  CLASS_LINE,\n  CLASS_LINES,\n  CLASS_RENDERED,\n  CLASS_ROOT,\n  CLASS_SCROLLER,\n  CLASS_SOURCE,\n  CLASS_VIEW,\n} from '../../constants/classes';\nimport { EventBus } from '../../event/EventBus';\nimport { assign, min, repeat, tag } from '../../utils';\nimport { Editor } from '../Editor/Editor';\n\n\n/**\n * The class for rendering the editor.\n *\n * @since 0.1.0\n */\nexport class Renderer {\n  /**\n   * Holds the EventBus instance.\n   */\n  protected readonly event: EventBus<Editor>\n\n  /**\n   * Holds the Code instance.\n   */\n  protected readonly Code: Code;\n\n  /**\n   * Holds the lines instance.\n   */\n  protected readonly lines: Lines;\n\n  /**\n   * Holds options.\n   */\n  protected readonly options: Options;\n\n  /**\n   * The Renderer constructor.\n   *\n   * @param Code    - A Code instance.\n   * @param event   - An EventBus instance.\n   * @param options - Options.\n   */\n  constructor( Code: Code, event: EventBus<Editor>, options: Options ) {\n    this.Code    = Code;\n    this.lines   = Code.Lines;\n    this.event   = event;\n    this.options = options;\n  }\n\n  /**\n   * Render lines until the number reaches the `maxInitialLines`.\n   * Rest lines are rendered in the temporary `pre` element.\n   *\n   * @param append - The function to append a HTML string.\n   */\n  protected renderLines( append: ( string: string ) => void ): void {\n    const { lines } = this;\n    const max = min( lines.length, this.options.maxInitialLines );\n\n    for ( let i = 0; i < max; i++ ) {\n      append( tag( CLASS_LINE ) + lines[ i ].html + '</div>' );\n    }\n  }\n\n  /**\n   * Builds the HTML for the editor.\n   *\n   * @param source - Optional. Determines whether to embed the source code as a pre element or not.\n   *\n   * @return The built HTML string.\n   */\n  html( source?: boolean ): string {\n    let html = '';\n\n    const { options, options: { id } } = this;\n    const append  = ( string: string ) => { html += string };\n    const classes = [ CLASS_ROOT, CLASS_RENDERED ].concat( options.rootClasses );\n\n    const divs: [ string, string[], Attributes? ][] = [\n      [ 'root', classes, { id, role: 'code' } ],\n      [ 'view', [ CLASS_VIEW ].concat( options.viewClasses ) ],\n      [ 'body', [ CLASS_BODY ] ],\n      [ 'scroller', [ CLASS_SCROLLER ] ],\n      [ 'container', [ CLASS_CONTAINER ] ],\n      [ 'editor', [ CLASS_EDITOR ] ],\n    ];\n\n    divs.forEach( settings => {\n      this.event.emit( `${ settings[ 0 ] }:open`, append, settings[ 1 ], this.lines );\n      const attrs = assign( { id: `${ id }-${ settings[ 0 ] }` }, settings[ 2 ] );\n      html += tag( settings[ 1 ], attrs );\n    } );\n\n    html += tag( [ CLASS_LINES ], assign( { 'aria-label': options.i18n.inputLabel }, ATTRIBUTES_EDITABLE_AREA ) );\n    this.renderLines( append );\n    html += '</div>';\n\n    if ( source ) {\n      html += `<pre class=\"${ CLASS_SOURCE }\">${ this.Code.value }</pre>`;\n    }\n\n    return html + repeat( '</div>', divs.length );\n  }\n}\n","import { Components, Elements, Extensions, Language, Options } from '@ryusei/code';\r\nimport { AnyFunction } from '@ryusei/light/dist/types/types';\r\nimport * as CoreComponents from '../../components';\r\nimport {\r\n  CLASS_BACKGROUND,\r\n  CLASS_BODY,\r\n  CLASS_CONTAINER,\r\n  CLASS_EDITOR,\r\n  CLASS_EMPTY,\r\n  CLASS_FOCUSED,\r\n  CLASS_INITIALIZED,\r\n  CLASS_LINES,\r\n  CLASS_MOBILE,\r\n  CLASS_OVERLAY,\r\n  CLASS_READONLY,\r\n  CLASS_RENDERED,\r\n  CLASS_SCROLLER,\r\n  CLASS_VIEW,\r\n} from '../../constants/classes';\r\nimport {\r\n  EVENT_BLUR,\r\n  EVENT_CHANGED,\r\n  EVENT_COMPOSITION_START,\r\n  EVENT_DESTROYED,\r\n  EVENT_FOCUS,\r\n  EVENT_MOUNT,\r\n  EVENT_MOUNTED,\r\n  EVENT_READONLY,\r\n  EVENT_RESET,\r\n} from '../../constants/events';\r\nimport { PROJECT_CODE } from '../../constants/project';\r\nimport { EventBus } from '../../event/EventBus';\r\nimport {\r\n  activeElement,\r\n  addClass,\r\n  assert,\r\n  assign,\r\n  attr,\r\n  debounce,\r\n  div,\r\n  escapeHtml,\r\n  focus,\r\n  forOwn,\r\n  hasClass,\r\n  isFunction,\r\n  isHTMLElement,\r\n  isMobile,\r\n  isString,\r\n  isUndefined,\r\n  nextTick,\r\n  on,\r\n  query,\r\n  remove,\r\n  removeClass,\r\n  styles,\r\n  text,\r\n  toggleClass,\r\n  uniqueId,\r\n  unit,\r\n} from '../../utils';\r\nimport { toggleEditable } from '../../utils/dom/toggleEditable/toggleEditable';\r\nimport { Renderer } from '../Renderer/Renderer';\r\n\r\n\r\n/**\r\n * The debounce duration for evaluating `focusout` of the editor.\r\n *\r\n * @since 0.1.0\r\n */\r\nconst FOCUSOUT_DEBOUNCE_DURATION = 10;\r\n\r\n/**\r\n * The core class for the editor.\r\n *\r\n * @since 0.1.0\r\n */\r\nexport class Editor {\r\n  /**\r\n   * The collection of essential editor elements.\r\n   *\r\n   * <div class=\"caution\">\r\n   *   This collection is empty before components are mounted by the <code>Editor#apply()</code>.\r\n   * </div>\r\n   *\r\n   * @readonly\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const ryuseiCode = new RyuseiCode();\r\n   * ryuseiCode.apply( 'textarea' );\r\n   *\r\n   * const { scroller } = ryuseiCode.Editor.elements;\r\n   * console.log( scroller.id );\r\n   * ```\r\n   */\r\n  elements: Elements;\r\n\r\n  /**\r\n   * The collection of all core components.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const ryuseiCode = new RyuseiCode();\r\n   * const { Selection } = ryuseiCode.Editor.Components;\r\n   * ```\r\n   */\r\n  Components: Partial<Components> = {};\r\n\r\n  /**\r\n   * Holds Extension instances.\r\n   */\r\n  private Extensions: Partial<Extensions> = {};\r\n\r\n  /**\r\n   * The collection of all options.\r\n   */\r\n  readonly options: Options;\r\n\r\n  /**\r\n   * The EventBus instance.\r\n   * Although you can attach or detach event handlers by this instance,\r\n   * `RyuseiCode#on()` or `RyuseiCode#off()` is more useful.\r\n   */\r\n  readonly event: EventBus<Editor>;\r\n\r\n  /**\r\n   * The source element where the editor has been applied to.\r\n   */\r\n  protected source: HTMLElement;\r\n\r\n  /**\r\n   * The root element of the editor that is same with the `elements.root`.\r\n   */\r\n  protected root: HTMLElement;\r\n\r\n  /**\r\n   * The Language object.\r\n   */\r\n  readonly language: Language;\r\n\r\n  /**\r\n   * Indicates whether the editor is readonly or not.\r\n   */\r\n  private _readOnly: boolean;\r\n\r\n  /**\r\n   * The Editor constructor.\r\n   *\r\n   * @param language   - A Language object.\r\n   * @param options    - Options.\r\n   * @param extensions - An object with additional components.\r\n   */\r\n  constructor( language: Language, options: Options, extensions: Partial<Extensions> = {} ) {\r\n    this.language   = language;\r\n    this.options    = options;\r\n    this.event      = new EventBus( this );\r\n    this.options.id = this.options.id || uniqueId( PROJECT_CODE );\r\n\r\n    forOwn( CoreComponents, ( Component, name ) => {\r\n      this.Components[ name ] = new Component( this );\r\n    } );\r\n\r\n    forOwn( extensions, ( Extension, name ) => {\r\n      const value = this.options[ name.charAt( 0 ).toLowerCase() + name.slice( 1 ) ];\r\n\r\n      if ( isUndefined( value ) || value ) {\r\n        this.Extensions[ name ] = new Extension( this );\r\n      }\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Initializes the editor and components.\r\n   */\r\n  private mount(): void {\r\n    const { options, event, elements } = this;\r\n\r\n    this.listen();\r\n    event.emit( EVENT_MOUNT, elements );\r\n\r\n    forOwn( this.Components, Component => {\r\n      Component.mount( elements );\r\n    } );\r\n\r\n    forOwn( this.Extensions, Extension => {\r\n      Extension.mount( elements );\r\n    } );\r\n\r\n    event.emit( EVENT_MOUNTED, elements );\r\n\r\n    this.readOnly = options.readOnly;\r\n\r\n    if ( options.autoFocus ) {\r\n      this.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collects essential elements that constitute the code editor.\r\n   */\r\n  private collect(): void {\r\n    const { root } = this;\r\n    const editor = query<HTMLDivElement>( root, `.${ CLASS_EDITOR }` );\r\n    const lines  = query<HTMLDivElement>( root, `.${ CLASS_LINES }` );\r\n\r\n    toggleEditable( lines, true );\r\n    attr( lines, { tabindex: 0 } );\r\n\r\n    this.elements = Object.freeze( {\r\n      root,\r\n      editor,\r\n      lines,\r\n      editable  : lines,\r\n      view      : query<HTMLDivElement>( root, `.${ CLASS_VIEW }` ),\r\n      body      : query<HTMLDivElement>( root, `.${ CLASS_BODY }` ),\r\n      scroller  : query<HTMLDivElement>( root, `.${ CLASS_SCROLLER }` ),\r\n      container : query<HTMLDivElement>( root, `.${ CLASS_CONTAINER }` ),\r\n      overlay   : div( CLASS_OVERLAY, root ),\r\n      background: div( { class: CLASS_BACKGROUND, 'aria-hidden': true }, editor ),\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Listens to some events.\r\n   */\r\n  private listen(): void {\r\n    const { elements, elements: { root }, event } = this;\r\n    const isFocused = this.isFocused.bind( this );\r\n\r\n    let type: string;\r\n\r\n    this.bind( root, 'pointerdown', () => {\r\n      type = 'pointer';\r\n    } );\r\n\r\n    this.bind( elements.editor, 'click', () => {\r\n      if ( ! isFocused() ) {\r\n        this.focus( true );\r\n      }\r\n    } );\r\n\r\n    this.bind( root, 'focusin', () => {\r\n      if ( isFocused() && ! hasClass( root, CLASS_FOCUSED ) ) {\r\n        addClass( root, CLASS_FOCUSED );\r\n        event.emit( EVENT_FOCUS, type );\r\n      }\r\n    } );\r\n\r\n    this.bind( root, 'focusout', debounce( () => {\r\n      if ( ! isFocused() && hasClass( root, CLASS_FOCUSED ) ) {\r\n        removeClass( root, CLASS_FOCUSED );\r\n        event.emit( EVENT_BLUR );\r\n        type = '';\r\n      }\r\n    }, FOCUSOUT_DEBOUNCE_DURATION ) );\r\n\r\n    event.on( [ EVENT_MOUNTED, EVENT_CHANGED, EVENT_COMPOSITION_START, EVENT_RESET ], () => {\r\n      nextTick( () => {\r\n        toggleClass( root, CLASS_EMPTY, ! this.value && ! this.Components.Input.composing );\r\n      } );\r\n    } );\r\n  }\r\n\r\n  /**\r\n   * Listens to native events.\r\n   *\r\n   * @param elm      - A document, a window or an element.\r\n   * @param events   - An event name or names.\r\n   * @param callback - A callback function.\r\n   */\r\n  private bind( elm: Document | Window | Element, events: string, callback: ( e: Event ) => void ): void {\r\n    on( elm, events, callback, this );\r\n  }\r\n\r\n  /**\r\n   * Applies the editor to the target element.\r\n   *\r\n   * @param target - A selector to find the target element, or a target element itself.\r\n   * @param code   - Optional. The code to overwrite the content of the target element.\r\n   */\r\n  apply( target: string | Element, code?: string ): void {\r\n    assert( ! this.root, 'Already initialized.' );\r\n\r\n    const elm = isString( target ) ? query( document, target ) : target;\r\n\r\n    if ( isHTMLElement( elm ) ) {\r\n      this.source = elm;\r\n\r\n      if ( hasClass( elm, CLASS_RENDERED ) ) {\r\n        this.root = elm;\r\n        const pre = query( elm, 'pre' );\r\n        this.Components.Code.init( text( pre ) || '' );\r\n        remove( pre );\r\n      } else {\r\n        elm.insertAdjacentHTML( 'afterend', this.html( isUndefined( code ) ? text( elm ) : code, false ) );\r\n        styles( elm, { display: 'none' } );\r\n        this.root = elm.nextElementSibling as HTMLElement;\r\n      }\r\n\r\n      addClass( this.root, [ CLASS_INITIALIZED, isMobile() ? CLASS_MOBILE : '' ] );\r\n\r\n      this.collect();\r\n      this.mount();\r\n    } else {\r\n      assert( false, `${ target } is invalid.` );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Builds the HTML of the editor. This works without `document` and `window` objects,\r\n   * but has no functionality.\r\n   *\r\n   * The [`maxInitialLines`](/guides/options#max-initial-lines) option limits the number of lines to generate.\r\n   *\r\n   * @param code   - The code for the editor.\r\n   * @param source - Optional. Whether to embed the source code into the editor or not.\r\n   *\r\n   * @return The HTML of the editor.\r\n   */\r\n  html( code: string, source?: boolean ): string {\r\n    const { Code } = this.Components;\r\n    Code.init( code );\r\n    return new Renderer( Code, this.event, this.options ).html( source );\r\n  }\r\n\r\n  /**\r\n   * Saves the content to the source element if available.\r\n   *\r\n   * For example, if you apply the editor to the empty `textarea` element,\r\n   * it remains empty even after you edit the code by the editor.\r\n   *\r\n   * This method applies back the change to the `textarea` element.\r\n   */\r\n  save(): void {\r\n    const { source, value } = this;\r\n\r\n    if ( source instanceof HTMLTextAreaElement ) {\r\n      source.value = value;\r\n    } else {\r\n      text( source, escapeHtml( value ) );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the editor.\r\n   *\r\n   * @param reselect - Determines whether to reselect the last position or not.\r\n   */\r\n  focus( reselect?: boolean ): void {\r\n    if ( reselect ) {\r\n      this.Components.Selection.reselect();\r\n    } else {\r\n      focus( this.elements.editable );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the focus from the editor.\r\n   */\r\n  blur(): void {\r\n    const elm = activeElement();\r\n\r\n    if ( this.isFocused() && isHTMLElement( elm ) ) {\r\n      elm.blur();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts to invoke the public method of the specified extension.\r\n   * In terms of the \"loose coupling\", you'd better try not to use this method.\r\n   * Using events is enough in most cases.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * // Attempts to show the \"search\" toolbar.\r\n   * Editor.invoke( 'Toolbar', 'show', 'search' );\r\n   * ```\r\n   *\r\n   * @param name   - A name of the extension.\r\n   * @param method - A method name to invoke.\r\n   * @param args   - Optional. Arguments for the method.\r\n   *\r\n   * @return The return value of the method.\r\n   */\r\n  invoke<K extends keyof Extensions, P extends keyof Extensions[ K ], V extends Extensions[ K ][ P ]>(\r\n    name: K,\r\n    method: P,\r\n    ...args: V extends AnyFunction ? Parameters<V> : any[]\r\n  ): V extends AnyFunction ? ReturnType<V> : void {\r\n    const extension = this.Extensions[ name ];\r\n\r\n    if ( extension && isFunction( extension[ method ] ) ) {\r\n      return extension[ method ]( ...args );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the specified extension.\r\n   * In terms of the \"loose coupling\", you'd better try not to use this method.\r\n   * Using events is enough in most cases.\r\n   *\r\n   * @param name - A name of an extension.\r\n   *\r\n   * @return The specified extension if found, or otherwise `undefined`.\r\n   */\r\n  require<K extends keyof Extensions>( name: K ): Extensions[ K ] | undefined {\r\n    return this.Extensions[ name ];\r\n  }\r\n\r\n  /**\r\n   * Checks if the editor has focus or not.\r\n   *\r\n   * @return `true` if the editor has focus, or otherwise `false`.\r\n   */\r\n  isFocused(): boolean {\r\n    return this.root.contains( activeElement() );\r\n  }\r\n\r\n  /**\r\n   * Saves the final value to the source element and destroys the editor for releasing the memory.\r\n   */\r\n  destroy(): void {\r\n    const { event } = this;\r\n\r\n    this.save();\r\n\r\n    forOwn( assign( this.Components, this.Extensions ), Component => {\r\n      Component.destroy();\r\n    } );\r\n\r\n    delete this.Components;\r\n    delete this.Extensions;\r\n\r\n    styles( this.source, { display: '' } );\r\n    remove( this.elements.root );\r\n\r\n    event.emit( EVENT_DESTROYED );\r\n    event.destroy();\r\n  }\r\n\r\n  /**\r\n   * Sets a new value to the editor and resets the editor.\r\n   *\r\n   * @param value - A new value.\r\n   */\r\n  set value( value: string ) {\r\n    const { Components, Components: { Code, Selection } } = this;\r\n    Code.value = value;\r\n\r\n    Components.View.jump( 0 );\r\n    Components.Sync.sync( 0, Code.size - 1 );\r\n\r\n    if ( this.isFocused() ) {\r\n      Selection.set( [ 0, 0 ] );\r\n    } else {\r\n      Selection.update( [ 0, 0 ], [ 0, 0 ], true );\r\n    }\r\n\r\n    this.event.emit( EVENT_RESET );\r\n  }\r\n\r\n  /**\r\n   * Returns the current value of the editor.\r\n   *\r\n   * @return The current value.\r\n   */\r\n  get value(): string {\r\n    return this.Components.Code.value;\r\n  }\r\n\r\n  /**\r\n   * Sets width of the root element.\r\n   *\r\n   * @param width - Width to set in pixel or in the CSS format, such as '50%'.\r\n   */\r\n  set width( width: number | string ) {\r\n    styles( this.root, { width: unit( width ) } );\r\n    this.Components.View.emitResize();\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the editor in pixel.\r\n   *\r\n   * @return The width of the editor in pixel.\r\n   */\r\n  get width(): number {\r\n    return this.root.clientWidth;\r\n  }\r\n\r\n  /**\r\n   * Sets the height of the root element.\r\n   *\r\n   * @param height - Height to set in pixel or in the CSS format, such as '50%'.\r\n   */\r\n  set height( height: number | string ) {\r\n    styles( this.root, { height: unit( height ) } );\r\n    this.Components.View.emitResize();\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the editor in pixel.\r\n   *\r\n   * @return The height of the editor.\r\n   */\r\n  get height(): number {\r\n    return this.root.clientHeight;\r\n  }\r\n\r\n  /**\r\n   * Makes the editor mutable or immutable.\r\n   * In the read-only mode, the primary caret gets hidden.\r\n   *\r\n   * @param readOnly - Whether to make the editor immutable or mutable.\r\n   */\r\n  set readOnly( readOnly: boolean ) {\r\n    const { elements } = this;\r\n\r\n    toggleClass( elements.root, CLASS_READONLY, readOnly );\r\n    toggleEditable( elements.editable, ! readOnly );\r\n\r\n    this._readOnly = readOnly;\r\n    this.event.emit( EVENT_READONLY, readOnly );\r\n  }\r\n\r\n  /**\r\n   * Indicates whether the editor is read-only or not.\r\n   *\r\n   * @return - `true` if the editor is read-only or `false` if not.\r\n   */\r\n  get readOnly(): boolean {\r\n    return this._readOnly;\r\n  }\r\n}\r\n","/**\r\n * Converts essential HTML special characters to HTML entities.\r\n *\r\n * @param string - A string to escape.\r\n *\r\n * @return An escaped string.\r\n */\r\nexport function escapeHtml( string: string ): string {\r\n  return string.replace( /&/g, '&amp;' ).replace( /</g, '&lt;' ).replace( />/g, '&gt;' );\r\n}\r\n","import { EventBusCallback, Extensions, Language, Options, Position } from '@ryusei/code';\nimport { DEFAULT_OPTIONS } from '../../constants/defaults';\nimport { assert, assign, forOwn, isObject, isUndefined, toArray } from '../../utils';\nimport { Editor } from '../Editor/Editor';\n\n\n/**\n * The frontend class for the editor.\n *\n * @since 0.1.0\n */\nexport class RyuseiCode {\n  /**\n   * Stores all language objects.\n   */\n  private static languages: Record<string, Language> = {};\n\n  /**\n   * Stores all Component classes.\n   */\n  private static Extensions: Partial<Extensions> = {};\n\n  /**\n   * Registers a language or languages.\n   *\n   * @example\n   * ```js\n   * import { RyuseiCode, javascript, html } from '@ryusei/code';\n   *\n   * RyuseiLight.register( javascript() );\n   *\n   * // Or pass an array:\n   * RyuseiLight.register( [ javascript(), html() ] );\n   * ```\n   *\n   * If you want to register all languages the `languages` object is helpful:\n   *\n   * ```js\n   * import { RyuseiCode, languages } from '@ryusei/code';\n   *\n   * RyuseiLight.register( Object.values( languages ).map( lang => lang() ) );\n   * ```\n   *\n   * @param languages - A Language object or an array with objects.\n   */\n  static register( languages: Language | Language[] ): void {\n    toArray( languages ).forEach( language => {\n      const { language: lang, id } = language;\n\n      if ( ! RyuseiCode.languages[ id ] ) {\n        ( lang.alias || [] ).concat( id ).forEach( ( id: string ) => {\n          RyuseiCode.languages[ id ] = language;\n        } );\n      }\n    } );\n  }\n\n  /**\n   * Registers extensions.\n   *\n   * @example\n   * ```js\n   * import { RyuseiCode, ActiveLine, History } from '@ryusei/code';\n   *\n   * RyuseiLight.register( { ActiveLine, History } );\n   * ```\n   *\n   * If you want to compose all extensions, the `Extensions` object is helpful:\n   *\n   * ```js\n   * import { RyuseiCode, Extensions } from '@ryusei/code';\n   *\n   * RyuseiLight.register( Extensions );\n   * ```\n   *\n   * @param extensions - An object literal with extensions.\n   */\n  static compose( extensions: Partial<Extensions> ): void {\n    forOwn( extensions, ( Extension, name ) => {\n      RyuseiCode.Extensions[ name ] = Extension;\n    } );\n  }\n\n  /**\n   * Returns a Language object.\n   *\n   * @param id - The language ID.\n   *\n   * @return A Language object.\n   */\n  static get( id: string ): Language {\n    const { languages } = RyuseiCode;\n    assert( languages[ id ], `${ id } was not found.` );\n    return languages[ id ];\n  }\n\n  /**\n   * An object with all options.\n   */\n  options: Options;\n\n  /**\n   * The Editor instance.\n   */\n  Editor: Editor;\n\n  /**\n   * The Language object.\n   */\n  language: Language;\n\n  /**\n   * The constructor.\n   *\n   * @param options - Optional. Options.\n   */\n  constructor( options?: Options ) {\n    this.mergeOptions( options );\n    this.language = RyuseiCode.get( this.options.language );\n    this.Editor   = new Editor( this.language, this.options, RyuseiCode.Extensions );\n  }\n\n  /**\n   * Merges options with default values.\n   *\n   * @param options - Options to merge.\n   */\n  private mergeOptions( options: Options | undefined ): void {\n    this.options = assign( {}, DEFAULT_OPTIONS );\n\n    forOwn( options, ( value, key ) => {\n      if ( ! isUndefined( value ) ) {\n        if ( isObject( DEFAULT_OPTIONS[ key ] ) ) {\n          if ( isObject( value ) ) {\n            this.options[ key ] = assign( {}, DEFAULT_OPTIONS[ key ], value );\n          }\n        } else {\n          this.options[ key ] = value;\n        }\n      }\n    } );\n  }\n\n  /**\n   * Applies the editor to the specified target element.\n   *\n   * @example\n   * ```js\n   * const ryuseiCode = new RyuseiCode();\n   * ryuseiCode.apply( 'textarea' );\n   *\n   * // or\n   * const textarea = document.querySelector( 'textarea' );\n   * ryuseiCode.apply( textarea )\n   * ```\n   *\n   * <div class=\"caution\">\n   * The instance can not have multiple targets.\n   * If the <code>apply()</code> method is called twice to the same element, it throws an error.\n   * </div>\n   *\n   * @param target - A selector to find the target element, or a target element itself.\n   * @param code   - Optional. The code to overwrite the content of the target element.\n   */\n  apply( target: string | Element, code?: string ): void {\n    this.Editor.apply( target, code );\n  }\n\n  /**\n   * Builds the HTML of the editor. This works without `document` and `window` objects,\n   * but has no functionality.\n   *\n   * The [`maxInitialLines`](/guides/options#max-initial-lines) option limits the number of lines to generate.\n   *\n   * @param code - The code for the editor.\n   *\n   * @return The HTML string for the editor.\n   */\n  html( code: string ): string {\n    return this.Editor.html( code, true );\n  }\n\n  /**\n   * Attaches an event handler to the editor event or events.\n   *\n   * ```js\n   * // ke is the native KeyboardEvent object\n   * ryuseiCode.on( 'keydown', ( e, ke ) => {\n   *   console.log( ke.key );\n   * } );\n   *\n   * // With a namespace:\n   * ryuseiCode.on( 'keydown.myNamespace', ( e, ke ) => {\n   *   console.log( ke.key );\n   * } );\n   * ```\n   *\n   * @param events   - An event name or names separated by spaces, or an array with event names.\n   *                   Use a dot(.) to add a namespace.\n   * @param callback - A callback function.\n   */\n  on( events: string | string[], callback: EventBusCallback ): void {\n    this.Editor.event.on( events, callback );\n  }\n\n  /**\n   * Detaches an event handler registered by `on()`.\n   *\n   * ```js\n   * // Detach all handlers:\n   * ryuseiCode.off( 'keydown' );\n   *\n   * // Detach handlers only in the namespace:\n   * ryuseiCode.off( 'keydown.myNamespace' );\n   * ```\n   *\n   * @param events - An event name or names separated by spaces, or or an array with event names.\n   *                 Use a dot(.) to add a namespace.\n   */\n  off( events: string | string[] ): void {\n    this.Editor.event.off( events );\n  }\n\n  /**\n   * Saves the content to the source element if available.\n   *\n   * For example, if you apply the editor to the empty `textarea` element,\n   * it remains empty even after you edit the code by the editor.\n   *\n   * This method applies back the change to the `textarea` element.\n   */\n  save(): void {\n    this.Editor.save();\n  }\n\n  /**\n   * Sets focus on the editor.\n   *\n   * @param reselect - Determines whether to reselect the last position or not.\n   */\n  focus( reselect?: boolean ): void {\n    this.Editor.focus( reselect );\n  }\n\n  /**\n   * Sets the caret position or selection range.\n   *\n   * @param start - A start position as `[ row, col ]`.\n   * @param end   - Optional. An end position. If omitted, the selection will be collapsed to the start.\n   */\n  setRange( start: Position, end?: Position ): void {\n    this.Editor.Components.Selection.set( start, end );\n  }\n\n  /**\n   * The alias of the `value` property that returns the current code as a string.\n   *\n   * @return The current code as a string.\n   */\n  toString(): string {\n    return this.value;\n  }\n\n  /**\n   * Saves the final value to the source element and destroys the editor for releasing the memory.\n   */\n  destroy(): void {\n    this.Editor.destroy();\n    delete this.Editor;\n  }\n\n  /**\n   * Sets a new value to the editor and resets the editor.\n   *\n   * @param value - A new value.\n   */\n  set value( value: string ) {\n    this.Editor.value = value;\n  }\n\n  /**\n   * Returns the current value as a string.\n   *\n   * @return The current value.\n   */\n  get value(): string {\n    return this.Editor.value;\n  }\n}\n","import { Elements } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { CLASS_ACTIVE } from '../../constants/classes';\nimport {\n  EVENT_BLUR,\n  EVENT_FOCUS,\n  EVENT_FOCUS_LINE_CHANGED,\n  EVENT_INIT_STYLE,\n  EVENT_READONLY,\n  EVENT_RESIZE,\n} from '../../constants/events';\nimport { PROJECT_CODE } from '../../constants/project';\nimport { Editor } from '../../core/Editor/Editor';\nimport { addClass, div, hasClass, removeClass, styles, unit } from '../../utils';\n\n\n/**\n * The class name for the active line element.\n *\n * @since 0.1.0\n */\nexport const CLASS_ACTIVE_LINE = `${ PROJECT_CODE }__active-line`;\n\n/**\n * The component for activating/deactivating lines according to the current selection.\n *\n * @since 0.1.0\n */\nexport class ActiveLine extends Component {\n  /**\n   * Holds the active line element.\n   */\n  private line: HTMLDivElement;\n\n  /**\n   * Keeps the previous top offset.\n   */\n  private top: number;\n\n  /**\n   * The ActiveLine constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n\n    this.on( EVENT_INIT_STYLE, ( e, add ) => {\n      add( `.${ CLASS_ACTIVE_LINE }`, 'height', this.options.lineHeight );\n    } );\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    this.line = div( { class: CLASS_ACTIVE_LINE }, elements.background );\n\n    this.on( [ EVENT_FOCUS, EVENT_FOCUS_LINE_CHANGED, EVENT_READONLY ], ( e, readOnly ) => {\n      if ( e.type !== EVENT_READONLY || ! readOnly ) {\n        this.activate();\n        this.offset();\n      } else {\n        this.deactivate();\n      }\n    } );\n\n    this.on( EVENT_BLUR, this.deactivate, this );\n    this.on( EVENT_RESIZE, this.offset, this );\n  }\n\n  /**\n   * Activates the element.\n   */\n  private activate(): void {\n    const { Editor } = this;\n\n    if ( Editor.isFocused() && ! Editor.readOnly ) {\n      if ( ! this.isActive() ) {\n        addClass( this.line, CLASS_ACTIVE );\n        this.emit( 'activeLine:activated' );\n      }\n    }\n  }\n\n  /**\n   * Offsets the active line element to the current focus node.\n   */\n  private offset(): void {\n    if ( this.isActive() ) {\n      const { Measure } = this;\n      const top = Measure.getTop( this.Selection.focus[ 0 ] ) + Measure.padding.top;\n\n      if ( this.top !== top ) {\n        styles( this.line, { top: unit( ( this.top = top ) ) } );\n        this.emit( 'activeLine:updated' );\n      }\n    }\n  }\n\n  /**\n   * Deactivates the element.\n   */\n  private deactivate(): void {\n    removeClass( this.line, CLASS_ACTIVE );\n    this.top = -1;\n    this.emit( 'activeLine:deactivated' );\n  }\n\n  /**\n   * Checks if the element is active or not.\n   *\n   * @return `true` if the element is active, or otherwise `false`.\n   */\n  private isActive(): boolean {\n    return hasClass( this.line, CLASS_ACTIVE );\n  }\n}\n","import { AutoCloseConfig, Elements } from '@ryusei/code';\nimport { CATEGORY_STRING } from '@ryusei/light';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_CHANGED, EVENT_KEYDOWN } from '../../constants/events';\nimport { compare, isArray, isFunction, isString, normalizeKey, prevent } from '../../utils';\n\n\n/**\n * The component for auto closing brackets.\n *\n * @since 0.1.0\n */\nexport class AutoClose extends Component {\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    this.on( EVENT_KEYDOWN, ( e, ke ) => {\n      this.skip( ke );\n      this.remove( ke );\n    } );\n\n    this.on( EVENT_CHANGED, ( e, type ) => {\n      if ( type === 'input' ) {\n        this.close();\n      }\n    } );\n  }\n\n  /**\n   * Closes the entered opening character.\n   */\n  private close(): void {\n    const { Input } = this;\n\n    if ( ! Input.composing ) {\n      const index = this.getChars( false ).indexOf( Input.get().key );\n\n      if ( index > -1 && this.validate( index, 'close' ) ) {\n        Input.apply( {\n          type     : 'autoClose',\n          insertion: this.getClosingString( index ),\n          offset   : this.getOffset( index ),\n        } );\n      }\n    }\n  }\n\n  /**\n   * Skips the entered close character if the next character is already the closing character.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private skip( e: KeyboardEvent ): void {\n    const { Input } = this;\n\n    if ( ! Input.composing ) {\n      const closingChars = this.getChars( true );\n      const index        = closingChars.indexOf( normalizeKey( e.key ) );\n\n      if ( index > -1 && this.validate( index, 'skip' ) ) {\n        if ( closingChars[ index ] === Input.char() ) {\n          const { Selection, Selection: { focus } } = this;\n          Selection.set( [ focus[ 0 ], focus[ 1 ] + 1 ] );\n          prevent( e );\n        }\n      }\n    }\n  }\n\n  /**\n   * Automatically removes the paired characters when the backspace key is pressed.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private remove( e: KeyboardEvent ): void {\n    const { Input } = this;\n\n    if ( e.key === 'Backspace' ) {\n      const index = this.getChars( false ).indexOf( Input.char( Input.col - 1 ) );\n\n      if ( index > -1 && this.validate( index, 'remove' ) ) {\n        if ( this.getChars( true )[ index ] === Input.char() ) {\n          const { Selection, Selection: { focus } } = this;\n          Input.value = Input.before + Input.after.slice( 1 );\n          Selection.set( focus );\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns an array with opening/closing characters.\n   *\n   * @param closing - Determines whether to get closing or opening characters.\n   *\n   * @return An array with characters.\n   */\n  private getChars( closing: boolean ): string[] {\n    return this.getConfig().map( chars => {\n      const value = chars[ closing ? 1 : 0 ];\n      return isString( value ) ? value : '';\n    } );\n  }\n\n  /**\n   * Returns a closing string.\n   *\n   * @param index - A config index.\n   *\n   * @return A closing string. This may be empty.\n   */\n  private getClosingString( index: number ): string {\n    const config = this.getConfig()[ index ];\n    const closer = config && config[ 1 ];\n    return isFunction( closer ) ? closer( this.Editor ) : closer || '';\n  }\n\n  /**\n   * Returns a number of characters to offset.\n   *\n   * @param index - A config index.\n   *\n   * @return The number of characters to offset.\n   */\n  private getOffset( index: number ): number {\n    const config = this.getConfig()[ index ];\n    const data   = config && config[ 2 ];\n    return data ? data.offset || 0 : 0;\n  }\n\n  /**\n   * Executes the validator defined by the language data.\n   *\n   * @param index - A config index.\n   * @param key   - A key of the validator.\n   *\n   * @return `true` if the input satisfies the validator, or otherwise `false`.\n   */\n  private validate( index: number, key: 'close' | 'skip' | 'remove' ): boolean {\n    const { Scope } = this;\n    const config    = this.getConfig()[ index ];\n    const data      = config[ 2 ];\n\n    if ( ! data ) {\n      return true;\n    }\n\n    const validator = data[ key ];\n\n    if ( isFunction( validator ) ) {\n      return validator( this.Editor, config );\n    }\n\n    if ( isString( validator ) ) {\n      if ( validator === '@quotes' ) {\n        return this.validateQuote( key );\n      }\n\n      return false;\n    }\n\n    if ( isArray( validator ) ) {\n      return Scope.isIn( validator );\n    }\n\n    return validator;\n  }\n\n  /**\n   * Determines whether to proceed completion of quotes or not.\n   * - RegExp: checks the string after the input quote.\n   *\n   * @param key - The key of the validator.\n   *\n   * @return `true` if the completion process should be proceeded, or otherwise `false`.\n   */\n  private validateQuote( key: 'close' | 'skip' | 'remove' ): boolean {\n    const { start } = this.Selection.get();\n    const { Input } = this;\n    const currInfo = this.lines.getInfoAt( start );\n    const prevInfo = Input.info;\n\n    if ( currInfo ) {\n      if ( currInfo.category === CATEGORY_STRING || prevInfo && prevInfo.category === CATEGORY_STRING ) {\n        if ( key === 'skip' || key === 'remove' ) {\n          return compare( start, [ start[ 0 ], currInfo.to - 1 ] ) === 0;\n        }\n\n        return false;\n      }\n    }\n\n    const { after } = Input;\n    return ! this.Scope.isIn( 'comment' )  && ( !after || /^\\s/.test( after ) );\n  }\n\n  /**\n   * Returns the config array.\n   *\n   * @return A config array.\n   */\n  private getConfig(): AutoCloseConfig[]  {\n    return this.getLanguage().autoClose || [];\n  }\n}\n","import { BracketMatchingOptions } from '@ryusei/code';\n\n\n/**\n * The default options for the BracketMatching component.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: BracketMatchingOptions = {\n  brackets: [\n    [ '(', '[', '{', '<' ],\n    [ ')', ']', '}', '>' ],\n  ],\n  maxScanLines: 1000,\n};\n","import { BracketMatchingOptions, Elements, EventBusEvent, Position, Range, ScanResult, TokenInfo } from '@ryusei/code';\nimport { CATEGORY_BRACKET } from '@ryusei/light';\nimport { Component } from '../../classes/Component/Component';\nimport { Selection } from '../../components';\nimport { EVENT_BLUR, EVENT_READONLY, EVENT_SELECTED } from '../../constants/events';\nimport { CHANGED, EXTEND, SELECTING, START } from '../../constants/selection-states';\nimport { Editor } from '../../core/Editor/Editor';\nimport { debounce, escapeRegExp, rafThrottle } from '../../utils';\nimport { Throttle } from '../../utils/function/throttle/throttle';\nimport { DEFAULT_OPTIONS } from './defaults';\n\n\n/**\n * The group ID for markers.\n *\n * @since 0.1.0\n */\nexport const MARKER_ID = 'brackets';\n\n/**\n * The debounce duration for the clear method.\n *\n * @since 0.1.0\n */\nexport const CLEAR_DEBOUNCE_DURATION = 50;\n\n/**\n * The component for highlighting matched brackets.\n *\n * @since 0.1.0\n */\nexport class BracketMatching extends Component {\n  /**\n   * The debounced clear function.\n   */\n  private clear: Throttle<() => void>;\n\n  /**\n   * The collection of brackets.\n   */\n  private brackets: BracketMatchingOptions[ 'brackets' ];\n\n  /**\n   * Limits the number of lines to match brackets.\n   */\n  private maxScanLines: number;\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    const options = this.getOptions( 'bracketMatching', DEFAULT_OPTIONS );\n\n    this.brackets     = options.brackets;\n    this.maxScanLines = options.maxScanLines;\n\n    super.mount( elements );\n\n    this.clear  = debounce( () => { this.Range.clear( MARKER_ID ) }, CLEAR_DEBOUNCE_DURATION );\n    this.update = rafThrottle( this.update.bind( this ) );\n\n    this.on( EVENT_SELECTED, this.onSelected, this );\n    this.on( EVENT_BLUR, this.clear );\n\n    this.on( EVENT_READONLY, ( e, readOnly ) => {\n      if ( readOnly ) {\n        this.clear();\n      }\n    } );\n  }\n\n  /**\n   * Called when the selection state is changed.\n   *\n   * @param e         - An EventBusEvent object.\n   * @param Selection - A Selection instance.\n   */\n  private onSelected( e: EventBusEvent<Editor>, Selection: Selection ): void {\n    if ( Selection.is( START, SELECTING, EXTEND ) ) {\n      this.clear();\n    } else if ( Selection.is( CHANGED ) ) {\n      if ( ! this.Editor.readOnly && Selection.isCollapsed() ) {\n        this.update();\n      }\n    }\n  }\n\n  /**\n   * Checks the current location and renders markers.\n   */\n  private update(): void {\n    const { focus } = this.Selection;\n    const before: Position = focus[ 1 ] > 0 ? [ focus[ 0 ], focus[ 1 ] - 1 ] : null;\n\n    this.clear.invoke();\n\n    [ before, focus ].some( position => {\n      if ( position && this.Scope.inCategory( CATEGORY_BRACKET, position ) ) {\n        this.draw( position[ 0 ], this.lines.getInfoAt( position ) );\n        return true;\n      }\n    } );\n  }\n\n  /**\n   * Draws the provided bracket token and its counterpart.\n   *\n   * @param row  - A row index.\n   * @param info - A TokenInfo object.\n   */\n  private draw( row: number, info: TokenInfo ): void {\n    const match = this.find( false, row, info ) || this.find( true, row, info );\n\n    if ( match ) {\n      const { Range } = this;\n      Range.clear( MARKER_ID );\n      Range.register( MARKER_ID, [ this.infoToRange( row, info ), this.infoToRange( match.row, match.info ) ] );\n    }\n  }\n\n  /**\n   * Finds the counterpart of the provided token.\n   *\n   * @param findClosing - Determines whether to find closing part or not.\n   * @param row         - A row index.\n   * @param info        - A TokenInfo object.\n   *\n   * @return A counter token of the passed info if found, or otherwise `undefined`.\n   */\n  private find( findClosing: boolean, row: number, info: TokenInfo ): ScanResult | undefined {\n    const { brackets } = this;\n    const index = brackets[ Number( ! findClosing ) ].indexOf( info.code );\n\n    if ( index > -1 ) {\n      const counterpart = brackets[ Number( findClosing ) ][ index ];\n\n      return this.lines[ `scan${ findClosing ? 'Down' : 'Up' }` ](\n        [ row, info.from ],\n        [ CATEGORY_BRACKET, new RegExp( escapeRegExp( counterpart ) ) ],\n        [ CATEGORY_BRACKET, new RegExp( escapeRegExp( info.code ) ) ],\n        1,\n        this.maxScanLines\n      );\n    }\n  }\n\n  /**\n   * Converts the provided TokeInfo object to the range.\n   *\n   * @param row  - A row index.\n   * @param info - A TokenInfo object to convert.\n   *\n   * @return A Range object.\n   */\n  private infoToRange( row: number, info: TokenInfo ): Range {\n    return { start: [ row, info.from ], end: [ row, info.to ] };\n  }\n}\n","import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The collection of shortcuts for the Comment extension.\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[]> = {\n  lineComment : [ '/', true ],\n  blockComment: [ '?', true, true ],\n};\n","import { Elements, Position, Range } from '@ryusei/code';\nimport { CATEGORY_COMMENT } from '@ryusei/light';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_CHANGE, EVENT_CHANGED, EVENT_KEYMAP } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { clamp, endsWith, escapeRegExp, min, startsWith } from '../../utils';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * The input type for comment or uncomment changes.\n *\n * @since 0.1.0\n */\nconst COMMENT_INPUT_TYPE = 'comment';\n\n/**\n * The class for commenting out or uncommenting code.\n *\n * @since 0.1.0\n */\nexport class Comment extends Component {\n  /**\n   * The Comment constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.addKeyBindings( KEYMAP );\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    const { language } = this;\n\n    if ( language.blockComment ) {\n      this.on( `${ EVENT_KEYMAP }:blockComment`, this.toggleBlock, this );\n    }\n\n    if ( language.lineComment ) {\n      this.on( `${ EVENT_KEYMAP }:lineComment`, this.toggleLine, this );\n    }\n  }\n\n  /**\n   * Toggles block comments.\n   * If the `start` or `end` position of the selection is inside a comment, unwraps the comment.\n   * Otherwise, comments out the selection.\n   */\n  private toggleBlock(): void {\n    let { start, end } = this.Selection.get();\n    const range = this.detectBlockComment( start ) || this.detectBlockComment( end );\n\n    this.emit( EVENT_CHANGE, COMMENT_INPUT_TYPE );\n\n    if ( range ) {\n      start = range.start;\n      end   = range.end;\n      this.uncomment( start, end, false );\n    } else {\n      this.commentOut( start, end, false );\n    }\n\n    this.sync( start, end, !! range, false );\n    this.emit( EVENT_CHANGED, COMMENT_INPUT_TYPE );\n  }\n\n  /**\n   * Toggles line comments.\n   */\n  private toggleLine(): void {\n    const { start, end } = this.Selection.get();\n    const { lines } = this;\n\n    this.emit( EVENT_CHANGE, COMMENT_INPUT_TYPE );\n\n    let endPosition: Position;\n    let uncommented;\n\n    for ( let i = start[ 0 ]; i <= end[ 0 ]; i++ ) {\n      const range = this.detectLineComment( [ i, lines[ i ].text.length ] );\n\n      if ( range ) {\n        this.uncomment( range.start, range.end, true );\n        endPosition = end;\n        uncommented = true;\n      }\n    }\n\n    if ( ! uncommented ) {\n      const minIndent = lines.findMinIndent( start[ 0 ], end[ 0 ] );\n\n      for ( let i = start[ 0 ]; i <= end[ 0 ]; i++ ) {\n        this.commentOut( [ i, minIndent.length ], [ i, lines[ i ].text.length ], true );\n      }\n    }\n\n    this.sync( start, endPosition || end, uncommented, true );\n    this.emit( EVENT_CHANGED, COMMENT_INPUT_TYPE );\n  }\n\n  /**\n   * Comments out code between the start and end positions.\n   *\n   * @param start - A start position.\n   * @param end   - An end position.\n   * @param line  - Whether to use a line comment or not.\n   */\n  private commentOut( start: Position, end: Position, line: boolean ): void {\n    const { Code } = this;\n    const comment = this.getConfig( line ? [ start[ 0 ], 0 ] : start, line );\n\n    if ( comment ) {\n      const commentStart = comment[ 0 ] + ( comment[ 1 ] ? '' : ' ' );\n      Code.replaceRange( start, end, `${ commentStart }${ Code.sliceRange( start, end ) }${ comment[ 1 ] || '' }` );\n    }\n  }\n\n  /**\n   * Converts back the commented out code into the source code.\n   *\n   * @param start - A start position.\n   * @param end   - An end position.\n   * @param line  - Whether to use a line comment or not.\n   */\n  private uncomment( start: Position, end: Position, line: boolean ): void {\n    const { Code } = this;\n    const comment = this.getConfig( start, line );\n\n    if ( comment ) {\n      const replacement = Code.sliceRange( start, end );\n      const source      = `^${ escapeRegExp( comment[ 0 ] ) }[ ]?|[ ]?${ escapeRegExp( comment[ 1 ] ) }$`;\n      Code.replaceRange( start, end, replacement.replace( new RegExp( source, 'g' ), '' ) );\n    }\n  }\n\n  /**\n   * Syncs the code to the viewport.\n   *\n   * @param start       - A start position\n   * @param end         - An end position.\n   * @param uncommented - Determines whether to sync code for uncommented or commented out lines.\n   * @param line        - Determines whether to sync code for line or block comments.\n   */\n  private sync( start: Position, end: Position, uncommented: boolean, line: boolean ): void {\n    const { lines } = this;\n    const range   = this.Selection.get();\n    const comment = this.getConfig( start, line );\n\n    if ( ! comment ) {\n      return;\n    }\n\n    let row = uncommented && ! line ? range.start[ 0 ] : end[ 0 ];\n    let col = range.end[ 1 ];\n\n    if ( line ) {\n      row = min( row + 1, lines.length - 1 );\n    } else {\n      const length = comment[ 0 ].length;\n\n      if ( uncommented ) {\n        if ( row === start[ 0 ] ) {\n          col -= length;\n        }\n      } else {\n        if ( row === start[ 0 ] ) {\n          col += length;\n        }\n      }\n    }\n\n    this.View.jump( row );\n    this.Sync.sync( start[ 0 ], end[ 0 ] );\n\n    col = clamp( col, 0, this.lines[ row ].text.length );\n    this.Selection.set( [ row, col ] );\n  }\n\n  /**\n   * Returns the comment config object at the position.\n   *\n   * @param position - A position.\n   * @param line     - Determines whether to get a line comment configuration or not.\n   *\n   * @return An object with `start` and `end` that represent a comment syntax.\n   */\n  private getConfig( position: Position, line: boolean ): [ string, string ] {\n    return this.getLanguage( position )[ `${ line ? 'line' : 'block' }Comment` ];\n  }\n\n  /**\n   * Detects the range of a block comment around the provided position.\n   *\n   * @param position - A position that may be inside a block comment.\n   *\n   * @return A Range object if the passed position is inside a block comment.\n   *         Otherwise, `null`.\n   */\n  private detectBlockComment( position: Position ): Range | null {\n    const { lines } = this;\n    const info = lines.getInfoAt( position );\n\n    if ( info && info.category === CATEGORY_COMMENT ) {\n      const start = lines.findBlockStart( position );\n      const end   = lines.findBlockEnd( position );\n\n      if ( start && end ) {\n        return { start, end };\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Detects the range of a line comment at the provided position.\n   * This method does not care that the code is actually categorized as a comment,\n   * but only care about the representation of the line comment.\n   *\n   * @param position - A position that may be on the line containing a line comment.\n   *\n   * @return A Range object if the row contains a line comment. Otherwise, `null`.\n   */\n  private detectLineComment( position: Position ): Range | null {\n    const [ head, tail ] = this.getConfig( position, true );\n    const [ row ] = position;\n    const line = this.lines[ row ].text;\n\n    if ( line ) {\n      const trimmed = line.trim();\n\n      if ( startsWith( trimmed, head ) && ( ! tail || endsWith( trimmed, tail ) ) ) {\n        const endCol = tail ? line.lastIndexOf( tail ) : line.length;\n\n        return {\n          start: [ row, line.indexOf( head ) ],\n          end  : [ row, endCol ],\n        };\n      }\n    }\n\n    return null;\n  }\n}\n","import { UIButtonSettings } from '@ryusei/code';\nimport { Dialog } from './Dialog';\n\n\n/**\n * A collection of settings for general UI buttons.\n *\n * @since 0.1.0\n */\nexport const GENERAL_UI_BUTTONS: Record<string, UIButtonSettings<Dialog>> = {\n  confirm: {\n    id   : 'confirm',\n    click: 'confirm',\n  },\n  cancel : {\n    id      : 'cancel',\n    click   : 'hide',\n    tabindex: 0,\n  },\n};\n","import { PROJECT_CODE } from '../../constants/project';\n\n\n/**\n * Classes for dialog components.\n *\n * @since 0.1.0\n */\nexport const CLASS_DIALOG        = `${ PROJECT_CODE }__dialog`;\nexport const CLASS_DIALOG_GROUP  = `${ CLASS_DIALOG }__group`;\nexport const CLASS_DIALOG_HEADER = `${ CLASS_DIALOG }__header`;\nexport const CLASS_DIALOG_TITLE  = `${ CLASS_DIALOG }__title`;\nexport const CLASS_DIALOG_BODY   = `${ CLASS_DIALOG }__body`;\nexport const CLASS_DIALOG_FOOTER = `${ CLASS_DIALOG }__footer`;\n","import { DialogGroupData, Elements, UIButtonSettings } from '@ryusei/code';\nimport { UIComponent } from '../../classes/UIComponent/UIComponent';\nimport { CLASS_ACTIVE } from '../../constants/classes';\nimport { EVENT_INIT_STYLE } from '../../constants/events';\nimport { PROJECT_CODE } from '../../constants/project';\nimport { addClass, append, assert, attr, create, div, isString, removeClass, text } from '../../utils';\nimport { GENERAL_UI_BUTTONS } from './buttons';\nimport {\n  CLASS_DIALOG,\n  CLASS_DIALOG_BODY,\n  CLASS_DIALOG_FOOTER,\n  CLASS_DIALOG_GROUP,\n  CLASS_DIALOG_HEADER,\n  CLASS_DIALOG_TITLE,\n} from './classes';\n\n\n/**\n * The group ID of the common dialog.\n *\n * @since 0.1.0\n */\nconst COMMON_DIALOG_GROUP = `${ PROJECT_CODE }-common`;\n\n/**\n * The component for displaying a dialog.\n *\n * @since 0.1.0\n */\nexport class Dialog extends UIComponent<DialogGroupData> {\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.register( COMMON_DIALOG_GROUP, div(), '' );\n  }\n\n  /**\n   * Listens to some events.\n   */\n  protected listen(): void {\n    this.bind( window, 'click', e => {\n      if ( ! this.wrapper.contains( e.target as Node ) ) {\n        this.hide();\n      }\n    } );\n\n    this.on( EVENT_INIT_STYLE, ( e, add ) => {\n      add( `.${ CLASS_DIALOG } code`, 'fontFamily', this.options.monospaceFont );\n    } );\n  }\n\n  /**\n   * Creates dialog elements.\n   * Note that the dialog element must/should have:\n   * - an accessible name by `aria-label` or `aria-labelledby`.\n   * - at least one focusable descendant element.\n   *\n   * @link https://www.w3.org/TR/wai-aria-1.2/#dialog\n   */\n  protected create(): void {\n    const { elements } = this;\n    const id = `${ elements.root.id }-dialog`;\n\n    this.wrapper = div( {\n      id,\n      class             : CLASS_DIALOG,\n      role              : 'dialog',\n      'aria-labelledby' : `${ id }-title`,\n      'aria-describedby': `${ id }-body`,\n    }, elements.overlay );\n  }\n\n  /**\n   * Called when the general confirm button is clicked.\n   *\n   * @internal\n   */\n  confirm(): void {\n    this.emit( `dialog:${ this.group }:confirmed`, this );\n    this.hide();\n  }\n\n  /**\n   * Registers a new dialog.\n   * Use `message()` instead just for showing a message.\n   *\n   * @example\n   * ```ts\n   * const ryuseiCode = new RyuseiCode();\n   * const Dialog     = ryuseiCode.Editor.require( 'Dialog' );\n   *\n   * // The Dialog extension may not exist.\n   * if ( Dialog ) {\n   *   const body = document.createElement( 'p' );\n   *   body.textContent = 'Hello!';\n   *   Dialog.register( 'sample', body, 'Sample Dialog', [ 'confirm' ] );\n   *   Dialog.show( 'sample' );\n   * }\n   * ```\n   *\n   * If you want to add custom buttons, pass an array with button settings to the `buttons`.\n   *\n   * ```ts\n   * const settings = [\n   *   {\n   *     id: 'myButton',\n   *     html: 'Click Me',\n   *     click() {\n   *       console.log( 'Clicked!' );\n   *     },\n   *   }\n   * ];\n   *\n   * Dialog.register( 'sample', body, 'Sample Dialog', settings );\n   * ```\n   *\n   * @param group   - A group ID.\n   * @param elm     - An element to display as a dialog body.\n   * @param title   - A title of a dialog.\n   * @param buttons - Optional. General button names, `'confirm'`, `'cancel'`, or objects with button settings.\n   */\n  register(\n    group: string,\n    elm: HTMLElement,\n    title: string,\n    buttons?: Array<keyof typeof GENERAL_UI_BUTTONS | UIButtonSettings<Dialog>>\n  ): void {\n    const settings = ( buttons || [ 'confirm' ] )\n      .map( settings => isString( settings ) ? GENERAL_UI_BUTTONS[ settings ] : settings )\n      .filter( Boolean );\n\n    assert( settings.length );\n\n    const { id } = this.wrapper;\n    const groupElm  = div( CLASS_DIALOG_GROUP );\n    const headerElm = create( 'header', CLASS_DIALOG_HEADER );\n    const titleElm  = create( 'h3', { id: `${ id }-title`, class: CLASS_DIALOG_TITLE }, headerElm );\n    const footerElm = create( 'footer', CLASS_DIALOG_FOOTER );\n    const button    = this.createCloseButton( { 'aria-controls': id } );\n\n    attr( elm, { id: `${ id }-body`, class: CLASS_DIALOG_BODY } );\n    text( titleElm, title );\n    addClass( button, `${ CLASS_DIALOG }__close` );\n    append( groupElm, [ headerElm, elm, footerElm, button ] );\n\n    this.groups[ group ] = {\n      elm    : groupElm,\n      title  : titleElm,\n      body   : elm,\n      buttons: this.createButtons<Dialog>( settings, footerElm, this ),\n    };\n  }\n\n  /**\n   * Opens the specified dialog. The dialog must be registered by `register()` before opening it.\n   *\n   * @param group - A dialog ID to open.\n   */\n  show( group: string ): void {\n    this.hide();\n    super.show( group );\n\n    this.Editor.readOnly = true;\n    addClass( this.elements.overlay, CLASS_ACTIVE );\n\n    this.autoFocus( group );\n    this.emit( 'dialog:opened', this, group );\n  }\n\n  /**\n   * Closes the dialog which is visible now. Nothing will happen when there is no shown dialog.\n   */\n  hide(): void {\n    if ( this.isActive() ) {\n      this.Editor.readOnly = false;\n\n      super.hide();\n      removeClass( this.elements.overlay, CLASS_ACTIVE );\n\n      this.Selection.reselect();\n      this.emit( 'dialog:closed', this, this.group );\n    }\n  }\n\n  /**\n   * Displays a message with a common dialog. No registration required.\n   *\n   * @param message - A message to display.\n   * @param title   - Optional. A title of a dialog. If omitted, uses the `notice` in the `i18n` collection.\n   */\n  message( message: string, title?: string ): void {\n    const data = this.groups[ COMMON_DIALOG_GROUP ];\n\n    text( data.title, title || this.i18n.notice );\n    text( data.body, message );\n\n    this.show( COMMON_DIALOG_GROUP );\n  }\n}\n","import { OffsetPosition, Position } from '@ryusei/code';\nimport { Marker } from '../../components/Range/Marker';\nimport { floor } from '../../utils';\n\n\n/**\n * The class for rendering the indent guide.\n *\n * @since 0.1.0\n */\nexport class IndentMarker extends Marker {\n  /**\n   * Calculates boundaries for drawing the marker.\n   * Because every indent size is same, this method uses the cache of the width for the better performance.\n   *\n   * @param anchor - An anchor position.\n   *\n   * @return An object with start and end boundaries.\n   */\n  protected calcBoundaries( anchor: Position ): { start: OffsetPosition, end: OffsetPosition } {\n    const { indent } = this.Editor.options;\n    const { Measure, Measure: { padding } } = this.Editor.Components;\n    const width = Measure.measureWidth( indent, true );\n    const top   = Measure.getTop( anchor[ 0 ] ) + padding.top;\n    const left  = floor( anchor[ 1 ] / indent.length ) * width + padding.left;\n\n    return {\n      start: { top, left },\n      end  : { top, left: left + width },\n    };\n  }\n}\n","import { Elements, Range } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_CHANGED, EVENT_CHUNK_MOVED, EVENT_MOUNTED } from '../../constants/events';\nimport { max, rafThrottle } from '../../utils';\nimport { IndentMarker } from './IndentMarker';\n\n\n/**\n * The group ID for markers of indent guides.\n *\n * @since 0.1.0\n */\nexport const MARKER_ID = 'indent';\n\n/**\n * The component for drawing guide lines.\n *\n * @since 0.1.0\n */\nexport class Guide extends Component {\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of editor elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n    this.listen();\n  }\n\n  /**\n   * Listens some events.\n   */\n  private listen(): void {\n    const draw = this.draw.bind( this );\n    this.on( EVENT_CHANGED, rafThrottle( draw ) );\n    this.on( [ EVENT_MOUNTED, EVENT_CHUNK_MOVED ], draw );\n  }\n\n  /**\n   * Clears current guides and draw new ranges for guides.\n   */\n  private draw(): void {\n    const { Range } = this;\n    const ranges = this.parse();\n    Range.clearRanges( MARKER_ID );\n    Range.register( MARKER_ID, ranges, false, IndentMarker );\n  }\n\n  /**\n   * Parses chunk lines and returns ranges for guides.\n   *\n   * @return An array with ranges.\n   */\n  private parse(): Range[] {\n    const { start, end } = this.Chunk;\n    const ranges: Range[] = [];\n\n    let prev = 0;\n\n    for ( let i = max( start, 0 ); i <= end; i++ ) {\n      const line = this.lines[ i ];\n\n      if ( ! line ) {\n        break;\n      }\n\n      let depth = line.indentDepth - 1;\n\n      if ( line.isEmpty() && prev > 0 ) {\n        depth = prev;\n      }\n\n      if ( depth > 0 ) {\n        for ( let j = 0; j < depth; j++ ) {\n          const { length } = this.options.indent;\n          ranges.push( { start: [ i, j * length ], end: [ i, ( j + 1 ) * length ] } );\n        }\n\n        prev = depth;\n      } else {\n        prev = 0;\n      }\n    }\n\n    return ranges;\n  }\n}\n","import { PROJECT_CODE } from '../../constants/project';\n\n\n/**\n * The class name for the gutter.\n *\n * @since 0.1.0\n */\nexport const CLASS_GUTTER = `${ PROJECT_CODE }__gutter`;\n\n/**\n * The class name for the inner element.\n *\n * @since 0.1.0\n */\nexport const CLASS_GUTTER_FLOAT = `${ CLASS_GUTTER }__float`;\n\n/**\n * The class name for each row element.\n *\n * @since 0.1.0\n */\nexport const CLASS_GUTTER_ROW = `${ CLASS_GUTTER }__row`;\n\n/**\n * The class name for each line number element.\n *\n * @since 0.1.0\n */\nexport const CLASS_LINE_NUMBER = `${ CLASS_GUTTER }__number`;\n\n/**\n * The modifier class to apply `sticky`.\n *\n * @since 0.1.0\n */\nexport const CLASS_STICKY = `${ CLASS_GUTTER }--sticky`;\n\n/**\n * The status class for the root element.\n *\n * @since 0.1.0\n */\nexport const CLASS_HAS_GUTTER = 'has-gutter';\n\n","import { GutterOptions } from '@ryusei/code';\n\n\n/**\n * The default options for the Gutter component.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: GutterOptions = {\n  selectLine: true,\n  start     : 1,\n  sticky    : true,\n};\n","import { Elements, GutterOptions } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { Lines } from '../../components/Code/Lines';\nimport { CLASS_ACTIVE } from '../../constants/classes';\nimport {\n  EVENT_CHUNK_MOVED,\n  EVENT_CHUNK_SUPPLIED,\n  EVENT_INIT_STYLE,\n  EVENT_RESIZE,\n  EVENT_SCROLL_HEIGHT_CHANGED,\n} from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport {\n  addClass,\n  between,\n  create,\n  div,\n  hasClass,\n  isHTMLElement,\n  min,\n  prevent,\n  query,\n  remove,\n  repeat,\n  slice,\n  styles,\n  tag,\n  text,\n  toggleClass,\n  unit,\n} from '../../utils';\nimport {\n  CLASS_GUTTER,\n  CLASS_GUTTER_FLOAT,\n  CLASS_GUTTER_ROW,\n  CLASS_HAS_GUTTER,\n  CLASS_LINE_NUMBER,\n  CLASS_STICKY,\n} from './classes';\nimport { DEFAULT_OPTIONS } from './defaults';\n\n\n/**\n * The class for a gutter.\n *\n * @since 0.1.0\n */\nexport class Gutter extends Component {\n  /**\n   * Holds the gutter element.\n   */\n  private gutter: HTMLDivElement;\n\n  /**\n   * Holds the float element.\n   */\n  private float: HTMLDivElement;\n\n  /**\n   * Keeps the active row element.\n   */\n  private activeElm: Element;\n\n  /**\n   * Holds options.\n   */\n  private readonly opts: GutterOptions;\n\n  /**\n   * The number where the gutter starts.\n   */\n  private readonly start: number;\n\n  /**\n   * The Gutter constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n\n    this.opts  = this.getOptions<GutterOptions>( 'gutter', DEFAULT_OPTIONS );\n    this.start = this.opts.start;\n\n    this.on( EVENT_INIT_STYLE, ( e, add ) => {\n      add( `.${ CLASS_GUTTER }`, 'fontFamily', this.options.monospaceFont );\n    } );\n\n    this.render();\n  }\n\n  /**\n   * Renders a gutter element and rows.\n   */\n  private render(): void {\n    this.on( 'root:open', ( e, append, classes ) => {\n      classes.push( CLASS_HAS_GUTTER );\n    } );\n\n    this.on( 'editor:open', ( e, append, classes, lines ) => {\n      append( tag( [ CLASS_GUTTER, this.opts.sticky ? CLASS_STICKY : '' ], { 'aria-hidden': true } ) );\n      append( tag( CLASS_GUTTER_FLOAT ) );\n      append( this.renderRows( lines, append ) );\n      append( repeat( '</div>', 2 ) ); // float and gutter\n    } );\n\n    this.on( EVENT_INIT_STYLE, ( e, add ) => {\n      const { lineHeight } = this.options;\n      add( `.${ CLASS_GUTTER_ROW }`, { height: lineHeight ? `${ lineHeight }em` : undefined, lineHeight } );\n    } );\n  }\n\n  /**\n   * Renders rows of a gutter.\n   * `+1` creates an extra row for measurement of the gutter width.\n   *\n   * @param lines  - An array containing lines.\n   * @param append - The function that appends a HTML string.\n   */\n  private renderRows( lines: Lines, append: ( string: string ) => void ): string {\n    const html: string[] = [];\n    const max  = min( lines.length, this.options.maxInitialLines ) + 1;\n\n    for ( let i = 0; i < max; i++ ) {\n      const number = ( i === max - 1 ? lines.length - 1 : i ) + this.start;\n\n      append( tag( CLASS_GUTTER_ROW ) );\n      append( `<span class=\"${ CLASS_LINE_NUMBER }\">${ number }</span>` );\n\n      this.emit( 'gutter:row', html, i, number );\n\n      append( `</div>` );\n    }\n\n    return html.join( '' );\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    this.gutter = query<HTMLDivElement>( elements.root, `.${ CLASS_GUTTER }` );\n    this.float  = query<HTMLDivElement>( this.gutter, `.${ CLASS_GUTTER_FLOAT }` );\n\n    if ( this.gutter ) {\n      const { children } = this.float;\n      const diff = this.Chunk.length - children.length;\n\n      if ( diff > 0 ) {\n        this.supply( diff );\n      } else if ( diff < 0 ) {\n        remove( slice( children, diff ) );\n      }\n\n      this.listen();\n      this.update();\n    }\n  }\n\n  /**\n   * Supplies the specified number of row and line number elements.\n   *\n   * @param length - The number of elements to create.\n   */\n  private supply( length: number ): void {\n    for ( let i = 0; i < length; i++ ) {\n      create( 'span', CLASS_LINE_NUMBER, div( CLASS_GUTTER_ROW, this.float ) );\n    }\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    this.on( EVENT_CHUNK_SUPPLIED, ( e, chunk, diff ) => { this.supply( diff ) } );\n    this.on( [ EVENT_CHUNK_MOVED, EVENT_SCROLL_HEIGHT_CHANGED, EVENT_RESIZE ], this.update, this );\n    this.on( 'activeLine:updated', this.activate, this );\n    this.on( 'activeLine:deactivated', this.deactivate, this );\n\n    if ( this.opts.selectLine ) {\n      this.bind( this.gutter, 'pointerdown', this.onPointerDown, this );\n    }\n  }\n\n  /**\n   * Called when the gutter emits the `pointerdown` event.\n   *\n   * @param e - A PointerEvent object.\n   */\n  private onPointerDown( e: PointerEvent ): void {\n    const { target } = e;\n\n    if ( isHTMLElement( target ) && hasClass( target, CLASS_LINE_NUMBER ) ) {\n      const number = +text( target );\n\n      if ( ! isNaN( number ) ) {\n        this.Selection.selectLine( number - this.start, true, true );\n        prevent( e );\n      }\n    }\n  }\n\n  /**\n   * Updates line numbers and offsets the float element to the Chunk position.\n   */\n  private update(): void {\n    const { Chunk: { start: chunkStart }, start } = this;\n    const { length } = this.lines;\n    const { children: rows } = this.float;\n\n    for ( let i = 0; i < rows.length; i++ ) {\n      const elm    = rows[ i ];\n      const number = ( i === rows.length - 1 ? length - 1 : chunkStart + i ) + start;\n      text( elm.firstChild, between( number, start, length + start - 1 ) ? `${ number }` : '' );\n    }\n\n    this.offset();\n    this.activate();\n  }\n\n  /**\n   * Offsets the float element to the current Chunk position.\n   */\n  private offset(): void {\n    const { Chunk, Chunk: { start } } = this;\n    const offset = Chunk.offsetY + ( start < 0 ? start * this.Measure.lineHeight : 0 );\n    styles( this.float, { top: unit( offset ) } );\n  }\n\n  /**\n   * Activates the specified row.\n   */\n  private activate(): void {\n    const row = this.Selection.focus[ 0 ];\n    const elm = this.getElm( row );\n\n    this.deactivate();\n\n    if ( elm && this.Editor.isFocused() ) {\n      addClass( elm, CLASS_ACTIVE );\n      this.activeElm = elm;\n      this.emit( 'gutter:activated', elm );\n    }\n  }\n\n  /**\n   * Deactivates the active row if there is.\n   */\n  private deactivate(): void {\n    const { activeElm } = this;\n\n    if ( activeElm ) {\n      toggleClass( activeElm, CLASS_ACTIVE, false );\n      this.emit( 'gutter:deactivated', activeElm );\n      this.activeElm = null;\n    }\n  }\n\n  /**\n   * Returns the element at the row index.\n   *\n   * @param row - A row index.\n   *\n   * @return A row element if available, or otherwise `undefined`.\n   */\n  private getElm( row: number ): Element | undefined {\n    return row > -1 ? this.float.children[ row - this.Chunk.start ] : undefined;\n  }\n}\n","import { HistoryOptions } from '@ryusei/code';\n\n\n/**\n * The default options for the History component.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: HistoryOptions = {\n  limit   : 100,\n  debounce: 300,\n};\n","import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The collection of shortcuts for the History extension.\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[]> = {\n  undo: [ 'Z', true, false ],\n  redo: [ 'Z', true, true ],\n};\n","import { Elements, EventBusEvent, HistoryOptions, Range } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_CHANGE, EVENT_CHANGED, EVENT_KEYMAP, EVENT_RESET } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { compare, debounce } from '../../utils';\nimport { Throttle } from '../../utils/function/throttle/throttle';\nimport { DEFAULT_OPTIONS } from './defaults';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * The interface of each record for the history.\n */\nexport interface HistoryRecord {\n  /**\n   * A Range object.\n   */\n  range: Range;\n\n  /**\n   * A pure text of the code.\n   */\n  value: string;\n\n  /**\n   * A number of lines.\n   */\n  length: number;\n\n  /**\n   * Additional data to store in the record.\n   */\n  data?: Record<string, any>;\n}\n\n/**\n * The input type of the history.\n *\n * @since 0.1.0\n */\nconst RESTORATION_INPUT_TYPE = 'history';\n\n/**\n * The component for managing history.\n * This component requires the Keymap component.\n *\n * @since 0.1.0\n */\nexport class History extends Component {\n  /**\n   * Holds history records.\n   */\n  private history: HistoryRecord[] = [];\n\n  /**\n   * Indicates the current history index.\n   */\n  private index = 0;\n\n  /**\n   * The debounced `push` function.\n   */\n  private debouncedPush: Throttle;\n\n  /**\n   * Holds history options.\n   */\n  private opts: HistoryOptions;\n\n  /**\n   * The Comment constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.addKeyBindings( KEYMAP );\n  }\n\n  /**\n   * Initialized the instance.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    this.opts          = this.getOptions( 'history', DEFAULT_OPTIONS );\n    this.debouncedPush = debounce( this.push.bind( this ), this.opts.debounce );\n    this.listen();\n  }\n\n  /**\n   * Listens to some internal events.\n   */\n  private listen(): void {\n    this.on( EVENT_CHANGE, this.onChange, this );\n    this.on( EVENT_CHANGED, this.onChanged, this );\n\n    this.on( `${ EVENT_KEYMAP }:undo ${ EVENT_KEYMAP }:redo`, ( e, ke, action ) => {\n      ke.preventDefault();\n\n      if ( ! this.Editor.readOnly ) {\n        this[ action ]();\n      }\n    } );\n\n    this.on( EVENT_RESET, () => {\n      this.history.length = 0;\n    } );\n  }\n\n  /**\n   * Creates a history record object.\n   *\n   * @return A created HistoryRecord object.\n   */\n  private record(): HistoryRecord {\n    return {\n      range : this.Selection.get(),\n      value : this.Code.value,\n      length: this.lines.length,\n    };\n  }\n\n  /**\n   * Restores the provided record.\n   * Needs to apply the latest code to the input before sync.\n   *\n   * @param record - A record to restore.\n   */\n  private restore( record: HistoryRecord ): void {\n    const { range, length } = record;\n    const { start, end } = range;\n\n    this.emit( EVENT_CHANGE, RESTORATION_INPUT_TYPE );\n\n    this.Code.value = record.value;\n    this.Sync.sync( 0, length - 1, start[ 0 ] );\n    this.Selection.set( start, end );\n\n    this.emit( EVENT_CHANGED, RESTORATION_INPUT_TYPE );\n    this.emit( 'history:restored', record );\n  }\n\n  /**\n   * Pushes a record to the history and resets the index.\n   * If the `record` is not provided, a new record will be generated via the current editor status.\n   *\n   * @param record - Optional. A record to push.\n   */\n  private push( record: HistoryRecord ): void {\n    const current = this.history[ this.index ];\n\n    if ( current && this.isSame( current, record ) ) {\n      return;\n    }\n\n    this.history.push( record );\n\n    if ( this.length > this.opts.limit ) {\n      this.history.shift();\n    }\n\n    this.index = this.length - 1;\n    this.emit( 'history:pushed', record );\n\n    this.debouncedPush.cancel();\n  }\n\n  /**\n   * Checks if the provided 2 records are same or not.\n   *\n   * @param record1 - A record to check.\n   * @param record2 - Another record to check.\n   *\n   * @return `true` if the records are same, or otherwise `false`.\n   */\n  private isSame( record1: HistoryRecord, record2: HistoryRecord ): boolean {\n    return record1.value === record2.value\n      && ! compare( record1.range.start, record2.range.start )\n      && ! compare( record1.range.end, record2.range.end );\n  }\n\n  /**\n   * Checks if an old record is now active or not.\n   *\n   * @return `true` if an old record is active, or `false` otherwise.\n   */\n  private isUndoing(): boolean {\n    return this.index !== this.length - 1;\n  }\n\n  /**\n   * Called when the code is being changed.\n   *\n   * @param e    - A EventBusEvent object.\n   * @param type - An input type. This may be empty.\n   */\n  private onChange( e: EventBusEvent<Editor>, type: string ): void {\n    if ( type !== RESTORATION_INPUT_TYPE ) {\n      const { history } = this;\n\n      if ( this.isUndoing() ) {\n        history.splice( this.index + 1, history.length );\n      }\n\n      if ( ! this.Selection.isCollapsed() || ! this.length || type === 'replace' ) {\n        this.push( this.record() );\n      }\n    }\n  }\n\n  /**\n   * Called just after the code is changed.\n   *\n   * @param e    - A EventBusEvent object.\n   * @param type - An input type. This may be empty.\n   */\n  private onChanged( e: EventBusEvent<Editor>, type: string ): void {\n    if ( ! this.Input.composing && type !== RESTORATION_INPUT_TYPE ) {\n      if ( type === 'input' ) {\n        this.debouncedPush( this.record() );\n      } else {\n        this.push( this.record() );\n      }\n    }\n  }\n\n  /**\n   * Performs undo.\n   */\n  undo(): void {\n    this.debouncedPush.invoke();\n\n    if ( 0 < this.index && this.index < this.length ) {\n      this.restore( this.history[ --this.index ] );\n    }\n  }\n\n  /**\n   * Performs redo only if previously undo() is operated.\n   */\n  redo(): void {\n    if ( this.index < this.length - 1 ) {\n      this.restore( this.history[ ++this.index ] );\n    }\n  }\n\n  /**\n   * Returns the current history length.\n   *\n   * @return The number of records.\n   */\n  get length(): number {\n    return this.history.length;\n  }\n}\n","import { IndentationOptions } from '@ryusei/code';\n\n\n/**\n * The default options for the Tab component.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: IndentationOptions = {\n  help      : true,\n  deepIndent: true,\n};\n","/**\n * The collection of i18n strings.\n *\n * @since 0.1.0\n */\nexport const I18N = {\n  indentNotice  : 'Indent/Move Focus',\n  indentDisabled: 'Inserting indents by the Tab is currently disabled. You can toggle it by %s.',\n};\n","import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The collection of shortcuts for the Indentation extension.\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[]> = {\n  indent       : [ 'Tab' ],\n  unindent     : [ 'Tab', false, true ],\n  toggleTabMode: [ 'M', true ],\n};\n","import { Elements, EventBusEvent, IndentationOptions, IndentConfig, Position } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { LINE_BREAK } from '../../constants/characters';\nimport {\n  EVENT_CHANGE,\n  EVENT_CHANGED,\n  EVENT_FOCUS,\n  EVENT_KEYDOWN,\n  EVENT_KEYMAP,\n  EVENT_NEWLINE,\n} from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { div, format, html, isFunction, max, prevent } from '../../utils';\nimport { Dialog } from '../Dialog/Dialog';\nimport { DEFAULT_OPTIONS } from './defaults';\nimport { I18N } from './i18n';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * The dialog ID for the indent notice.\n *\n * @since 0.1.0\n */\nconst DIALOG_ID = 'tab-notice';\n\n/**\n * The component for handing the Tab key to insert/remove indents.\n * Just overriding the default behavior of the Tab key can not satisfy the \"No Keyboard Trap\" criterion.\n * Therefore as default, the Tab indentation is initially disabled, and it will be enabled when:\n * - the editor is focused by pointer devices, such as a mouse\n * - users explicitly enable it via CTRL+M\n *\n * @link https://www.w3.org/TR/WCAG21/#no-keyboard-trap\n *\n * @since 0.1.0\n */\nexport class Indentation extends Component {\n  /**\n   * Indicates whether the notification message has been already shown or not.\n   */\n  private static noticed: boolean;\n\n  /**\n   * Holds the indent representation.\n   */\n  private space: string;\n\n  /**\n   * Indicates whether to disable tab indentation or not.\n   */\n  private disabled: boolean;\n\n  /**\n   * Holds options.\n   */\n  private opts: IndentationOptions;\n\n  /**\n   * Holds the Dialog component.\n   */\n  private Dialog: Dialog;\n\n  /**\n   * The Indentation constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.addI18n( I18N );\n    this.addKeyBindings( KEYMAP );\n  }\n\n  /**\n   * Initializes the component.\n   * This component requires the Dialog component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    if ( ! ( this.Dialog = this.require( 'Dialog' ) ) ) {\n      return;\n    }\n\n    super.mount( elements );\n\n    this.space    = this.options.indent;\n    this.opts     = this.getOptions<IndentationOptions>( 'indentation', DEFAULT_OPTIONS );\n    this.disabled = this.opts.activation !== 'load';\n\n    this.register();\n    this.listen();\n  }\n\n  /**\n   * Explicitly enables or disables the component.\n   *\n   * @param disabled - Determines whether to disable the component or not.\n   */\n  setDisabled( disabled: boolean ): void {\n    this.disabled = disabled;\n    Indentation.noticed = true;\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    let focused: boolean;\n\n    this.on( EVENT_FOCUS, ( e, type ) => {\n      if ( type === 'pointer' && ! focused ) {\n        this.setDisabled( false );\n      }\n\n      focused = true;\n    } );\n\n    this.on( `${ EVENT_KEYMAP }:indent ${ EVENT_KEYMAP }:unindent`, ( e, ke, action ) => {\n      if ( ! this.disabled ) {\n        if ( action === 'indent' ) {\n          this.indent();\n        } else {\n          this.unindent();\n        }\n\n        prevent( ke );\n      }\n    } );\n\n    this.on( `${ EVENT_KEYMAP }:toggleTabMode`, ( e, ke ) => {\n      this.setDisabled( ! this.disabled );\n      prevent( ke );\n    } );\n\n    this.on( EVENT_NEWLINE, () => {\n      this.indentNewline();\n\n      if ( this.opts.deepIndent ) {\n        this.indentDeep();\n      }\n    } );\n\n    this.on( EVENT_KEYDOWN, this.onKeydown, this );\n  }\n\n  /**\n   * Called when any key is pressed on the editor.\n   *\n   * @param e     - An EventBusEvent object.\n   * @param ke    - A KeyboardEvent object.\n   */\n  private onKeydown( e: EventBusEvent<Editor>, ke: KeyboardEvent ): void {\n    if ( this.opts.help && ! Indentation.noticed && ke.key === 'Tab' ) {\n      this.Dialog.show( DIALOG_ID );\n      Indentation.noticed = true;\n      prevent( ke );\n      return;\n    }\n\n    this.remove( ke );\n  }\n\n  /**\n   * Registers the dialog for the indentation notice.\n   */\n  private register(): void {\n    const { i18n } = this;\n    const body = div();\n\n    html( body, format(\n      `<p>${ i18n.indentDisabled }</p>`,\n      `<strong>${ this.Keymap.getShortcut( 'toggleTabMode' ) }</strong>`\n    ) );\n\n    this.Dialog.register( DIALOG_ID, body, i18n.indentNotice, [\n      {\n        id   : 'activate',\n        click: () => {\n          this.setDisabled( false );\n          this.Dialog.hide();\n        },\n      },\n      'confirm',\n    ] );\n  }\n\n  /**\n   * Prepends indents to all selected lines.\n   */\n  private indent(): void {\n    const { Input, Selection, space, space: { length: size } } = this;\n\n    if ( Selection.isCollapsed() ) {\n      Input.apply( { type: 'indent', insertion: space, offset: size } );\n    } else {\n      this.emit( EVENT_CHANGE );\n\n      const { start, end } = Selection.get();\n      this.Code.replaceLinesBy( start[ 0 ], end[ 0 ], line => space + line );\n      this.Sync.sync( start[ 0 ], end[ 0 ] );\n      Selection.set( [ start[ 0 ], start[ 1 ] + size ], [ end[ 0 ], end[ 1 ] + size ] );\n\n      this.emit( EVENT_CHANGED );\n    }\n  }\n\n  /**\n   * Removes indents from all selected lines.\n   */\n  private unindent(): void {\n    const { space } = this;\n    const { start, end } = this.Selection.get();\n\n    let startOffset = 0;\n    let endOffset   = 0;\n    let changed;\n\n    this.Code.replaceLinesBy( start[ 0 ], end[ 0 ], ( line, index, array ) => {\n      const match = line.match( new RegExp( `^(${ space }| {0,${ space.length }})` ) );\n\n      if ( match ) {\n        const [ indent ] = match;\n        line = line.replace( indent, '' );\n\n        if ( index === 0 ) {\n          this.emit( EVENT_CHANGE );\n          startOffset -= indent.length;\n        }\n\n        if ( index === array.length - 1 ) {\n          endOffset -= indent.length;\n        }\n\n        changed = true;\n      }\n\n      return line;\n    } );\n\n    if ( changed ) {\n      const startCol = max( start[ 1 ] + startOffset, 0 );\n      const endCol   = max( end[ 1 ] + endOffset, 0 );\n\n      this.Sync.sync( start[ 0 ], end[ 0 ] );\n      this.Selection.set( [ start[ 0 ], startCol ], [ end[ 0 ], endCol ] );\n      this.emit( EVENT_CHANGED );\n    }\n  }\n\n  /**\n   * Adds an indent to the newline when the enter key is pressed.\n   */\n  private indentNewline(): void {\n    const { Input } = this;\n    const indent = this.lines[ Input.row ].getIndent();\n\n    if ( indent ) {\n      Input.set( 'newline', {\n        value   : Input.before + LINE_BREAK + indent + Input.after.replace( /^[ \\t]+/, '' ),\n        position: [ Input.row + 1, indent.length ],\n      } );\n    }\n  }\n\n  /**\n   * Adds an indent after specific patterns.\n   */\n  private indentDeep(): void {\n    const index = this.findConfigIndex();\n\n    if ( index > -1 && this.shouldIndentDeep( index ) ) {\n      const { Input, space } = this;\n      const indent = this.lines[ Input.row ].getIndent();\n      const string = LINE_BREAK + indent + space + ( this.isClosed( index ) ? LINE_BREAK + indent : '' );\n\n      Input.set( 'indentDeep', {\n        key      : 'Enter',\n        insertion: string,\n        position : [ Input.row + 1, indent.length + space.length ],\n      } );\n    }\n  }\n\n  /**\n   * Returns an indent config index.\n   *\n   * @return A config index if found, or -1 if not.\n   */\n  private findConfigIndex(): number {\n    const config = this.getConfig();\n\n    for ( let i = 0; i < config.length; i++ ) {\n      const settings = config[ i ];\n\n      if ( isFunction( settings[ 0 ] ) ) {\n        return settings[ 0 ]( this.Editor ) ? i : -1;\n      }\n\n      const { Input } = this;\n\n      if ( settings[ 0 ].test( Input.before.trim() ) ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Determines whether to increase the indent level or not.\n   *\n   * @param index - A config index.\n   *\n   * @return `true` if the level should be increased, or otherwise `false`.\n   */\n  private shouldIndentDeep( index: number ): boolean {\n    const config    = this.getConfig()[ index ];\n    const condition = config && config[ 2 ];\n\n    if ( isFunction( condition ) ) {\n      return condition( this.Editor );\n    }\n\n    return ! condition || this.Scope.isIn( condition );\n  }\n\n  /**\n   * Checks if the position where the indentation is being added is enclosed by paired characters or not.\n   *\n   * @param index - A config index.\n   *\n   * @return `true` if the closing representation is found, or otherwise `false`.\n   */\n  private isClosed( index: number ): boolean {\n    const config    = this.getConfig()[ index ];\n    const condition = config && config[ 1 ];\n\n    if ( ! condition ) {\n      return false;\n    }\n\n    if ( isFunction( condition ) ) {\n      return condition( this.Editor );\n    }\n\n    const { Input } = this;\n    return condition.test( Input.after.trim() );\n  }\n\n  /**\n   * When the backspace key is pressed,\n   * removes indents of a line if they are same with the previous one's.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private remove( e: KeyboardEvent ): void {\n    const { Selection } = this;\n\n    if ( e.key === 'Backspace' && Selection.isCollapsed() ) {\n      const { lines } = this;\n      const { start } = Selection.get();\n      const prevRow  = start[ 0 ] - 1;\n      const prevLine = lines[ prevRow ];\n\n      if ( ! prevLine ) {\n        return;\n      }\n\n      const prevIndent = prevLine.getIndent();\n      const curIndent  = lines[ start[ 0 ] ].getIndent();\n\n      if ( prevIndent && prevIndent === curIndent && start[ 1 ] === curIndent.length ) {\n        this.emit( EVENT_CHANGE );\n\n        const position = [ prevRow, prevLine.text.length ] as Position;\n\n        this.Code.replaceRange( position, start, '' );\n        this.Sync.sync( prevRow, start[ 0 ] );\n        Selection.set( position );\n\n        this.emit( EVENT_CHANGED );\n\n        prevent( e );\n      }\n    }\n  }\n\n  /**\n   * Returns a config for indentation.\n   *\n   * @return A config array.\n   */\n  private getConfig(): IndentConfig[] {\n    return this.getLanguage().indent || [];\n  }\n}\n","/**\n * The collection of i18n strings.\n *\n * @since 0.1.0\n */\nexport const I18N = {\n  jumpToLine : 'Jump to Line',\n  jumpToolbar: 'Jump Toolbar',\n};\n","import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The collection of shortcuts for the Jump extension.\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[]> = {\n  jumpToLine: [ 'G', true ],\n};\n","import { Elements, JumpOptions } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_KEYMAP } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { between, create, debounce, div, matchesKey, prevent, text } from '../../utils';\nimport { Toolbar } from '../Toolbar/Toolbar';\nimport { I18N } from './i18n';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * The ID for the \"Jump to the Line\" toolbar.\n *\n * @since 0.1.0\n */\nexport const TOOLBAR_ID = 'jump-to-line';\n\n/**\n * The throttle duration for applying the input result to the range.\n *\n * @since 0.1.0\n */\nexport const JUMP_DEBOUNCE_DURATION = 10;\n\n/**\n * The class for jumping to the specific line.\n *\n * @since 0.1.0\n */\nexport class Jump extends Component {\n  /**\n   * Holds the Toolbar component.\n   */\n  private Toolbar: Toolbar;\n\n  /**\n   * Holds the input element.\n   */\n  private field: HTMLInputElement;\n\n  /**\n   * Holds the location element.\n   */\n  private location: HTMLSpanElement;\n\n  /**\n   * The Indentation constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.addI18n( I18N );\n    this.addKeyBindings( KEYMAP );\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    if ( ! ( this.Toolbar = this.require( 'Toolbar' ) ) ) {\n      return;\n    }\n\n    super.mount( elements );\n\n    this.create();\n    this.listen();\n  }\n\n  /**\n   * Creates elements for the jump interface and registers the wrapper to the toolbar.\n   */\n  private create(): void {\n    const wrapper = div();\n\n    this.field = this.Toolbar.createField( { id: 'jumpToLine', tabindex: 1 }, wrapper );\n\n    if ( ! this.getOptions<JumpOptions>( 'jump' ).hideLocation ) {\n      this.location = create( 'span', null, wrapper );\n    }\n\n    this.Toolbar.register( TOOLBAR_ID, wrapper, this.i18n.jumpToolbar );\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    this.on( `${ EVENT_KEYMAP }:jumpToLine`, ( e, ke ) => {\n      this.update();\n      this.Toolbar.show( TOOLBAR_ID );\n      prevent( ke );\n    } );\n\n    this.bind( this.field, 'input', debounce( this.jump.bind( this ), JUMP_DEBOUNCE_DURATION ) );\n\n    this.bind( this.field, 'keydown', ( e: KeyboardEvent ) => {\n      if ( matchesKey( e, this.options.keymap.jumpToLine ) ) {\n        prevent( e );\n      }\n    } );\n  }\n\n  /**\n   * Jumps to the line specified by the input.\n   */\n  private jump(): void {\n    const row = parseInt( this.field.value ) - 1;\n\n    if ( ! isNaN( row ) && between( row, 0, this.lines.length - 1 ) ) {\n      this.View.jump( row, true );\n\n      this.Selection.set( [ row, 0 ] );\n      this.field.focus();\n      this.update();\n\n      this.emit( 'jump:jumped' );\n    }\n  }\n\n  /**\n   * Updates the location.\n   */\n  private update(): void {\n    if ( this.location ) {\n      text( this.location, this.Selection.getLocation() );\n    }\n  }\n}\n","import { ResizeOptions } from '@ryusei/code';\n\n\n/**\n * The default options for the Resize component.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: ResizeOptions = {\n  horizontal: true,\n  vertical  : true,\n};\n","/**\n * The collection of i18n strings.\n *\n * @since 0.1.0\n */\nexport const I18N = {\n  resizeBar: 'Drag to Resize/Double Click to Reset',\n};\n","import { AbstractDraggableBar } from '../../classes/AbstractDraggableBar/AbstractDraggableBar';\nimport { EVENT_RESIZE } from '../../constants/events';\nimport { PROJECT_CODE } from '../../constants/project';\nimport { Editor } from '../../core/Editor/Editor';\nimport { attr, endsWith, off, on, round, styles, unit } from '../../utils';\n\n\n/**\n * The class name for the resize bar.\n *\n * @since 0.1.0\n */\nexport const CLASS_SIZER_BAR = `${ PROJECT_CODE }__sizer__bar`;\n\n/**\n * The class for creating a resize bar.\n *\n * @since 0.1.0\n */\nexport class ResizeBar extends AbstractDraggableBar {\n  /**\n   * Holds the Editor instance.\n   */\n  private readonly Editor: Editor;\n\n  /**\n   * Keeps the initial width/height of the target element.\n   */\n  private startSize: number;\n\n  /**\n   * The ResizeBar constructor.\n   *\n   * @param Editor   - An Editor instance.\n   * @param parent   - A parent element where the bar will be appended.\n   * @param vertical - Determines whether to create a vertical or horizontal sizer.\n   */\n  constructor( Editor: Editor, parent: HTMLElement, vertical: boolean ) {\n    super( [ CLASS_SIZER_BAR, `${ CLASS_SIZER_BAR }--${ vertical ? 'vertical' : 'horizontal' }` ], parent, vertical );\n    this.Editor = Editor;\n    this.init();\n  }\n\n  /**\n   * Initializes the instance.\n   * Note that `aria-valuemin` and `aria-valuemax` is not necessary because their default values are `0` and `100`.\n   *\n   * @link https://www.w3.org/TR/wai-aria-1.2/#separator\n   */\n  private init(): void {\n    const { Editor } = this;\n    const { resizeBar } = Editor.options.i18n;\n\n    attr( this.elm, {\n      role              : 'separator',\n      'aria-controls'   : Editor.elements.root.id,\n      'aria-orientation': this.vertical ? 'horizontal' : 'vertical',\n      'aria-valuenow'   : 0,\n      'aria-label'      : resizeBar,\n      title             : resizeBar,\n    } );\n\n    Editor.event.on( EVENT_RESIZE, this.updateAria.bind( this ) );\n\n    on( this.elm, 'dblclick', () => {\n      Editor[ this.names.height ] = '';\n    } );\n  }\n\n  /**\n   * Called when the bar starts being dragged.\n   *\n   * @param e - A PointerEvent object.\n   */\n  protected onDrag( e: PointerEvent ): void {\n    super.onDrag( e );\n    this.startSize = this.Editor[ this.names.height ];\n  }\n\n  /**\n   * Called while the bar is dragged.\n   *\n   * @param e - A PointerEvent object.\n   */\n  protected onDragging( e: PointerEvent ): void {\n    super.onDragging( e );\n\n    const diff = this.getCoord( e ) - this.startCoord;\n    this.Editor[ this.names.height ] = unit( this.startSize + diff );\n  }\n\n  /**\n   * Updates aria attributes related with the separator role.\n   * This method will be called through the event bus.\n   */\n  private updateAria(): void {\n    const { names } = this;\n    const min = this.convertValueToPixel( names.minHeight ) || 0;\n    const max = this.convertValueToPixel( names.maxHeight );\n    const now = this.Editor[ names.height ] - min;\n\n    if ( max > min ) {\n      attr( this.elm, { 'aria-valuenow': round( 100 * 100 * now / ( max - min ) ) / 100 } );\n    }\n  }\n\n  /**\n   * Converts the CSS value to pixel.\n   *\n   * @param prop - A CSS prop name.\n   *\n   * @return A value in pixel.\n   */\n  private convertValueToPixel( prop: string ): number {\n    const { names } = this;\n    const { root } = this.Editor.elements;\n    const value = styles( root, prop );\n\n    if ( endsWith( value, '%' ) ) {\n      return parseFloat( value ) * root.parentElement[ names.scrollHeight ] / 100;\n    }\n\n    return parseFloat( value );\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy(): void {\n    off( null, '', this );\n    super.destroy();\n  }\n}\n","import { Elements, ResizeOptions } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { PROJECT_CODE } from '../../constants/project';\nimport { div } from '../../utils';\nimport { DEFAULT_OPTIONS } from './defaults';\nimport { I18N } from './i18n';\nimport { ResizeBar } from './ResizeBar';\n\n\n/**\n * The class name for the wrapper element that contains resize bars.\n *\n * @since 0.1.0\n */\nexport const CLASS_SIZER = `${ PROJECT_CODE }__sizer`;\n\n/**\n * The component for resizing the editor by drag bars.\n *\n * @since 0.1.0\n */\nexport class Resize extends Component {\n  /**\n   * Stores ResizeBar instances.\n   */\n  private bars: ResizeBar[] = [];\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    const { Editor, bars } = this;\n    const wrapper = div( CLASS_SIZER, elements.overlay );\n    const options = this.getOptions<ResizeOptions>( 'resize', DEFAULT_OPTIONS );\n\n    this.addI18n( I18N );\n\n    if ( options.horizontal ) {\n      bars.push( new ResizeBar( Editor, wrapper, false ) );\n    }\n\n    if ( options.vertical ) {\n      bars.push( new ResizeBar( Editor, wrapper, true ) );\n    }\n  }\n\n  /**\n   * Destroys the component.\n   */\n  destroy(): void {\n    this.bars.forEach( bar => { bar.destroy() } );\n    super.destroy();\n  }\n}\n","import { UIButtonSettings } from '@ryusei/code';\r\nimport { Search } from './Search';\r\n\r\n\r\n/**\r\n * Buttons settings for the search interface.\r\n */\r\nexport const SEARCH_BUTTONS: UIButtonSettings<Search>[] = [\r\n  {\r\n    id      : 'matchCase',\r\n    icon    : 'matchCase',\r\n    click   : 'toggleMatchCase',\r\n    checkbox: true,\r\n  },\r\n  {\r\n    id      : 'wholeWord',\r\n    icon    : 'word',\r\n    click   : 'toggleWholeWord',\r\n    checkbox: true,\r\n  },\r\n  {\r\n    id      : 'regexp',\r\n    icon    : 'regexp',\r\n    click   : 'toggleRegExp',\r\n    checkbox: true,\r\n  },\r\n  {\r\n    id   : 'prevMatch',\r\n    icon : 'arrowUp',\r\n    click: 'prev',\r\n  },\r\n  {\r\n    id   : 'nextMatch',\r\n    icon : 'arrowDown',\r\n    click: 'next',\r\n  },\r\n];\r\n\r\n/**\r\n * Buttons settings for the replace interface.\r\n */\r\nexport const REPLACE_BUTTONS: UIButtonSettings<Search>[] = [\r\n  {\r\n    id   : 'replace',\r\n    click: 'replace',\r\n  },\r\n  {\r\n    id   : 'replaceAll',\r\n    click: 'replaceAll',\r\n  },\r\n];\r\n","import { PROJECT_CODE } from '../../constants/project';\r\n\r\n\r\n/**\r\n * The class for the search interface.\r\n */\r\nexport const CLASS_SEARCH = `${ PROJECT_CODE }__search`;\r\n\r\n/**\r\n * The class for the replace interface.\r\n */\r\nexport const CLASS_REPLACE = `${ PROJECT_CODE }__replace`;\r\n\r\n/**\r\n * The class for controls in the search interface.\r\n */\r\nexport const CLASS_SEARCH_CONTROLS = `${ CLASS_SEARCH }__controls`;\r\n\r\n/**\r\n * The class for controls in the replace interface.\r\n */\r\nexport const CLASS_REPLACE_CONTROLS = `${ CLASS_REPLACE }__controls`;\r\n\r\n/**\r\n * The class for displaying matches count.\r\n */\r\nexport const CLASS_MATCHES_COUNT = `${ CLASS_SEARCH }__matches`;\r\n","/**\n * The ID for the search toolbar.\n *\n * @since 0.1.0\n */\nexport const TOOLBAR_ID = 'search';\n\n/**\n * The group ID for markers.\n *\n * @since 0.1.0\n */\nexport const MARKER_ID = 'match';\n\n/**\n * The group ID for an active marker.\n *\n * @since 0.1.0\n */\nexport const ACTIVE_MARKER_ID = 'active-match';\n\n/**\n * The throttle duration for applying the input result to the range.\n *\n * @since 0.1.0\n */\nexport const SEARCH_THROTTLE_DURATION = 10;\n\n/**\n * The delay time until jumping to the next match after replace.\n *\n * @since 0.1.0\n */\nexport const JUMP_DELAY_AFTER_REPLACE = 20;\n","import { SearchOptions } from '@ryusei/code';\n\n\n/**\n * The default options for the Search component.\n *\n * @since 0.1.0\n */\nexport const DEFAULT_OPTIONS: SearchOptions = {\n  hideButtons: [],\n};\n","/**\n * The collection of i18n strings.\n *\n * @since 0.1.0\n */\nexport const I18N = {\n  search       : 'Search',\n  searchToolbar: 'Search/Replace Toolbar',\n  wholeWord    : 'Match Whole Word',\n  prevMatch    : 'Previous Match',\n  nextMatch    : 'Next Match',\n  replace      : 'Replace',\n  replaceAll   : 'Replace All',\n  matchCase    : 'Match Case',\n  regexp       : 'Regex',\n  noResults    : 'No results',\n};\n","import { IconSettings } from '@ryusei/code';\n\n\n/**\n * Icons for the Search component.\n *\n * @since 0.1.0\n */\nexport const ICONS: Record<string, IconSettings> = {\n  regexp: [\n    'm15 2a1.5 1.5 0 0 0-1.5 1.5v3.4l-3.1-1.7a1.5 1.5 0 0 0-2 0.57 1.5 1.5 0 0 0 0.58 2l3 1.7-3 1.7a1.5 1.5 0 0 0-0.58 2 1.5 1.5 0 0 0 2 0.58l3.1-1.7v3.4a1.5 1.5 0 0 0 1.5 1.5 1.5 1.5 0 0 0 1.5-1.5v-3.4l3.1 1.7a1.5 1.5 0 0 0 2-0.58 1.5 1.5 0 0 0-0.58-2l-3-1.7 3-1.7a1.5 1.5 0 0 0 0.58-2 1.5 1.5 0 0 0-2-0.57l-3.1 1.7v-3.4a1.5 1.5 0 0 0-1.5-1.5zm-9.7 13c-1.8 0-3.3 1.5-3.3 3.3s1.5 3.3 3.3 3.3c1.8 0 3.3-1.5 3.3-3.3s-1.5-3.3-3.3-3.3z',\n  ],\n  word: [\n    'm22 4h-2.95l-2.37 11.3-2.56-11.3h-3.94l-2.44 11.3-2.51-11.3h-3.16l4.11 16h2.87l3.02-11.8 3.04 11.8h2.9z',\n  ],\n  matchCase: [\n    'm6.9 4.2c-3.7 0-5.6 2-5.6 6v3.5c0 4 1.8 6 5.5 6 1.7 0 3-0.42 4-1.3 0.97-0.88 1.5-2.1 1.5-3.8v-0.15h-2.8v0.18c0 0.77-0.22 1.4-0.66 1.8s-1.1 0.66-1.9 0.66c-0.92 0-1.6-0.26-2-0.84-0.44-0.55-0.64-1.5-0.64-2.7v-3.3c0-1.3 0.2-2.2 0.62-2.8s1.1-0.86 2-0.86c0.81 0 1.5 0.24 1.9 0.68 0.44 0.46 0.68 1.1 0.68 1.8v0.13h2.9v-0.15c0-1.6-0.51-2.8-1.5-3.7-0.99-0.88-2.3-1.3-4-1.3zm11 3.8c-1.5 0-2.6 0.4-3.4 1.2-0.84 0.79-1.2 2-1.2 3.6v2.1c0 1.6 0.4 2.9 1.2 3.6 0.84 0.79 2 1.2 3.4 1.2 1.4 0 2.5-0.35 3.3-1.1 0.79-0.73 1.2-1.7 1.2-3v-0.15h-2.6v0.13c0 0.53-0.18 0.95-0.51 1.2-0.33 0.31-0.77 0.44-1.3 0.44-0.64 0-1.1-0.18-1.5-0.55-0.35-0.35-0.51-0.97-0.51-1.8v-2.1c0-1.6 0.66-2.4 2-2.4 0.57 0 1 0.15 1.3 0.46 0.33 0.31 0.51 0.75 0.51 1.3v0.13h2.6v-0.22c0-1.3-0.4-2.3-1.2-3-0.79-0.7-1.9-1.1-3.3-1.1z',\n  ],\n};\n","import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The collection of shortcuts for the Search extension.\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[]> = {\n  search    : [ 'F', true ],\n  searchNext: [ 'F3' ],\n  searchPrev: [ 'F3', false, true ],\n  replace   : [ 'F', true, true ],\n};\n","import { Elements, Range, SearchOptions } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { MAX_RANGES } from '../../components/Range/Range';\nimport { CLASS_ACTIVE } from '../../constants/classes';\nimport { EVENT_CHANGE, EVENT_CHANGED, EVENT_KEYMAP, EVENT_READONLY, EVENT_SYNCED } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport {\n  assign,\n  attr,\n  clamp,\n  compare,\n  create,\n  div,\n  includes,\n  isUndefined,\n  prevent,\n  text,\n  throttle,\n  toggleClass,\n} from '../../utils';\nimport { Throttle } from '../../utils/function/throttle/throttle';\nimport { Toolbar } from '../Toolbar/Toolbar';\nimport { REPLACE_BUTTONS, SEARCH_BUTTONS } from './buttons';\nimport {\n  CLASS_MATCHES_COUNT,\n  CLASS_REPLACE,\n  CLASS_REPLACE_CONTROLS,\n  CLASS_SEARCH,\n  CLASS_SEARCH_CONTROLS,\n} from './classes';\nimport {\n  ACTIVE_MARKER_ID,\n  JUMP_DELAY_AFTER_REPLACE,\n  MARKER_ID,\n  SEARCH_THROTTLE_DURATION,\n  TOOLBAR_ID,\n} from './constants';\nimport { DEFAULT_OPTIONS } from './defaults';\nimport { I18N } from './i18n';\nimport { ICONS } from './icons';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * The class for searching texts in the code.\n *\n * @since 0.1.0\n */\nexport class Search extends Component {\n  /**\n   * Holds the Toolbar component.\n   */\n  private Toolbar: Toolbar;\n\n  /**\n   * Holds the wrapper element.\n   */\n  private wrapper: HTMLDivElement;\n\n  /**\n   * Holds the element that wraps elements of the search interface.\n   */\n  private searchBar: HTMLDivElement;\n\n  /**\n   * Holds the element that wraps elements of the replace interface.\n   */\n  private replaceBar: HTMLDivElement;\n\n  /**\n   * Holds the element that displays matches count.\n   */\n  private counter: HTMLSpanElement;\n\n  /**\n   * Stores button elements.\n   */\n  private buttons: Record<string, HTMLButtonElement>;\n\n  /**\n   * The throttled search function.\n   */\n  private throttledSearch: Throttle<( search: string, index?: number ) => void>;\n\n  /**\n   * Holds matched ranges.\n   */\n  private ranges: Range[] = [];\n\n  /**\n   * The current range index.\n   */\n  private index = -1;\n\n  /**\n   * Indicates whether to ignore cases or not.\n   */\n  private matchCase: boolean;\n\n  /**\n   * Whether to search texts by the regular expression or not.\n   */\n  private regexp: boolean;\n\n  /**\n   * Whether to search texts by a whole word or not.\n   */\n  private wholeWord: boolean;\n\n  /**\n   * Holds search options.\n   */\n  private opts: SearchOptions;\n\n  /**\n   * Keeps the ID of the timer for the delay until jumping to the next match.\n   */\n  private jumpTimerAfterReplace: ReturnType<typeof setTimeout>;\n\n  /**\n   * Holds the search input element.\n   */\n  searchField: HTMLInputElement;\n\n  /**\n   * Holds the replace input element.\n   */\n  replaceField: HTMLInputElement;\n\n  /**\n   * The Search constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.addIcons( ICONS );\n    this.addI18n( I18N );\n    this.addKeyBindings( KEYMAP );\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    if ( ! ( this.Toolbar = this.require( 'Toolbar' ) ) ) {\n      return;\n    }\n\n    super.mount( elements );\n\n    this.opts            = this.getOptions( 'search', DEFAULT_OPTIONS );\n    this.throttledSearch = throttle( this.search.bind( this ), SEARCH_THROTTLE_DURATION );\n\n    this.create();\n    this.Toolbar.register( TOOLBAR_ID, this.wrapper, this.i18n.searchToolbar );\n\n    this.listen();\n  }\n\n  /**\n   * Creates elements for the search interface.\n   */\n  private create(): void {\n    const { Toolbar } = this;\n\n    const wrapper    = div();\n    const searchBar  = div( CLASS_SEARCH, wrapper );\n    const replaceBar = div( CLASS_REPLACE, wrapper );\n\n    this.searchField  = Toolbar.createField( { id: 'search', tabindex: 1 }, searchBar );\n    this.replaceField = Toolbar.createField( { id: 'replace', tabindex: 1 }, replaceBar );\n\n    const searchControls  = div( CLASS_SEARCH_CONTROLS, searchBar );\n    const replaceControls = div( CLASS_REPLACE_CONTROLS, replaceBar );\n\n    const searchButtons  = SEARCH_BUTTONS.filter( settings => ! includes( this.opts.hideButtons, settings.id ) );\n    const replaceButtons = REPLACE_BUTTONS.filter( settings => ! includes( this.opts.hideButtons, settings.id ) );\n\n    this.buttons = assign(\n      Toolbar.createButtons<Search>( searchButtons, searchControls, this ),\n      Toolbar.createButtons<Search>( replaceButtons, replaceControls, this )\n    );\n\n    if ( ! this.opts.hideMatchCount ) {\n      this.counter = create( 'span', CLASS_MATCHES_COUNT, searchControls );\n    }\n\n    this.wrapper    = wrapper;\n    this.searchBar  = searchBar;\n    this.replaceBar = replaceBar;\n  }\n\n  /**\n   * Listens to some events.\n   */\n  private listen(): void {\n    const { searchField } = this;\n\n    this.on( `${ EVENT_KEYMAP }:search`, ( e, ke ) => {\n      this.show( ! this.options.keymap.replace );\n      prevent( ke );\n    } );\n\n    this.on( `${ EVENT_KEYMAP }:replace`, ( e, ke ) => {\n      this.show( true );\n      prevent( ke );\n    } );\n\n    this.bind( searchField, 'input', this.onInput, this );\n    this.bind( searchField, 'keydown', this.onSearchFieldKeydown, this );\n    this.bind( this.replaceField, 'keydown', this.onReplaceFieldKeydown, this );\n\n    this.on( 'toolbar:opened', ( e, toolbar, id ) => {\n      if ( id !== TOOLBAR_ID ) {\n        this.clear();\n      }\n    } );\n\n    this.on( 'toolbar:closed', this.clear, this );\n\n    this.on( [ EVENT_CHANGED, EVENT_SYNCED ], () => {\n      const { value } = searchField;\n\n      if ( this.isActive() && value ) {\n        this.throttledSearch( value, this.index );\n      }\n    } );\n\n    this.on( EVENT_READONLY, ( e, readOnly ) => {\n      if ( this.isActive() ) {\n        this.toggleReplace( ! readOnly );\n      }\n    } );\n  }\n\n  /**\n   * Called when any key is pressed on the search field.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onSearchFieldKeydown( e: KeyboardEvent ): void {\n    if ( e.key === 'Enter' ) {\n      this.next();\n      prevent( e );\n      return;\n    }\n\n    this.onKeydown( e );\n  }\n\n  /**\n   * Called when any key is pressed on the replace field.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onReplaceFieldKeydown( e: KeyboardEvent ): void {\n    if ( e.key === 'Enter' ) {\n      this.replace();\n      prevent( e );\n      return;\n    }\n\n    this.onKeydown( e );\n  }\n\n  /**\n   * Called when any key is pressed on both the search and input fields.\n   *\n   * @param e - A KeyboardEvent object.\n   */\n  private onKeydown( e: KeyboardEvent ): void {\n    const key = e.key.toUpperCase();\n    const { Keymap } = this;\n    const matches = Keymap.matches.bind( Keymap, e );\n    const next    = matches( 'searchNext' );\n    const prev    = matches( 'searchPrev' );\n\n    if ( next || prev ) {\n      this[ prev ? 'prev' : 'next' ]();\n      prevent( e );\n    } else if ( matches( 'search' ) ) {\n      this.show( false );\n      prevent( e );\n    } else if ( matches( 'replace' ) ) {\n      this.show( true );\n      prevent( e );\n    } else if ( e.ctrlKey ) {\n      if ( key !== 'A' && key !== 'X' && key === 'C' ) {\n        prevent( e );\n      }\n    } else if ( e.altKey ) {\n      prevent( e );\n    }\n  }\n\n  /**\n   * Called when the field receives input.\n   */\n  private onInput(): void {\n    const { value } = this.searchField;\n\n    if ( value ) {\n      this.throttledSearch( value );\n    } else {\n      this.clear();\n      this.toggleDisabled();\n    }\n  }\n\n  /**\n   * Searches the provided string with current settings.\n   *\n   * @param search - Optional. A string to search.\n   * @param index  - Optional. An index to activate.\n   *\n   * @return An array with tuples that contains `[ index, length ]`.\n   */\n  private search( search: string = this.searchField.value, index?: number ): void {\n    const { Range } = this;\n\n    let source: string | RegExp;\n\n    try {\n      source = this.regexp && search ? new RegExp( search ) : search;\n    } catch ( e ) {\n      return;\n    }\n\n    const ranges = this.Code.search( source, ! this.matchCase, this.wholeWord, MAX_RANGES );\n\n    this.clear();\n    Range.register( MARKER_ID, ranges );\n\n    this.ranges = ranges;\n\n    if ( isUndefined( index ) || index < 0 ) {\n      this.index = -1;\n      this.next();\n    } else {\n      this.index = clamp( index, 0, ranges.length - 1 );\n      this.activate( this.index );\n    }\n\n    this.updateMatchesCount();\n    this.toggleDisabled();\n  }\n\n  /**\n   * Search again without changing the current index.\n   *\n   * @param index - Optional. An index to activate.\n   */\n  private rematch( index?: number ): void {\n    this.search( undefined, index );\n  }\n\n  /**\n   * Updates matches counter.\n   */\n  private updateMatchesCount(): void {\n    if ( this.counter ) {\n      const { length } = this.ranges;\n\n      let string: string;\n\n      if ( ! length ) {\n        string = this.i18n.noResults;\n      } else if ( length > MAX_RANGES ) {\n        string = `${ MAX_RANGES }+`;\n      } else {\n        string = `${ this.index + 1 }/${ length }`;\n      }\n\n      text( this.counter, string );\n    }\n  }\n\n  /**\n   * Toggles `disabled` property of some buttons.\n   */\n  private toggleDisabled(): void {\n    [ 'prevMatch', 'nextMatch', 'replace', 'replaceAll' ].forEach( name => {\n      const button = this.buttons[ name ];\n\n      if ( button ) {\n        button.disabled = ! this.ranges.length;\n      }\n    } );\n  }\n\n  /**\n   * Jumps to the start position of the range specified by the index.\n   *\n   * @param index - An index of the range to jump to.\n   */\n  private jump( index: number ): void {\n    const range = this.ranges[ index ];\n\n    if ( range ) {\n      this.View.jump( range.start[ 0 ], true );\n    }\n  }\n\n  /**\n   * Highlights the prev or next matched text and jumps there.\n   *\n   * @param prev - Whether to highlight the previous or next match.\n   */\n  private move( prev: boolean ): void {\n    const { length } = this.ranges;\n\n    let index = this.index + ( prev ? -1 : 1 );\n\n    if ( index >= length ) {\n      index = 0;\n    } else if ( index < 0 ) {\n      index = length - 1;\n    }\n\n    this.activate( index );\n    this.jump( index );\n\n    this.index = index;\n    this.updateMatchesCount();\n  }\n\n  /**\n   * Toggles the active class and the `aria-checked` attribute.\n   *\n   * @param button  - A target button element.\n   * @param checked - Determines whether to check or uncheck them.\n   */\n  private toggleChecked( button: HTMLButtonElement, checked: boolean ): void {\n    toggleClass( button, CLASS_ACTIVE, checked );\n    attr( button, { 'aria-checked': checked } );\n  }\n\n  /**\n   * Toggles the replace UI.\n   *\n   * @param show - Determines whether to show the replace UI or not.\n   */\n  private toggleReplace( show: boolean ): void {\n    toggleClass( this.replaceBar, CLASS_ACTIVE, show && ! this.Editor.readOnly && ! this.opts.hideReplace );\n  }\n\n  /**\n   * Checks if the search toolbar is active or not.\n   *\n   * @return `true` if the search toolbar is active, or otherwise `false`.\n   */\n  private isActive(): boolean {\n    return this.Toolbar.isActive( TOOLBAR_ID );\n  }\n\n  /**\n   * Toggles the \"Match Case\" mode.\n   *\n   * @param activate - Optional. Whether to activate the \"Match Case\" mode or not.\n   */\n  toggleMatchCase( activate = ! this.matchCase ): void {\n    this.toggleChecked( this.buttons.matchCase, ( this.matchCase = activate ) );\n    this.search();\n  }\n\n  /**\n   * Toggles the \"RegExp\" mode.\n   *\n   * @param activate - Optional. Whether to activate the \"RegExp\" mode or not.\n   */\n  toggleRegExp( activate = ! this.regexp ): void {\n    this.toggleChecked( this.buttons.regexp, ( this.regexp = activate ) );\n    this.search();\n  }\n\n  /**\n   * Toggles the \"Match Whole Word\" mode.\n   *\n   * @param wholeWord - Optional. Whether to activate the \"Match Whole Word\" mode or not.\n   */\n  toggleWholeWord( wholeWord = ! this.wholeWord ): void {\n    this.toggleChecked( this.buttons.wholeWord, ( this.wholeWord = wholeWord ) );\n    this.search();\n  }\n\n  /**\n   * Highlights the matched text at the index.\n   *\n   * @param index - An index of the range to highlight.\n   */\n  activate( index: number ): void {\n    const activeRange = this.ranges[ index ];\n\n    if ( activeRange ) {\n      const { Range } = this;\n      Range.clear( ACTIVE_MARKER_ID );\n      Range.register( ACTIVE_MARKER_ID, [ activeRange ] );\n    }\n  }\n\n  /**\n   * Highlights the next matched text and jumps there.\n   */\n  next(): void {\n    this.move( false );\n  }\n\n  /**\n   * Highlights the previous matched text and jumps there.\n   */\n  prev(): void {\n    this.move( true );\n  }\n\n  /**\n   * Replaces the search result with the provided replacement string.\n   * If the length of ranges does not change after replacing,\n   * that means the replacement includes the original word itself.\n   *\n   * @param replacement - Optional. A replacement string.\n   * @param index       - Optional. An index to replace.\n   */\n  replace( replacement = this.replaceField.value, index = this.index ): void {\n    const { ranges } = this;\n    const activeRange = ranges[ index ];\n\n    if ( activeRange ) {\n      const { Selection } = this;\n      const { start, end } = activeRange;\n      const nextRange = ranges[ index + 1 ];\n\n      Selection.update( start, start, true );\n\n      this.emit( EVENT_CHANGE, 'replace' );\n      this.jump( index );\n\n      this.Code.replaceRange( start, end, replacement );\n      this.Sync.sync( start[ 0 ], end[ 0 ] );\n\n      this.emit( EVENT_CHANGED, 'replace' );\n      this.rematch( index );\n\n      if ( nextRange ) {\n        this.index = this.toIndex( nextRange );\n        this.activate( this.index );\n      }\n\n      this.jumpTimerAfterReplace = setTimeout( () => {\n        this.jump( this.index );\n      }, JUMP_DELAY_AFTER_REPLACE );\n    }\n  }\n\n  /**\n   * Converts the provided range to the range index.\n   *\n   * @param range - A range to convert into a range index.\n   *\n   * @return A range index if available, or otherwise `-1`.\n   */\n  private toIndex( range: Range ): number {\n    const { ranges } = this;\n\n    for ( let i = 0; i < ranges.length; i++ ) {\n      if ( ! compare( ranges[ i ].start, range.start ) && ! compare( ranges[ i ].end, range.end ) ) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Replaces all matched strings with the replacement.\n   *\n   * @param replacement - Optional. A replacement string.\n   */\n  replaceAll( replacement = this.replaceField.value ): void {\n    const { ranges } = this;\n\n    if ( ranges.length ) {\n      this.emit( EVENT_CHANGE );\n\n      ranges.forEach( range => {\n        this.Code.replaceRange( range.start, range.end, replacement );\n      } );\n\n      const endRow = ranges[ ranges.length - 1 ].end[ 0 ];\n\n      this.View.jump( endRow );\n      this.Sync.sync( ranges[ 0 ].start[ 0 ], endRow );\n\n      this.clear();\n\n      this.emit( EVENT_CHANGED );\n    }\n  }\n\n  /**\n   * Shows the toolbar.\n   *\n   * @param replace - Whether to display the replace interface or not.\n   */\n  show( replace: boolean ): void {\n    const { Selection, searchField } = this;\n\n    this.toggleReplace( replace );\n\n    if ( ! Selection.isCollapsed() ) {\n      if ( ! Selection.isMultiline() ) {\n        searchField.value = Selection.toString();\n      }\n    }\n\n    this.Toolbar.show( TOOLBAR_ID );\n    this.rematch();\n  }\n\n  /**\n   * Clears all markers.\n   */\n  clear(): void {\n    const { Range } = this;\n    Range.clear( MARKER_ID );\n    Range.clear( ACTIVE_MARKER_ID );\n\n    this.ranges = [];\n    this.updateMatchesCount();\n    this.throttledSearch.cancel();\n    clearTimeout( this.jumpTimerAfterReplace );\n  }\n}\n","import { KeyMatcher } from '@ryusei/code';\n\n\n/**\n * The collection of shortcuts for the Shortcut extension.\n *\n * @since 0.1.0\n */\nexport const KEYMAP: Record<string, KeyMatcher | KeyMatcher[]> = {\n  cutLine : [ 'X', true ],\n  copyLine: [ 'C', true ],\n  moveUp  : [ 'ArrowUp', true ],\n  moveDown: [ 'ArrowDown', true ],\n};\n","import { Elements } from '@ryusei/code';\nimport { Component } from '../../classes/Component/Component';\nimport { EVENT_KEYMAP } from '../../constants/events';\nimport { Editor } from '../../core/Editor/Editor';\nimport { endsWith, isPrevented, prevent } from '../../utils';\nimport { KEYMAP } from './keymap';\n\n\n/**\n * The class for handling some shortcuts.\n *\n * @since 0.1.0\n */\nexport class Shortcut extends Component {\n  /**\n   * The Search constructor.\n   *\n   * @param Editor - An Editor instance.\n   */\n  constructor( Editor: Editor ) {\n    super( Editor );\n    this.addKeyBindings( KEYMAP );\n  }\n\n  /**\n   * Initializes the component.\n   *\n   * @param elements - A collection of essential elements.\n   */\n  mount( elements: Elements ): void {\n    super.mount( elements );\n\n    const { Selection, Measure, Edit } = this;\n\n    this.on( `${ EVENT_KEYMAP }:copyLine`, ( e, ke ) => {\n      if ( Selection.isCollapsed() && ! isPrevented( ke ) ) {\n        Selection.selectLine( undefined, true, true );\n        Edit.copy();\n        prevent( ke );\n      }\n    } );\n\n    this.on( `${ EVENT_KEYMAP }:cutLine`, ( e, ke ) => {\n      if ( Selection.isCollapsed() && ! isPrevented( ke ) ) {\n        Edit.cutLine();\n        prevent( ke );\n      }\n    } );\n\n    this.on( `${ EVENT_KEYMAP }:moveUp ${ EVENT_KEYMAP }:moveDown`, ( e, ke ) => {\n      const { scroller } = elements;\n      scroller.scrollTop += ( endsWith( e.type, 'n' ) ? 1 : -1 ) * Measure.lineHeight;\n      prevent( ke );\n    } );\n  }\n}\n","import { PROJECT_CODE } from '../../constants/project';\n\n\n/**\n * Classes for the toolbar components.\n *\n * @since 0.1.0\n */\nexport const CLASS_TOOLBAR       = `${ PROJECT_CODE }__toolbar`;\nexport const CLASS_TOOLBAR_BODY  = `${ CLASS_TOOLBAR }__body`;\nexport const CLASS_TOOLBAR_UI    = `${ CLASS_TOOLBAR }__ui`;\nexport const CLASS_TOOLBAR_GROUP = `${ CLASS_TOOLBAR }__group`;\n","import { RyuseiCode } from '../../core/RyuseiCode/RyuseiCode';\r\nimport * as Extensions from '../../extensions';\r\n\r\n\r\nRyuseiCode.compose( Extensions );\r\n\r\nexport { RyuseiCode as default } from '../../core/RyuseiCode/RyuseiCode';\r\n","import { ToolbarGroupData } from '@ryusei/code';\nimport { UIComponent } from '../../classes/UIComponent/UIComponent';\nimport { EVENT_RESIZE } from '../../constants/events';\nimport { addClass, append, attr, div, height, isIE, prepend, removeClass, styles, unit } from '../../utils';\nimport { CLASS_TOOLBAR, CLASS_TOOLBAR_BODY, CLASS_TOOLBAR_GROUP, CLASS_TOOLBAR_UI } from './classes';\n\n\n/**\n * The class for creating a toolbar.\n *\n * @since 0.1.0\n */\nexport class Toolbar extends UIComponent<ToolbarGroupData> {\n  /**\n   * Holds the toolbar element.\n   */\n  private body: HTMLDivElement;\n\n  /**\n   * Listens to some events and receives requests from other components.\n   */\n  protected listen(): void {\n    super.listen();\n    this.on( EVENT_RESIZE, this.resize, this );\n  }\n\n  /**\n   * Creates toolbar elements.\n   *\n   * @link https://www.w3.org/TR/wai-aria-1.2/#toolbar\n   */\n  protected create(): void {\n    const { elements } = this;\n    const id      = `${ elements.root.id }-toolbar`;\n    const wrapper = div( { id, role: 'toolbar', class: CLASS_TOOLBAR } );\n    const close   = this.createCloseButton( { 'aria-controls': id } );\n\n    this.body = div( CLASS_TOOLBAR_BODY, wrapper );\n\n    append( div( CLASS_TOOLBAR_UI, wrapper ), close );\n    prepend( elements.view, wrapper );\n\n    this.wrapper = wrapper;\n  }\n\n  /**\n   * Appends the group element to the body element instead of the wrapper element.\n   *\n   * @param group - A group ID.\n   */\n  protected append( group: string ): void {\n    append( this.body, this.groups[ group ].elm );\n  }\n\n  /**\n   * Resizes the scroller according to the toolbar height.\n   */\n  private resize(): void {\n    if ( isIE() && this.isActive() ) {\n      const maxHeight = styles( this.elements.root, 'maxHeight' );\n      styles( this.elements.body, { maxHeight: `calc(${ maxHeight } - ${ unit( height( this.wrapper ) ) })` } );\n    }\n  }\n\n  /**\n   * Registers a group to the toolbar.\n   *\n   * @param group - A group ID.\n   * @param elm   - An element to register.\n   * @param label - A label of the toolbar.\n   */\n  register( group: string, elm: HTMLDivElement, label: string ): void {\n    addClass( elm, CLASS_TOOLBAR_GROUP );\n    this.groups[ group ] = { elm, label };\n  }\n\n  /**\n   * Displays the toolbar.\n   *\n   * @param group - A group ID to display.\n   */\n  show( group: string ): void {\n    const { pageXOffset, pageYOffset } = window;\n    const { wrapper } = this;\n\n    super.show( group );\n    this.resize();\n\n    if ( this.group ) {\n      removeClass( wrapper, `${ CLASS_TOOLBAR }--${ this.group }` );\n    }\n\n    addClass( wrapper, `${ CLASS_TOOLBAR }--${ group }` );\n    attr( wrapper, { 'aria-label': this.groups[ group ].label } );\n\n    this.autoFocus( group );\n\n    window.scrollTo( pageXOffset, pageYOffset );\n    this.View.emitResize();\n\n    this.emit( 'toolbar:opened', this, group );\n  }\n\n  /**\n   * Hides the toolbar.\n   */\n  hide(): void {\n    const { pageXOffset, pageYOffset } = window;\n    super.hide();\n\n    removeClass( this.wrapper, `${ CLASS_TOOLBAR }--${ this.group }` );\n    styles( this.elements.body, { maxHeight: '' } );\n\n    this.Selection.reselect();\n    window.scrollTo( pageXOffset, pageYOffset );\n\n    this.View.emitResize();\n    this.emit( 'toolbar:closed', this, this.group );\n  }\n}\n"],"names":["KEYMAP","selectAll","MODIFIER_KEYS","default","mac","DEFAULT_OPTIONS","language","placeholder","minWidth","maxWidth","minHeight","maxHeight","indent","tabSize","tabIndex","keymap","maxInitialLines","icons","arrowUp","arrowDown","close","i18n","copy","cut","paste","confirm","activate","notice","cancel","failedToCopy","scrollbar","inputLabel","location","includes","array","value","indexOf","isObject","subject","isArray","Array","isFunction","isString","isUndefined","isText","Text","isHTMLElement","HTMLElement","isBr","HTMLBRElement","toArray","nest","arrayProto","prototype","slice","arrayLike","start","end","call","splice","deleteCount","args","activeElement","document","toggleClass","elm","classes","add","forEach","name","classList","addClass","append","parent","children","appendChild","bind","forOwn","object","iteratee","keys","Object","i","length","assign","sources","source","key","attr","attrs","getAttribute","removeAttribute","setAttribute","String","before","nodes","ref","node","parentNode","insertBefore","closest","selector","Element","matches","parentElement","create","tag","createElement","div","focus","preventScroll","hasClass","className","contains","height","clientHeight","html","innerHTML","isPrevented","e","defaultPrevented","handlerMap","WeakMap","on","events","callback","split","event","addEventListener","handlers","get","push","set","off","callbackOrKey","removeEventListener","handler","delete","prepend","child","firstChild","prevent","stopPropagation","cancelable","preventDefault","query","querySelector","queryAll","querySelectorAll","rect","target","getBoundingClientRect","remove","removeChild","removeClass","styles","getComputedStyle","style","class","filter","Boolean","join","result","prop","trim","text","textContent","unit","isIE","isMobile","test","navigator","userAgent","maxTouchPoints","PROJECT_CODE","assert","condition","message","Error","throttle","func","interval","initialCall","debounce","raf","id","invoker","throttled","invoke","this","requestAnimationFrame","setTimeout","apply","cancelAnimationFrame","clearTimeout","duration","nextTick","rafThrottle","ARROW_KEYS","NORMALIZATION_MAP","Up","Down","Right","Left","Del","Esc","Spacebar","normalizeKey","matchesKey","matchers","toUpperCase","some","matcher","ctrlKey","shiftKey","altKey","between","number","minOrMax","maxOrMin","exclusive","min","Math","max","clamp","x","y","minimum","maximum","floor","ceil","abs","round","compare","position1","position2","createRange","getSelection","window","findSelectionBoundary","offset","childNodes","found","count","string","search","from","to","match","RegExp","endsWith","escapeRegExp","replace","format","nthIndexOf","nth","index","repeat","startsWith","ids","Component","Editor","mount","elements","_this","destroy","thisArg","priority","emit","getLanguage","position","info","use","config","method","require","addIcons","options","addI18n","addKeyBindings","shortcuts","getOptions","defaults","CLASS_ROOT","CLASS_VIEW","CLASS_BODY","CLASS_SCROLLER","CLASS_CONTAINER","CLASS_EDITOR","CLASS_SCROLLBAR","CLASS_LINES","CLASS_LINE","CLASS_CARET","CLASS_MARKERS","CLASS_MARKER","CLASS_CONTEXT_MENU","CLASS_CONTEXT_MENU_GROUP","CLASS_CONTEXT_MENU_LIST","CLASS_CONTEXT_MENU_BUTTON","CLASS_BUTTON","CLASS_ACTIVE","CLASS_RENDERED","CLASS_ANCHOR","CLASS_FOCUS","CLASS_PRESERVED","CLASS_FOCUSED","CLASS_DRAGGING","CLASS_EMPTY","EVENT_MOUNTED","EVENT_FOCUS","EVENT_BLUR","EVENT_READONLY","EVENT_KEYDOWN","EVENT_NEWLINE","EVENT_CHANGE","EVENT_CHANGED","EVENT_COMPOSITION_START","EVENT_FOCUS_LINE_CHANGED","EVENT_KEYMAP","EVENT_CHUNK_MOVED","EVENT_CHUNK_SUPPLIED","EVENT_SELECTING","EVENT_SELECTED","EVENT_SCROLLED","EVENT_SCROLLER_SCROLL","EVENT_WINDOW_SCROLL","EVENT_RESIZE","EVENT_SCROLL_WIDTH_CHANGED","EVENT_SCROLL_HEIGHT_CHANGED","EVENT_SYNCED","EVENT_CONTEXT_MENU_CLICKED","EVENT_RESET","EVENT_INIT_STYLE","EVENT_FONT_LOADED","CustomCaret","_this2","move","Measure","getOffset","top","left","animation","show","hide","_private_blink","PRIMARY_CARET_ID","Caret","_private_create","role","editor","_private_listen","editable","primary","readOnly","_this4","_private_onSelected","Selection","_private_update","register","carets","caret","Chunk","scroller","lines","pageYOffset","scrollTop","onScroll","_this6","_private_onScroll","byScroller","_private_onScrolled","_private_activate","anotherBoundary","row","boundary","line","_private_deactivate","_private_emitChangedEvent","_private_setBoundaryChanged","changed","_private_supply","lineHeight","scrollerRect","innerHeight","visibleLines","totalLength","diff","_private_remove","elms","_private_html","where","insertAdjacentHTML","_private_moveDown","lengthToMove","_private_moveUp","_private_computeLengthToMoveDown","margin","border","_private_computeLengthToMoveUp","paddingBottom","padding","bottom","topBorder","bottomBorder","_private_detach","reduce","detached","isAnchor","isFocus","_private_attach","anchorIndex","focusIndex","firstElm","anchorLine","_private_anchor","focusLine","_private_focus","anchor","includesAnchor","includesFocus","includesPreservedAnchor","includesPreservedFocus","firstIndex","secondIndex","backward","secondElm","topElms","middleElms","bottomElms","nextElementSibling","_private_offset","offsetY","_private_jumpIntoView","_private_reposition","focusRow","_private_isVisible","_private_jump","paddingTop","offsetRows","getBoundary","addPreservedLine","sync","syncDiff","refresh","scroll","getRow","getLine","domRect","LINE_BREAK","AbstractArrayLike","items","clear","matchesToken","token","state","CATEGORY_COMMENT","CATEGORY_BRACKET","Line","init","first","depth","undefined","tokens","time","Date","now","getIndent","getInfo","getInfoAt","col","isEmpty","Lines","insert","code","limit","lexer","run","shift","rowIndex","asyncSync","timers","_this8","findMinIndent","startRow","endRow","minIndent","scanUp","counterpart","j","scanDown","findBlockStart","distance","findBlockEnd","tail","syncSize","_private_setLength","_private_isSame","tokens1","tokens2","every","token1","token2","Code","Infinity","after","sliceLines","endIndex","sliceRange","startIndex","replaceLines","replacement","replaceRange","replaceLinesBy","size","isLast","acc","lineBreak","ignoreCase","wholeWord","ranges","regexp","exec","lastIndex","_private_positionToIndex","normalize","VIEW_BOX","createSvg","createElementNS","UIComponent","listen","escape","group","autoFocus","HTMLInputElement","select","createCloseButton","button","icon","click","createButtons","settings","component","buttons","_this11","createButton","checkbox","tabindex","iconName","label","concat","title","type","iconSettings","d","stroke","linecap","svg","viewBox","path","fill","createField","spellcheck","isActive","isFocused","MAIN_CONTEXT_MENU_ID","CONTEXT_MENU_EDIT","shortcut","disableOnReadOnly","CONTEXT_MENU_SELECTION","ContextMenu","root","_this13","overlay","_private_onMouseDown","clientX","clientY","_private_onContextMenu","_this14","_private_onKeydown","backwards","_private_move","wrapper","clientWidth","documentElement","rootRect","_private_contains","_private_build","lists","list","map","_this15","buttonSettings","disabled","_private_findSettings","groups","_this16","Clipboard","textarea","body","setSelectionRange","_private_execPaste","execCommand","_private_execCopy","onFailed","onPaste","clipboard","readText","then","writeText","catch","_this17","Edit","_this19","ke","isKey","metaKey","_private_onMenuClicked","_private_onPaste","clipboardData","getData","_private_register","_private_isSelected","_private_isEditable","lastIndexOf","skipSelection","toString","range","_this20","alert","cutLine","COMPOSITION_INPUT_TYPE","Input","_this21","_private_onCompositionStart","removeAllRanges","_private_onCompositionUpdate","_this22","_private_onCompositionEnd","_private_onInput","_private_handleEnter","_private_handleDelete","_private_handleBackspace","prev","_private_appendLineBreak","_private_settleValue","insertion","_private_settlePosition","_private_getCaretPosition","props","char","charAt","selection","rangeCount","getRangeAt","cloneRange","setStart","Keymap","_this24","action","_private_find","_this25","getShortcut","modifiers","platform","MeasureText","font","getContext","_private_getCharWidth","useCache","chars","context","measureText","width","measure","_this26","_private_onMount","_this27","_private_updatePadding","parseFloat","right","_private_createMeasureText","_private_buildCSSFont","_private_clearRectCaches","getTop","getBottom","measureWidth","container","Marker","calcBoundaries","isBackward","fillHeight","startLeft","buildLine","StandaloneMarker","background","draw","isInside","CLASS_MARKER_SELECTION","SelectionMarker","_this30","_private_onStateChanged","_private_drawSelection","isCollapsed","Range","observe","_private_observe","_this32","_private_draw","data","_this33","marker","constructor","lastRange","markers","_this34","clearRanges","Scope","isIn","names","states","categories","inState","inCategory","_private_inScope","category","negated","_this35","toggleEditable","contentEditable","ORIGIN","EventBus","owner","eventNS","namespace","eventHandlers","_this36","sort","handler1","handler2","_this37","eventObject","State","onKeydown","_private_onFocus","_private_onBlur","_private_onSelectionChange","_private_onSelectionStart","PointerEvent","_private_onSelectionEnd","_private_onKeyup","_private_isFocused","update","collapsed","initial","is","isPrev","hold","release","STATES","detail","_private_onDblClick","selectNode","addRange","lastLineLength","silently","selectLine","reselect","getRect","collapse","getLocation","toFocus","isMultiline","_private_setNativeSelection","isSingle","startLine","endLine","anchorNode","focusNode","setBaseAndExtent","setEnd","_private_getNativeSelection","_private_findActiveLine","_private_getWordRangeAt","words","_private_getNativeSelectionBoundary","prefix","_private_detectSelectAll","_private_ensureSelection","anchorOffset","focusOffset","anchorClone","cloneNode","focusClone","replaceChild","_this40","FontObserver","Style","_this41","_private_init","_this42","fontFamily","monospaceFont","toLowerCase","selectors","_this43","Sync","jumpTo","View","_private_run","strict","_private_syncLines","_this45","_private_syncRanges","_this46","_private_splitRows","_private_compress","multiline","item","_private_findRoot","_private_findStartInLanguageBlock","lang","_private_isEmbedded","DRAG_START_EVENTS","DRAG_END_EVENTS","DRAGGING_EVENTS","ORIENTATION_MAP","vertical","scrollHeight","pageY","translateY","AbstractDraggableBar","_this47","onDrag","onDragging","onDragged","getCoord","EditorScrollbar","coord","sh","ch","st","active","heightRatio","offsetRatio","transform","_this50","_private_clipScrollOffset","caretRight","caretBottom","caretLeft","scrollLeft","caretRect","caretTop","editorRect","_private_getWidthBeforeContainer","jump","middle","lineOffset","autoWidth","autoHeight","skipLengthCheck","isVisible","lineRect","bar","ATTRIBUTES_EDITABLE_AREA","autocorrect","autocapitalize","Renderer","renderLines","divs","rootClasses","viewClasses","_this51","extensions","idNumber","CoreComponents","_this52","Extension","_private_mount","_private_collect","freeze","view","_this53","composing","_private_bind","pre","display","save","HTMLTextAreaElement","blur","extension","Components","emitResize","RyuseiCode","languages","alias","_private_mergeOptions","_this54","setRange","CLASS_ACTIVE_LINE","ActiveLine","_this55","_this56","_private_isActive","AutoClose","_this57","_private_close","_private_skip","closingChars","_private_getChars","closing","_private_getClosingString","closer","_private_getOffset","_private_validate","validator","_private_validateQuote","currInfo","prevInfo","_private_getConfig","autoClose","brackets","maxScanLines","MARKER_ID","BracketMatching","_this58","_this59","findClosing","Number","_private_infoToRange","lineComment","blockComment","COMMENT_INPUT_TYPE","Comment","_private_toggleBlock","_private_toggleLine","endPosition","uncommented","_private_commentOut","comment","commentStart","_private_uncomment","_private_sync","_private_detectBlockComment","_private_detectLineComment","head","trimmed","endCol","GENERAL_UI_BUTTONS","CLASS_DIALOG","COMMON_DIALOG_GROUP","Dialog","_this61","groupElm","headerElm","titleElm","footerElm","IndentMarker","Guide","_private_parse","CLASS_GUTTER","CLASS_GUTTER_FLOAT","CLASS_GUTTER_ROW","CLASS_LINE_NUMBER","sticky","Gutter","_this62","_private_render","_this63","_private_renderRows","chunk","_this64","_private_onPointerDown","isNaN","chunkStart","rows","activeElm","_private_getElm","undo","redo","RESTORATION_INPUT_TYPE","History","_this66","_private_record","_private_restore","record","_private_push","current","record1","record2","_private_isUndoing","_private_onChange","history","_private_onChanged","help","deepIndent","I18N","indentNotice","indentDisabled","unindent","toggleTabMode","DIALOG_ID","Indentation","activation","setDisabled","focused","_this68","_this69","_private_indent","space","_private_space","_private_unindent","startCol","startOffset","endOffset","_this70","_private_indentNewline","_private_indentDeep","_private_findConfigIndex","_private_shouldIndentDeep","_private_isClosed","prevRow","prevIndent","curIndent","prevLine","jumpToLine","jumpToolbar","TOOLBAR_ID","Jump","hideLocation","_this72","parseInt","horizontal","resizeBar","CLASS_SIZER_BAR","ResizeBar","_this74","_private_updateAria","_private_convertValueToPixel","Resize","bars","SEARCH_BUTTONS","REPLACE_BUTTONS","CLASS_SEARCH","CLASS_REPLACE","ACTIVE_MARKER_ID","hideButtons","searchToolbar","prevMatch","nextMatch","replaceAll","matchCase","noResults","ICONS","word","searchNext","searchPrev","Search","Toolbar","searchBar","replaceBar","searchControls","replaceControls","searchButtons","_this77","replaceButtons","hideMatchCount","searchField","_this78","toolbar","_private_onSearchFieldKeydown","_private_onReplaceFieldKeydown","next","_private_search","_private_rematch","_private_updateMatchesCount","_private_toggleDisabled","_this79","_private_toggleChecked","checked","_private_toggleReplace","hideReplace","toggleMatchCase","toggleRegExp","toggleWholeWord","activeRange","nextRange","_this80","_private_toIndex","_this81","copyLine","moveUp","moveDown","Shortcut","CLASS_TOOLBAR","_private_resize","pageXOffset","scrollTo"],"mappings":"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"}